[
  {
    "@type": "d",
    "@rid": "#15:1",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.injector.main.feed.FeedRule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by husteve on 10/8/2014.\n */\npublic class GetBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfn(\"blog\", objects);\n    }\n\n    /*\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> blogMap = ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        // determine if the current user can post.\n        boolean allowPost = false;\n        String host = (String)data.get(\"host\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload != null) {\n            Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(roles.contains(\"owner\")) {\n                allowPost = true;\n            } else if(roles.contains(\"admin\") || roles.contains(\"blowAdmin\") || roles.contains(\"blogUser\")){\n                if(host.equals(user.get(\"host\"))) {\n                    allowPost = true;\n                }\n            }\n        }\n\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList == null) {\n            refreshCache(host);\n            newList = (List)blogMap.get(host + \"newList\");\n        }\n        // get the page from cache.\n        long total = newList.size();\n        Integer pageSize = (Integer)data.get(\"pageSize\");\n        Integer pageNo = (Integer)data.get(\"pageNo\");\n        if(pageSize == null) {\n            inputMap.put(\"result\", \"pageSize is required\");\n            inputMap.put(\"responseCode\", 400);\n        }\n        if(pageNo == null) {\n            inputMap.put(\"result\", \"pageNo is required\");\n            inputMap.put(\"responseCode\", 400);\n        }\n        if(total > 0) {\n            List<Map<String, Object>> blogs = new ArrayList<Map<String, Object>>();\n\n            for(int i = pageSize*(pageNo - 1); i < Math.min(pageSize*pageNo, newList.size()); i++) {\n                String rid = newList.get(i);\n                String json = getJsonByRid(rid);\n                Map<String, Object> blog = mapper.readValue(json,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                // convert tags value from map to string.\n                Map tags = (Map)blog.get(\"tags\");\n                if(tags != null && tags.size() > 0) {\n                    String s = String.join(\",\", tags.keySet());\n                    blog.put(\"tags\", s);\n                }\n\n                blogs.add(blog);\n            }\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"blogs\", blogs);\n            result.put(\"allowPost\", allowPost);\n            Set hosts = ServiceLocator.getInstance().getHostMap().keySet();\n            result.put(\"hosts\", hosts);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            // there is no blog available. but still need to return allowPost and hosts\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", 0);\n            result.put(\"allowPost\", allowPost);\n            Set hosts = ServiceLocator.getInstance().getHostMap().keySet();\n            result.put(\"hosts\", hosts);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        }\n    }\n    */\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.GetBlogRule",
      "createDate": "2015-01-12T03:09:08.466"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:08.466",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:2",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class GetBlogDropdownRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnDropdown(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.GetBlogDropdownRule",
      "createDate": "2015-01-12T03:09:08.754"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:08.754",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:3",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/10/2014.\n */\npublic class UpdBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBfnEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpdBlogEvRule",
      "createDate": "2015-01-12T03:09:09.003"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:09.003",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:4",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/10/2014.\n */\npublic class UpdBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBfn(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpdBlogRule",
      "createDate": "2015-01-12T03:09:09.245"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:09.245",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:5",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/8/2014.\n */\npublic class DelBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBfnEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DelBlogEvRule",
      "createDate": "2015-01-12T03:09:09.466"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:09.466",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:6",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class GetBlogTreeRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnTree(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.GetBlogTreeRule",
      "createDate": "2015-01-12T03:09:09.710"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:09.710",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:7",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.ConcurrentSkipListMap;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic abstract class AbstractBlogRule extends AbstractRule implements Rule {\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected String getJsonByRid(String blogRid) {\n        // try to get it from cache first.\n        String json = null;\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache != null) {\n            json = (String)cache.get(\"blogRid\");\n        }\n        if(json == null) {\n            // TODO warning to increase cache if this happens.\n            json = DbService.getJsonByRid(blogRid);\n            // put it into the blog cache.\n            if(json != null) {\n                if(cache == null) {\n                    cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                            .maximumWeightedCapacity(1000)\n                            .build();\n                    blogMap.put(\"cache\", cache);\n                }\n                cache.put(blogRid, json);\n            }\n        }\n        return json;\n    }\n\n    protected Map<String, Object> getBlogByHostTitle(String host, String title) {\n        Map<String, Object> map = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OIndex<?> hostTitleIdx = db.getMetadata().getIndexManager().getIndex(\"hostTitleIdx\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OCompositeKey key = new OCompositeKey(host, title);\n            OIdentifiable blog = (OIdentifiable) hostTitleIdx.get(key);\n            if (blog != null) {\n                String json = ((ODocument) blog.getRecord()).toJSON();\n                map = mapper.readValue(json, new TypeReference<HashMap<String, Object>>() {});\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return map;\n    }\n\n    protected ODocument addBlog(Map<String, Object> data) throws Exception {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            OIndex<?> blogHostIdIdx = db.getMetadata().getIndexManager().getIndex(\"blogHostIdIdx\");\n            blog = new ODocument(schema.getClass(\"Blog\"));\n            blog.field(\"host\", data.get(\"host\"));\n            blog.field(\"id\", data.get(\"id\"));\n            if(data.get(\"desc\") != null) blog.field(\"desc\", data.get(\"desc\"));\n            if(data.get(\"attributes\") != null) blog.field(\"attributes\", data.get(\"attributes\"));\n            blog.field(\"createDate\", data.get(\"createDate\"));\n            blog.field(\"createUserId\", data.get(\"createUserId\"));\n            // parent\n            if(data.get(\"parent\") != null) {\n                OCompositeKey parentKey = new OCompositeKey(data.get(\"host\"), data.get(\"parent\"));\n                OIdentifiable parentOid = (OIdentifiable) blogHostIdIdx.get(parentKey);\n                if(parentOid != null) {\n                    ODocument parent = (ODocument)parentOid.getRecord();\n                    blog.field(\"parent\", parent);\n                    // update parent with the children\n                    Set children = parent.field(\"children\");\n                    if(children != null) {\n                        children.add(blog);\n                    } else {\n                        children = new HashSet<ODocument>();\n                        children.add(blog);\n                        parent.field(\"children\", children);\n                    }\n                    parent.save();\n                }\n            }\n            // children\n            List<String> childrenIds = (List<String>)data.get(\"children\");\n            if(childrenIds != null) {\n                Set children = new HashSet<ODocument>();\n                for(String childId: childrenIds) {\n                    OCompositeKey childKey = new OCompositeKey(data.get(\"host\"), childId);\n                    OIdentifiable childOid = (OIdentifiable) blogHostIdIdx.get(childKey);\n                    if(childOid != null) {\n                        ODocument child = (ODocument)childOid.getRecord();\n                        children.add(child);\n                        child.field(\"parent\", blog);\n                        child.save();\n                    }\n                }\n                blog.field(\"children\", children);\n            }\n            blog.save();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n\n    /*\n    protected void addBlog(Map<String, Object> data) throws Exception {\n        ODocument blog = addBlogDb(data);\n        // rebuild cache in memory.\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        // update central cache\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            blogMap.put(\"cache\", cache);\n        }\n        cache.put(blog.field(\"@rid\").toString(), blog.toJSON());\n        // update newList\n        String host = (String)data.get(\"host\");\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList == null) {\n            newList = new ArrayList<String>();\n            newList.add(blog.field(\"@rid\").toString());\n            blogMap.put(host + \"newList\", newList);\n        } else {\n            newList.add(0, blog.field(\"@rid\").toString());  // add the head of the list.\n        }\n        // TODO build hot list\n\n    }\n    */\n    /*\n    protected ODocument addBlogDb(Map<String, Object> data) throws Exception {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n\n        try {\n            db.begin();\n            blog = new ODocument(schema.getClass(\"Blog\"));\n            blog.field(\"host\", data.get(\"host\"));\n            blog.field(\"title\", data.get(\"title\"));\n            blog.field(\"source\", data.get(\"source\"));\n            blog.field(\"summary\", data.get(\"summary\"));\n            blog.field(\"content\", data.get(\"content\"));\n            blog.field(\"rank\", 0);\n            java.util.Date d = new java.util.Date();\n            blog.field(\"createDate\", data.get(\"createDate\"));\n            blog.field(\"updateDate\", data.get(\"createDate\"));\n            blog.field(\"createUserId\", data.get(\"createUserId\"));\n            blog.save();\n            db.commit();\n            Map<String, Object> tagMap = new HashMap<String, Object>();\n\n            Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n            String host = blog.field(\"host\");\n            String className = blog.field(\"@class\");\n            for(String tagName: inputTags) {\n                ODocument tag = null;\n\n                // get the tag is it exists\n                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                // this is a unique index, so it retrieves a OIdentifiable\n                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                if (oIdentifiable != null) {\n                    tag = (ODocument) oIdentifiable.getRecord();\n                    Set links = tag.field(\"links\");\n                    links.add(blog.field(\"@rid\"));\n                    tag.save();\n                    db.commit();\n                } else {\n                    tag = new ODocument(schema.getClass(\"Tag\"));\n                    tag.field(\"host\", host);\n                    tag.field(\"name\", tagName);\n                    tag.field(\"class\", className);\n                    tag.field(\"createDate\", data.get(\"createDate\"));\n                    tag.field(\"createUserId\", data.get(\"createUserId\"));\n                    Set links = new HashSet<String>();\n                    links.add(blog.field(\"@rid\"));\n                    tag.field(\"links\", links);\n                    tag.save();\n                    db.commit();\n                }\n                tagMap.put(tagName, tag.field(\"@rid\"));\n            }\n            blog.field(\"tags\", tagMap);\n            blog.save();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n    */\n\n    protected boolean delBlog(Map<String, Object> data) throws Exception {\n        boolean result = false;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> blogHostIdIdx = db.getMetadata().getIndexManager().getIndex(\"blogHostIdIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"host\"), data.get(\"id\"));\n            OIdentifiable oid = (OIdentifiable) blogHostIdIdx.get(key);\n            if (oid != null) {\n                ODocument blog = (ODocument) oid.getRecord();\n                // update references from parent and children\n                ODocument parent = blog.field(\"parent\");\n                if(parent != null) {\n                    Set children = parent.field(\"children\");\n                    if(children != null && children.size() > 0) {\n                        children.remove(blog);\n                    }\n                    parent.save();\n                }\n                Set<ODocument> children = blog.field(\"children\");\n                if(children != null && children.size() > 0) {\n                    for(ODocument child: children) {\n                        if(child != null) {\n                            child.removeField(\"parent\");\n                            child.save();\n                        }\n\n                    }\n                }\n                blog.delete();\n                db.commit();\n                result = true;\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return result;\n    }\n    /*\n    protected void delBlogUpdCache(String blogRid, String host) throws Exception {\n        delBlogDb(blogRid);\n        // rebuild cache in memory.\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        // update central cache\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(blogRid);\n        }\n        // update newList\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList != null) {\n            newList.remove(blogRid);\n        }\n\n        // TODO build hot list\n\n    }\n    */\n    /*\n    protected boolean delBlogDb(String blogRid) throws Exception {\n        boolean result = false;\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId(blogRid));\n            // remove the tags\n            Map<String, Object> tagMap = blog.field(\"tags\");\n            if(tagMap != null) {\n                Iterator it = tagMap.entrySet().iterator();\n                while(it.hasNext()) {\n                    Map.Entry pairs = (Map.Entry)it.next();\n                    ODocument tag = db.load((ORecordId)pairs.getValue());\n                    Set links = tag.field(\"links\");\n                    links.remove(blog.field(\"@rid\"));\n                    tag.save();\n                    db.commit();\n                }\n            }\n            db.delete(new ORecordId(blogRid));\n            db.commit();\n            result = true;\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return result;\n    }\n    */\n    /*\n    protected int delBlogByHost(String host) throws Exception {\n        int recordsUpdated = 0;\n        String sql = \"DELETE FROM Blog WHERE host = '\" + host + \"'\";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            recordsUpdated = db.command(new OCommandSQL(sql)).execute();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        if(recordsUpdated > 0) {\n            // clean the cache if any.\n            Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n            blogMap.remove(host + \"newList\");\n            // cached blog will be remove the cache automatically.\n        }\n        return recordsUpdated;\n    }\n    */\n    protected void updBlog(Map<String, Object> data, String userRid, String userId) throws Exception {\n        ODocument blog = updBlogDb(data, userRid, userId);\n        String blogRid = blog.field(\"@rid\").toString();\n        // rebuild cache in memory.\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            blogMap.put(\"cache\", cache);\n        }\n        cache.put(blogRid, blog.toJSON());\n\n        // update newList\n        String host = (String)data.get(\"host\");\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList == null) {\n            newList = new ArrayList<String>();\n            blogMap.put(host + \"newList\", newList);\n            newList.add(blogRid);\n        } else {\n            newList.remove(blogRid);\n            newList.add(0, blogRid);\n        }\n        // TODO build hot list\n\n    }\n\n    protected ODocument updBlogDb(Map<String, Object> data, String userRid, String userId) throws Exception {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId((String)data.get(\"@rid\")));\n            if (blog != null) {\n                String title = (String)data.get(\"title\");\n                if(title != null && !title.equals(blog.field(\"title\"))) {\n                    blog.field(\"title\", title);\n                }\n                String source = (String)data.get(\"source\");\n                if(source != null && !source.equals(blog.field(\"source\"))) {\n                    blog.field(\"source\", source);\n                }\n                String summary = (String)data.get(\"summary\");\n                if(summary != null && !summary.equals(blog.field(\"content\"))) {\n                    blog.field(\"summary\", summary);\n                }\n                String content = (String)data.get(\"content\");\n                if(content != null && !content.equals(blog.field(\"content\"))) {\n                    blog.field(\"content\", content);\n                }\n\n                // update tags\n                String host = blog.field(\"host\");\n                String className = blog.field(\"@class\");\n                Map<String, Object> tagMap = blog.field(\"tags\");\n                if(tagMap != null && tagMap.size() > 0) {\n                    // There are existing tags.\n                    if(data.get(\"tags\") != null) {\n                        // both are not null, we need a comparison to figure out what to do.\n                        Set<String> inputTags = new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\")));\n                        Set<String> storedTags = tagMap.keySet();\n                        Set<String> addSet = new HashSet<String>(inputTags);\n                        Set<String> delSet = new HashSet<String>(storedTags);\n                        addSet.removeAll(storedTags);\n                        if(addSet.size() > 0) {\n                            for(String tagName: addSet) {\n                                ODocument tag = null;\n                                // get the tag is it exists\n                                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                                // this is a unique index, so it retrieves a OIdentifiable\n                                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                                if (oIdentifiable != null) {\n                                    tag = (ODocument) oIdentifiable.getRecord();\n                                    Set links = tag.field(\"links\");\n                                    links.add(blog.field(\"@rid\"));\n                                    tag.save();\n                                    db.commit();\n                                } else {\n                                    tag = new ODocument(schema.getClass(\"Tag\"));\n                                    tag.field(\"host\", host);\n                                    tag.field(\"name\", tagName);\n                                    tag.field(\"class\", className);\n                                    tag.field(\"createDate\", new java.util.Date());\n                                    tag.field(\"createUserRid\", new ORecordId(userRid));\n                                    Set links = new HashSet<Object>();\n                                    links.add(blog.field(\"@rid\"));\n                                    tag.field(\"links\", links);\n                                    tag.save();\n                                    db.commit();\n                                }\n                                tagMap.put(tagName, tag.field(\"@rid\"));\n                            }\n                            blog.field(\"tags\", tagMap);\n                            blog.save();\n                            db.commit();\n                        }\n                        delSet.removeAll(inputTags);\n                        if(delSet.size() > 0) {\n                            // remove the tags\n                            for(String tagName: delSet) {\n                                ODocument tag = null;\n                                // get the tag is it exists\n                                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                                // this is a unique index, so it retrieves a OIdentifiable\n                                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                                if (oIdentifiable != null) {\n                                    tag = (ODocument) oIdentifiable.getRecord();\n                                    Set links = tag.field(\"links\");\n                                    links.remove(blog.field(\"@rid\"));\n                                    tag.save();\n                                    db.commit();\n                                }\n                                tagMap.remove(tagName);\n                            }\n                            blog.field(\"tags\", tagMap);\n                            blog.save();\n                            db.commit();\n                        }\n                    } else {\n                        // remove the blog reference from all tags as input is empty but stored has values.\n                        // and then remove the tags from blog.\n                        Iterator it = tagMap.entrySet().iterator();\n                        while(it.hasNext()) {\n                            ORecordId tagRid = (ORecordId)it.next();\n                            ODocument tag = db.load(tagRid);\n                            Set links = tag.field(\"links\");\n                            links.remove(blog.field(\"@rid\"));\n                            tag.save();\n                        }\n                        blog.removeField(\"tags\");\n                        blog.save();\n                        db.commit();\n                    }\n                } else {\n                    // tagMap is null\n                    if(data.get(\"tags\") != null) {\n                        tagMap = new HashMap<String, Object>();\n                        Set<String> inputTags = new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\")));\n                        for(String tagName: inputTags) {\n                            ODocument tag = null;\n                            // get the tag if it exists\n                            OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                            // this is a unique index, so it retrieves a OIdentifiable\n                            OCompositeKey key = new OCompositeKey(host, tagName, className);\n                            OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                            if (oIdentifiable != null) {\n                                tag = (ODocument) oIdentifiable.getRecord();\n                                Set links = tag.field(\"links\");\n                                links.add(blog.field(\"@rid\"));\n                                tag.save();\n                                db.commit();\n                            } else {\n                                tag = new ODocument(schema.getClass(\"Tag\"));\n                                tag.field(\"host\", host);\n                                tag.field(\"name\", tagName);\n                                tag.field(\"class\", className);\n                                tag.field(\"createDate\", new java.util.Date());\n                                tag.field(\"createUserRid\", new ORecordId(userRid));\n                                Set links = new HashSet<String>();\n                                links.add(blog.field(\"@rid\"));\n                                tag.field(\"links\", links);\n                                tag.save();\n                                db.commit();\n                            }\n                            tagMap.put(tagName, tag.field(\"@rid\"));\n                        }\n                        blog.field(\"tags\", tagMap);\n                        blog.save();\n                        db.commit();\n                    }\n                }\n                blog.field(\"updateDate\", new java.util.Date());\n                blog.field(\"updateUserId\", userId);\n                blog.field(\"updateUserRid\", userRid);\n                blog.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n\n    /*\n    protected long getTotalNumberBlogFromDb(Map<String, Object> criteria) {\n        long total = 0;\n        StringBuilder sql = new StringBuilder(\"SELECT COUNT(*) as count FROM Blog\");\n\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            total = ((ODocument)db.query(new OSQLSynchQuery<ODocument>(sql.toString())).get(0)).field(\"count\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return total;\n    }\n    */\n\n    protected List<Map<String, Object>> searchBlogFromDb(Map<String, Object> criteria) {\n        List<Map<String,Object>> list = null;\n        StringBuilder sql = new StringBuilder(\"SELECT FROM Blog \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sql.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sql.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sql.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sql.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql.toString());\n            List<ODocument> result = db.command(query).execute();\n            if(result.size() > 0) {\n                String json = OJSONWriter.listToJSON(result, null);\n                list = mapper.readValue(json, new TypeReference<List<HashMap<String, Object>>>() {});\n\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return list;\n    }\n    protected List<ODocument> searchBlogDb(Map<String, Object> criteria) {\n        List<ODocument> blogs = null;\n        StringBuilder sql = new StringBuilder(\"SELECT FROM Blog \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sql.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sql.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sql.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sql.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql.toString());\n            blogs = db.command(query).execute();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return blogs;\n    }\n\n    protected Map<String, Object> refreshCache(String host) {\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        Map<String, Object> criteria = new HashMap<String, Object>();\n        criteria.put(\"host\", host);\n        criteria.put(\"sortedBy\", \"updateDate\");\n        criteria.put(\"sortDir\", \"DESC\");\n        List<ODocument> blogs = searchBlogDb(criteria);\n        List<String> newList = new ArrayList<String>();\n        // build new map/list\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            blogMap.put(\"cache\", cache);\n        }\n        int i = 0;\n        int pageSize = 2; // TODO get from config\n        for (ODocument blog : blogs) {\n            // cache the first page for now. most people will read the first page as it contains\n            // new posts.\n            if(i < pageSize) {\n                cache.put(blog.field(\"@rid\").toString(), blog.toJSON());\n            }\n            newList.add(blog.field(\"@rid\").toString());\n        }\n        blogMap.put(host + \"newList\", newList);\n\n        // TODO build hot list\n        return blogMap;\n    }\n\n    protected ODocument upVoteBlog(String blogRid, String userRid) {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId(blogRid));\n            if (blog != null) {\n                Set upSet = blog.field(\"upUsers\");\n                if(upSet == null) {\n                    upSet = new HashSet<String>();\n                    upSet.add(new ORecordId(userRid));\n                    blog.field(\"upUsers\", upSet);\n                } else {\n                    upSet.add(new ORecordId(userRid));\n                }\n                // remove the user from downUsers if it is there\n                // blindly remove\n                Set downSet = blog.field(\"downUsers\");\n                if(downSet != null) {\n                    downSet.remove(new ORecordId(userRid));\n                }\n                blog.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n\n    protected ODocument downVoteBlog(String blogRid, String userRid) {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId(blogRid));\n            if (blog != null) {\n                Set downSet = blog.field(\"downUsers\");\n                if(downSet == null) {\n                    downSet = new HashSet<String>();\n                    downSet.add(new ORecordId(userRid));\n                    blog.field(\"downUsers\", downSet);\n                } else {\n                    downSet.add(new ORecordId(userRid));\n                }\n                // remove the user from upUsers if it is there\n                // blindly remove\n                Set upSet = blog.field(\"upUsers\");\n                if(upSet != null) {\n                    upSet.remove(new ORecordId(userRid));\n                }\n                blog.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AbstractBlogRule",
      "createDate": "2015-01-12T03:09:09.934"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:09.934",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:8",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/8/2014.\n */\npublic class DelBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBfn(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DelBlogRule",
      "createDate": "2015-01-12T03:09:10.152"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:10.152",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:9",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.Rule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 11/10/14.\n */\npublic class DownBlogRule extends AbstractBlogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\",401);\n        } else {\n            Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n            String rid = (String)data.get(\"@rid\");\n            String json = getJsonByRid(rid);\n            if(json == null) {\n                error = \"Blog with @rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DownBlogRule",
      "createDate": "2015-01-12T03:09:10.368"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:10.368",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:10",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.Rule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 11/10/14.\n */\npublic class DownBlogEvRule extends AbstractBlogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n        String userRid = (String)user.get(\"@rid\");\n        String blogRid = (String) data.get(\"@rid\");\n        ODocument blog = downVoteBlog(blogRid, userRid);\n        // TODO need to refresh hot list only here.\n\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DownBlogEvRule",
      "createDate": "2015-01-12T03:09:10.587"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:10.587",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:11",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.Rule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 11/10/14.\n */\npublic class UpBlogEvRule extends AbstractBlogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n        String userRid = (String)user.get(\"@rid\");\n        String blogRid = (String) data.get(\"@rid\");\n        ODocument blog = upVoteBlog(blogRid, userRid);\n        // TODO need to refresh hot list here\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpBlogEvRule",
      "createDate": "2015-01-12T03:09:10.799"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:10.799",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:12",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic class AddBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBfn(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AddBlogRule",
      "createDate": "2015-01-12T03:09:11.015"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:11.015",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:13",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class GetBlogPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnPost(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.GetBlogPostRule",
      "createDate": "2015-01-12T03:09:11.210"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:11.210",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:14",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic class AddBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBfnEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AddBlogEvRule",
      "createDate": "2015-01-12T03:09:11.424"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:11.424",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:15",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPostEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AddPostEvRule",
      "createDate": "2015-01-12T03:09:11.623"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:11.623",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:16",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.Rule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 11/10/14.\n */\npublic class UpBlogRule extends AbstractBlogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\",401);\n        } else {\n            Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n            String blogRid = (String)data.get(\"@rid\");\n            String json = getJsonByRid(blogRid);\n            if(json == null) {\n                error =\"Blog with @rid \" + blogRid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpBlogRule",
      "createDate": "2015-01-12T03:09:11.813"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:11.813",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:17",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPost(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AddPostRule",
      "createDate": "2015-01-12T03:09:12.024"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:12.024",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:18",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.command.OCommandOutputListener;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.tool.ODatabaseExport;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 12/12/14.\n */\npublic class ExportEventRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"dbAdmin\")) {\n                error = \"Role owner or admin or dbAdmin is required to add schema\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String path = (String)data.get(\"path\");\n                if(path != null) {\n                    // make sure that the Path exists.\n                    File file = new File(path);\n                    if (!file.exists()) {\n                        String result = exportEvent(path);\n                        inputMap.put(\"result\", result);\n                    } else {\n                        error = \"Please remove existing file manually\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                } else {\n                    error = \"Path is required\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExportEventRule",
      "createDate": "2015-01-12T03:09:12.218"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:12.218",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:19",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 11/12/14.\n */\npublic class ExecCommandRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"dbAdmin\")) {\n                error = \"Role owner or admin or dbAdmin is required to run db command\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                // make sure we have content payload here.\n                String script = (String)data.get(\"script\");\n                if(script == null || script.length() == 0) {\n                    error = \"Content is empty\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    // make sure the script is executable.\n                    String result = execCommand(data, false);\n                    if(result.length() > 0) {\n                        error = result;\n                        inputMap.put(\"responseCode\", 500);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"script\", script);\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExecCommandRule",
      "createDate": "2015-01-12T03:09:12.400"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:12.400",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:20",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.db;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 14/12/14.\n */\npublic class ReplayEventRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(ReplayEventRule.class);\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"dbAdmin\")) {\n                error = \"Role owner or admin or dbAdmin is required to replay events\";\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                String content = (String)data.get(\"content\");\n                // content may contains several events, parse it.\n                List<Map<String, Object>> events = mapper.readValue(content,\n                    new TypeReference<List<HashMap<String, Object>>>() {});\n\n                // replay event one by one.\n                for(Map<String, Object> event: events) {\n                    RuleEngine.getInstance().executeRuleAsync(Util.getEventRuleId(event), event);\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ReplayEventRule",
      "createDate": "2015-01-12T03:09:12.582"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:12.582",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:21",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.form.AbstractFormRule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 11/12/14.\n */\npublic class ImpDbRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"dbAdmin\")) {\n                error = \"Role owner or admin or dbAdmin is required to add schema\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                // make sure we have content payload here.\n                String content = (String)data.get(\"content\");\n                if(content == null || content.length() == 0) {\n                    error = \"Content is empty\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    // let it go here without checking anything for now. you know what you are doing:)\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"content\", content);\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ImpDbRule",
      "createDate": "2015-01-12T03:09:12.767"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:12.767",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:22",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.sun.net.httpserver.Headers;\n\nimport java.io.File;\nimport java.time.Instant;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 21/12/14.\n */\npublic class DownloadEventRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            // everyone is allowed to download events performed by himself and replay it on\n            // other site build with the same framework.\n\n            // make sure that both from datetime and to datetime are in the past. And to datetime\n            // can be optional which means get everything after from datetime.\n\n            // Now let's build a criteria for db search.\n\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(roles.contains(\"owner\")) {\n                // only owner can generate events for common components without host.\n                data.remove(\"host\");\n            }\n            data.put(\"createUserId\", user.get(\"userId\"));\n            String json = DbService.getData(\"Event\", data);\n            if(json != null) {\n                inputMap.put(\"result\", json);\n            } else {\n                error = \"No event can be found\";\n                inputMap.put(\"responseCode\", 400);\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.DownloadEventRule",
      "createDate": "2015-01-12T03:09:12.945"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:12.945",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:23",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.forum.AbstractForumRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 11/12/14.\n */\npublic class ImpDbEvRule extends AbstractDbRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        impDb(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ImpDbEvRule",
      "createDate": "2015-01-12T03:09:13.134"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:13.134",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:24",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 11/12/14.\n */\npublic class ExecCommandEvRule extends AbstractDbRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        execCommand(data, true);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExecCommandEvRule",
      "createDate": "2015-01-12T03:09:13.310"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:13.310",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:25",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.db;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport com.orientechnologies.orient.core.command.OCommandOutputListener;\nimport com.orientechnologies.orient.core.command.script.OCommandScript;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.tool.ODatabaseExport;\nimport com.orientechnologies.orient.core.db.tool.ODatabaseImport;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Created by steve on 10/12/14.\n */\npublic abstract class AbstractDbRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractDbRule.class);\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void impDb(Map<String, Object> data) {\n        String content = (String) data.get(\"content\");\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try{\n            OCommandOutputListener listener = new OCommandOutputListener() {\n                @Override\n                public void onMessage(String iText) {\n                    logger.info(iText);\n                }\n            };\n            InputStream is = new ByteArrayInputStream(content.getBytes());\n            ODatabaseImport imp = new ODatabaseImport(db, is, listener);\n            imp.importDatabase();\n            imp.close();\n        } catch (IOException ioe) {\n            logger.error(\"Exception:\", ioe);\n        } finally {\n            db.close();\n        }\n    }\n\n    protected String exportEvent(String path) {\n        final String[] result = new String[1];\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try{\n            OCommandOutputListener listener = new OCommandOutputListener() {\n                @Override\n                public void onMessage(String iText) {\n                    result[0] = result[0] + iText;\n                }\n            };\n            ODatabaseExport export = new ODatabaseExport(db, path, listener);\n            export.exportDatabase();\n            export.close();\n        } catch(IOException ioe) {\n            ioe.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return result[0];\n    }\n\n    protected String execCommand(Map<String, Object> data, boolean commit) {\n        String result = \"\";\n        String script = (String) data.get(\"script\");\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try{\n            db.command(new OCommandScript(\"sql\", script)).execute();\n            if(commit) {\n                db.commit();\n            } else {\n                db.rollback();\n            }\n        } catch (Exception e) {\n            db.rollback();\n            logger.error(\"Exception:\", e);\n            result = Util.stacktraceToString(e);\n        } finally {\n            db.close();\n        }\n        return result;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.AbstractDbRule",
      "createDate": "2015-01-12T03:09:13.485"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:13.485",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:26",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.page;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.form.AbstractFormRule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class GetAllPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)user.get(\"host\");\n\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            formMap.put(\"cache\", cache);\n        }\n\n        List<ODocument> pages = getAllPage(host);\n        if(pages != null) {\n            inputMap.put(\"result\", OJSONWriter.listToJSON(pages, null));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No page can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.GetAllPageRule",
      "createDate": "2015-01-12T03:09:13.683"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:13.683",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:27",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.form.AbstractFormRule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class GetPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String id = (String)data.get(\"id\");\n        String json = getPageById(id);\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Page with id \" + id + \" cannot be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.GetPageRule",
      "createDate": "2015-01-12T03:09:13.871"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:13.871",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:28",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.form.AbstractFormRule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class AddPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String id = (String)data.get(\"id\");\n        String host = (String)data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"pageAdmin\")) {\n                error = \"Role owner or admin or pageAdmin is required to add page\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String userHost = (String)user.get(\"host\");\n                if(userHost != null) {\n                    if(!userHost.equals(host)) {\n                        error = \"User can only add page from host: \" + host;\n                        inputMap.put(\"responseCode\", 401);\n                    } else {\n                        String json = getPageById(id);\n                        if(json != null) {\n                            error = \"Page with the same id exists\";\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                            eventData.put(\"createDate\", new java.util.Date());\n                            eventData.put(\"createUserId\", user.get(\"userId\"));\n                        }\n                    }\n                } else {\n                    String json = getPageById(id);\n                    if(json != null) {\n                        error = \"Page with the same id exists\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                        // remove host from data as this is owner adding role\n                        eventData.remove(\"host\");\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.AddPageRule",
      "createDate": "2015-01-12T03:09:14.050"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:14.050",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:29",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.form.AbstractFormRule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class ImpPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute(Object... objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        impPage(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.ImpPageEvRule",
      "createDate": "2015-01-12T03:09:14.227"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:14.227",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:30",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.form.AbstractFormRule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class DelPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        String id = (String)data.get(\"id\");\n        delPage(id);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.DelPageEvRule",
      "createDate": "2015-01-12T03:09:14.417"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:14.417",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:31",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.page;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.form.AbstractFormRule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class UpdPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"pageAdmin\")) {\n                error = \"Role owner or admin or pageAdmin is required to update page\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String userHost = (String)user.get(\"host\");\n                if(userHost != null && !userHost.equals(host)) {\n                    error = \"User can only update page from host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    ODocument page = null;\n                    if(rid != null) {\n                        page = DbService.getODocumentByRid(rid);\n                        if(page != null) {\n                            int inputVersion = (int)data.get(\"@version\");\n                            int storedVersion = page.field(\"@version\");\n                            if(inputVersion != storedVersion) {\n                                inputMap.put(\"responseCode\", 400);\n                                error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                            } else {\n                                Map eventMap = getEventMap(inputMap);\n                                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                                inputMap.put(\"eventMap\", eventMap);\n                                eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                                eventData.put(\"updateDate\", new java.util.Date());\n                                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            }\n                        } else {\n                            error = \"Page with @rid \" + rid + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                        }\n                    } else {\n                        error = \"@rid is required\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.UpdPageRule",
      "createDate": "2015-01-12T03:09:14.602"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:14.602",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:32",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.page;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.form.AbstractFormRule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class AddPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addPage(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.AddPageEvRule",
      "createDate": "2015-01-12T03:09:14.777"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:14.777",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:33",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.form.AbstractFormRule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.metadata.schema.OType;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class ImpPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"pageAdmin\")) {\n                error = \"Role owner or admin or pageAdmin is required to import page\";\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null) {\n                    if(!host.equals(data.get(\"host\"))) {\n                        error = \"User can only import page from host: \" + host;\n                        inputMap.put(\"responseCode\", 403);\n                    } else {\n                        // Won't check if page exists or not here.\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"host\", host);\n                        eventData.put(\"id\", data.get(\"id\"));\n                        eventData.put(\"content\", data.get(\"content\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                } else {\n                    // This is owner to import page, notice no host is passed in.\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"id\", data.get(\"id\"));\n                    eventData.put(\"content\", data.get(\"content\"));\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.ImpPageRule",
      "createDate": "2015-01-12T03:09:14.946"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:14.946",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:34",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.page;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.form.AbstractFormRule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class DelPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"pageAdmin\")) {\n                error = \"Role owner or admin or pageAdmin is required to delete page\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String userHost = (String)user.get(\"host\");\n                if(userHost != null && !userHost.equals(host)) {\n                    error = \"User can only delete page from host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    ODocument page = DbService.getODocumentByRid(rid);\n                    if(page != null) {\n                        int inputVersion = (int)data.get(\"@version\");\n                        int storedVersion = page.field(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"id\", page.field(\"id\"));\n                        }\n                    } else {\n                        error = \"Page with @rid \" + rid + \" doesn't exist\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            inputMap.put(\"result\", \"success\");\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.DelPageRule",
      "createDate": "2015-01-12T03:09:15.111"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:15.111",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:35",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.form.AbstractFormRule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class UpdPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPage(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.UpdPageEvRule",
      "createDate": "2015-01-12T03:09:15.289"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:15.289",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:36",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.page;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.metadata.schema.OType;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic abstract class AbstractPageRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractPageRule.class);\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected String getPageById(String id) {\n        String json = null;\n        Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            pageMap.put(\"cache\", cache);\n        } else {\n            json = (String)cache.get(id);\n        }\n        if(json == null) {\n            ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n            try {\n                OIndex<?> pageIdIdx = db.getMetadata().getIndexManager().getIndex(\"Page.id\");\n                // this is a unique index, so it retrieves a OIdentifiable\n                OIdentifiable oid = (OIdentifiable) pageIdIdx.get(id);\n                if (oid != null && oid.getRecord() != null) {\n                    json = ((ODocument) oid.getRecord()).toJSON();\n                    cache.put(id, json);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n            } finally {\n                db.close();\n            }\n        }\n        return json;\n    }\n\n    protected String addPage(Map<String, Object> data) throws Exception {\n        String json = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            ODocument page = new ODocument(schema.getClass(\"Page\"));\n            page.field(\"host\", data.get(\"host\"));\n            page.field(\"id\", data.get(\"id\"));\n            page.field(\"content\", data.get(\"content\"));\n            page.field(\"createDate\", data.get(\"updateDate\"));\n            page.field(\"createUserId\", data.get(\"updateUserId\"));\n            page.save();\n            db.commit();\n            json = page.toJSON();\n        } catch (Exception e) {\n            db.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            db.close();\n        }\n        Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            pageMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"id\"), json);\n        return json;\n    }\n\n    protected void delPage(String id) {\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> pageIdIdx = db.getMetadata().getIndexManager().getIndex(\"Page.id\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OIdentifiable oid = (OIdentifiable) pageIdIdx.get(id);\n            if (oid != null && oid.getRecord() != null) {\n                oid.getRecord().delete();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            logger.error(\"Exception:\", e);\n        } finally {\n            db.close();\n        }\n        Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(id);\n        }\n    }\n\n    protected String updPage(Map<String, Object> data) {\n        String json = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> pageIdIdx = db.getMetadata().getIndexManager().getIndex(\"Page.id\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OIdentifiable oid = (OIdentifiable) pageIdIdx.get(data.get(\"id\"));\n            if (oid != null) {\n                ODocument doc = oid.getRecord();\n                doc.field(\"content\", data.get(\"content\"));\n                doc.field(\"updateDate\", data.get(\"updateDate\"));\n                doc.field(\"updateUserId\", data.get(\"updateUserId\"));\n                doc.save();\n                json = doc.toJSON();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            logger.error(\"Exception:\", e);\n        } finally {\n            db.close();\n        }\n        Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            pageMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"id\"), json);\n        return json;\n    }\n\n    protected String impPage(Map<String, Object> data) throws Exception {\n        String json = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            OIndex<?> pageIdIdx = db.getMetadata().getIndexManager().getIndex(\"Page.id\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OIdentifiable oid = (OIdentifiable) pageIdIdx.get(data.get(\"id\"));\n            if (oid != null && oid.getRecord() != null) {\n                oid.getRecord().delete();\n            }\n            ODocument page = new ODocument(schema.getClass(\"Page\"));\n            if(data.get(\"host\") != null) page.field(\"host\", data.get(\"host\"));\n            page.field(\"id\", data.get(\"id\"));\n            page.field(\"content\", data.get(\"content\"));\n            page.field(\"createDate\", data.get(\"updateDate\"));\n            page.field(\"createUserId\", data.get(\"updateUserId\"));\n            page.save();\n            db.commit();\n            json = page.toJSON();\n        } catch (Exception e) {\n            db.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            db.close();\n        }\n        Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            pageMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"id\"), json);\n        return json;\n    }\n\n    protected List<ODocument> getAllPage(String host) {\n        List<ODocument> pages = null;\n        String sql = \"SELECT FROM Page\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            pages = db.command(query).execute();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            db.close();\n        }\n        if(pages != null && pages.size() > 0) {\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache == null) {\n                cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                        .maximumWeightedCapacity(100)\n                        .build();\n                pageMap.put(\"cache\", cache);\n            }\n            for(ODocument page: pages) {\n                cache.put(page.field(\"id\"), page.toJSON());\n            }\n        }\n        return pages;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.AbstractPageRule",
      "createDate": "2015-01-12T03:09:15.471"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:15.471",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:37",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\n\nimport java.util.*;\n\n/**\n * Created by steve on 28/12/14.\n * This the abstract class that implements functions for Blog, Forum and News\n */\npublic abstract class AbstractBfnRule  extends AbstractRule implements Rule {\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    public boolean addBfn (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String id = (String) data.get(\"id\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            // TODO put this in config.\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(bfnType + \"Admin\")) {\n                error = \"Role owner or admin or \" + bfnType + \"Admin is required to add \" + bfnType;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                String userHost = (String)user.get(\"host\");\n                if(userHost != null && !userHost.equals(host)) {\n                    error = \"User can only add \" + bfnType + \" from host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    ODocument doc = getODocumentByHostId(bfnType + \"HostIdIdx\", host, id);\n                    if(doc == null) {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n\n                        // make sure parent exists if it is not empty.\n                        String parentRid = (String)data.get(\"parent\");\n                        if(parentRid != null) {\n                            ODocument parent = DbService.getODocumentByRid(parentRid);\n                            if(parent == null) {\n                                error = \"Parent with @rid \" + parentRid + \" cannot be found.\";\n                                inputMap.put(\"responseCode\", 404);\n                            } else {\n                                // convert parent from @rid to id\n                                eventData.put(\"parent\", parent.field(\"id\"));\n                            }\n                        }\n                        // make sure all children exist if there are any.\n                        // and make sure all children have empty parent.\n                        List<String> childrenRids = (List<String>)data.get(\"children\");\n                        if(childrenRids != null && childrenRids.size() > 0) {\n                            List<String> childrenIds = new ArrayList<String>();\n                            for(String childRid: childrenRids) {\n                                if(childRid != null) {\n                                    if(childRid.equals(parentRid)) {\n                                        error = \"Parent shows up in the Children list\";\n                                        inputMap.put(\"responseCode\", 400);\n                                        break;\n                                    }\n                                    ODocument child = DbService.getODocumentByRid(childRid);\n                                    if(child == null) {\n                                        error = \"Child with @rid \" + childRid + \" cannot be found.\";\n                                        inputMap.put(\"responseCode\", 404);\n                                        break;\n                                    } else {\n                                        childrenIds.add(child.field(\"id\"));\n                                    }\n                                }\n                            }\n                            eventData.put(\"children\", childrenIds);\n                        }\n                    } else {\n                        error = \"Id \" + id + \" exists on host \" + host;\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public boolean addBfnEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addBfnDb(bfnType, data);\n        return true;\n    }\n\n    protected ODocument addBfnDb(String bfnType, Map<String, Object> data) throws Exception {\n        ODocument doc = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            OIndex<?> docHostIdIdx = db.getMetadata().getIndexManager().getIndex(bfnType + \"HostIdIdx\");\n            String className = bfnType.substring(0, 1).toUpperCase() + bfnType.substring(1);\n            doc = new ODocument(schema.getClass(className));\n            doc.field(\"host\", data.get(\"host\"));\n            doc.field(\"id\", data.get(\"id\"));\n            if(data.get(\"desc\") != null) doc.field(\"desc\", data.get(\"desc\"));\n            if(data.get(\"attributes\") != null) doc.field(\"attributes\", data.get(\"attributes\"));\n            doc.field(\"createDate\", data.get(\"createDate\"));\n            doc.field(\"createUserId\", data.get(\"createUserId\"));\n            // parent\n            if(data.get(\"parent\") != null) {\n                OCompositeKey parentKey = new OCompositeKey(data.get(\"host\"), data.get(\"parent\"));\n                OIdentifiable parentOid = (OIdentifiable) docHostIdIdx.get(parentKey);\n                if(parentOid != null) {\n                    ODocument parent = (ODocument)parentOid.getRecord();\n                    doc.field(\"parent\", parent);\n                    // update parent with the children\n                    Set children = parent.field(\"children\");\n                    if(children != null) {\n                        children.add(doc);\n                    } else {\n                        children = new HashSet<ODocument>();\n                        children.add(doc);\n                        parent.field(\"children\", children);\n                    }\n                    parent.save();\n                }\n            }\n            // children\n            List<String> childrenIds = (List<String>)data.get(\"children\");\n            if(childrenIds != null) {\n                Set children = new HashSet<ODocument>();\n                for(String childId: childrenIds) {\n                    OCompositeKey childKey = new OCompositeKey(data.get(\"host\"), childId);\n                    OIdentifiable childOid = (OIdentifiable) docHostIdIdx.get(childKey);\n                    if(childOid != null) {\n                        ODocument child = (ODocument)childOid.getRecord();\n                        children.add(child);\n                        child.field(\"parent\", doc);\n                        child.save();\n                    }\n                }\n                doc.field(\"children\", children);\n            }\n            doc.save();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return doc;\n    }\n\n    public boolean delBfn (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(bfnType + \"Admin\")) {\n                error = \"Role owner or admin or \" + bfnType + \"Admin is required to delete \" + bfnType;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                String userHost = (String)user.get(\"host\");\n                if(userHost != null && !userHost.equals(host)) {\n                    error = \"User can only delete \" + bfnType + \" from host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    ODocument doc = DbService.getODocumentByRid(rid);\n                    if(doc != null) {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"host\", doc.field(\"host\"));\n                        eventData.put(\"id\", doc.field(\"id\"));\n                    } else {\n                        error = \"@rid \" + rid + \" doesn't exist on host \" + host;\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public boolean delBfnEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        return delBfnDb(bfnType, data);\n    }\n\n    protected boolean delBfnDb(String bfnType, Map<String, Object> data) throws Exception {\n        boolean result = false;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> docHostIdIdx = db.getMetadata().getIndexManager().getIndex(bfnType + \"HostIdIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"host\"), data.get(\"id\"));\n            OIdentifiable oid = (OIdentifiable) docHostIdIdx.get(key);\n            if (oid != null) {\n                ODocument doc = (ODocument) oid.getRecord();\n                // update references from parent and children\n                ODocument parent = doc.field(\"parent\");\n                if(parent != null) {\n                    Set children = parent.field(\"children\");\n                    if(children != null && children.size() > 0) {\n                        children.remove(doc);\n                    }\n                    parent.save();\n                }\n                Set<ODocument> children = doc.field(\"children\");\n                if(children != null && children.size() > 0) {\n                    for(ODocument child: children) {\n                        if(child != null) {\n                            child.removeField(\"parent\");\n                            child.save();\n                        }\n\n                    }\n                }\n                doc.delete();\n                db.commit();\n                result = true;\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return result;\n    }\n\n    public boolean updBfn (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            inputMap.put(\"error\", \"Login is required\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(bfnType + \"Admin\")) {\n                inputMap.put(\"error\", \"Role owner or admin or \" + bfnType + \"Admin is required to update \" + bfnType);\n                inputMap.put(\"responseCode\", 403);\n                return false;\n            } else {\n                String userHost = (String)user.get(\"host\");\n                if(userHost != null && !userHost.equals(host)) {\n                    inputMap.put(\"error\", \"User can only update \" + bfnType + \" from host: \" + host);\n                    inputMap.put(\"responseCode\", 403);\n                    return false;\n                } else {\n                    ODocument doc = null;\n                    if(rid != null) {\n                        doc = DbService.getODocumentByRid(rid);\n                        if(doc != null) {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                            eventData.put(\"host\", doc.field(\"host\"));\n                            eventData.put(\"id\", doc.field(\"id\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n\n                            // make sure parent exists if it is not empty.\n                            String parentRid = (String)data.get(\"parent\");\n                            if(parentRid != null) {\n                                if(rid.equals(parentRid)) {\n                                    inputMap.put(\"error\", \"parent @rid is the same as current @rid\");\n                                    inputMap.put(\"responseCode\", 400);\n                                    return false;\n                                }\n                                ODocument parent = DbService.getODocumentByRid(parentRid);\n                                if(parent == null) {\n                                    inputMap.put(\"error\", \"Parent with @rid \" + parentRid + \" cannot be found\");\n                                    inputMap.put(\"responseCode\", 404);\n                                    return false;\n                                } else {\n                                    // convert parent from @rid to id\n                                    eventData.put(\"parent\", parent.field(\"id\"));\n                                }\n                            }\n                            // make sure all children exist if there are any.\n                            // and make sure all children have empty parent.\n                            List<String> childrenRids = (List<String>)data.get(\"children\");\n                            if(childrenRids != null && childrenRids.size() > 0) {\n                                List<String> childrenIds = new ArrayList<String>();\n                                for(String childRid: childrenRids) {\n                                    if(childRid != null) {\n                                        if(childRid.equals(parentRid)) {\n                                            inputMap.put(\"error\", \"Parent shows up in the Children list\");\n                                            inputMap.put(\"responseCode\", 400);\n                                            return false;\n                                        }\n                                        if(childRid.equals(rid)) {\n                                            inputMap.put(\"error\", \"Current object shows up in the Children list\");\n                                            inputMap.put(\"responseCode\", 400);\n                                            return false;\n                                        }\n                                        ODocument child = DbService.getODocumentByRid(childRid);\n                                        if(child == null) {\n                                            inputMap.put(\"error\", \"Child with @rid \" + childRid + \" cannot be found\");\n                                            inputMap.put(\"responseCode\", 404);\n                                            return false;\n                                        } else {\n                                            childrenIds.add(child.field(\"id\"));\n                                        }\n                                    }\n                                }\n                                eventData.put(\"children\", childrenIds);\n                            }\n                        } else {\n                            inputMap.put(\"error\", \"@rid \" + rid + \" cannot be found\");\n                            inputMap.put(\"responseCode\", 404);\n                            return false;\n                        }\n                    } else {\n                        inputMap.put(\"error\", \"@rid is required\");\n                        inputMap.put(\"responseCode\", 400);\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    public boolean updBfnEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updBfnDb(bfnType, data);\n        return true;\n    }\n\n    protected ODocument updBfnDb(String bfnType, Map<String, Object> data) throws Exception {\n        ODocument doc = null;\n        // update parent according to children and update children according to parent.\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> docHostIdIdx = db.getMetadata().getIndexManager().getIndex(bfnType + \"HostIdIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"host\"), data.get(\"id\"));\n            OIdentifiable oid = (OIdentifiable) docHostIdIdx.get(key);\n            if (oid != null) {\n                doc = (ODocument) oid.getRecord();\n                if(data.get(\"desc\") != null) {\n                    doc.field(\"desc\", data.get(\"desc\"));\n                } else {\n                    doc.removeField(\"desc\");\n                }\n                if(data.get(\"attributes\") != null) {\n                    doc.field(\"attributes\", data.get(\"attributes\"));\n                } else {\n                    doc.removeField(\"attributes\");\n                }\n                if(data.get(\"parent\") != null) {\n                    OCompositeKey parentKey = new OCompositeKey(data.get(\"host\"), data.get(\"parent\"));\n                    OIdentifiable parentOid = (OIdentifiable) docHostIdIdx.get(parentKey);\n                    if(parentOid != null) {\n                        ODocument parent = (ODocument)parentOid.getRecord();\n                        doc.field(\"parent\", parent);\n                        // update parent with the children\n                        Set children = parent.field(\"children\");\n                        if(children != null) {\n                            children.add(doc);\n                        } else {\n                            children = new HashSet<ODocument>();\n                            children.add(doc);\n                            parent.field(\"children\", children);\n                        }\n                        parent.save();\n                    }\n                } else {\n                    ODocument parent = doc.field(\"parent\");\n                    if(parent != null) {\n                        Set children = parent.field(\"children\");\n                        children.remove(doc);\n                        doc.removeField(\"parent\");\n                    }\n                }\n                List<String> list = (List)data.get(\"children\");\n                if(list != null && list.size() > 0) {\n                    Set<ODocument> storedChildren = doc.field(\"children\");\n                    if(storedChildren != null && storedChildren.size() > 0) {\n                        // both lists are not empty. comparison is needed.\n                        // first populate inputChildren as ODocument\n                        Set<ODocument> inputChildren = new HashSet<ODocument>();\n                        for(String id: list) {\n                            OCompositeKey childKey = new OCompositeKey(data.get(\"host\"), id);\n                            OIdentifiable childOid = (OIdentifiable) docHostIdIdx.get(childKey);\n                            if(childOid != null) inputChildren.add(childOid.getRecord());\n                        }\n\n                        Set<ODocument> addSet = new HashSet<ODocument>(inputChildren);\n                        Set<ODocument> delSet = new HashSet<ODocument>(storedChildren);\n\n                        addSet.removeAll(storedChildren);\n                        if(addSet.size() > 0) {\n                            for(ODocument addDoc: addSet) {\n                                addDoc.field(\"parent\", doc);\n                                storedChildren.add(addDoc);\n                                addDoc.save();\n                                doc.save();\n                            }\n                        }\n                        delSet.removeAll(inputChildren);\n                        if(delSet.size() > 0) {\n                            for(ODocument delDoc: delSet) {\n                                delDoc.removeField(\"parent\");\n                                storedChildren.remove(delDoc);\n                                delDoc.save();\n                                doc.save();\n                            }\n                        }\n                    } else {\n                        // doesn't have children\n                        storedChildren = new HashSet<ODocument>();\n                        for(String id: (List<String>)data.get(\"children\")) {\n                            OCompositeKey childKey = new OCompositeKey(data.get(\"host\"), id);\n                            OIdentifiable childOid = (OIdentifiable) docHostIdIdx.get(childKey);\n                            if(childOid != null) {\n                                ODocument child = childOid.getRecord();\n                                if(child != null) {\n                                    storedChildren.add(childOid.getRecord());\n                                    child.field(\"parent\", doc);\n                                    child.save();\n                                }\n                            }\n                        }\n                        doc.field(\"children\", storedChildren);\n                    }\n                } else {\n                    Set<ODocument> children = doc.field(\"children\");\n                    if(children != null && children.size() > 0) {\n                        for(ODocument child: children) {\n                            child.removeField(\"parent\");\n                        }\n                    }\n                    doc.removeField(\"children\");\n                }\n                doc.field(\"updateDate\", data.get(\"updateDate\"));\n                doc.field(\"updateUserId\", data.get(\"updateUserId\"));\n                doc.save();\n                db.commit();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return doc;\n    }\n\n\n    public boolean addPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String parentId = (String) data.get(\"parentId\");\n        String host = (String) data.get(\"host\");\n        String title = (String) data.get(\"title\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            if(parentId == null || host == null || title == null) {\n                error = \"ParentId, Host and Title are required\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                //  make sure parent exists.\n                ODocument doc = getODocumentByHostId(bfnType + \"HostIdIdx\", host, parentId);\n                if(doc == null) {\n                    error = \"Id \" + parentId + \" doesn't exist on host \" + host;\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n                    eventData.put(\"id\", DbService.incrementCounter(\"postId\"));\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public boolean addPostEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addPostDb(bfnType, data);\n        return true;\n    }\n\n    protected ODocument addPostDb(String bfnType, Map<String, Object> data) throws Exception {\n        ODocument post = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            post = new ODocument(schema.getClass(\"Post\"));\n            post.field(\"host\", data.get(\"host\"));\n            post.field(\"id\", data.get(\"id\"));\n            post.field(\"title\", data.get(\"title\"));\n            if(data.get(\"summary\") != null) post.field(\"summary\", data.get(\"summary\"));\n            if(data.get(\"content\") != null) post.field(\"content\", data.get(\"content\"));\n            post.field(\"createDate\", data.get(\"createDate\"));\n            post.field(\"createUserId\", data.get(\"createUserId\"));\n            // parent\n            OIndex<?> docHostIdIdx = db.getMetadata().getIndexManager().getIndex(bfnType + \"HostIdIdx\");\n            OCompositeKey parentKey = new OCompositeKey(data.get(\"host\"), data.get(\"parentId\"));\n            OIdentifiable parentOid = (OIdentifiable) docHostIdIdx.get(parentKey);\n            if(parentOid != null) {\n                ODocument parent = (ODocument)parentOid.getRecord();\n                post.field(\"parent\", parent);\n                // update parent with the posts\n                List posts = parent.field(\"posts\");\n                if(posts != null) {\n                    posts.add(post);\n                } else {\n                    posts = new ArrayList<ODocument>();\n                    posts.add(post);\n                    parent.field(\"posts\", posts);\n                }\n                parent.save();\n            }\n            // tags\n            Map<String, Object> tagMap = new HashMap<String, Object>();\n            Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n            String host = (String)data.get(\"host\");\n            String className = post.getClassName();\n            for(String tagName: inputTags) {\n                ODocument tag = null;\n                // get the tag is it exists\n                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                OCompositeKey tagKey = new OCompositeKey(host, tagName, className);\n                OIdentifiable tagOid = (OIdentifiable) hostNameClassIdx.get(tagKey);\n                if (tagOid != null) {\n                    tag = (ODocument) tagOid.getRecord();\n                    Set links = tag.field(\"links\");\n                    links.add(post);\n                    tag.save();\n                } else {\n                    tag = new ODocument(schema.getClass(\"Tag\"));\n                    tag.field(\"host\", host);\n                    tag.field(\"name\", tagName);\n                    tag.field(\"class\", className);\n                    tag.field(\"createDate\", data.get(\"createDate\"));\n                    tag.field(\"createUserId\", data.get(\"createUserId\"));\n                    Set links = new HashSet<String>();\n                    links.add(post);\n                    tag.field(\"links\", links);\n                    tag.save();\n                }\n                tagMap.put(tagName, tag);\n            }\n            post.field(\"tags\", tagMap);\n\n            post.save();\n            // synch post id\n            OIndex<?> counterNameIdx = db.getMetadata().getIndexManager().getIndex(\"Counter.name\");\n            OIdentifiable counterOid = (OIdentifiable) counterNameIdx.get(\"postId\");\n            if (counterOid != null) {\n                ODocument counter = (ODocument) counterOid.getRecord();\n                if(!data.get(\"id\").equals(counter.field(\"value\"))) {\n                    counter.field(\"value\", data.get(\"id\"));\n                    counter.save();\n                }\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return post;\n    }\n\n    public boolean getBfnTree(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String json = getBfnTree(bfnType, host);\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No document can be found\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n\n    protected String getBfnTree(String bfnType, String host) {\n        String json = null;\n        String sql = \"SELECT FROM \" + bfnType + \" WHERE host = ? and parent IS NULL ORDER BY id\";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = db.command(query).execute(host);\n            if(docs.size() > 0) {\n                json = OJSONWriter.listToJSON(docs, \"fetchPlan:*:-1\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    public boolean getBfnPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        if(data.get(\"id\") == null || data.get(\"host\") == null) {\n            inputMap.put(\"error\", \"Host and Id are required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        String posts = getBfnPostDb(bfnType, data);\n        if(posts != null) {\n            inputMap.put(\"result\", posts);\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No post can be found\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n\n    protected String getBfnPostDb(String bfnType, Map<String, Object> data) {\n        String json = null;\n        String sql = \"select from (traverse posts, children from (select from \" + bfnType + \" where host = ? and id = ?)) where @class = 'Post'\";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> forums = db.command(query).execute(data.get(\"host\"), data.get(\"id\"));\n            if(forums.size() > 0) {\n                json = OJSONWriter.listToJSON(forums, null);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    public boolean getBfn(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String host = (String)data.get(\"host\");\n        if(payload == null) {\n            inputMap.put(\"error\", \"Login is required\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        } else {\n            Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(roles.contains(\"owner\") || roles.contains(\"admin\") || roles.contains(bfnType + \"Admin\")) {\n                Object userHost = user.get(\"host\");\n                if(userHost != null && !userHost.equals(host)) {\n                    inputMap.put(\"error\", \"User can only get \" + bfnType + \" from host: \" + host);\n                    inputMap.put(\"responseCode\", 403);\n                    return false;\n                } else {\n                    String docs = getBfnDb(bfnType, host);\n                    if(docs != null) {\n                        inputMap.put(\"result\", docs);\n                        return true;\n                    } else {\n                        inputMap.put(\"error\", \"No document can be found\");\n                        inputMap.put(\"responseCode\", 404);\n                        return false;\n                    }\n                }\n            } else {\n                inputMap.put(\"error\", \"Role owner or admin or forumAdmin is required to get all forums\");\n                inputMap.put(\"responseCode\", 401);\n                return false;\n            }\n        }\n    }\n\n    protected String getBfnDb(String bfhType, String host) {\n        String json = null;\n        String sql = \"SELECT FROM \" + bfhType + \" WHERE host = ? ORDER BY createDate\";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = db.command(query).execute(host);\n            if(docs.size() > 0) {\n                json = OJSONWriter.listToJSON(docs, null);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    public boolean getBfnDropdown (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String host = (String)data.get(\"host\");\n        if(payload == null) {\n            inputMap.put(\"error\", \"Login is required\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        } else {\n            String docs = getBfnDropdownDb(bfnType, host);\n            if(docs != null) {\n                inputMap.put(\"result\", docs);\n                return true;\n            } else {\n                inputMap.put(\"error\", \"No document can be found\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        }\n    }\n\n    protected String getBfnDropdownDb(String bfnType, String host) {\n        String json = null;\n        String sql = \"SELECT FROM \" + bfnType + \" WHERE host = ? ORDER BY id\";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = db.command(query).execute(host);\n            if(docs.size() > 0) {\n                List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n                for(ODocument doc: docs) {\n                    Map<String, String> map = new HashMap<String, String>();\n                    map.put(\"id\", doc.field(\"id\"));\n                    map.put(\"value\", doc.field(\"@rid\").toString());\n                    list.add(map);\n                }\n                json = mapper.writeValueAsString(list);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.AbstractBfnRule",
      "createDate": "2015-01-12T03:09:15.662"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:15.662",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:38",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.menu.AbstractMenuRule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/31/2014.\n */\npublic class UpdRoleEvRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updRole(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.UpdRoleEvRule",
      "createDate": "2015-01-12T03:09:15.841"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:15.841",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:39",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/31/2014.\n */\npublic class UpdRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\")) {\n                error = \"Role owner or admin is required to update role\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null) {\n                    if(!host.equals(data.get(\"host\"))) {\n                        error = \"User can only update role for host: \" + host;\n                        inputMap.put(\"responseCode\", 401);\n                    } else {\n                        ODocument role = DbService.getODocumentByRid(rid);\n                        if(role == null) {\n                            error = \"Role with @rid \" + rid + \" cannot be found\";\n                            inputMap.put(\"responseCode\", 404);\n                        } else {\n                            int inputVersion = (int)data.get(\"@version\");\n                            int storedVersion = role.field(\"@version\");\n                            if(inputVersion != storedVersion) {\n                                inputMap.put(\"responseCode\", 400);\n                                error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                            } else {\n                                Map eventMap = getEventMap(inputMap);\n                                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                                inputMap.put(\"eventMap\", eventMap);\n                                eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                                eventData.put(\"updateDate\", new java.util.Date());\n                                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            }\n                        }\n                    }\n                } else {\n                    ODocument role = DbService.getODocumentByRid(rid);\n                    if(role == null) {\n                        error = \"Role with @rid \" + rid + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        int inputVersion = (int)data.get(\"@version\");\n                        int storedVersion = role.field(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            // this is the owner update the role. remove host.\n                            eventData.remove(\"host\");\n                        }\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.UpdRoleRule",
      "createDate": "2015-01-12T03:09:16.010"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:16.010",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:40",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.user.AbstractUserRule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class DelRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\")) {\n                error = \"Role owner or admin is required to delete role\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null && !host.equals(data.get(\"host\"))) {\n                    error = \"User can only delete role for host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    ODocument role = DbService.getODocumentByRid(rid);\n                    if(role == null) {\n                        error = \"Role with @rid \" + rid + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        // find out if there are reference to the menuItem in Menu or MenuItem class\n                        // note there is no space between classes.\n                        if(DbService.hasReference(rid, \"User\")) {\n                            error = \"Role is referenced by other entities\";\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"id\", role.field(\"id\"));\n                        }\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.DelRoleRule",
      "createDate": "2015-01-12T03:09:16.175"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:16.175",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:41",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.role;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.menu.AbstractMenuRule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Created by husteve on 10/31/2014.\n */\npublic class GetRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\") || roles.contains(\"admin\")) {\n            String host = (String) user.get(\"host\");\n            String hostRoles = getRoles(host);\n            if(hostRoles != null) {\n                List<Map<String, Object>> roleList\n                        = mapper.readValue(hostRoles, new TypeReference<List<HashMap<String, Object>>>() {});\n                // get all the hosts\n                Set hosts = ServiceLocator.getInstance().getHostMap().keySet();\n\n                Map<String, Object> result = new HashMap<String, Object>();\n                result.put(\"roles\", roleList);\n                result.put(\"hosts\", hosts);\n                inputMap.put(\"result\", mapper.writeValueAsString(result));\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No role can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"Permission denied\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.GetRoleRule",
      "createDate": "2015-01-12T03:09:16.341"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:16.341",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:42",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.role;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by husteve on 10/31/2014.\n */\npublic abstract class AbstractRoleRule extends AbstractRule implements Rule {\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected String getRoleById(String id) {\n        String json = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OIndex<?> roleIdIdx = db.getMetadata().getIndexManager().getIndex(\"Role.id\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OIdentifiable oid = (OIdentifiable) roleIdIdx.get(id);\n            if (oid != null) {\n                ODocument role = (ODocument)oid.getRecord();\n                json = role.toJSON();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    protected void addRole(Map<String, Object> data) throws Exception {\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            ODocument role = new ODocument(schema.getClass(\"Role\"));\n            role.field(\"id\", data.get(\"id\"));\n            if(data.get(\"host\") != null) role.field(\"host\", data.get(\"host\"));\n            role.field(\"desc\", data.get(\"desc\"));\n            role.field(\"createDate\", data.get(\"createDate\"));\n            role.field(\"createUserId\", data.get(\"createUserId\"));\n            role.save();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n    }\n\n    protected void updRole(Map<String, Object> data) throws Exception {\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> roleIdIdx = db.getMetadata().getIndexManager().getIndex(\"Role.id\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OIdentifiable oid = (OIdentifiable) roleIdIdx.get(data.get(\"id\"));\n            if (oid != null && oid.getRecord() != null) {\n                ODocument role = oid.getRecord();\n\n            }\n            db.commit();\n\n            ODocument role = db.load(new ORecordId((String)data.get(\"@rid\")));\n            if (role != null) {\n                String host = (String)data.get(\"host\");\n                if(host != null && host.length() > 0) {\n                    if(!host.equals(role.field(\"host\"))) role.field(\"host\", host);\n                } else {\n                    role.removeField(\"host\");\n                }\n                String desc = (String)data.get(\"desc\");\n                if(desc != null && !desc.equals(role.field(\"desc\"))) {\n                    role.field(\"desc\", desc);\n                }\n                role.field(\"updateDate\", data.get(\"updateDate\"));\n                role.field(\"updateUserId\", data.get(\"updateUserId\"));\n                role.save();\n                db.commit();\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n    }\n\n    protected void delRole(String id) throws Exception {\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> roleIdIdx = db.getMetadata().getIndexManager().getIndex(\"Role.id\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OIdentifiable oid = (OIdentifiable) roleIdIdx.get(id);\n            if (oid != null && oid.getRecord() != null) {\n                oid.getRecord().delete();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n    }\n\n    protected String getRoles(String host) {\n        String sql = \"SELECT FROM Role\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> roles = db.command(query).execute();\n            json = OJSONWriter.listToJSON(roles, null);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    protected String getRoleDropdown(String host) {\n        String sql = \"SELECT FROM Role\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> roles = db.command(query).execute();\n            if(roles.size() > 0) {\n                List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n                for(ODocument doc: roles) {\n                    Map<String, String> map = new HashMap<String, String>();\n                    String id = doc.field(\"id\");\n                    map.put(\"id\", id);\n                    map.put(\"value\", id);\n                    list.add(map);\n                }\n                json = mapper.writeValueAsString(list);\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            // TODO throw e\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.AbstractRoleRule",
      "createDate": "2015-01-12T03:09:16.523"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:16.523",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:43",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.user.AbstractUserRule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class DelRoleEvRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        String id = (String)data.get(\"id\");\n        delRole(id);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.DelRoleEvRule",
      "createDate": "2015-01-12T03:09:16.711"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:16.711",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:44",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.user.AbstractUserRule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class AddRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\")) {\n                error = \"Role owner or admin is required to add role\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null) {\n                    if(!host.equals(data.get(\"host\"))) {\n                        error = \"User can only add role from host: \" + host;\n                        inputMap.put(\"responseCode\", 401);\n                    } else {\n                        String json = getRoleById((String)data.get(\"id\"));\n                        if(json != null) {\n                            error = \"Id for the role exists\";\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                            eventData.put(\"createDate\", new java.util.Date());\n                            eventData.put(\"createUserId\", user.get(\"userId\"));\n                        }\n                    }\n                } else {\n                    String json = getRoleById((String)data.get(\"id\"));\n                    if(json != null) {\n                        error = \"Id for the role exists\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                        // remove host from data as this is owner adding role\n                        eventData.remove(\"host\");\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.AddRoleRule",
      "createDate": "2015-01-12T03:09:16.906"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:16.906",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:45",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.user.AbstractUserRule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class AddRoleEvRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addRole(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.AddRoleEvRule",
      "createDate": "2015-01-12T03:09:17.101"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:17.101",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:46",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.role;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Created by steve on 21/11/14.\n */\npublic class GetRoleDropdownRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            inputMap.put(\"result\", \"Login is required\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        } else {\n            Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n            String host = (String) user.get(\"host\");\n            String hostRoleDropdown = getRoleDropdown(host);\n            if(hostRoleDropdown != null) {\n                inputMap.put(\"result\", hostRoleDropdown);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No role can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.GetRoleDropdownRule",
      "createDate": "2015-01-12T03:09:17.283"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:17.283",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:47",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.forum.AbstractForumRule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 27/11/14.\n */\npublic class DelPostRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            ODocument post = DbService.getODocumentByRid(rid);\n            if (post != null) {\n                ODocument parent = post.field(\"parent\");\n                String className = parent.getClassName();\n                List children = post.field(\"children\");\n                Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n                List roles = (List) user.get(\"roles\");\n                String userHost = (String) user.get(\"host\");\n                if (userHost != null && !userHost.equals(host)) {\n                    error = \"User can only delete post from host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    if (\"Forum\".equals(className)) {\n                        // owner, admin, forumAdmin can delete post blindly.\n                        // createUser can delete it if there is no children yet\n                        if(roles.contains(\"owner\") || roles.contains(\"admin\") || roles.contains(\"forumAdmin\")) {\n                            createEventMap(inputMap, user, parent);\n                        } else {\n                            if(user.get(\"userId\").equals(post.field(\"createUserId\")) && children.size() == 0) {\n                                createEventMap(inputMap, user, parent);\n                            } else {\n                                error = \"Cannot delete post\";\n                                inputMap.put(\"responseCode\", 401);\n                            }\n                        }\n                    } else if (\"Blog\".equals(className)) {\n                        // owner, admin, blogAdmin can delete post blindly.\n                        // blogUser can only delete post created by himself and there is no comment yet.\n                        if (roles.contains(\"owner\") || roles.contains(\"admin\") || roles.contains(\"blogAdmin\")) {\n                            createEventMap(inputMap, user, parent);\n                        } else {\n                            if(user.get(\"userId\").equals(post.field(\"createUserId\")) && children.size() == 0) {\n                                createEventMap(inputMap, user, parent);\n                            } else {\n                                error = \"Cannot delete post\";\n                                inputMap.put(\"responseCode\", 401);\n                            }\n                        }\n                    } else if (\"News\".equals(className)) {\n                        // owner, admin, newsAdmin can delete post blindly.\n                        // newsUser can only delete post created by himself and there is no comment yet.\n                        if (roles.contains(\"owner\") || roles.contains(\"admin\") || roles.contains(\"newsAdmin\")) {\n                            createEventMap(inputMap, user, parent);\n                        } else {\n                            if(user.get(\"userId\").equals(post.field(\"createUserId\")) && children.size() == 0) {\n                                createEventMap(inputMap, user, parent);\n                            } else {\n                                error = \"Cannot delete post\";\n                                inputMap.put(\"responseCode\", 401);\n                            }\n                        }\n                    } else {\n                        error = \"Invalid parent class for post\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                }\n            } else {\n                error = \"Post with @rid \" + rid + \" doesn't exists\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    void createEventMap(Map<String, Object> inputMap, Map<String, Object> user, ODocument parent) {\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        eventData.put(\"id\", data.get(\"id\"));\n        eventData.put(\"parentClassName\", parent.getClassName());\n        eventData.put(\"parentHost\", parent.field(\"host\"));\n        eventData.put(\"parentId\", parent.field(\"id\"));\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.DelPostRule",
      "createDate": "2015-01-12T03:09:17.471"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:17.471",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:48",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.post;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\nimport com.networknt.light.rule.injector.main.feed.FeedRule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.*;\n\n/**\n * Created by steve on 27/11/14.\n */\npublic class GetPostRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        long total = DbService.getCount(\"Post\", data);\n        if(total > 0) {\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            String posts = DbService.getData(\"Post\", data);\n            List<Map<String, Object>> jsonList = mapper.readValue(posts,\n                    new TypeReference<List<HashMap<String, Object>>>() {\n                    });\n            result.put(\"posts\", jsonList);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No post can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.GetPostRule",
      "createDate": "2015-01-12T03:09:17.664"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:17.664",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:49",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.post;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.*;\n\n/**\n * Created by steve on 27/11/14.\n */\npublic abstract class AbstractPostRule extends AbstractRule implements Rule {\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected ODocument addPost(Map<String, Object> data) throws Exception {\n        ODocument post = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            post = new ODocument(schema.getClass(\"Post\"));\n            post.field(\"id\", data.get(\"id\"));\n            post.field(\"host\", data.get(\"host\"));\n            post.field(\"title\", data.get(\"title\"));\n            if(data.get(\"source\") != null) post.field(\"source\", data.get(\"source\"));\n            if(data.get(\"content\") != null) post.field(\"content\", data.get(\"content\"));\n            post.field(\"createDate\", data.get(\"createDate\"));\n            post.field(\"createUserId\", data.get(\"createUserId\"));\n            // update parent children list, assuming parent has index with class + HostIdIdx.\n            OIndex<?> hostIdIdx = db.getMetadata().getIndexManager().getIndex(((String)data.get(\"parentClassName\")).toLowerCase() + \"HostIdIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"parentHost\"), data.get(\"parentId\"));\n            OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n            if (oid != null) {\n                ODocument doc = (ODocument) oid.getRecord();\n                post.field(\"parent\", doc);\n                Set children = doc.field(\"children\");\n                children.add(post);\n                doc.save();\n            }\n            // update tags\n            Map<String, Object> tagMap = new HashMap<String, Object>();\n            Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n            String host = (String)data.get(\"host\");\n            String className = post.getClassName();\n            for(String tagName: inputTags) {\n                ODocument tag = null;\n                // get the tag is it exists\n                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                OCompositeKey tagKey = new OCompositeKey(host, tagName, className);\n                OIdentifiable tagOid = (OIdentifiable) hostNameClassIdx.get(tagKey);\n                if (tagOid != null) {\n                    tag = (ODocument) tagOid.getRecord();\n                    Set links = tag.field(\"links\");\n                    links.add(post);\n                    tag.save();\n                } else {\n                    tag = new ODocument(schema.getClass(\"Tag\"));\n                    tag.field(\"host\", host);\n                    tag.field(\"name\", tagName);\n                    tag.field(\"class\", className);\n                    tag.field(\"createDate\", data.get(\"createDate\"));\n                    tag.field(\"createUserId\", data.get(\"createUserId\"));\n                    Set links = new HashSet<String>();\n                    links.add(post);\n                    tag.field(\"links\", links);\n                    tag.save();\n                }\n                tagMap.put(tagName, tag);\n            }\n            post.field(\"tags\", tagMap);\n            post.save();\n            // synch counter in the same transaction. It is used for playback.\n            OIndex<?> counterNameIdx = db.getMetadata().getIndexManager().getIndex(\"Counter.name\");\n            OIdentifiable counterOid = (OIdentifiable) counterNameIdx.get(\"postId\");\n            if (counterOid != null) {\n                ODocument counter = (ODocument) counterOid.getRecord();\n                if(!data.get(\"id\").equals(counter.field(\"value\"))) {\n                    counter.field(\"value\", data.get(\"id\"));\n                    counter.save();\n                }\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return post;\n    }\n\n    protected boolean delPost(Map<String, Object> data) throws Exception {\n        boolean result = false;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> postIdIdx = db.getMetadata().getIndexManager().getIndex(\"Post.id\");\n            OIdentifiable oid = (OIdentifiable) postIdIdx.get(data.get(\"id\"));\n            if (oid != null) {\n                ODocument post = (ODocument) oid.getRecord();\n                // remove from parent children set.\n                OIndex<?> hostIdIdx = db.getMetadata().getIndexManager().getIndex(((String)data.get(\"parentClassName\")).toLowerCase() + \"HostIdIdx\");\n                OCompositeKey parentKey = new OCompositeKey(data.get(\"parentHost\"), data.get(\"parentId\"));\n                OIdentifiable parentOid = (OIdentifiable) hostIdIdx.get(parentKey);\n                if (parentOid != null) {\n                    ODocument parent = (ODocument) parentOid.getRecord();\n                    Set children = parent.field(\"children\");\n                    children.remove(post);\n                    parent.save();\n                }\n                // remove all children\n                List<ODocument> children = post.field(\"children\");\n                if(children != null && children.size() > 0) {\n                    for(ODocument child: children) {\n                        child.delete();\n                    }\n                }\n                // remove post reference from tags.\n                // TODO iterate valueSet should be faster\n                Map<String, Object> tagMap = post.field(\"tags\");\n                if(tagMap != null && tagMap.size() > 0) {\n                    Set<String> tagSet = tagMap.keySet();\n                    String host = post.field(\"host\");\n                    String className = post.getClassName();\n                    for(String tagName: tagSet) {\n                        ODocument tag = null;\n                        // get the tag is it exists\n                        OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                        OCompositeKey key = new OCompositeKey(host, tagName, className);\n                        OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                        if (oIdentifiable != null) {\n                            tag = (ODocument) oIdentifiable.getRecord();\n                            Set links = tag.field(\"links\");\n                            links.remove(post);\n                            tag.save();\n                        }\n                    }\n                }\n                post.delete();\n                db.commit();\n                result = true;\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return result;\n    }\n\n\n    protected ODocument updPost(Map<String, Object> data) throws Exception {\n        ODocument post = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> postIdIdx = db.getMetadata().getIndexManager().getIndex(\"Post.id\");\n            OIdentifiable oid = (OIdentifiable) postIdIdx.get(data.get(\"id\"));\n            if (oid != null) {\n                post = (ODocument) oid.getRecord();\n                // can only update parent, title, source, content and tags here\n                String title = (String)data.get(\"title\");\n                if(title != null) {\n                    if(!title.equals(post.field(\"title\"))) {\n                        post.field(\"title\", title);\n                    }\n                } else {\n                    post.removeField(\"title\");\n                }\n                String source = (String)data.get(\"source\");\n                if(source != null) {\n                    if(!source.equals(post.field(\"source\"))) {\n                        post.field(\"source\", source);\n                    }\n                } else {\n                    post.removeField(\"source\");\n                }\n                String content = (String)data.get(\"content\");\n                if(content != null) {\n                    if(!content.equals(post.field(\"content\"))) {\n                        post.field(\"content\", content);\n                    }\n                } else {\n                    post.removeField(\"content\");\n                }\n                // update parent\n                ODocument currentParent = post.field(\"parent\");\n                OIndex<?> hostIdIdx = db.getMetadata().getIndexManager().getIndex(((String)data.get(\"parentClassName\")).toLowerCase() + \"HostIdIdx\");\n                OCompositeKey parentKey = new OCompositeKey(data.get(\"parentHost\"), data.get(\"parentId\"));\n                OIdentifiable parentOid = (OIdentifiable) hostIdIdx.get(parentKey);\n                if(parentOid != null) {\n                    ODocument parent = (ODocument)parentOid.getRecord();\n                    if(currentParent == null || !currentParent.field(\"id\").equals(parent.field(\"id\"))) {\n                        post.field(\"parent\", parent);\n                    }\n                }\n                // update tags\n                String host = post.field(\"host\");\n                String className = post.getClassName();\n                OSchema schema = db.getMetadata().getSchema();\n                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                Map<String, Object> tagMap = post.field(\"tags\");\n                if(tagMap != null && tagMap.size() > 0) {\n                    // There are existing tags.\n                    if(data.get(\"tags\") != null) {\n                        // both are not null, we need a comparison to figure out what to do.\n                        Set<String> inputTags = new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\")));\n                        Set<String> storedTags = tagMap.keySet();\n                        Set<String> addSet = new HashSet<String>(inputTags);\n                        Set<String> delSet = new HashSet<String>(storedTags);\n                        addSet.removeAll(storedTags);\n                        if(addSet.size() > 0) {\n                            // there are some newly added tags\n                            for(String tagName: addSet) {\n                                ODocument tag = null;\n                                // get the tag is it exists\n                                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                                if (oIdentifiable != null) {\n                                    tag = (ODocument) oIdentifiable.getRecord();\n                                    Set links = tag.field(\"links\");\n                                    links.add(post);\n                                    tag.save();\n                                } else {\n                                    tag = new ODocument(schema.getClass(\"Tag\"));\n                                    tag.field(\"host\", host);\n                                    tag.field(\"name\", tagName);\n                                    tag.field(\"class\", className);\n                                    tag.field(\"createDate\", data.get(\"updateDate\"));\n                                    tag.field(\"createUserId\", data.get(\"updateUserId\"));\n                                    Set links = new HashSet<Object>();\n                                    links.add(post);\n                                    tag.field(\"links\", links);\n                                    tag.save();\n                                }\n                                tagMap.put(tagName, tag);\n                            }\n                            post.field(\"tags\", tagMap);\n                            post.save();\n                        }\n                        delSet.removeAll(inputTags);\n                        if(delSet.size() > 0) {\n                            // there are some removed tags\n                            for(String tagName: delSet) {\n                                ODocument tag = null;\n                                // get the tag is it exists\n                                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                                if (oIdentifiable != null) {\n                                    tag = (ODocument) oIdentifiable.getRecord();\n                                    Set links = tag.field(\"links\");\n                                    links.remove(post);\n                                    tag.save();\n                                }\n                                tagMap.remove(tagName);\n                            }\n                            post.field(\"tags\", tagMap);\n                            post.save();\n                        }\n                    } else {\n                        // remove the post reference from all tags as input is empty but stored has values.\n                        // and then remove the tags from blog.\n                        Iterator it = tagMap.entrySet().iterator();\n                        while(it.hasNext()) {\n                            ORecordId tagRid = (ORecordId)it.next();\n                            ODocument tag = db.load(tagRid);\n                            Set links = tag.field(\"links\");\n                            links.remove(post);\n                            tag.save();\n                        }\n                        post.removeField(\"tags\");\n                        post.save();\n                    }\n                } else {\n                    // tagMap is null\n                    if(data.get(\"tags\") != null) {\n                        tagMap = new HashMap<String, Object>();\n                        Set<String> inputTags = new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\")));\n                        for(String tagName: inputTags) {\n                            ODocument tag = null;\n                            // get the tag if it exists\n                            OCompositeKey key = new OCompositeKey(host, tagName, className);\n                            OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                            if (oIdentifiable != null) {\n                                tag = (ODocument) oIdentifiable.getRecord();\n                                Set links = tag.field(\"links\");\n                                links.add(post);\n                                tag.save();\n                            } else {\n                                tag = new ODocument(schema.getClass(\"Tag\"));\n                                tag.field(\"host\", host);\n                                tag.field(\"name\", tagName);\n                                tag.field(\"class\", className);\n                                tag.field(\"createDate\", data.get(\"updateDate\"));\n                                tag.field(\"createUserId\", data.get(\"updateUserId\"));\n                                Set links = new HashSet<String>();\n                                links.add(post);\n                                tag.field(\"links\", links);\n                                tag.save();\n                            }\n                            tagMap.put(tagName, tag);\n                        }\n                        post.field(\"tags\", tagMap);\n                        post.save();\n                    }\n                }\n                post.field(\"updateDate\", data.get(\"updateDate\"));\n                post.field(\"updateUserId\", data.get(\"updateUserId\"));\n                post.save();\n                db.commit();\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return post;\n    }\n\n\n    protected ODocument updBlogDb(Map<String, Object> data, String userRid, String userId) throws Exception {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId((String)data.get(\"@rid\")));\n            if (blog != null) {\n                String title = (String)data.get(\"title\");\n                if(title != null && !title.equals(blog.field(\"title\"))) {\n                    blog.field(\"title\", title);\n                }\n                String source = (String)data.get(\"source\");\n                if(source != null && !source.equals(blog.field(\"source\"))) {\n                    blog.field(\"source\", source);\n                }\n                String summary = (String)data.get(\"summary\");\n                if(summary != null && !summary.equals(blog.field(\"content\"))) {\n                    blog.field(\"summary\", summary);\n                }\n                String content = (String)data.get(\"content\");\n                if(content != null && !content.equals(blog.field(\"content\"))) {\n                    blog.field(\"content\", content);\n                }\n\n                // update tags\n                String host = blog.field(\"host\");\n                String className = blog.field(\"@class\");\n                Map<String, Object> tagMap = blog.field(\"tags\");\n                if(tagMap != null && tagMap.size() > 0) {\n                    // There are existing tags.\n                    if(data.get(\"tags\") != null) {\n                        // both are not null, we need a comparison to figure out what to do.\n                        Set<String> inputTags = new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\")));\n                        Set<String> storedTags = tagMap.keySet();\n                        Set<String> addSet = new HashSet<String>(inputTags);\n                        Set<String> delSet = new HashSet<String>(storedTags);\n                        addSet.removeAll(storedTags);\n                        if(addSet.size() > 0) {\n                            for(String tagName: addSet) {\n                                ODocument tag = null;\n                                // get the tag is it exists\n                                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                                // this is a unique index, so it retrieves a OIdentifiable\n                                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                                if (oIdentifiable != null) {\n                                    tag = (ODocument) oIdentifiable.getRecord();\n                                    Set links = tag.field(\"links\");\n                                    links.add(blog.field(\"@rid\"));\n                                    tag.save();\n                                    db.commit();\n                                } else {\n                                    tag = new ODocument(schema.getClass(\"Tag\"));\n                                    tag.field(\"host\", host);\n                                    tag.field(\"name\", tagName);\n                                    tag.field(\"class\", className);\n                                    tag.field(\"createDate\", new java.util.Date());\n                                    tag.field(\"createUserRid\", new ORecordId(userRid));\n                                    Set links = new HashSet<Object>();\n                                    links.add(blog.field(\"@rid\"));\n                                    tag.field(\"links\", links);\n                                    tag.save();\n                                    db.commit();\n                                }\n                                tagMap.put(tagName, tag.field(\"@rid\"));\n                            }\n                            blog.field(\"tags\", tagMap);\n                            blog.save();\n                            db.commit();\n                        }\n                        delSet.removeAll(inputTags);\n                        if(delSet.size() > 0) {\n                            // remove the tags\n                            for(String tagName: delSet) {\n                                ODocument tag = null;\n                                // get the tag is it exists\n                                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                                // this is a unique index, so it retrieves a OIdentifiable\n                                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                                if (oIdentifiable != null) {\n                                    tag = (ODocument) oIdentifiable.getRecord();\n                                    Set links = tag.field(\"links\");\n                                    links.remove(blog.field(\"@rid\"));\n                                    tag.save();\n                                    db.commit();\n                                }\n                                tagMap.remove(tagName);\n                            }\n                            blog.field(\"tags\", tagMap);\n                            blog.save();\n                            db.commit();\n                        }\n                    } else {\n                        // remove the blog reference from all tags as input is empty but stored has values.\n                        // and then remove the tags from blog.\n                        Iterator it = tagMap.entrySet().iterator();\n                        while(it.hasNext()) {\n                            ORecordId tagRid = (ORecordId)it.next();\n                            ODocument tag = db.load(tagRid);\n                            Set links = tag.field(\"links\");\n                            links.remove(blog.field(\"@rid\"));\n                            tag.save();\n                        }\n                        blog.removeField(\"tags\");\n                        blog.save();\n                        db.commit();\n                    }\n                } else {\n                    // tagMap is null\n                    if(data.get(\"tags\") != null) {\n                        tagMap = new HashMap<String, Object>();\n                        Set<String> inputTags = new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\")));\n                        for(String tagName: inputTags) {\n                            ODocument tag = null;\n                            // get the tag if it exists\n                            OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                            // this is a unique index, so it retrieves a OIdentifiable\n                            OCompositeKey key = new OCompositeKey(host, tagName, className);\n                            OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                            if (oIdentifiable != null) {\n                                tag = (ODocument) oIdentifiable.getRecord();\n                                Set links = tag.field(\"links\");\n                                links.add(blog.field(\"@rid\"));\n                                tag.save();\n                                db.commit();\n                            } else {\n                                tag = new ODocument(schema.getClass(\"Tag\"));\n                                tag.field(\"host\", host);\n                                tag.field(\"name\", tagName);\n                                tag.field(\"class\", className);\n                                tag.field(\"createDate\", new java.util.Date());\n                                tag.field(\"createUserRid\", new ORecordId(userRid));\n                                Set links = new HashSet<String>();\n                                links.add(blog.field(\"@rid\"));\n                                tag.field(\"links\", links);\n                                tag.save();\n                                db.commit();\n                            }\n                            tagMap.put(tagName, tag.field(\"@rid\"));\n                        }\n                        blog.field(\"tags\", tagMap);\n                        blog.save();\n                        db.commit();\n                    }\n                }\n                blog.field(\"updateDate\", new java.util.Date());\n                blog.field(\"updateUserId\", userId);\n                blog.field(\"updateUserRid\", userRid);\n                blog.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n\n    protected ODocument upVotePost(Map<String, Object> data) {\n        ODocument post = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> postIdIdx = db.getMetadata().getIndexManager().getIndex(\"Post.id\");\n            OIdentifiable oid = (OIdentifiable) postIdIdx.get(data.get(\"id\"));\n            if (oid != null) {\n                post = (ODocument) oid.getRecord();\n                if(post != null) {\n                    OIndex<?> userIdIdx = db.getMetadata().getIndexManager().getIndex(\"User.userId\");\n                    OIdentifiable userOid = (OIdentifiable) postIdIdx.get(data.get(\"updateUserId\"));\n                    if(userOid != null) {\n                        ODocument user = userOid.getRecord();\n                        if(user != null) {\n                            Set upSet = post.field(\"upUsers\");\n                            if(upSet == null) {\n                                upSet = new HashSet<String>();\n                                upSet.add(user);\n                                post.field(\"upUsers\", upSet);\n                            } else {\n                                upSet.add(user);\n                            }\n                            // blindly remove the user from downUsers if it is there\n                            Set downSet = post.field(\"downUsers\");\n                            if(downSet != null) {\n                                downSet.remove(user);\n                            }\n                            post.save();\n                            db.commit();\n                        }\n                    }\n\n                }\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return post;\n    }\n\n    protected ODocument downVoteBlog(Map<String, Object> data) {\n        ODocument post = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> postIdIdx = db.getMetadata().getIndexManager().getIndex(\"Post.id\");\n            OIdentifiable oid = (OIdentifiable) postIdIdx.get(data.get(\"id\"));\n            if (oid != null) {\n                post = (ODocument) oid.getRecord();\n                if(post != null) {\n                    OIndex<?> userIdIdx = db.getMetadata().getIndexManager().getIndex(\"User.userId\");\n                    OIdentifiable userOid = (OIdentifiable) postIdIdx.get(data.get(\"updateUserId\"));\n                    if(userOid != null) {\n                        ODocument user = userOid.getRecord();\n                        if(user != null) {\n                            Set downSet = post.field(\"downUsers\");\n                            if(downSet == null) {\n                                downSet = new HashSet<String>();\n                                downSet.add(user);\n                                post.field(\"downUsers\", downSet);\n                            } else {\n                                downSet.add(user);\n                            }\n                            // blindly remove the user from upUsers if it is there\n                            Set upSet = post.field(\"upUsers\");\n                            if(upSet != null) {\n                                upSet.remove(user);\n                            }\n                            post.save();\n                            db.commit();\n                        }\n                    }\n\n                }\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return post;\n    }\n\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.AbstractPostRule",
      "createDate": "2015-01-12T03:09:17.836"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:17.836",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:50",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 27/11/14.\n */\npublic class UpdPostRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if (payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            ODocument post = DbService.getODocumentByRid(rid);\n            if (post != null) {\n                ODocument parent = post.field(\"parent\");\n                String className = parent.getClassName();\n                Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n                List roles = (List) user.get(\"roles\");\n                String userHost = (String) user.get(\"host\");\n                if (userHost != null && !userHost.equals(host)) {\n                    error = \"User can only update post from host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    if (\"Forum\".equals(className)) {\n                        // owner, admin, forumAdmin, createUser can update post\n                        if (roles.contains(\"owner\") || roles.contains(\"admin\") || roles.contains(\"forumAdmin\") || user.get(\"userId\").equals(post.field(\"createUserId\"))) {\n                            createEventMap(inputMap, user, parent);\n                        } else {\n                            error = \"Cannot update post\";\n                            inputMap.put(\"responseCode\", 401);\n                        }\n                    } else if (\"Blog\".equals(className)) {\n                        if (roles.contains(\"owner\") || roles.contains(\"admin\") || roles.contains(\"blogAdmin\") || user.get(\"userId\").equals(post.field(\"createUserId\"))) {\n                            createEventMap(inputMap, user, parent);\n                        } else {\n                            error = \"Cannot update post\";\n                            inputMap.put(\"responseCode\", 401);\n                        }\n                    } else if (\"News\".equals(className)) {\n                        if (roles.contains(\"owner\") || roles.contains(\"admin\") || roles.contains(\"newsAdmin\") || user.get(\"userId\").equals(post.field(\"createUserId\"))) {\n                            createEventMap(inputMap, user, parent);\n                        } else {\n                            error = \"Cannot update post\";\n                            inputMap.put(\"responseCode\", 401);\n                        }\n                    } else {\n                        error = \"Invalid parent class for post\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                }\n            } else {\n                error = \"Post with @rid \" + rid + \" doesn't exists\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        }\n        if (error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    void createEventMap(Map<String, Object> inputMap, Map<String, Object> user, ODocument parent) {\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        eventData.putAll(data);\n        eventData.put(\"parentClassName\", parent.getClassName());\n        eventData.put(\"parentHost\", parent.field(\"host\"));\n        eventData.put(\"parentId\", parent.field(\"id\"));\n        eventData.put(\"updateDate\", new java.util.Date());\n        eventData.put(\"updateUserId\", user.get(\"userId\"));\n        eventData.remove(\"@rid\");\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.UpdPostRule",
      "createDate": "2015-01-12T03:09:18.018"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:18.018",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:51",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.post;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 06/12/14.\n */\npublic class GetRecentPostRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        if(data.get(\"host\") == null || data.get(\"limitTo\") == null) {\n            inputMap.put(\"error\", \"Host and limitTo are required\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        } else {\n\n            // get recent post for blog\n\n            // get recent post for news\n\n            // get recent post for forum\n\n        }\n\n\n        long total = DbService.getCount(\"Post\", data);\n        if(total > 0) {\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            String posts = DbService.getData(\"Post\", data);\n            List<Map<String, Object>> jsonList = mapper.readValue(posts,\n                    new TypeReference<List<HashMap<String, Object>>>() {\n                    });\n            result.put(\"posts\", jsonList);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No post can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.GetRecentPostRule",
      "createDate": "2015-01-12T03:09:18.188"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:18.188",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:52",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.post;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 01/12/14.\n */\npublic class GetPostTreeRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n\n        long total = DbService.getCount(\"Post\", data);\n        if(total > 0) {\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            String posts = DbService.getData(\"Post\", data);\n            List<Map<String, Object>> jsonList = mapper.readValue(posts,\n                    new TypeReference<List<HashMap<String, Object>>>() {\n                    });\n            result.put(\"posts\", jsonList);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No post can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.GetPostTreeRule",
      "createDate": "2015-01-12T03:09:18.375"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:18.375",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:53",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.forum.AbstractForumRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 27/11/14.\n */\npublic class DelPostEvRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delPost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.DelPostEvRule",
      "createDate": "2015-01-12T03:09:18.561"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:18.561",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:54",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.forum.AbstractForumRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 27/11/14.\n */\npublic class AddPostEvRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addPost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.AddPostEvRule",
      "createDate": "2015-01-12T03:09:18.738"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:18.738",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:55",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.forum.AbstractForumRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 27/11/14.\n */\npublic class UpdPostEvRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.UpdPostEvRule",
      "createDate": "2015-01-12T03:09:18.948"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:18.948",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:56",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 28/11/14.\n */\npublic class UpPostEvRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upVotePost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.UpPostEvRule",
      "createDate": "2015-01-12T03:09:19.126"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:19.126",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:57",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.post;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 02/12/14.\n */\npublic class getCommentRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        long total = DbService.getCount(\"Post\", data);\n        if(total > 0) {\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            String posts = DbService.getData(\"Post\", data);\n            List<Map<String, Object>> jsonList = mapper.readValue(posts,\n                    new TypeReference<List<HashMap<String, Object>>>() {\n                    });\n            result.put(\"posts\", jsonList);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No post can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.getCommentRule",
      "createDate": "2015-01-12T03:09:19.305"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:19.305",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:58",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 27/11/14.\n */\npublic class AddPostRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String parentRid = (String)data.get(\"@rid\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            // make sure parent rid is valid.\n            ODocument parent = DbService.getODocumentByRid(parentRid);\n            if (parent != null) {\n                String className = parent.getClassName();\n                Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n                List roles = (List) user.get(\"roles\");\n                String userHost = (String) user.get(\"host\");\n                if (userHost != null && !userHost.equals(host)) {\n                    error = \"User can only add post from host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    if (\"Forum\".equals(className)) {\n                        // every login user can post in forum\n                        createEventMap(inputMap, user, parent);\n                    } else if (\"Blog\".equals(className)) {\n                        if (!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"blogAdmin\") && !roles.contains(\"blogUser\")) {\n                            error = \"Role owner or admin or blogAdmin or blogUser is required to add post\";\n                            inputMap.put(\"responseCode\", 401);\n                        } else {\n                            createEventMap(inputMap, user, parent);\n                        }\n                    } else if (\"News\".equals(className)) {\n                        if (!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"newsAdmin\") && !roles.contains(\"newsUser\")) {\n                            error = \"Role owner or admin or newsAdmin or newsUser is required to add post\";\n                            inputMap.put(\"responseCode\", 401);\n                        } else {\n                            createEventMap(inputMap, user, parent);\n                        }\n                    } else {\n                        error = \"Invalid parent class for post\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                }\n            } else {\n                error = \"Parent doesn't exist\";\n                inputMap.put(\"responseCode\", 400);\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    void createEventMap(Map<String, Object> inputMap, Map<String, Object> user, ODocument parent) {\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n        // generate post Id from counter.\n        eventData.put(\"id\", DbService.incrementCounter(\"postId\"));\n        eventData.put(\"createDate\", new java.util.Date());\n        eventData.put(\"createUserId\", user.get(\"userId\"));\n        // replace parent @rid with host and id\n        eventData.remove(\"@rid\");\n        eventData.put(\"parentClassName\", parent.getClassName());\n        eventData.put(\"parentHost\", parent.field(\"host\"));\n        eventData.put(\"parentId\", parent.field(\"id\"));\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.AddPostRule",
      "createDate": "2015-01-12T03:09:19.590"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:19.590",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:59",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 28/11/14.\n */\npublic class UpPostRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\",401);\n        } else {\n            String rid = (String)data.get(\"@rid\");\n            if(rid != null) {\n                ODocument post = DbService.getODocumentByRid(rid);\n                if(post == null) {\n                    error =\"Post with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"id\", post.field(\"id\"));\n                    eventData.put(\"updateDate\", new java.util.Date());\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            } else {\n                error = \"@rid is required\";\n                inputMap.put(\"responseCode\", 400);\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.UpPostRule",
      "createDate": "2015-01-12T03:09:19.777"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:19.777",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:60",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.injector.main.feed;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 9/5/2014.\n */\npublic class InjClassFeedEvRule extends ClassFeedRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        addFeed(data, user);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.injector.main.feed.InjClassFeedEvRule",
      "createDate": "2015-01-12T03:09:19.965"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:19.965",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:61",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.injector.main.feed;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\n\nimport java.io.Serializable;\nimport java.lang.reflect.Field;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.*;\nimport javax.naming.Context;\nimport javax.naming.InitialContext;\n\n/**\n * Created by steve on 9/19/2014.\n *\n * Parent rule that provide some utilities to all the injection rules.\n */\npublic abstract class FeedRule implements Rule {\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    public String getRequestId() {\n        // all environment share the same counter so that the feed can use it as index.\n        long id = DbService.incrementCounter(\"injector.requestId\");\n        return \"INJN\" + id;\n    }\n\n    public Map<String, Object> addFeed(Map<String, Object> fields, Map<String, Object> user) throws Exception {\n        Map<String, Object> map = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            ODocument doc = new ODocument(fields);\n            doc.setClassName(\"Feed\");\n            doc.field(\"createDate\", new java.util.Date());\n            doc.field(\"createUserId\", user.get(\"userId\"));\n            doc.save();\n            db.commit();\n            String json  = doc.toJSON();\n            map = mapper.readValue(json, new TypeReference<HashMap<String, Object>>() {});\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return map;\n    }\n\n    public void updFeedMeta(Map<String, Object> fields, Map<String, Object> user) throws Exception {\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> requestIdIdx = db.getMetadata().getIndexManager().getIndex(\"Feed.requestId\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OIdentifiable oId = (OIdentifiable) requestIdIdx.get(fields.get(\"requestId\"));\n            if (oId != null) {\n                ODocument doc = oId.getRecord();\n                doc.field(\"processTypeCd\", fields.get(\"processTypeCd\"));\n                doc.field(\"processSubtypeCd\", fields.get(\"processSubtypeCd\"));\n                doc.field(\"updateUserId\", user.get(\"userId\"));\n                doc.field(\"updateDate\", new java.util.Date());\n                doc.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n    }\n\n    protected long getTotalNumberFeed(Map<String, Object> criteria) {\n        long total = 0;\n        StringBuilder sql = new StringBuilder(\"SELECT COUNT(*) as count FROM Feed\");\n\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            total = ((ODocument)db.query(new OSQLSynchQuery<ODocument>(sql.toString())).get(0)).field(\"count\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return total;\n    }\n\n    protected List<String> getDataFeedTypes() {\n        List<String> items = null;\n        String sql = \"SELECT DISTINCT(dataFeedType) FROM Feed \";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> list = db.command(query).execute();\n            if(list.size() > 0) {\n                items = new ArrayList<String>();\n                for(ODocument doc: list) {\n                    items.add(doc.field(\"DISTINCT\"));\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return items;\n    }\n\n    protected List<String> getProcessTypeCds() {\n        List<String> items = null;\n        String sql = \"SELECT DISTINCT(processTypeCd) FROM Feed \";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> list = db.command(query).execute();\n            if(list.size() > 0) {\n                items = new ArrayList<String>();\n                for(ODocument doc: list) {\n                    items.add(doc.field(\"DISTINCT\"));\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return items;\n    }\n\n    protected List<String> getProcessSubtypeCds() {\n        List<String> items = null;\n        String sql = \"SELECT DISTINCT(processSubtypeCd) FROM Feed \";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql.toString());\n            List<ODocument> list = db.command(query).execute();\n            if(list.size() > 0) {\n                items = new ArrayList<String> ();\n                for(ODocument doc: list) {\n                    items.add(doc.field(\"DISTINCT\"));\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return items;\n    }\n\n    protected List<String> getCreateUserIds() {\n        List<String> items = null;\n        String sql = \"SELECT DISTINCT(createUserId) FROM Feed \";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql.toString());\n            List<ODocument> list = db.command(query).execute();\n            if(list.size() > 0) {\n                items = new ArrayList<String> ();\n                for(ODocument doc: list) {\n                    items.add(doc.field(\"DISTINCT\"));\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return items;\n    }\n\n    protected List<String> getUpdateUserIds() {\n        List<String> items = null;\n        String sql = \"SELECT DISTINCT(updateUserId) FROM Feed \";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql.toString());\n            List<ODocument> list = db.command(query).execute();\n            if(list.size() > 0) {\n                items = new ArrayList<String> ();\n                for(ODocument doc: list) {\n                    items.add(doc.field(\"DISTINCT\"));\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return items;\n    }\n\n    protected String getFeed(Map<String, Object> criteria) {\n        String json = null;\n        StringBuilder sql = new StringBuilder(\"SELECT FROM Feed \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sql.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sql.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sql.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sql.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql.toString());\n            List<ODocument> list = db.command(query).execute();\n            if(list.size() > 0) {\n                json = OJSONWriter.listToJSON(list, null);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    public Field findInheritedField(Class clazz, String fieldName) throws NoSuchFieldException {\n        if (clazz == null)\n            throw new NoSuchFieldException(\"No class\");\n        if (fieldName == null)\n            throw new NoSuchFieldException(\"No field name\");\n        try {\n            return clazz.getDeclaredField(fieldName);\n        } catch (NoSuchFieldException e) {\n            System.out.println(\"No field name \" + fieldName);\n            return findInheritedField(clazz.getSuperclass(), fieldName);\n        }\n    }\n\n    public Object getInputField(String value, Object type) throws ParseException{\n        if (type.equals(Long.TYPE)) return new Long(value);\n        else if (type.equals(Integer.TYPE)) return new Integer(value);\n        else if (type.equals(Boolean.TYPE)) return new Boolean(value);\n        else {\n            if (type.equals(Date.class)){\n                DateFormat format = new SimpleDateFormat(\"dd-MMM-yyyy\");\n                return format.parse(value);\n            }\n        }\n        return value;\n    }\n    /*\n\n    void sendToQueue(String env, IDataFeed dataFeed) throws Exception {\n        Map<String, Object> injectorEnvMap = ServiceLocator.getInstance().getInjectorEnvMap();\n        Map<String, Object> envMap = (Map<String, Object>)injectorEnvMap.get(env + dataFeed.getDataFeedType());\n        try {\n            Context context = new InitialContext(new Hashtable<>(envMap));\n\n            QueueConnectionFactory queueConnectionFactory =\n                    (QueueConnectionFactory)context.lookup((String)envMap.get(\"queueFactory\"));\n            QueueConnection conn = queueConnectionFactory.createQueueConnection();\n            QueueSession session = conn.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);\n\n            // Lookup the Queue and create the sender\n            javax.jms.Queue queue = (javax.jms.Queue)context.lookup((String)envMap.get(\"queueName\"));\n            QueueSender sender = session.createSender(queue);\n            // Create message and send it out\n            ObjectMessage message = session.createObjectMessage();\n            message.setObject((Serializable)dataFeed);\n            sender.send(message);\n            // Close down Session & Connection\n            session.close();\n            conn.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    */\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.injector.main.feed.FeedRule",
      "createDate": "2015-01-12T03:09:20.146"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:20.146",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:62",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.injector.main.feed;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 04/10/14.\n */\npublic class UpdFeedMetaEvRule extends FeedRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        // update process type and process subtype\n        updFeedMeta(data, user);\n        // TODO update tags for the first five\n\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.injector.main.feed.UpdFeedMetaEvRule",
      "createDate": "2015-01-12T03:09:20.317"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:20.317",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:63",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.injector.main.feed;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\n\nimport java.lang.reflect.Field;\nimport java.text.SimpleDateFormat;\nimport java.util.*;\n\n/**\n * Created by husteve on 10/2/2014.\n */\npublic abstract class ClassFeedRule extends FeedRule implements Rule {\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    public String getLoanNumber() {\n        long num = DbService.incrementCounter(\"injector.loanNumber\");\n        return \"\" + num;\n    }\n    /*\n    public void send(IDataFeed dataFeed, Map<String, Object> fields) throws Exception {\n        // the fields coming from UI has a lot more elements then need by inject. create a copy\n        // for injector so that we don't need to worry about it if new element is added.\n        Map<String, Object> toBeInj = new HashMap<String, Object>();\n        Date date = new java.util.Date();\n        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MMM-yyyy\");\n        String d = sdf.format(date);\n        // TODO use datepicker to default current date.\n        toBeInj.put(\"reportDate\", d);\n        toBeInj.put(\"processingDate\", d);\n\n        // put other dates here as injector code in ROP has a bug that expect them populated.\n        toBeInj.put(\"approvedDate\", d);\n        toBeInj.put(\"creditScoreDate\", d);\n        toBeInj.put(\"dateOpened\", d);\n        toBeInj.put(\"disbursementDate\", d);\n        toBeInj.put(\"maturityDate\", d);\n        toBeInj.put(\"nextReviewDate\", d);\n        toBeInj.put(\"terminationDate\", d);\n\n        // generate sequence of requestId\n        String requestId = getRequestId();\n        toBeInj.put(\"requestId\", requestId);\n        // replace loadNumber only if it is empty\n        String loanNumber = (String)fields.get(\"loanNumber\");\n        if(loanNumber == null) {\n            loanNumber = getLoanNumber();\n            toBeInj.put(\"loanNumber\", loanNumber);\n            fields.put(\"loanNumber\", loanNumber);\n        }\n\n        toBeInj.put(\"messageNumber\", fields.get(\"messageNumber\"));\n        toBeInj.put(\"pid\", fields.get(\"pid\"));\n        toBeInj.put(\"hppInd\", fields.get(\"hppInd\"));\n        toBeInj.put(\"loanCategroy\", fields.get(\"loanCategroy\"));\n        toBeInj.put(\"debtConsolidation\", fields.get(\"debtConsolidation\"));\n        toBeInj.put(\"incomeVerification\", fields.get(\"incomeVerification\"));\n        toBeInj.put(\"liabilityType\", fields.get(\"liabilityType\"));\n        toBeInj.put(\"plcPurposeCode\", fields.get(\"plcPurposeCode\"));\n        toBeInj.put(\"fullLiabilityIndicator\", fields.get(\"fullLiabilityIndicator\"));\n        toBeInj.put(\"solicitorName\", fields.get(\"solicitorName\"));\n        toBeInj.put(\"propertyProvCode\", fields.get(\"propertyProvCode\"));\n        toBeInj.put(\"centreCode\", fields.get(\"centreCode\"));\n        toBeInj.put(\"customerName\", fields.get(\"customerName\"));\n        toBeInj.put(\"postNumber\", fields.get(\"postNumber\"));\n        toBeInj.put(\"transit\", fields.get(\"transit\"));\n        toBeInj.put(\"cid\", fields.get(\"cid\"));\n        toBeInj.put(\"fundsDisbursed\", fields.get(\"fundsDisbursed\"));\n        toBeInj.put(\"relationship\", fields.get(\"relationship\"));\n        toBeInj.put(\"marketingSourceCode\", fields.get(\"marketingSourceCode\"));\n        toBeInj.put(\"provinceCode\", fields.get(\"provinceCode\"));\n        toBeInj.put(\"newConstructionInd\", fields.get(\"newConstructionInd\"));\n\n        // put dataFeedType into the input fields here as it is not coming from UI.\n        fields.put(\"dataFeedType\", dataFeed.getDataFeedType());\n        fields.put(\"requestId\", requestId);\n\n        Class beanClass = dataFeed.getClass();\n        Field field = null;\n\n        Set entries = toBeInj.entrySet();\n        for (Iterator it = entries.iterator(); it.hasNext(); ) {\n            Map.Entry entry = (Map.Entry) it.next();\n            Object key = entry.getKey();\n            Object value = entry.getValue();\n            if (value != null && !value.equals(\"\")) {\n                field = findInheritedField(beanClass, (String) key);\n                //set the value to the correct data type\n                value = getInputField(value.toString(), field.getType());\n                field.setAccessible(true);\n                field.set(dataFeed, value);\n            }\n        }\n\n        // send the dataFeed here.\n        sendToQueue((String)fields.get(\"environment\"), dataFeed);\n    }\n    */\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.injector.main.feed.ClassFeedRule",
      "createDate": "2015-01-12T03:09:20.489"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:20.489",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:64",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.injector.main.feed;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 04/10/14.\n */\npublic class UpdFeedMetaRule extends FeedRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        // make sure payload is not null. If you have payload that means the token is valid and not expired.\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\",401);\n        } else {\n            // TODO should I check the number of tags?\n\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.injector.main.feed.UpdFeedMetaRule",
      "createDate": "2015-01-12T03:09:20.659"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:20.659",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:65",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.injector.main.feed;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/3/2014.\n */\npublic class InjAllFeedRule extends FeedRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        // make sure payload is not null. If you have payload that means the token is valid and not expired.\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\",401);\n        } else {\n            String environment = (String)data.get(\"environment\");\n            String strFeeds = (String)data.get(\"feeds\");\n            ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n            List<Map<String, Object>> feeds = mapper.readValue(strFeeds,\n                    new TypeReference<List<Map<String, Object>>>() {\n                    });\n            // put the json objects for async rule to save the feeds.\n            data.put(\"feeds\", feeds);\n            for (Map<String, Object> feed : feeds) {\n                feed.put(\"environment\",environment);\n                if(\"CLASS\".equals(feed.get(\"dataFeedType\"))) {\n                    InjClassFeedRule valRule = new InjClassFeedRule();\n                    Map<String, Object> map = new HashMap<>();\n                    map.put(\"data\", feed);\n                    map.put(\"payload\", payload);\n                    valRule.execute(map);\n                } else {\n                    error = \"dataFeedType \" + feed.get(\"dataFeedType\") + \" is not supported.\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.injector.main.feed.InjAllFeedRule",
      "createDate": "2015-01-12T03:09:20.824"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:20.824",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:66",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.injector.main.feed;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 9/5/2014.\n */\npublic class InjClassFeedRule extends ClassFeedRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        // make sure payload is not null. If you have payload that means the token is valid and not expired.\n        String error = null;\n        if(payload == null) {\n            error =\"Login is required\";\n            inputMap.put(\"responseCode\",401);\n        } else {\n            // now we need to construct the bean and send to the queue.\n            /*\n            IDataFeed dataFeed = new ClassDataFeed();\n            send(dataFeed, data);\n            */\n            // data has been enriched with requestId, dataFeedType and LoanNumber etc.\n            // now we need to remove all the orientdb attributes in order to save again.\n            data.remove(\"@type\");\n            data.remove(\"@rid\");\n            data.remove(\"@version\");\n            data.remove(\"@class\");\n            data.remove(\"@fieldTypes\");\n            inputMap.put(\"result\", data.get(\"requestId\"));\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.injector.main.feed.InjClassFeedRule",
      "createDate": "2015-01-12T03:09:21.020"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:21.020",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:67",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.injector.main.feed;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/3/2014.\n */\npublic class InjAllFeedEvRule extends FeedRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        List<Map<String, Object>> feeds = (List<Map<String, Object>>)data.get(\"feeds\");\n        for (Map<String, Object> feed : feeds) {\n            addFeed(feed, user);\n        }\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.injector.main.feed.InjAllFeedEvRule",
      "createDate": "2015-01-12T03:09:21.198"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:21.198",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:68",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.injector.main.feed;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 9/29/2014.\n */\npublic class GetFeedRule extends FeedRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        long total = getTotalNumberFeed(data);\n        if(total > 0) {\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            List<String> dataFeedTypes = getDataFeedTypes();\n            if(dataFeedTypes != null) {\n                result.put(\"dataFeedTypes\", dataFeedTypes);\n            }\n            List<String> processTypeCds = getProcessTypeCds();\n            if(processTypeCds != null) {\n                result.put(\"processTypeCds\", processTypeCds);\n            }\n            List<String> processSubtypeCds = getProcessSubtypeCds();\n            if(processSubtypeCds != null) {\n                result.put(\"processSubtypeCds\", processSubtypeCds);\n            }\n            List<String> createUserIds = getCreateUserIds();\n            if(createUserIds != null) {\n                result.put(\"createUserIds\", createUserIds);\n            }\n            List<String> updateUserIds = getUpdateUserIds();\n            if(updateUserIds != null) {\n                result.put(\"updateUserIds\", updateUserIds);\n            }\n            String feeds = getFeed(data);\n            List<Map<String, Object>> jsonList = mapper.readValue(feeds,\n                    new TypeReference<List<HashMap<String, Object>>>() {\n                    });\n            result.put(\"feeds\", jsonList);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No feed can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.injector.main.feed.GetFeedRule",
      "createDate": "2015-01-12T03:09:21.393"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:21.393",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:69",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 9/24/2014.\n */\npublic class LogOutUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        logOut(data);\n        // TODO update global online user count\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.LogOutUserEvRule",
      "createDate": "2015-01-12T03:09:21.581"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:21.581",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:70",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class DownUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        downVoteUser(data);\n        // TODO refresh hot user list and code user list\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DownUserEvRule",
      "createDate": "2015-01-12T03:09:21.752"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:21.752",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:71",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 8/29/2014.\n */\npublic class DelUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String userId = (String)data.get(\"userId\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"userAdmin\")) {\n                error = \"Role owner or admin or userAdmin is required to delete user\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null && !host.equals(data.get(\"host\"))) {\n                    error = \"User can only delete user from host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    ODocument deleteUser = null;\n                    if(rid == null && userId == null) {\n                        inputMap.put(\"error\", \"@rid or userId is required\");\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        if(rid != null) {\n                            deleteUser = DbService.getODocumentByRid(rid);\n                            if(deleteUser == null) {\n                                error = \"User with rid \" + rid + \" cannot be found.\";\n                                inputMap.put(\"responseCode\", 404);\n                            }\n                        } else {\n                            deleteUser = getUserByUserId(userId);\n                            if(deleteUser == null) {\n                                error = \"User with userId \" + userId + \" cannot be found.\";\n                                inputMap.put(\"responseCode\", 404);\n                            }\n                        }\n                        if(deleteUser != null) {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"userId\", deleteUser.field(\"userId\").toString());\n                        }\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DelUserRule",
      "createDate": "2015-01-12T03:09:21.915"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:21.915",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:72",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.JwtUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.ORecord;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport org.slf4j.LoggerFactory;\n\nimport java.time.Instant;\nimport java.time.LocalDate;\nimport java.time.ZoneId;\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * Created by steve on 9/23/2014.\n */\npublic abstract class AbstractUserRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractUserRule.class);\n\n    public static final String EMAIL_PATTERN = \"^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@\"\n        + \"[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$\";\n    Pattern pattern = Pattern.compile(EMAIL_PATTERN);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    protected boolean isUserInDbByEmail(String email) {\n        boolean userInDb = false;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OIndex<?> emailIdx = db.getMetadata().getIndexManager().getIndex(\"User.email\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            userInDb = emailIdx.contains(email);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return userInDb;\n    }\n\n    protected boolean isUserInDbByUserId(String userId) {\n        boolean userInDb = false;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OIndex<?> userIdIdx = db.getMetadata().getIndexManager().getIndex(\"User.userId\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            userInDb = userIdIdx.contains(userId);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return userInDb;\n    }\n\n    protected ODocument getUserByUserId(String userId) {\n        ODocument user = null;\n        StringBuilder sb = new StringBuilder(\"SELECT FROM User WHERE userId = '\");\n        sb.append(userId).append(\"'\");\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sb.toString());\n            List<ODocument> list = db.command(query.setFetchPlan(\"*:-1\")).execute();\n            if(list.size() > 0) {\n                user = list.get(0);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return user;\n    }\n\n    protected ODocument getUserByEmail(String email) {\n        ODocument user = null;\n        StringBuilder sb = new StringBuilder(\"SELECT FROM User WHERE email = '\");\n        sb.append(email).append(\"' FETCHPLAN credential:1\");\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sb.toString());\n            List<ODocument> list = db.command(query).execute();\n            if(list.size() > 0) {\n                user = list.get(0);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return user;\n    }\n\n    protected ODocument addUser(Map<String, Object> data) throws Exception {\n        ODocument user = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OSchema schema = db.getMetadata().getSchema();\n            ODocument credential = new ODocument(schema.getClass(\"Credential\"));\n            credential.field(\"password\", data.get(\"password\"));\n            credential.save();\n            user = new ODocument(schema.getClass(\"User\"));\n            user.field(\"host\", data.get(\"host\"));\n            user.field(\"userId\", data.get(\"userId\"));\n            user.field(\"email\", data.get(\"email\"));\n            user.field(\"firstName\", data.get(\"firstName\"));\n            user.field(\"lastName\", data.get(\"lastName\"));\n            user.field(\"karma\", 0);\n            List<String> roles = new ArrayList<String>();\n            roles.add(\"user\"); // default role for sign up users, more roles can be added later by admin\n            user.field(\"roles\", roles);\n            user.field(\"credential\", credential);\n            user.field(\"createDate\", new java.util.Date());\n            user.save();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return user;\n    }\n\n    protected boolean delUser(Map<String, Object> data) throws Exception {\n        boolean result = false;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> userIdIdx = db.getMetadata().getIndexManager().getIndex(\"User.userId\");\n            OIdentifiable oid = (OIdentifiable) userIdIdx.get((String)data.get(\"userId\"));\n            if (oid != null) {\n                ODocument user = (ODocument) oid.getRecord();\n                ODocument credential = (ODocument)user.field(\"credential\");\n                credential.delete();\n                user.delete();\n                db.commit();\n                result = true;\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return result;\n    }\n\n    protected ODocument updPassword(Map<String, Object> data) throws Exception {\n        ODocument credential = null;\n        ODocument user = getUserByUserId((String)data.get(\"userId\"));\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            user.field(\"updateDate\", data.get(\"updateDate\"));\n            user.save();\n            credential = user.field(\"credential\");\n            if (credential != null) {\n                credential.field(\"password\", data.get(\"password\"));\n                credential.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return credential;\n    }\n\n    protected ODocument addRole(Map<String, Object> data) throws Exception {\n        ODocument user = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> userIdIdx = db.getMetadata().getIndexManager().getIndex(\"User.userId\");\n            OIdentifiable oid = (OIdentifiable) userIdIdx.get((String)data.get(\"userId\"));\n            if (oid != null) {\n                user = (ODocument) oid.getRecord();\n                List roles = user.field(\"roles\");\n                roles.add((String)data.get(\"role\"));\n                user.field(\"updateDate\", data.get(\"updateDate\"));\n                user.field(\"updateUserId\", data.get(\"updateUserId\"));\n                user.save();\n                db.commit();\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return user;\n    }\n\n    protected ODocument delRole(Map<String, Object> data) throws Exception {\n        ODocument user = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> userIdIdx = db.getMetadata().getIndexManager().getIndex(\"User.userId\");\n            OIdentifiable oid = (OIdentifiable) userIdIdx.get((String)data.get(\"userId\"));\n            if (oid != null) {\n                user = (ODocument) oid.getRecord();\n                List roles = user.field(\"roles\");\n                roles.remove((String)data.get(\"role\"));\n                user.field(\"updateDate\", data.get(\"updateDate\"));\n                user.field(\"updateUserId\", data.get(\"updateUserId\"));\n                user.save();\n                db.commit();\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return user;\n    }\n\n    protected ODocument updLockByUserId(Map<String, Object> data) throws Exception {\n        ODocument user = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> userIdIdx = db.getMetadata().getIndexManager().getIndex(\"User.userId\");\n            OIdentifiable oid = (OIdentifiable) userIdIdx.get((String)data.get(\"userId\"));\n            if (oid != null) {\n                user = (ODocument) oid.getRecord();\n                user.field(\"locked\", data.get(\"locked\"));\n                user.field(\"updateDate\", data.get(\"updateDate\"));\n                user.field(\"updateUserId\", data.get(\"updateUserId\"));\n                user.save();\n                db.commit();\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return user;\n    }\n\n    protected ODocument updUser(Map<String, Object> data) throws Exception {\n        ODocument user = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> userIdIdx = db.getMetadata().getIndexManager().getIndex(\"User.userId\");\n            OIdentifiable oid = (OIdentifiable) userIdIdx.get((String)data.get(\"userId\"));\n            if (oid != null) {\n                user = (ODocument) oid.getRecord();\n                String firstName = (String)data.get(\"firstName\");\n                if(firstName != null && !firstName.equals(user.field(\"firstName\"))) {\n                    user.field(\"firstName\", firstName);\n                }\n                String lastName = (String)data.get(\"lastName\");\n                if(lastName != null && !lastName.equals(user.field(\"lastName\"))) {\n                    user.field(\"lastName\", lastName);\n                }\n                user.field(\"updateDate\", data.get(\"updateDate\"));\n                user.save();\n                db.commit();\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return user;\n    }\n\n    protected void signIn(Map<String, Object> data) throws Exception {\n        String hashedRefreshToken = (String)data.get(\"hashedRefreshToken\");\n        if(hashedRefreshToken != null) {\n            ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n            try {\n                db.begin();\n                OIndex<?> userIdIdx = db.getMetadata().getIndexManager().getIndex(\"User.userId\");\n                OIdentifiable oid = (OIdentifiable) userIdIdx.get((String)data.get(\"userId\"));\n                if (oid != null) {\n                    ODocument user = (ODocument) oid.getRecord();\n                    ODocument credential = (ODocument)user.field(\"credential\");\n                    if(credential != null) {\n                        String host = (String)data.get(\"host\");\n                        // get hostRefreshTokens map here.\n                        Map hostRefreshTokens = credential.field(\"hostRefreshTokens\");\n                        if(hostRefreshTokens != null) {\n                            // logged in before, check if logged in from the host.\n                            List<String> refreshTokens = (List)hostRefreshTokens.get(host);\n                            if(refreshTokens != null) {\n                                // max refresh tokens for user is 10. max 10 devices.\n                                if(refreshTokens.size() >= 10) {\n                                    refreshTokens.remove(0);\n                                }\n                                refreshTokens.add(hashedRefreshToken);\n                            } else {\n                                refreshTokens = new ArrayList<String>();\n                                refreshTokens.add(hashedRefreshToken);\n                                hostRefreshTokens.put(host, refreshTokens);\n                            }\n\n                        } else {\n                            // never logged in, create the map.\n                            hostRefreshTokens = new HashMap<String, List<String>>();\n                            List<String> refreshTokens = new ArrayList<String>();\n                            refreshTokens.add(hashedRefreshToken);\n                            hostRefreshTokens.put(host, refreshTokens);\n                            credential.field(\"hostRefreshTokens\", hostRefreshTokens);\n                        }\n                        credential.save();\n                        db.commit();\n                    }\n                }\n            } catch (Exception e) {\n                db.rollback();\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                db.close();\n            }\n        } else {\n            logger.debug(\"There is no hashedRefreshToken as user didn't select remember me. Do nothing\");\n        }\n    }\n\n    protected void logOut(Map<String, Object> data) throws Exception {\n        String refreshToken = (String)data.get(\"refreshToken\");\n        if(refreshToken != null) {\n            ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n            try {\n                db.begin();\n                OIndex<?> userIdIdx = db.getMetadata().getIndexManager().getIndex(\"User.userId\");\n                OIdentifiable oid = (OIdentifiable) userIdIdx.get((String)data.get(\"userId\"));\n                if (oid != null) {\n                    ODocument user = (ODocument) oid.getRecord();\n                    ODocument credential = (ODocument)user.field(\"credential\");\n                    if(credential != null) {\n                        // now remove the refresh token\n                        String host = (String)data.get(\"host\");\n                        logger.debug(\"logOut to remove refreshToken {} from host {}\" , refreshToken, host);\n                        Map hostRefreshTokens = credential.field(\"hostRefreshTokens\");\n                        if(hostRefreshTokens != null) {\n                            // logged in before, check if logged in from the host.\n                            List<String> refreshTokens = (List)hostRefreshTokens.get(host);\n                            if(refreshTokens != null) {\n                                String hashedRefreshToken = HashUtil.md5(refreshToken);\n                                refreshTokens.remove(hashedRefreshToken);\n                            }\n                        } else {\n                            logger.error(\"There is no refresh tokens\");\n                        }\n                        credential.save();\n                        db.commit();\n                    }\n                }\n            } catch (Exception e) {\n                db.rollback();\n                e.printStackTrace();\n                throw e;\n            } finally {\n                db.close();\n            }\n        } else {\n            logger.debug(\"There is no hashedRefreshToken as user didn't pass in refresh token when logging out. Do nothing\");\n        }\n    }\n\n    boolean checkRefreshToken(ODocument credential, String host, String refreshToken) throws Exception {\n        boolean result = false;\n        if(credential != null && refreshToken != null) {\n            Map hostRefreshTokens = credential.field(\"hostRefreshTokens\");\n            if(hostRefreshTokens != null) {\n                List<String> refreshTokens = (List)hostRefreshTokens.get(host);\n                if(refreshTokens != null) {\n                    String hashedRefreshToken = HashUtil.md5(refreshToken);\n                    for(String token: refreshTokens) {\n                        if(hashedRefreshToken.equals(token)) {\n                            result = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                logger.error(\"There is no refresh tokens\");\n            }\n        }\n        return result;\n    }\n\n    protected void upVoteUser(Map<String, Object> data) {\n        ODocument user = null;\n        ODocument voteUser = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> userIdIdx = db.getMetadata().getIndexManager().getIndex(\"User.userId\");\n            OIdentifiable userOid = (OIdentifiable) userIdIdx.get((String)data.get(\"userId\"));\n            OIdentifiable voteUserOid = (OIdentifiable)userIdIdx.get((String)data.get(\"voteUserId\"));\n            if (userOid != null && voteUserOid != null) {\n                user = (ODocument) userOid.getRecord();\n                voteUser = (ODocument)voteUserOid.getRecord();\n                Set upSet = user.field(\"upUsers\");\n                if(upSet == null) {\n                    upSet = new HashSet<String>();\n                    upSet.add(voteUser);\n                    user.field(\"upUsers\", upSet);\n                } else {\n                    upSet.add(voteUser);\n                }\n                Set downSet = user.field(\"downUsers\");\n                if(downSet != null) {\n                    downSet.remove(voteUser);\n                }\n                user.field(\"updateDate\", data.get(\"updateDate\"));\n                user.save();\n                db.commit();\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n    }\n\n    protected void downVoteUser(Map<String, Object> data) {\n        ODocument user = null;\n        ODocument voteUser = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> userIdIdx = db.getMetadata().getIndexManager().getIndex(\"User.userId\");\n            OIdentifiable userOid = (OIdentifiable) userIdIdx.get((String)data.get(\"userId\"));\n            OIdentifiable voteUserOid = (OIdentifiable)userIdIdx.get((String)data.get(\"voteUserId\"));\n            if (userOid != null && voteUserOid != null) {\n                user = (ODocument) userOid.getRecord();\n                voteUser = (ODocument)voteUserOid.getRecord();\n                Set downSet = user.field(\"downUsers\");\n                if(downSet == null) {\n                    downSet = new HashSet<String>();\n                    downSet.add(voteUser);\n                    user.field(\"downUsers\", downSet);\n                } else {\n                    downSet.add(voteUser);\n                }\n                Set upSet = user.field(\"upUsers\");\n                if(upSet != null) {\n                    upSet.remove(voteUser);\n                }\n                user.field(\"updateDate\", data.get(\"updateDate\"));\n                user.save();\n                db.commit();\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n    }\n\n    // TODO refactor it to be generic. table name as part of the criteria? or a parameter?\n    protected long getTotalNumberUserFromDb(Map<String, Object> criteria) {\n        long total = 0;\n        StringBuilder sql = new StringBuilder(\"SELECT COUNT(*) as count FROM User\");\n\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            total = ((ODocument)db.query(new OSQLSynchQuery<ODocument>(sql.toString())).get(0)).field(\"count\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return total;\n    }\n\n    protected List<String> getRoles() {\n        List<String> roles = null;\n        String sql = \"SELECT id FROM Role\";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> list = db.command(query).execute();\n            if(list.size() > 0) {\n                roles = new ArrayList<String>();\n                for(ODocument doc: list) {\n                    roles.add(doc.field(\"id\"));\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return roles;\n    }\n\n    protected String getUserFromDb(Map<String, Object> criteria) {\n        String json = null;\n        StringBuilder sql = new StringBuilder(\"SELECT FROM User \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sql.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sql.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sql.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sql.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql.toString());\n            List<ODocument> list = db.command(query).execute();\n            if(list.size() > 0) {\n                json = OJSONWriter.listToJSON(list, null);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    boolean isEmail(String userIdEmail) {\n        Matcher matcher = pattern.matcher(userIdEmail);\n        return matcher.matches();\n    }\n\n    String generateToken(ODocument user) throws Exception {\n        Map<String, Object> jwtMap = new LinkedHashMap<String, Object>();\n        jwtMap.put(\"@rid\", user.field(\"@rid\").toString());\n        jwtMap.put(\"userId\", user.field(\"userId\"));\n        if(user.field(\"host\") != null) {\n            jwtMap.put(\"host\", user.field(\"host\"));\n        }\n        jwtMap.put(\"roles\", user.field(\"roles\"));\n        return JwtUtil.getJwt(jwtMap);\n    }\n\n    boolean checkPassword(ODocument user, String inputPassword) throws Exception {\n        ODocument credential = (ODocument)user.field(\"credential\");\n        String storedPassword = (String) credential.field(\"password\");\n        return HashUtil.validatePassword(inputPassword, storedPassword);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.AbstractUserRule",
      "createDate": "2015-01-12T03:09:22.092"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:22.092",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:73",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.JwtUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.time.Instant;\nimport java.util.*;\n\n/**\n * Created by steve on 14/09/14.\n *\n */\npublic class SignInUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String userIdEmail = (String) data.get(\"userIdEmail\");\n        String inputPassword = (String) data.get(\"password\");\n        Boolean rememberMe = (Boolean)data.get(\"rememberMe\");\n\n        String error = null;\n        ODocument user = null;\n        if(isEmail(userIdEmail)) {\n            user = getUserByEmail(userIdEmail);\n        } else {\n            user = getUserByUserId(userIdEmail);\n        }\n        if(user != null) {\n            if(checkPassword(user, inputPassword)) {\n                String jwt = generateToken(user);\n                if(jwt != null) {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    Map<String, String> tokens = new HashMap<String, String>();\n                    tokens.put(\"accessToken\", jwt);\n                    if(rememberMe != null && rememberMe) {\n                        // generate refreshToken\n                        String refreshToken = HashUtil.generateUUID();\n                        tokens.put(\"refreshToken\", refreshToken);\n                        String hashedRefreshToken = HashUtil.md5(refreshToken);\n                        eventData.put(\"hashedRefreshToken\", hashedRefreshToken);\n                    }\n                    inputMap.put(\"result\", mapper.writeValueAsString(tokens));\n                    eventData.put(\"userId\", user.field(\"userId\"));\n                    eventData.put(\"host\", data.get(\"host\"));  // add host as refreshToken will be associate with host.\n                    eventData.put(\"logInDate\", new java.util.Date());\n                }\n            } else {\n                error = \"Invalid password\";\n                inputMap.put(\"responseCode\", 400);\n            }\n        } else {\n            error = \"Invalid userId or email\";\n            inputMap.put(\"responseCode\", 400);\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.SignInUserRule",
      "createDate": "2015-01-12T03:09:22.265"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:22.265",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:74",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class DelRoleRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String role = (String) data.get(\"role\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"userAdmin\")) {\n                error = \"Role owner or admin or userAdmin is required to delete role\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null && !host.equals(data.get(\"host\"))) {\n                    error = \"User can only delete role from host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    ODocument updateUser = DbService.getODocumentByRid(rid);\n                    if(updateUser != null) {\n                        List updateRoles = (List)updateUser.field(\"roles\");\n                        if(!updateRoles.contains(role)) {\n                            error = \"User doesn't have role: \" + role;\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"userId\", updateUser.field(\"userId\"));\n                            eventData.put(\"role\", role);\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    } else {\n                        error = \"User with @rid \" + rid + \" cannot be found.\";\n                        inputMap.put(\"responseCode\", 404);\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DelRoleRule",
      "createDate": "2015-01-12T03:09:22.476"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:22.476",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:75",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 8/29/2014.\n * need to check both email and displayName uniqueness.\n *\n */\npublic class SignUpUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String email = (String) data.get(\"email\");\n        String userId = (String) data.get(\"userId\");\n        String error = null;\n\n        // need to make sure that email and userId are unique.\n        // skip the cache and go to db directly?\n        if(isUserInDbByEmail(email)) {\n            error = \"The email address \" + email + \" has been signed up. Please login or recover your password.\";\n            inputMap.put(\"responseCode\", 400);\n        } else {\n            if(isUserInDbByUserId(userId)) {\n                error = \"The userId \" + userId + \" has been used by another user.\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                // check if password and password_confirm are the same.\n                String password = (String) data.get(\"password\");\n                String passwordConfirm = (String)data.remove(\"passwordConfirm\");\n                // after schema validation in the backend password and password_confirm should not be empty.\n                if(!password.equals(passwordConfirm)) {\n                    error = \"password and password confirm are not the same\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll(data);\n                    // replace the password with the hashed password.\n                    password = HashUtil.generateStorngPasswordHash(password);\n                    eventData.put(\"password\", password);\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.SignUpUserRule",
      "createDate": "2015-01-12T03:09:22.659"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:22.659",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:76",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/28/2014.\n */\npublic class UpdProfileEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updUser(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdProfileEvRule",
      "createDate": "2015-01-12T03:09:22.859"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:22.859",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:77",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by steve on 8/28/2014.\n * The password field will be remove before returning to the client.\n *\n */\npublic class GetUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String email = (String) data.get(\"email\");\n        String userId = (String) data.get(\"userId\");\n        if(rid != null) {\n            ODocument doc = DbService.getODocumentByRid(rid);\n            if(doc != null) {\n                inputMap.put(\"result\", doc.toJSON());\n                return true;\n            } else {\n                inputMap.put(\"result\", \"User with rid \" + rid + \" cannot be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else if(userId != null) {\n            ODocument user = getUserByUserId(userId);\n            if(user != null) {\n                inputMap.put(\"result\", user.toJSON());\n                return true;\n            } else {\n                inputMap.put(\"result\", \"User with userId \" + userId + \" cannot be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else if(email != null) {\n            ODocument user = getUserByEmail(email);\n            if(user != null) {\n                inputMap.put(\"result\", user.toJSON());\n                return true;\n            } else {\n                inputMap.put(\"result\", \"User with email \" + email + \" cannot be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"@rid or userId or email is required.\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.GetUserRule",
      "createDate": "2015-01-12T03:09:23.045"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:23.045",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:78",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class UnlockUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updLockByUserId(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UnlockUserEvRule",
      "createDate": "2015-01-12T03:09:23.212"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:23.212",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:79",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 8/29/2014.\n */\npublic class UpdPasswordRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            String rid = (String)user.get(\"@rid\");\n            ODocument updateUser = DbService.getODocumentByRid(rid);\n            if(updateUser != null) {\n                String password = (String) data.get(\"password\");\n                String newPassword = (String)data.get(\"newPassword\");\n                String passwordConfirm = (String)data.get(\"passwordConfirm\");\n\n                // check if the password match\n                boolean match = checkPassword(updateUser, password);\n                if(match) {\n                    if(newPassword.equals(passwordConfirm)) {\n                        newPassword = HashUtil.generateStorngPasswordHash(newPassword);\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"userId\", updateUser.field(\"userId\"));\n                        eventData.put(\"password\", newPassword);\n                        eventData.put(\"updateDate\", new java.util.Date());\n                    } else {\n                        error = \"New password and password confirm are not the same.\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                } else {\n                    error = \"The old password is incorrect.\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } else {\n                error = \"User with rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdPasswordRule",
      "createDate": "2015-01-12T03:09:23.382"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:23.382",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:80",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 9/24/2014.\n */\npublic class LogOutUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        // The assumption is that user should have a token when he/she click logout.\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload != null) {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            String rid = (String)user.get(\"@rid\");\n            // check if the rid exists or not. if exists, then create event.\n            ODocument doc = DbService.getODocumentByRid(rid);\n            if(doc != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"userId\", doc.field(\"userId\"));\n                eventData.put(\"host\", data.get(\"host\"));\n                eventData.put(\"refreshToken\", data.get(\"refreshToken\"));\n                eventData.put(\"logOutDate\", new java.util.Date());\n            } else {\n                error = \"User with @rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.LogOutUserRule",
      "createDate": "2015-01-12T03:09:23.544"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:23.544",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:81",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.JwtUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport net.oauth.jsontoken.JsonToken;\n\nimport java.time.Instant;\nimport java.util.*;\n\n/**\n * Created by steve on 19/09/14.\n */\npublic class RefreshTokenRule extends AbstractUserRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n\n        String refreshToken = (String)data.get(\"refreshToken\");\n        String userId = (String)data.get(\"userId\");\n        String host = (String)data.get(\"host\");\n        if(refreshToken == null || userId == null) {\n            inputMap.put(\"responseCode\", 401);\n            error = \"Refresh token or userId is missing\";\n        } else {\n            ODocument user = getUserByUserId(userId);\n            if(user != null) {\n                ODocument credential = (ODocument) user.field(\"credential\");\n                if (checkRefreshToken(credential, host, refreshToken)) {\n                    String jwt = generateToken(user);\n                    if (jwt != null) {\n                        Map<String, String> tokens = new HashMap<String, String>();\n                        tokens.put(\"accessToken\", jwt);\n                        inputMap.put(\"result\", mapper.writeValueAsString(tokens));\n                    }\n                } else {\n                    error = \"Invalid refresh token\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } else {\n                error = \"The userId \" + userId + \" has not been registered\";\n                inputMap.put(\"responseCode\", 400);\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.RefreshTokenRule",
      "createDate": "2015-01-12T03:09:23.716"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:23.716",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:82",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 8/29/2014.\n */\npublic class UpdProfileRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            String rid = (String)user.get(\"@rid\");\n            ODocument updateUser = DbService.getODocumentByRid(rid);\n            if(updateUser != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll(data);\n                eventData.put(\"updateDate\", new java.util.Date());\n            } else {\n                error = \"User with rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdProfileRule",
      "createDate": "2015-01-12T03:09:23.892"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:23.892",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:83",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.JwtUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 8/28/2014.\n */\npublic class SignInUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        signIn(data);\n\n        // TODO update global online user count\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.SignInUserEvRule",
      "createDate": "2015-01-12T03:09:24.063"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:24.063",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:84",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class UpUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upVoteUser(data);\n        // TODO refresh hot user list and cold user list\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpUserEvRule",
      "createDate": "2015-01-12T03:09:24.234"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:24.234",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:85",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class LockUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updLockByUserId(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.LockUserEvRule",
      "createDate": "2015-01-12T03:09:24.407"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:24.407",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:86",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.injector.main.feed.FeedRule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Created by steve on 26/10/14.\n */\npublic class GetAllUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            inputMap.put(\"error\", \"Login is required\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"userAdmin\") && !roles.contains(\"admin\")) {\n                inputMap.put(\"error\", \"Role owner or admin or userAdmin is required to get all users\");\n                inputMap.put(\"responseCode\", 401);\n                return false;\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null) {\n                    if(!host.equals(data.get(\"host\"))) {\n                        inputMap.put(\"error\", \"User can only get all users from host: \" + host);\n                        inputMap.put(\"responseCode\", 401);\n                        return false;\n                    }\n                } else {\n                    // retrieve everything as this is the owner\n                    data.remove(\"host\"); // removed the host added by RestHandler.\n                }\n            }\n        }\n        long total = getTotalNumberUserFromDb(data);\n        if(total > 0) {\n            String json = getUserFromDb(data);\n            List<Map<String, Object>> users\n                = mapper.readValue(json, new TypeReference<List<HashMap<String, Object>>>() {});\n            // get all the roles\n            List<String> roles = getRoles();\n            // get all the hosts\n            Set hosts = ServiceLocator.getInstance().getHostMap().keySet();\n\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"roles\", roles);\n            result.put(\"hosts\", hosts);\n            result.put(\"users\", users);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No user can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.GetAllUserRule",
      "createDate": "2015-01-12T03:09:24.627"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:24.627",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:87",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by steve on 8/28/2014.\n */\npublic class SignUpUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addUser(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.SignUpUserEvRule",
      "createDate": "2015-01-12T03:09:24.852"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:24.852",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:88",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class LockUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"userAdmin\")) {\n                error = \"Role owner or admin or userAdmin is required to lock user\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null && !host.equals(data.get(\"host\"))) {\n                    error = \"User can only lock user from host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    ODocument lockUser = null;\n                    if(rid != null) {\n                        lockUser = DbService.getODocumentByRid(rid);\n                        if(lockUser != null) {\n                            if(lockUser.field(\"locked\") != null && (Boolean)lockUser.field(\"locked\")) {\n                                error = \"User with @rid \" + rid + \" has been locked already\";\n                                inputMap.put(\"responseCode\", 400);\n                            } else {\n                                Map eventMap = getEventMap(inputMap);\n                                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                                inputMap.put(\"eventMap\", eventMap);\n                                eventData.put(\"userId\", lockUser.field(\"userId\"));\n                                eventData.put(\"locked\", true);\n                                eventData.put(\"updateDate\", new java.util.Date());\n                                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            }\n                        } else {\n                            error = \"User with @rid \" + rid + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                        }\n                    } else {\n                        error = \"@rid is required\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.LockUserRule",
      "createDate": "2015-01-12T03:09:25.025"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:25.025",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:89",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class DownUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\",401);\n        } else {\n            Map<String,Object> voteUser = (Map<String, Object>)payload.get(\"user\");\n            String voteUserId = (String)voteUser.get(\"userId\");\n            String userRid = (String)data.get(\"@rid\");\n            ODocument user = DbService.getODocumentByRid(userRid);\n            if(user == null) {\n                error = \"User with @rid \" + userRid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"userId\", user.field(\"userId\").toString());\n                eventData.put(\"voteUserId\", voteUserId);\n                eventData.put(\"updateDate\", new java.util.Date());\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DownUserRule",
      "createDate": "2015-01-12T03:09:25.196"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:25.196",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:90",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class DelRoleEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delRole(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DelRoleEvRule",
      "createDate": "2015-01-12T03:09:25.365"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:25.365",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:91",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class UpUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\",401);\n        } else {\n            Map<String,Object> voteUser = (Map<String, Object>)payload.get(\"user\");\n            String voteUserId = (String)voteUser.get(\"userId\");\n            String userRid = (String)data.get(\"@rid\");\n            ODocument user = DbService.getODocumentByRid(userRid);\n            if(user == null) {\n                error = \"User with @rid \" + userRid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"userId\", user.field(\"userId\").toString());\n                eventData.put(\"voteUserId\", voteUserId);\n                eventData.put(\"updateDate\", new java.util.Date());\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpUserRule",
      "createDate": "2015-01-12T03:09:25.536"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:25.536",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:92",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class AddRoleRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String role = (String) data.get(\"role\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"userAdmin\")) {\n                error = \"Role owner or admin or userAdmin is required to add role\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null && !host.equals(data.get(\"host\"))) {\n                    error = \"User can only add role from host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    ODocument updateUser = DbService.getODocumentByRid(rid);\n                    if(updateUser != null) {\n                        List updateRoles = (List)updateUser.field(\"roles\");\n                        if(updateRoles.contains(role)) {\n                            error = \"User has role: \" + role;\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"userId\", updateUser.field(\"userId\"));\n                            eventData.put(\"role\", role);\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    } else {\n                        error = \"User with @rid \" + rid + \" cannot be found.\";\n                        inputMap.put(\"responseCode\", 404);\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.AddRoleRule",
      "createDate": "2015-01-12T03:09:25.704"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:25.704",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:93",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class UnlockUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"userAdmin\")) {\n                error = \"Role owner or admin or userAdmin is required to unlock user\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null && !host.equals(data.get(\"host\"))) {\n                    error = \"User can only unlock user from host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    ODocument lockUser = null;\n                    if(rid != null) {\n                        lockUser = DbService.getODocumentByRid(rid);\n                        if(lockUser != null) {\n                            if(lockUser.field(\"locked\") != null && !(Boolean)lockUser.field(\"locked\")) {\n                                error = \"User with @rid \" + rid + \" is not locked\";\n                                inputMap.put(\"responseCode\", 400);\n                            } else {\n                                Map eventMap = getEventMap(inputMap);\n                                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                                inputMap.put(\"eventMap\", eventMap);\n                                eventData.put(\"userId\", lockUser.field(\"userId\"));\n                                eventData.put(\"locked\", false);\n                                eventData.put(\"updateDate\", new java.util.Date());\n                                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            }\n                        } else {\n                            error = \"User with @rid \" + rid + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                        }\n                    } else {\n                        error = \"@rid is required\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UnlockUserRule",
      "createDate": "2015-01-12T03:09:25.905"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:25.905",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:94",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 8/28/2014.\n */\npublic class UpdPasswordEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPassword(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdPasswordEvRule",
      "createDate": "2015-01-12T03:09:26.082"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:26.082",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:95",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 8/29/2014.\n */\npublic class DelUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delUser(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DelUserEvRule",
      "createDate": "2015-01-12T03:09:26.251"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:26.251",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:96",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class AddRoleEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addRole(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.AddRoleEvRule",
      "createDate": "2015-01-12T03:09:26.432"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:26.432",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:97",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.category;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class DelChildEvRule extends AbstractCategoryRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String categoryRid = (String) data.get(\"@rid\");\n        String childRid = (String) data.get(\"childRid\");\n        delChild(categoryRid, childRid);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.category.DelChildEvRule",
      "createDate": "2015-01-12T03:09:26.601"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:26.601",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:98",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.category;\n\nimport com.networknt.light.rule.Rule;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class AddEntityRule extends AbstractCategoryRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n\n        String rid = (String)data.get(\"@rid\");\n        String entityRid = (String) data.get(\"entityRid\");\n        String host = (String)data.get(\"host\");\n        int inputVersion = (int)data.get(\"@version\");\n\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            // TODO check if the user has permission to do so.\n\n            ODocument category = getCategoryByRid(rid);\n            if(category == null) {\n                error = \"Category does not exist in host\" + host;\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if the version is the same.\n                int storedVersion = (int)category.field(\"@version\");\n                if(inputVersion != storedVersion) {\n                    error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    // check if entity id is already in entities\n                    List entities = category.field(\"entities\");\n                    if(entities.contains(new ORecordId(entityRid))) {\n                        error = \"The entity is already in the list\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.category.AddEntityRule",
      "createDate": "2015-01-12T03:09:26.783"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:26.783",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:99",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.category;\n\nimport com.networknt.light.rule.Rule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n *\n * you can only delete a category if it has no child and no entity.\n */\npublic class DelCategoryRule extends AbstractCategoryRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n\n        String rid = (String)data.get(\"@rid\");\n        String host = (String)data.get(\"host\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            // TODO check if the user has permission to do so.\n\n            ODocument category = getCategoryByRid(rid);\n            if(category == null) {\n                error = \"Category does not exist in host\" + host;\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if category has children\n                List children = category.field(\"children\");\n                if(children != null && children.size() > 0) {\n                    error = \"Category has children and cannot be deleted\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    List entities = category.field(\"entities\");\n                    if(entities != null && entities.size() > 0) {\n                        error = \"Category has entities and cannot be deleted\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.category.DelCategoryRule",
      "createDate": "2015-01-12T03:09:26.977"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:26.977",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:100",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.category;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class GetCategoryRule extends AbstractCategoryRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String categoryRid = (String) data.get(\"@rid\");\n        ODocument category = getCategoryByRid(categoryRid);\n        // convert to json string so that Undertow can send it back to browser.\n        inputMap.put(\"result\", category.toJSON());\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.category.GetCategoryRule",
      "createDate": "2015-01-12T03:09:27.150"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:27.150",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:101",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.category;\n\nimport com.networknt.light.rule.Rule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class UpdCategoryRule extends AbstractCategoryRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n\n        String rid = (String)data.get(\"@rid\");\n        String host = (String)data.get(\"host\");\n        int inputVersion = (int)data.get(\"@version\");\n\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            // TODO check if the user has permission to do so.\n\n            ODocument category = getCategoryByRid(rid);\n            if(category == null) {\n                error = \"Category does not exist in host\" + host;\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if the version is the same.\n                int storedVersion = (int)category.field(\"@version\");\n                if(inputVersion != storedVersion) {\n                    error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    inputMap.put(\"responseCode\", 400);\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.category.UpdCategoryRule",
      "createDate": "2015-01-12T03:09:27.315"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:27.315",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:102",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.category;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class DelEntityEvRule extends AbstractCategoryRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String categoryRid = (String) data.get(\"@rid\");\n        String entityRid = (String) data.get(\"entityRid\");\n        delEntity(categoryRid, entityRid);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.category.DelEntityEvRule",
      "createDate": "2015-01-12T03:09:27.486"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:27.486",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:103",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.category;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class AddCategoryRule extends AbstractCategoryRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n\n        String host = (String)data.get(\"host\");\n        String id = (String)data.get(\"id\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            // TODO check if the user has permission to do so.\n\n            ODocument category = getCategoryByHostId(host, id);\n            if(category != null) {\n                error = \"Category with the same id exists in host\" + host;\n                inputMap.put(\"responseCode\", 400);\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.category.AddCategoryRule",
      "createDate": "2015-01-12T03:09:27.650"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:27.650",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:104",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.category;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class AddCategoryEvRule extends AbstractCategoryRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String userId = (String)user.get(\"userId\");\n        addCategory(data, userId);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.category.AddCategoryEvRule",
      "createDate": "2015-01-12T03:09:27.817"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:27.817",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:105",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.category;\n\nimport com.networknt.light.rule.Rule;\nimport com.orientechnologies.orient.core.metadata.schema.OType;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class UpdCategoryEvRule extends AbstractCategoryRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String categoryRid = (String) data.get(\"@rid\");\n        updCategory(categoryRid, data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.category.UpdCategoryEvRule",
      "createDate": "2015-01-12T03:09:27.981"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:27.981",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:106",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.category;\n\nimport com.networknt.light.rule.Rule;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class AddChildRule extends AbstractCategoryRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n\n        String rid = (String)data.get(\"@rid\");\n        String childRid = (String) data.get(\"childRid\");\n        String host = (String)data.get(\"host\");\n        int inputVersion = (int)data.get(\"@version\");\n\n        String error = null;\n        if(payload == null) {\n            error =\"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            // TODO check if the user has permission to do so.\n\n            ODocument category = getCategoryByRid(rid);\n            if(category == null) {\n                error = \"Category does not exist in host\" + host;\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if the version is the same.\n                int storedVersion = (int)category.field(\"@version\");\n                if(inputVersion != storedVersion) {\n                    error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    // check if child id is already in children\n                    List children = category.field(\"children\");\n                    if(children.contains(new ORecordId(childRid))) {\n                        error =\"The child is already in the list\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.category.AddChildRule",
      "createDate": "2015-01-12T03:09:28.147"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:28.147",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:107",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.category;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class AddChildEvRule extends AbstractCategoryRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String categoryRid = (String) data.get(\"@rid\");\n        String childRid = (String) data.get(\"childRid\");\n        addChild(categoryRid, childRid);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.category.AddChildEvRule",
      "createDate": "2015-01-12T03:09:28.316"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:28.316",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:108",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.category;\n\nimport com.networknt.light.rule.Rule;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class DelChildRule extends AbstractCategoryRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n\n        String rid = (String)data.get(\"@rid\");\n        String childRid = (String) data.get(\"childRid\");\n        String host = (String)data.get(\"host\");\n        int inputVersion = (int)data.get(\"@version\");\n\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            // TODO check if the user has permission to do so.\n\n            ODocument category = getCategoryByRid(rid);\n            if(category == null) {\n                error = \"Category does not exist in host\" + host;\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if the version is the same.\n                int storedVersion = (int)category.field(\"@version\");\n                if(inputVersion != storedVersion) {\n                    error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    // check if child id is in children\n                    List children = category.field(\"children\");\n                    if(!children.contains(new ORecordId(childRid))) {\n                        error = \"The child is not in the list\";\n                        inputMap.put(\"responseCode\", 404);\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.category.DelChildRule",
      "createDate": "2015-01-12T03:09:28.506"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:28.506",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:109",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.category;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.metadata.schema.OType;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport jdk.nashorn.internal.runtime.ECMAException;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic abstract class AbstractCategoryRule extends AbstractRule implements Rule {\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected ODocument getCategoryByHostId(String host, String id) {\n        ODocument category = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OIndex<?> hostTitleIdx = db.getMetadata().getIndexManager().getIndex(\"hostIdIdx\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OCompositeKey key = new OCompositeKey(host, id);\n            OIdentifiable oid = (OIdentifiable) hostTitleIdx.get(key);\n            if (oid != null) {\n                category = (ODocument)oid.getRecord();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return category;\n    }\n\n    protected ODocument addCategory(Map<String, Object> data, String userId) throws Exception {\n        ODocument category = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        Map<String, Object> categoryMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)categoryMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            categoryMap.put(\"cache\", cache);\n        }\n\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            category = new ODocument(schema.getClass(\"Category\"));\n            category.field(\"host\", data.get(\"host\"));\n            category.field(\"id\", data.get(\"id\"));\n            category.field(\"desc\", data.get(\"desc\"));\n            java.util.Date d = new java.util.Date();\n            category.field(\"createDate\", d);\n            category.field(\"updateDate\", d);\n            category.field(\"createUser\", userId);\n            category.field(\"attributes\", data.get(\"attributes\")); // attributes should be a map.\n            category.save();\n            cache.put(category.field(\"@rid\").toString(), category);\n            String parentRid = (String)data.get(\"parentRid\");\n            if(parentRid != null) {\n                // get the parent and update children list\n                ODocument parent = (ODocument)cache.get(\"parentRid\");\n                if(parent == null) {\n                    // not in cache\n                    parent = db.load(new ORecordId(parentRid));\n                    cache.put(parent.field(\"@rid\").toString(), parent);\n                }\n                List children = parent.field(\"children\");\n                children.add(category);\n                parent.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return category;\n    }\n\n    protected void delCategory(String categoryRid) throws Exception {\n        ODocument category = DbService.delODocumentByRid(categoryRid);\n        // rebuild cache in memory.\n        Map<String, Object> categoryMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        // update central cache\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)categoryMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(categoryRid);\n        }\n    }\n\n\n    protected void updCategory(String categoryRid, Map<String, Object> data) throws Exception {\n        ODocument category = getCategoryByRid(categoryRid);\n        if(category != null) {\n            category.field(\"desc\", data.get(\"desc\"));\n            category.field(\"attributes\", data.get(\"attributes\"));\n            category.field(\"updateDate\", new java.util.Date());\n            category.save();\n        }\n    }\n\n    protected void addChild(String categoryRid, String childRid) throws Exception {\n        ODocument category = getCategoryByRid(categoryRid);\n        if(category != null) {\n            List children = category.field(\"children\");\n            children.add(new ORecordId(childRid));\n            category.save();\n        }\n    }\n\n    protected void delChild(String categoryRid, String childRid) throws Exception {\n        ODocument category = getCategoryByRid(categoryRid);\n        if(category != null) {\n            List children = category.field(\"children\");\n            children.remove(new ORecordId(childRid));\n            category.save();\n        }\n    }\n\n    protected void addEntity(String categoryRid, String entityRid) throws Exception {\n        ODocument category = getCategoryByRid(categoryRid);\n        if(category != null) {\n            List entities = category.field(\"entities\");\n            entities.add(new ORecordId(entityRid));\n            category.save();\n        }\n    }\n\n    protected void delEntity(String categoryRid, String entityRid) throws Exception {\n        ODocument category = getCategoryByRid(categoryRid);\n        if(category != null) {\n            List entities = category.field(\"entities\");\n            entities.remove(new ORecordId(entityRid));\n            category.save();\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.category.AbstractCategoryRule",
      "createDate": "2015-01-12T03:09:28.700"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:28.700",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:110",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.category;\n\nimport com.networknt.light.rule.Rule;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class DelEntityRule extends AbstractCategoryRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n\n        String rid = (String)data.get(\"@rid\");\n        String entityRid = (String) data.get(\"entityRid\");\n        String host = (String)data.get(\"host\");\n        int inputVersion = (int)data.get(\"@version\");\n\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            // TODO check if the user has permission to do so.\n\n            ODocument category = getCategoryByRid(rid);\n            if(category == null) {\n                error = \"Category does not exist in host\" + host;\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if the version is the same.\n                int storedVersion = (int)category.field(\"@version\");\n                if(inputVersion != storedVersion) {\n                    error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    // check if entity id is in entities\n                    List entities = category.field(\"entities\");\n                    if(!entities.contains(new ORecordId(entityRid))) {\n                        error = \"The entity is not in the list\";\n                        inputMap.put(\"responseCode\", 404);\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.category.DelEntityRule",
      "createDate": "2015-01-12T03:09:28.896"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:28.896",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:111",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.category;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class AddEntityEvRule extends AbstractCategoryRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String categoryRid = (String) data.get(\"@rid\");\n        String entityRid = (String) data.get(\"entityRid\");\n        addEntity(categoryRid, entityRid);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.category.AddEntityEvRule",
      "createDate": "2015-01-12T03:09:29.097"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:29.097",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:112",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.category;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class DelCategoryEvRule extends AbstractCategoryRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String categoryRid = (String) data.get(\"@rid\");\n        delCategory(categoryRid);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.category.DelCategoryEvRule",
      "createDate": "2015-01-12T03:09:29.286"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:29.286",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:113",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/25/2014.\n *\n * You don't need to check if the form is in db or not as the form should be cached\n * in memory image already while starting the server.\n *\n */\npublic class GetFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String id = (String)data.get(\"id\");\n        String json = getFormById(id);\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Form with \" + id + \" cannot be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.GetFormRule",
      "createDate": "2015-01-12T03:09:29.474"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:29.474",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:114",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class AddFormRule extends AbstractFormRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String id = (String)data.get(\"id\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"formAdmin\")) {\n                error = \"Role owner or admin or formAdmin is required to add form\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null) {\n                    if(!host.equals(data.get(\"host\"))) {\n                        error = \"User can only add form from host: \" + host;\n                        inputMap.put(\"responseCode\", 401);\n                    } else {\n                        String json = getFormById((String)data.get(\"id\"));\n                        if(json != null) {\n                            error = \"Form with the same id exists\";\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                            eventData.put(\"createDate\", new java.util.Date());\n                            eventData.put(\"createUserId\", user.get(\"userId\"));\n                        }\n                    }\n                } else {\n                    String json = getFormById((String)data.get(\"id\"));\n                    if(json != null) {\n                        error = \"Form with the same id exists\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                        // remove host from data as this is owner adding role\n                        eventData.remove(\"host\");\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.AddFormRule",
      "createDate": "2015-01-12T03:09:29.664"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:29.664",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:115",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 8/29/2014.\n *\n */\npublic class DelFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"formAdmin\")) {\n                error = \"Role owner or admin or formAdmin is required to delete form\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null && !host.equals(data.get(\"host\"))) {\n                    error = \"User can only delete form for host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    String id = (String)data.get(\"id\");\n                    String json = getFormById(id);\n                    if(json == null) {\n                        error = \"Form with id \" + id + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map<String, Object> form = mapper.readValue(json,\n                                new TypeReference<HashMap<String, Object>>() {\n                                });\n                        // check the version\n                        int storedVersion = (int)form.get(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"id\", form.get(\"id\"));\n                        }\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.DelFormRule",
      "createDate": "2015-01-12T03:09:29.827"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:29.827",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:116",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.metadata.schema.OType;\n\nimport javax.xml.ws.Service;\nimport java.rmi.server.ServerCloneException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 9/4/2014.\n */\npublic class ImpFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"formAdmin\")) {\n                error = \"Role owner or admin or formAdmin is required to import form\";\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                String host = (String)user.get(\"host\");\n                Map<String, Object> dataMap = mapper.readValue((String)data.get(\"content\"), new TypeReference<HashMap<String, Object>>() {});\n                if(host != null) {\n                    if(!host.equals(data.get(\"host\"))) {\n                        error = \"User can only import form from host: \" + host;\n                        inputMap.put(\"responseCode\", 403);\n                    } else {\n                        // Won't check if form exists or not here.\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"host\", host);\n\n                        eventData.put(\"id\", dataMap.get(\"id\"));\n                        eventData.put(\"action\", dataMap.get(\"action\"));\n                        eventData.put(\"schema\", dataMap.get(\"schema\"));\n                        eventData.put(\"form\", dataMap.get(\"form\"));\n                        eventData.put(\"modelData\", dataMap.get(\"modelData\"));\n\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                } else {\n                    // This is owner to import form, notice no host is passed in.\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n\n                    eventData.put(\"id\", dataMap.get(\"id\"));\n                    eventData.put(\"action\", dataMap.get(\"action\"));\n                    eventData.put(\"schema\", dataMap.get(\"schema\"));\n                    eventData.put(\"form\", dataMap.get(\"form\"));\n                    eventData.put(\"modelData\", dataMap.get(\"modelData\"));\n\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.ImpFormRule",
      "createDate": "2015-01-12T03:09:30.011"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:30.011",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:117",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 9/4/2014.\n *\n * Is there a way to verify that the memoryImage is in sync with db?\n * In that case, we don't need to reload from db every time this rule is executed.\n * What we can do is to load all forms in the beginning when server starts, and make\n * sure all the form updates are gone through these set of rules.\n *\n */\npublic class GetAllFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            inputMap.put(\"error\", \"Login is required\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        }\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\") || roles.contains(\"admin\") || roles.contains(\"formAdmin\")) {\n            String host = (String) user.get(\"host\");\n            String hostForms = getAllForm(host);\n            if(hostForms != null) {\n                inputMap.put(\"result\", hostForms);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No form can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"Permission denied\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.GetAllFormRule",
      "createDate": "2015-01-12T03:09:30.175"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:30.175",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:118",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.form;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 9/4/2014.\n * when importing form, it might be existing or new. need to handle two situations.\n *\n */\npublic class ImpFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute(Object... objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        impForm(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.ImpFormEvRule",
      "createDate": "2015-01-12T03:09:30.395"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:30.395",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:119",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 8/25/2014.\n */\npublic class AddFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addForm(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.AddFormEvRule",
      "createDate": "2015-01-12T03:09:30.584"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:30.584",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:120",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 8/26/2014.\n */\npublic class DelFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        String id = (String)data.get(\"id\");\n        delForm(id);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.DelFormEvRule",
      "createDate": "2015-01-12T03:09:30.778"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:30.778",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:121",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 8/29/2014.\n *\n */\npublic class UpdFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String host = (String)data.get(\"host\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"formAdmin\")) {\n                error = \"Role owner or admin or formAdmin is required to update form\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String userHost = (String)user.get(\"host\");\n                if(userHost != null && !userHost.equals(host)) {\n                    error = \"User can only update form for host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    String id = (String)data.get(\"id\");\n                    String json = getFormById(id);\n                    if(json == null) {\n                        error = \"Form with id \" + id + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map<String, Object> form = mapper.readValue(json,\n                                new TypeReference<HashMap<String, Object>>() {\n                                });\n                        int storedVersion = (int)form.get(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            // no need to remove host from eventData as owner update won't touch id and host.\n                        }\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.UpdFormRule",
      "createDate": "2015-01-12T03:09:30.958"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:30.958",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:122",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.metadata.schema.OType;\nimport com.orientechnologies.orient.core.record.ORecord;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 23/09/14.\n */\npublic abstract class AbstractFormRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractFormRule.class);\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected String getFormById(String id) {\n        String json  = null;\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            formMap.put(\"cache\", cache);\n        } else {\n            json = (String)cache.get(id);\n        }\n        if(json == null) {\n            ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n            try {\n                OIndex<?> formIdIdx = db.getMetadata().getIndexManager().getIndex(\"Form.id\");\n                // this is a unique index, so it retrieves a OIdentifiable\n                OIdentifiable oid = (OIdentifiable) formIdIdx.get(id);\n                if (oid != null && oid.getRecord() != null) {\n                    json = ((ODocument) oid.getRecord()).toJSON();\n                    cache.put(id, json);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                db.close();\n            }\n        }\n        return json;\n    }\n\n    protected String addForm(Map<String, Object> data) throws Exception {\n        String json = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            ODocument form = new ODocument(schema.getClass(\"Form\"));\n            if(data.get(\"host\") != null) form.field(\"host\", data.get(\"host\"));\n            form.field(\"id\", data.get(\"id\"));\n            form.field(\"action\", data.get(\"action\"));\n            form.field(\"schema\", data.get(\"schema\"));\n            form.field(\"form\", data.get(\"form\"));\n            if(data.get(\"modelData\") != null) form.field(\"modelData\", data.get(\"modelData\"));\n            form.field(\"createDate\", data.get(\"createDate\"));\n            form.field(\"createUserId\", data.get(\"createUserId\"));\n            form.save();\n            db.commit();\n            json = form.toJSON();\n        } catch (Exception e) {\n            db.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            db.close();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            formMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"id\"), json);\n        return json;\n    }\n\n    protected void delForm(String id) {\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> formIdIdx = db.getMetadata().getIndexManager().getIndex(\"Form.id\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OIdentifiable oid = (OIdentifiable) formIdIdx.get(id);\n            if (oid != null && oid.getRecord() != null) {\n                oid.getRecord().delete();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            logger.error(\"Exception:\", e);\n        } finally {\n            db.close();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(id);\n        }\n    }\n\n    protected String updForm(Map<String, Object> data) {\n        String json = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> userIdIdx = db.getMetadata().getIndexManager().getIndex(\"Form.id\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OIdentifiable oId = (OIdentifiable) userIdIdx.get(data.get(\"id\"));\n            if (oId != null) {\n                ODocument doc = oId.getRecord();\n                doc.field(\"action\", data.get(\"action\"));\n                doc.field(\"schema\", data.get(\"schema\"));\n                doc.field(\"form\", data.get(\"form\"));\n                doc.field(\"modelData\", data.get(\"modelData\"));\n                doc.field(\"updateDate\", data.get(\"updateDate\"));\n                doc.field(\"updateUserId\", data.get(\"updateUserId\"));\n                doc.save();\n                db.commit();\n                json = doc.toJSON();\n            }\n        } catch (Exception e) {\n            db.rollback();\n            logger.error(\"Exception:\", e);\n        } finally {\n            db.close();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            formMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"id\"), json);\n        return json;\n    }\n\n    protected String impForm(Map<String, Object> data) throws Exception {\n        String json = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            OIndex<?> formIdIdx = db.getMetadata().getIndexManager().getIndex(\"Form.id\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OIdentifiable oid = (OIdentifiable) formIdIdx.get(data.get(\"id\"));\n            if (oid != null && oid.getRecord() != null) {\n                oid.getRecord().delete();\n            }\n\n            ODocument form = new ODocument(schema.getClass(\"Form\"));\n            if(data.get(\"host\") != null) form.field(\"host\", data.get(\"host\"));\n            form.field(\"id\", data.get(\"id\"));\n            form.field(\"action\", data.get(\"action\"));\n            form.field(\"schema\", data.get(\"schema\"));\n            form.field(\"form\", data.get(\"form\"));\n            if(data.get(\"modelData\") != null) form.field(\"modelData\", data.get(\"modelData\"));\n            form.field(\"createDate\", data.get(\"createDate\"));\n            form.field(\"createUserId\", data.get(\"createUserId\"));\n            form.save();\n            db.commit();\n            json = form.toJSON();\n        } catch (Exception e) {\n            db.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            db.close();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            formMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"id\"), json);\n        return json;\n    }\n\n    protected String getAllForm(String host) {\n        String sql = \"SELECT FROM Form\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> forms = db.command(query).execute();\n            if(forms != null && forms.size() > 0) {\n                json = OJSONWriter.listToJSON(forms, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.AbstractFormRule",
      "createDate": "2015-01-12T03:09:31.150"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:31.150",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:123",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 8/26/2014.\n */\npublic class UpdFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updForm(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.UpdFormEvRule",
      "createDate": "2015-01-12T03:09:31.326"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:31.326",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:124",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\n\nimport java.util.*;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic abstract class AbstractForumRule extends AbstractRule implements Rule {\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected ODocument addForum(Map<String, Object> data) throws Exception {\n        ODocument forum = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            OIndex<?> forumHostIdIdx = db.getMetadata().getIndexManager().getIndex(\"forumHostIdIdx\");\n            forum = new ODocument(schema.getClass(\"Forum\"));\n            forum.field(\"host\", data.get(\"host\"));\n            forum.field(\"id\", data.get(\"id\"));\n            if(data.get(\"desc\") != null) forum.field(\"desc\", data.get(\"desc\"));\n            if(data.get(\"attributes\") != null) forum.field(\"attributes\", data.get(\"attributes\"));\n            forum.field(\"createDate\", data.get(\"createDate\"));\n            forum.field(\"createUserId\", data.get(\"createUserId\"));\n            // parent\n            if(data.get(\"parent\") != null) {\n                OCompositeKey parentKey = new OCompositeKey(data.get(\"host\"), data.get(\"parent\"));\n                OIdentifiable parentOid = (OIdentifiable) forumHostIdIdx.get(parentKey);\n                if(parentOid != null) {\n                    ODocument parent = (ODocument)parentOid.getRecord();\n                    forum.field(\"parent\", parent);\n                    // update parent with the children\n                    Set children = parent.field(\"children\");\n                    if(children != null) {\n                        children.add(forum);\n                    } else {\n                        children = new HashSet<ODocument>();\n                        children.add(forum);\n                        parent.field(\"children\", children);\n                    }\n                    parent.save();\n                }\n            }\n            // children\n            List<String> childrenIds = (List<String>)data.get(\"children\");\n            if(childrenIds != null) {\n                Set children = new HashSet<ODocument>();\n                for(String childId: childrenIds) {\n                    OCompositeKey childKey = new OCompositeKey(data.get(\"host\"), childId);\n                    OIdentifiable childOid = (OIdentifiable) forumHostIdIdx.get(childKey);\n                    if(childOid != null) {\n                        ODocument child = (ODocument)childOid.getRecord();\n                        children.add(child);\n                        child.field(\"parent\", forum);\n                        child.save();\n                    }\n                }\n                forum.field(\"children\", children);\n            }\n            forum.save();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return forum;\n    }\n\n    protected boolean delForum(Map<String, Object> data) throws Exception {\n        boolean result = false;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> forumHostIdIdx = db.getMetadata().getIndexManager().getIndex(\"forumHostIdIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"host\"), data.get(\"id\"));\n            OIdentifiable oid = (OIdentifiable) forumHostIdIdx.get(key);\n            if (oid != null) {\n                ODocument forum = (ODocument) oid.getRecord();\n                // update references from parent and children\n                ODocument parent = forum.field(\"parent\");\n                if(parent != null) {\n                    Set children = parent.field(\"children\");\n                    if(children != null && children.size() > 0) {\n                        children.remove(forum);\n                    }\n                    parent.save();\n                }\n                Set<ODocument> children = forum.field(\"children\");\n                if(children != null && children.size() > 0) {\n                    for(ODocument child: children) {\n                        if(child != null) {\n                            child.removeField(\"parent\");\n                            child.save();\n                        }\n\n                    }\n                }\n                forum.delete();\n                db.commit();\n                result = true;\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return result;\n    }\n\n    protected ODocument updForum(Map<String, Object> data) throws Exception {\n        ODocument forum = null;\n        // update parent according to children and update children according to parent.\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> forumHostIdIdx = db.getMetadata().getIndexManager().getIndex(\"forumHostIdIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"host\"), data.get(\"id\"));\n            OIdentifiable oid = (OIdentifiable) forumHostIdIdx.get(key);\n            if (oid != null) {\n                forum = (ODocument) oid.getRecord();\n                if(data.get(\"desc\") != null) {\n                    forum.field(\"desc\", data.get(\"desc\"));\n                } else {\n                    forum.removeField(\"desc\");\n                }\n                if(data.get(\"attributes\") != null) {\n                    forum.field(\"attributes\", data.get(\"attributes\"));\n                } else {\n                    forum.removeField(\"attributes\");\n                }\n                if(data.get(\"parent\") != null) {\n                    OCompositeKey parentKey = new OCompositeKey(data.get(\"host\"), data.get(\"parent\"));\n                    OIdentifiable parentOid = (OIdentifiable) forumHostIdIdx.get(parentKey);\n                    if(parentOid != null) {\n                        ODocument parent = (ODocument)parentOid.getRecord();\n                        forum.field(\"parent\", parent);\n                        // update parent with the children\n                        Set children = parent.field(\"children\");\n                        if(children != null) {\n                            children.add(forum);\n                        } else {\n                            children = new HashSet<ODocument>();\n                            children.add(forum);\n                            parent.field(\"children\", children);\n                        }\n                        parent.save();\n                    }\n                } else {\n                    ODocument parent = forum.field(\"parent\");\n                    if(parent != null) {\n                        Set children = parent.field(\"children\");\n                        children.remove(forum);\n                        forum.removeField(\"parent\");\n                    }\n                }\n                List<String> list = (List)data.get(\"children\");\n                if(list != null && list.size() > 0) {\n                    Set<ODocument> storedChildren = forum.field(\"children\");\n                    if(storedChildren != null && storedChildren.size() > 0) {\n                        // both lists are not empty. comparison is needed.\n                        // first populate inputChildren as ODocument\n                        Set<ODocument> inputChildren = new HashSet<ODocument>();\n                        for(String id: list) {\n                            OCompositeKey childKey = new OCompositeKey(data.get(\"host\"), id);\n                            OIdentifiable childOid = (OIdentifiable) forumHostIdIdx.get(childKey);\n                            if(childOid != null) inputChildren.add(childOid.getRecord());\n                        }\n\n                        Set<ODocument> addSet = new HashSet<ODocument>(inputChildren);\n                        Set<ODocument> delSet = new HashSet<ODocument>(storedChildren);\n\n                        addSet.removeAll(storedChildren);\n                        if(addSet.size() > 0) {\n                            for(ODocument doc: addSet) {\n                                doc.field(\"parent\", forum);\n                                storedChildren.add(doc);\n                                doc.save();\n                                forum.save();\n                            }\n                        }\n                        delSet.removeAll(inputChildren);\n                        if(delSet.size() > 0) {\n                            for(ODocument doc: delSet) {\n                                doc.removeField(\"parent\");\n                                storedChildren.remove(doc);\n                                doc.save();\n                                forum.save();\n                            }\n                        }\n                    } else {\n                        // forum doesn't have children\n                        storedChildren = new HashSet<ODocument>();\n                        for(String id: (List<String>)data.get(\"children\")) {\n                            OCompositeKey childKey = new OCompositeKey(data.get(\"host\"), id);\n                            OIdentifiable childOid = (OIdentifiable) forumHostIdIdx.get(childKey);\n                            if(childOid != null) {\n                                ODocument child = childOid.getRecord();\n                                if(child != null) {\n                                    storedChildren.add(childOid.getRecord());\n                                    child.field(\"parent\", forum);\n                                    child.save();\n                                }\n                            }\n                        }\n                        forum.field(\"children\", storedChildren);\n                    }\n                } else {\n                    Set<ODocument> children = forum.field(\"children\");\n                    if(children != null && children.size() > 0) {\n                        for(ODocument doc: children) {\n                            doc.removeField(\"parent\");\n                        }\n                    }\n                    forum.removeField(\"children\");\n                }\n                forum.field(\"updateDate\", data.get(\"updateDate\"));\n                forum.field(\"updateUserId\", data.get(\"updateUserId\"));\n                forum.save();\n                db.commit();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return forum;\n    }\n\n    protected String getForumTree(String host) {\n        String json = null;\n        String sql = \"SELECT FROM Forum WHERE host = ? and parent IS NULL ORDER BY id\";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> forums = db.command(query).execute(host);\n            if(forums.size() > 0) {\n                json = OJSONWriter.listToJSON(forums, \"fetchPlan:*:-1\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    protected String getForumPost(Map<String, Object> data) {\n        String json = null;\n        String sql = \"select from (traverse posts, children from (select from forum where host = ? and id=?)) where @class = 'Post'\";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> forums = db.command(query).execute(data.get(\"host\"), data.get(\"id\"));\n            if(forums.size() > 0) {\n                json = OJSONWriter.listToJSON(forums, null);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    protected String getForum(String host) {\n        String json = null;\n        String sql = \"SELECT FROM Forum WHERE host = ? ORDER BY createDate\";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> forums = db.command(query).execute(host);\n            if(forums.size() > 0) {\n                json = OJSONWriter.listToJSON(forums, null);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    protected String getForumDropdown(String host) {\n        String json = null;\n        String sql = \"SELECT FROM Forum WHERE host = ? ORDER BY id\";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> forums = db.command(query).execute(host);\n            if(forums.size() > 0) {\n                List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n                for(ODocument doc: forums) {\n                    Map<String, String> map = new HashMap<String, String>();\n                    map.put(\"id\", doc.field(\"id\"));\n                    map.put(\"value\", doc.field(\"@rid\").toString());\n                    list.add(map);\n                }\n                json = mapper.writeValueAsString(list);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    protected ODocument addPost(Map<String, Object> data) throws Exception {\n        ODocument post = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            post = new ODocument(schema.getClass(\"Post\"));\n            post.field(\"host\", data.get(\"host\"));\n            post.field(\"id\", data.get(\"id\"));\n            post.field(\"title\", data.get(\"title\"));\n            if(data.get(\"content\") != null) post.field(\"content\", data.get(\"content\"));\n            post.field(\"createDate\", data.get(\"createDate\"));\n            post.field(\"createUserId\", data.get(\"createUserId\"));\n            // parent\n            OIndex<?> forumHostIdIdx = db.getMetadata().getIndexManager().getIndex(\"forumHostIdIdx\");\n            OCompositeKey parentKey = new OCompositeKey(data.get(\"host\"), data.get(\"parentId\"));\n            OIdentifiable parentOid = (OIdentifiable) forumHostIdIdx.get(parentKey);\n            if(parentOid != null) {\n                ODocument parent = (ODocument)parentOid.getRecord();\n                post.field(\"parent\", parent);\n                // update parent with the posts\n                List posts = parent.field(\"posts\");\n                if(posts != null) {\n                    posts.add(post);\n                } else {\n                    posts = new ArrayList<ODocument>();\n                    posts.add(post);\n                    parent.field(\"posts\", posts);\n                }\n                parent.save();\n            }\n            // tags\n            Map<String, Object> tagMap = new HashMap<String, Object>();\n            Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n            String host = (String)data.get(\"host\");\n            String className = post.getClassName();\n            for(String tagName: inputTags) {\n                ODocument tag = null;\n                // get the tag is it exists\n                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                OCompositeKey tagKey = new OCompositeKey(host, tagName, className);\n                OIdentifiable tagOid = (OIdentifiable) hostNameClassIdx.get(tagKey);\n                if (tagOid != null) {\n                    tag = (ODocument) tagOid.getRecord();\n                    Set links = tag.field(\"links\");\n                    links.add(post);\n                    tag.save();\n                } else {\n                    tag = new ODocument(schema.getClass(\"Tag\"));\n                    tag.field(\"host\", host);\n                    tag.field(\"name\", tagName);\n                    tag.field(\"class\", className);\n                    tag.field(\"createDate\", data.get(\"createDate\"));\n                    tag.field(\"createUserId\", data.get(\"createUserId\"));\n                    Set links = new HashSet<String>();\n                    links.add(post);\n                    tag.field(\"links\", links);\n                    tag.save();\n                }\n                tagMap.put(tagName, tag);\n            }\n            post.field(\"tags\", tagMap);\n\n            post.save();\n            // synch post id\n            OIndex<?> counterNameIdx = db.getMetadata().getIndexManager().getIndex(\"Counter.name\");\n            OIdentifiable counterOid = (OIdentifiable) counterNameIdx.get(\"postId\");\n            if (counterOid != null) {\n                ODocument counter = (ODocument) counterOid.getRecord();\n                if(!data.get(\"id\").equals(counter.field(\"value\"))) {\n                    counter.field(\"value\", data.get(\"id\"));\n                    counter.save();\n                }\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return post;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.AbstractForumRule",
      "createDate": "2015-01-12T03:09:31.506"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:31.506",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:125",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class DelForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBfnEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DelForumEvRule",
      "createDate": "2015-01-12T03:09:31.709"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:31.709",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:126",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.form.AbstractFormRule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class GetForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfn(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.GetForumRule",
      "createDate": "2015-01-12T03:09:31.934"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:31.934",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:127",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.user.AbstractUserRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class AddForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBfnEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.AddForumEvRule",
      "createDate": "2015-01-12T03:09:32.123"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:32.123",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:128",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.user.AbstractUserRule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class AddForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBfn(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.AddForumRule",
      "createDate": "2015-01-12T03:09:32.357"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:32.357",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:129",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class DelForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBfn(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DelForumRule",
      "createDate": "2015-01-12T03:09:32.527"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:32.527",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:130",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 02/12/14.\n */\npublic class AddPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPostEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.AddPostEvRule",
      "createDate": "2015-01-12T03:09:32.700"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:32.700",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:131",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.user.AbstractUserRule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class UpdForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBfn(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpdForumRule",
      "createDate": "2015-01-12T03:09:32.883"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:32.883",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:132",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class UpdForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBfnEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpdForumEvRule",
      "createDate": "2015-01-12T03:09:33.109"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:33.109",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:133",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 02/12/14.\n */\npublic class AddPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPost(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.AddPostRule",
      "createDate": "2015-01-12T03:09:33.289"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:33.289",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:134",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 28/11/14.\n */\npublic class GetForumTreeRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnTree(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.GetForumTreeRule",
      "createDate": "2015-01-12T03:09:33.454"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:33.454",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:135",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 01/12/14.\n */\npublic class GetForumPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnPost(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.GetForumPostRule",
      "createDate": "2015-01-12T03:09:33.619"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:33.619",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:136",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 28/11/14.\n */\npublic class GetForumDropdownRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnDropdown(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.GetForumDropdownRule",
      "createDate": "2015-01-12T03:09:33.793"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:33.793",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:137",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.test;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by admin on 2015-01-09.\n */\npublic class GetTestRule extends AbstractRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        inputMap.put(\"result\", \"I've got your command!\");\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.test.GetTestRule",
      "createDate": "2015-01-12T03:09:33.977"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:33.977",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:138",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\n\nimport java.util.*;\n\n/**\n * Created by steve on 03/12/14.\n */\npublic abstract class AbstractCommentRule extends AbstractRule implements Rule {\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected ODocument addComment(Map<String, Object> data) throws Exception {\n        ODocument comment = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            comment = new ODocument(schema.getClass(\"Comment\"));\n            comment.field(\"host\", data.get(\"host\"));\n            comment.field(\"id\", data.get(\"id\"));\n            comment.field(\"content\", data.get(\"comment\"));\n            comment.field(\"createDate\", data.get(\"createDate\"));\n            comment.field(\"createUserId\", data.get(\"createUserId\"));\n            // parent\n            OIndex<?> idIdx = db.getMetadata().getIndexManager().getIndex(data.get(\"parentClassName\") + \".id\");\n            OIdentifiable oid = (OIdentifiable) idIdx.get(data.get(\"parentId\"));\n            if (oid != null) {\n                ODocument parent = (ODocument) oid.getRecord();\n                comment.field(\"parent\", parent);\n                List children = parent.field(\"children\");\n                if(children == null) {\n                    children = new ArrayList<ODocument>();\n                    children.add(comment);\n                    parent.field(\"children\", children);\n                } else {\n                    children.add(comment);\n                }\n                parent.save();\n            }\n            comment.save();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return comment;\n    }\n\n    protected long getTotal(Map<String, Object> data, Map<String, Object> criteria) {\n        long total = 0;\n        StringBuilder sb = new StringBuilder(\"SELECT COUNT(*) as count FROM (TRAVERSE children FROM \").append(data.get(\"@rid\")).append(\") \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sb.append(whereClause);\n        }\n\n        System.out.println(\"sql=\" + sb);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            total = ((ODocument)db.query(new OSQLSynchQuery<ODocument>(sb.toString())).get(0)).field(\"count\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return total;\n    }\n\n    protected String getComment(Map<String, Object> data, Map<String, Object> criteria) {\n        String json = null;\n        StringBuilder sb = new StringBuilder(\"SELECT FROM (TRAVERSE children FROM \").append(data.get(\"@rid\")).append(\") \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sb.append(whereClause);\n        }\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sb.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sb.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sb.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sb.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sb);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sb.toString());\n            List<ODocument> list = db.command(query).execute();\n            if(list.size() > 0) {\n                json = OJSONWriter.listToJSON(list, null);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    protected String getCommentTree(Map<String, Object> data) {\n        String json = null;\n        String sql = \"SELECT FROM Comment WHERE parent = ? ORDER BY id DESC\";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> forums = db.command(query).execute(data.get(\"@rid\"));\n            if(forums.size() > 0) {\n                json = OJSONWriter.listToJSON(forums, \"fetchPlan:children:-1\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.AbstractCommentRule",
      "createDate": "2015-01-12T03:09:34.148"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:34.148",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:139",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n */\npublic class AddCommentEvRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addComment(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.AddCommentEvRule",
      "createDate": "2015-01-12T03:09:34.333"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:34.333",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:140",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.*;\n\n/**\n * Created by steve on 03/12/14.\n */\npublic class GetCommentRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> criteria = new HashMap<String, Object>();\n        criteria.put(\"@class\", \"Comment\");\n        long total = getTotal(data, criteria);\n        if(total > 0) {\n            String json = getComment(data, criteria);\n            List<Map<String, Object>> comments\n                    = mapper.readValue(json, new TypeReference<List<HashMap<String, Object>>>() {});\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"comments\", comments);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No user can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.GetCommentRule",
      "createDate": "2015-01-12T03:09:34.533"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:34.533",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:141",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n */\npublic class AddCommentRule extends AbstractCommentRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String parentRid = (String)data.get(\"@rid\");\n        String comment = (String)data.get(\"comment\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(host == null || parentRid == null || comment == null) {\n            error = \"Host, parentRid and comment are required\";\n            inputMap.put(\"responseCode\", 400);\n        } else {\n            if(payload == null) {\n                error = \"Login is required\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n                // make sure that the parent exists.\n                ODocument parent = DbService.getODocumentByRid(parentRid);\n                if(parent != null) {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    // identify parent.\n                    eventData.put(\"host\", host);\n                    eventData.put(\"parentClassName\", parent.getClassName());\n                    eventData.put(\"parentId\", parent.field(\"id\"));\n                    // generate unique identifier\n                    eventData.put(\"id\", DbService.incrementCounter(\"commentId\"));\n                    eventData.put(\"comment\", comment);\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                } else {\n                    error = \"Parent with @rid \" + parentRid + \" doesn't exist\";\n                    inputMap.put(\"responseCode\", 404);\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.AddCommentRule",
      "createDate": "2015-01-12T03:09:34.714"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:34.714",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:142",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.forum.AbstractForumRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n */\npublic class GetCommentTreeRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String comments = getCommentTree(data);\n        if(comments != null) {\n            inputMap.put(\"result\", comments);\n            return true;\n        } else {\n            inputMap.put(\"error\", \"No comment can be found\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.GetCommentTreeRule",
      "createDate": "2015-01-12T03:09:34.879"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:34.879",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:143",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class DelMenuItemEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delMenuItem(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.DelMenuItemEvRule",
      "createDate": "2015-01-12T03:09:35.094"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:35.094",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:144",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class UpdMenuEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updMenu(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuEvRule",
      "createDate": "2015-01-12T03:09:35.280"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:35.280",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:145",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class UpdMenuItemEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updMenuItem(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuItemEvRule",
      "createDate": "2015-01-12T03:09:35.481"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:35.481",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:146",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class AddMenuItemRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"menuAdmin\") && !roles.contains(\"admin\")) {\n                error = \"Role owner or admin or menuAdmin is required to add menuItem\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null && !host.equals(data.get(\"host\"))) {\n                    error = \"User can only add menuItem for host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    String json = getMenuItem((String)data.get(\"label\"));\n                    if(json != null) {\n                        error = \"MenuItem for the label exists\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                        if(host == null) {\n                            eventData.remove(\"host\");\n                        }\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AddMenuItemRule",
      "createDate": "2015-01-12T03:09:35.661"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:35.661",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:147",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class AddMenuEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addMenu(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AddMenuEvRule",
      "createDate": "2015-01-12T03:09:35.844"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:35.844",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:148",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 10/27/2014.\n * The menuMap.cache has three type of keys. host, label and @rid\n */\npublic abstract class AbstractMenuRule extends AbstractRule implements Rule {\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected String getJsonByRid(String rid) {\n        String json = null;\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            json = (String)cache.get(\"rid\");\n        }\n        if(json == null) {\n            json = DbService.getJsonByRid(rid);\n            // put it into the blog cache.\n            if(json != null) {\n                if(cache == null) {\n                    cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                            .maximumWeightedCapacity(1000)\n                            .build();\n                    menuMap.put(\"cache\", cache);\n                }\n                cache.put(rid, json);\n            }\n        }\n        return json;\n    }\n\n    protected void delMenu(Map<String, Object> data) throws Exception {\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        String host = (String)data.get(\"host\");\n        try {\n            db.begin();\n            OIndex<?> menuHostIdx = db.getMetadata().getIndexManager().getIndex(\"Menu.host\");\n            OIdentifiable oidMenu = (OIdentifiable) menuHostIdx.get(host);\n            if (oidMenu != null) {\n                ODocument menu = (ODocument)oidMenu.getRecord();\n                //  cascade deleting all menuItems belong to the host only.\n                List<ODocument> menuItems = menu.field(\"menuItems\");\n                if(menuItems != null) {\n                    for(ODocument menuItem: menuItems) {\n                        if(menuItem != null && menuItem.field(\"host\") != null) {\n                            db.delete(menuItem);\n                        }\n                    }\n                }\n                db.delete(menu);\n                db.commit();\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        Map<String, Object> menuMap = ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(host);\n        }\n    }\n\n    protected void delMenuItem(Map<String, Object> data) throws Exception {\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OIndex<?> menuItemIdIdx = db.getMetadata().getIndexManager().getIndex(\"MenuItem.id\");\n            OIdentifiable oidMenuItem = (OIdentifiable) menuItemIdIdx.get(data.get(\"id\"));\n            if (oidMenuItem != null) {\n                db.begin();\n                ODocument menuItem = (ODocument)oidMenuItem.getRecord();\n                db.delete(menuItem);\n                db.commit();\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        // no need to refresh cache as there is no reference to this menuItem anywhere.\n    }\n\n    protected String addMenu(Map<String, Object> data) throws Exception {\n        String json = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            ODocument menu = new ODocument(schema.getClass(\"Menu\"));\n            menu.field(\"host\", data.get(\"host\"));\n            menu.field(\"createDate\", data.get(\"createDate\"));\n            menu.field(\"createUserId\", data.get(\"createUserId\"));\n            List<String> menuItemIds = (List<String>)data.get(\"menuItems\");\n            if(menuItemIds != null && menuItemIds.size() > 0) {\n                List menuItems = new ArrayList<ODocument>();\n                OIndex<?> menuItemIdIdx = db.getMetadata().getIndexManager().getIndex(\"MenuItem.id\");\n                for(String menuItemId: menuItemIds) {\n                    // this is a unique index, so it retrieves a OIdentifiable\n                    OIdentifiable oid = (OIdentifiable) menuItemIdIdx.get(menuItemId);\n                    if (oid != null) {\n                        ODocument menuItem = (ODocument)oid.getRecord();\n                        menuItems.add(menuItem);\n                    }\n                }\n                menu.field(\"menuItems\", menuItems);\n            }\n            menu.save();\n            db.commit();\n            Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n            if(cache == null) {\n                cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                        .maximumWeightedCapacity(100)\n                        .build();\n                menuMap.put(\"cache\", cache);\n            }\n            json = menu.toJSON(\"fetchPlan:*:2\");\n            cache.put(data.get(\"host\"), json);\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    protected String addMenuItem(Map<String, Object> data) throws Exception {\n        String json = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            ODocument menuItem = new ODocument(schema.getClass(\"MenuItem\"));\n            menuItem.field(\"id\", data.get(\"id\"));\n            menuItem.field(\"label\", data.get(\"label\"));\n            menuItem.field(\"host\", data.get(\"host\"));\n            menuItem.field(\"path\", data.get(\"path\"));\n            menuItem.field(\"tpl\", data.get(\"tpl\"));\n            menuItem.field(\"ctrl\", data.get(\"ctrl\"));\n            menuItem.field(\"left\", data.get(\"left\"));\n            menuItem.field(\"roles\", data.get(\"roles\"));\n            menuItem.field(\"createDate\", data.get(\"createUser\"));\n            menuItem.field(\"createUserId\", data.get(\"createUserId\"));\n            menuItem.save();\n            db.commit();\n            json = menuItem.toJSON();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    protected String getMenu(String host) {\n        String json = null;\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            json = (String)cache.get(host);\n        }\n        if(json == null) {\n            ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n            try {\n                OIndex<?> menuHostIdx = db.getMetadata().getIndexManager().getIndex(\"Menu.host\");\n                // this is a unique index, so it retrieves a OIdentifiable\n                OIdentifiable oid = (OIdentifiable) menuHostIdx.get(host);\n                if (oid != null) {\n                    ODocument doc = (ODocument)oid.getRecord();\n                    json = doc.toJSON(\"fetchPlan:*:2\");\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n                throw e;\n            } finally {\n                db.close();\n            }\n            if(json != null) {\n                if(cache == null) {\n                    cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                            .maximumWeightedCapacity(1000)\n                            .build();\n                    menuMap.put(\"cache\", cache);\n                }\n                cache.put(host, json);\n            }\n        }\n        return json;\n    }\n\n    protected String getMenuItem(String id) {\n        String json = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OIndex<?> menuItemIdIdx = db.getMetadata().getIndexManager().getIndex(\"MenuItem.id\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OIdentifiable oid = (OIdentifiable) menuItemIdIdx.get(id);\n            if (oid != null) {\n                ODocument doc = (ODocument)oid.getRecord();\n                json = doc.toJSON();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    protected String getAllMenu(String host) {\n        String json = null;\n\n        String jsonMenu = null;\n        String jsonMenuItem = null;\n        String sqlMenu = \"select from Menu\";\n        if(host != null) {\n            sqlMenu += \" where host = ?\";\n        }\n        String sqlMenuItem = \"select from MenuItem\";\n\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            // assumption here is menuItems are not empty.\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sqlMenuItem);\n            List<ODocument> menuItems = db.command(query).execute(host);\n            if(menuItems.size() > 0) {\n                jsonMenuItem = OJSONWriter.listToJSON(menuItems, null);\n                json = \"{\\\"menuItems\\\":\" + jsonMenuItem;\n            }\n\n            query = new OSQLSynchQuery<>(sqlMenu);\n            List<ODocument> menus = db.command(query).execute(host);\n            if(menus.size() > 0) {\n                jsonMenu = OJSONWriter.listToJSON(menus, null);\n                json += \", \\\"menus\\\":\" + jsonMenu + \"}\";\n            } else {\n                json += \"}\";\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    protected void updMenu(Map<String, Object> data) throws Exception {\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        String host = (String)data.get(\"host\");\n        try {\n            db.begin();\n            OIndex<?> menuHostIdx = db.getMetadata().getIndexManager().getIndex(\"Menu.host\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OIdentifiable oidMenu = (OIdentifiable) menuHostIdx.get(host);\n            if (oidMenu != null) {\n                ODocument menu = (ODocument) oidMenu.getRecord();\n                // update menuItems.\n                List inputItemIds = (List)data.get(\"menuItemIds\");\n                if(inputItemIds != null && inputItemIds.size() > 0) {\n                    OIndex<?> menuItemIdIdx = db.getMetadata().getIndexManager().getIndex(\"MenuItem.id\");\n                    List menuItems = new ArrayList();\n                    for(Object obj : inputItemIds) {\n                        if(obj != null) {\n                            String id = (String)obj;\n                            OIdentifiable oidMenuItem = (OIdentifiable) menuItemIdIdx.get(id);\n                            if(oidMenuItem != null) {\n                                ODocument menuItem = (ODocument)oidMenuItem.getRecord();\n                                menuItems.add(menuItem);\n                            }\n                        }\n                    }\n                    menu.field(\"menuItems\", menuItems);\n                } else {\n                    // this is to remove the existing menuItem if there are any.\n                    menu.removeField(\"menuItems\");\n                }\n                menu.field(\"updateDate\", data.get(\"updateDate\"));\n                menu.field(\"updateUserId\", data.get(\"updateUserId\"));\n                menu.save();\n                db.commit();\n            }\n            // remove the cache item in order to reload the menu.\n            Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"host\"));\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n    }\n\n    protected String getAllMenuItem(String host) {\n        String json = null;\n        String sql = \"SELECT FROM MenuItem\";\n        if(host != null) {\n            sql += \" WHERE host = ? OR host IS NULL\";\n        }\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> menuItems = db.command(query).execute(host);\n            if(menuItems.size() > 0) {\n                List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n                for(ODocument doc: menuItems) {\n                    Map<String, String> map = new HashMap<String, String>();\n                    map.put(\"id\", doc.field(\"id\"));\n                    map.put(\"value\", doc.field(\"@rid\").toString());\n                    list.add(map);\n                }\n                json = mapper.writeValueAsString(list);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    protected void updMenuItem(Map<String, Object> data) throws Exception {\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        String id = (String)data.get(\"id\");\n        try {\n            db.begin();\n            OIndex<?> menuItemIdIdx = db.getMetadata().getIndexManager().getIndex(\"MenuItem.id\");\n            OIdentifiable oidMenuItem = (OIdentifiable) menuItemIdIdx.get(id);\n            if(oidMenuItem != null) {\n                ODocument menuItem = oidMenuItem.getRecord();\n                List inputItemIds = (List)data.get(\"menuItemIds\");\n                if(inputItemIds != null && inputItemIds.size() > 0) {\n                    List menuItems = new ArrayList();\n                    for(Object obj : inputItemIds) {\n                        if(obj != null) {\n                            String menuItemId = (String)obj;\n                            OIdentifiable oid = (OIdentifiable) menuItemIdIdx.get(menuItemId);\n                            if(oid != null) {\n                                ODocument item = (ODocument)oid.getRecord();\n                                menuItems.add(item);\n                            }\n                        }\n                    }\n                    menuItem.field(\"menuItems\", menuItems);\n                } else {\n                    // this is to remove the existing menuItem if there are any.\n                    menuItem.removeField(\"menuItems\");\n                }\n                String path = (String)data.get(\"path\");\n                if(path != null && !path.equals(menuItem.field(\"path\"))) {\n                    menuItem.field(\"path\", path);\n                }\n                String tpl = (String)data.get(\"tpl\");\n                if(tpl != null && !tpl.equals(menuItem.field(\"tpl\"))) {\n                    menuItem.field(\"tpl\", tpl);\n                }\n                String ctrl = (String)data.get(\"ctrl\");\n                if(ctrl != null && !ctrl.equals(menuItem.field(\"ctrl\"))) {\n                    menuItem.field(\"ctrl\", ctrl);\n                }\n                Boolean left = (Boolean)data.get(\"left\");\n                if(left != null && !left.equals(menuItem.field(\"left\"))) {\n                    menuItem.field(\"left\", left);\n                }\n                List roles = (List)data.get(\"roles\");\n                if(roles != null) {\n                    menuItem.field(\"roles\", roles);\n                } else {\n                    menuItem.field(\"roles\", new ArrayList());\n                }\n                menuItem.field(\"updateDate\", data.get(\"updateDate\"));\n                menuItem.field(\"updateUserId\", data.get(\"updateUserId\"));\n                menuItem.save();\n                db.commit();\n            }\n            // remove the cache item in order to reload the menu.\n            Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n            if(cache != null) {\n                if(data.get(\"host\") != null) {\n                    cache.remove(data.get(\"host\"));\n                } else {\n                    // A common menuItem has been updated, remove all hosts in cache\n                    cache.clear();\n                }\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AbstractMenuRule",
      "createDate": "2015-01-12T03:09:36.012"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:36.012",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:149",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class UpdMenuItemRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"menuAdmin\") && !roles.contains(\"admin\")) {\n                error = \"Role owner or admin or menuAdmin is required to update menuItem\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null && !host.equals(data.get(\"host\"))) {\n                    error = \"User can only update menuItem for host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    ODocument menuItem = DbService.getODocumentByRid(rid);\n                    if(menuItem == null) {\n                        error = \"MenuItem with @rid \" + rid + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        // need to make sure that all the menuItems exist and convert to id for event replay.\n                        List menuItemIds = new ArrayList<String>();\n                        List<String> menuItems = (List<String>)data.get(\"menuItems\");\n                        if(menuItems != null && menuItems.size() > 0) {\n                            for(String menuItemRid: menuItems) {\n                                ODocument childItem = DbService.getODocumentByRid(menuItemRid);\n                                if(childItem == null) {\n                                    error = \"MenuItem with @rid \" + menuItemRid + \" cannot be found\";\n                                    inputMap.put(\"responseCode\", 404);\n                                    break;\n                                } else {\n                                    menuItemIds.add(childItem.field(\"id\"));\n                                }\n                            }\n                        }\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"id\", menuItem.field(\"id\"));\n                        eventData.put(\"path\", data.get(\"path\"));\n                        eventData.put(\"tpl\", data.get(\"tpl\"));\n                        eventData.put(\"ctrl\", data.get(\"ctrl\"));\n                        eventData.put(\"left\", data.get(\"left\"));\n                        eventData.put(\"roles\", data.get(\"roles\"));\n                        eventData.put(\"menuItemIds\", menuItemIds);\n                        // TODO remove host for owner?\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuItemRule",
      "createDate": "2015-01-12T03:09:36.184"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:36.184",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:150",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 13/11/14.\n */\npublic class GetAllMenuItemRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\") || roles.contains(\"menuAdmin\") || roles.contains(\"admin\")) {\n            String host = (String) user.get(\"host\");\n            String menuItems = getAllMenuItem(host);\n            if(menuItems != null) {\n                inputMap.put(\"result\", menuItems);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No menuItem can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"Permission denied\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.GetAllMenuItemRule",
      "createDate": "2015-01-12T03:09:36.348"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:36.348",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:151",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.form.AbstractFormRule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 29/10/14.\n */\npublic class GetAllMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\") || roles.contains(\"menuAdmin\") || roles.contains(\"admin\")) {\n            String host = (String) user.get(\"host\");\n            String menus = getAllMenu(host);\n            if(menus != null) {\n                inputMap.put(\"result\", menus);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No menu can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"Permission denied\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.GetAllMenuRule",
      "createDate": "2015-01-12T03:09:36.534"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:36.534",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:152",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class DelMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"menuAdmin\") && !roles.contains(\"admin\")) {\n                error = \"Role owner or admin or menuAdmin is required to delete menu\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null && !host.equals(data.get(\"host\"))) {\n                    error = \"User can only delete menu for host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    ODocument menu = DbService.getODocumentByRid(rid);\n                    if(menu == null) {\n                        error = \"Menu with @rid \" + rid + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"host\", menu.field(\"host\"));// unique key\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.DelMenuRule",
      "createDate": "2015-01-12T03:09:36.714"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:36.714",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:153",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 23/09/14.\n */\npublic class GetMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String host = (String) data.get(\"host\");\n        String json = getMenu(host);\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Menu for host \" + host + \" cannot be found.\");\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.GetMenuRule",
      "createDate": "2015-01-12T03:09:36.933"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:36.933",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:154",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class AddMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            // this is the owner that adding menu for another site. let it go.\n            if(!roles.contains(\"owner\")) {\n                error = \"Role owner is required to add menu\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                if(user.get(\"host\") != null) {\n                    error = \"Role owner should not have host in his/her profile\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    String host = (String)data.get(\"host\");\n                    String json = getMenu((String)data.get(\"host\"));\n                    if(json != null) {\n                        error = \"Menu for the host exists\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"host\", host);\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n\n                        // make sure all menuItems exist if there are any.\n                        List<String> menuItemRids = (List<String>)data.get(\"menuItems\");\n                        if(menuItemRids != null && menuItemRids.size() > 0) {\n                            List<String> menuItemIds = new ArrayList<String>();\n                            for(String menuItemRid: menuItemRids) {\n                                if(menuItemRid != null) {\n                                    ODocument menuItem = DbService.getODocumentByRid(menuItemRid);\n                                    if(menuItem == null) {\n                                        error = \"MenuItem with @rid \" + menuItemRid + \" cannot be found.\";\n                                        inputMap.put(\"responseCode\", 404);\n                                        break;\n                                    } else {\n                                        menuItemIds.add(menuItem.field(\"id\"));\n                                    }\n                                }\n                            }\n                            eventData.put(\"menuItems\", menuItemIds);\n                        }\n\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AddMenuRule",
      "createDate": "2015-01-12T03:09:37.109"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:37.109",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:155",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class UpdMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"menuAdmin\") && !roles.contains(\"admin\")) {\n                error = \"Role owner or admin or menuAdmin is required to update menu\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null && !host.equals(data.get(\"host\"))) {\n                    error = \"User can only update menu for host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    ODocument menu = DbService.getODocumentByRid(rid);\n                    if(menu == null) {\n                        error = \"Menu with @rid \" + rid + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        int inputVersion = (int)data.get(\"@version\");\n                        int storedVersion = menu.field(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            // need to make sure that all the menuItems exist and convert to id for event replay.\n                            List menuItemIds = new ArrayList<String>();\n                            List<String> menuItems = (List<String>)data.get(\"menuItems\");\n                            for(String menuItemRid: menuItems) {\n                                ODocument menuItem = DbService.getODocumentByRid(menuItemRid);\n                                if(menuItem == null) {\n                                    error = \"MenuItem with @rid \" + menuItemRid + \" cannot be found\";\n                                    inputMap.put(\"responseCode\", 404);\n                                    break;\n                                } else {\n                                    menuItemIds.add(menuItem.field(\"id\"));\n                                }\n                            }\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"host\", data.get(\"host\"));\n                            eventData.put(\"menuItemIds\", menuItemIds);\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuRule",
      "createDate": "2015-01-12T03:09:37.288"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:37.288",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:156",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class AddMenuItemEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addMenuItem(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AddMenuItemEvRule",
      "createDate": "2015-01-12T03:09:37.508"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:37.508",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:157",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class DelMenuEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delMenu(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.DelMenuEvRule",
      "createDate": "2015-01-12T03:09:37.687"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:37.687",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:158",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class DelMenuItemRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"menuAdmin\") && !roles.contains(\"admin\")) {\n                error = \"Role owner or admin or menuAdmin is required to delete menuItem\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null && !host.equals(data.get(\"host\"))) {\n                    error = \"User can only delete menuItem for host: \" + host;\n                    inputMap.put(\"responseCode\", 401);\n                } else {\n                    ODocument menuItem = DbService.getODocumentByRid(rid);\n                    if(menuItem == null) {\n                        error = \"MenuItem with @rid \" + rid + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        // find out if there are reference to the menuItem in Menu or MenuItem class\n                        // note there is no space between classes.\n                        if(DbService.hasReference(rid, \"Menu,MenuItem\")) {\n                            error = \"MenuItem is referenced by other entities\";\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"id\", menuItem.field(\"id\"));  // unique key\n                        }\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.DelMenuItemRule",
      "createDate": "2015-01-12T03:09:37.872"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:37.872",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:159",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.product;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic abstract class AbstractProductRule extends AbstractRule implements Rule {\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected ODocument getProductByHostName(String host, String name) {\n        ODocument product = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OIndex<?> hostNameIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameIdx\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OCompositeKey key = new OCompositeKey(host, name);\n            OIdentifiable oid = (OIdentifiable) hostNameIdx.get(key);\n            if (oid != null) {\n                product = (ODocument)oid.getRecord();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return product;\n    }\n\n    protected ODocument addProduct(Map<String, Object> data, String userId) throws Exception {\n        ODocument product = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            productMap.put(\"cache\", cache);\n        }\n\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            product = new ODocument(schema.getClass(\"Product\"));\n            product.field(\"host\", data.get(\"host\"));\n            product.field(\"name\", data.get(\"name\"));\n            product.field(\"attributes\", data.get(\"attributes\"));\n            java.util.Date d = new java.util.Date();\n            product.field(\"createDate\", d);\n            product.field(\"updateDate\", d);\n            product.field(\"createUser\", userId);\n            product.save();\n            cache.put(product.field(\"@rid\").toString(), product);\n            String categoryRid = (String)data.get(\"categoryRid\");\n            if(categoryRid != null) {\n                // get the category and update entities list\n                ODocument category = getCategoryByRid(categoryRid);\n                List entities = category.field(\"entities\");\n                if(entities == null) {\n                    entities = new ArrayList();\n                }\n                entities.add(product);\n                category.field(\"entities\", entities);\n                category.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return product;\n    }\n\n    protected void delProduct(String productRid) throws Exception {\n        ODocument product = DbService.delODocumentByRid(productRid);\n        // rebuild cache in memory.\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        // update central cache\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(productRid);\n        }\n    }\n\n    protected void updProduct(String productRid, Map<String, Object> data) throws Exception {\n        ODocument product = getProductByRid(productRid);\n        if(product != null) {\n            product.field(\"name\", data.get(\"name\"));\n            product.field(\"attributes\", data.get(\"attributes\"));\n            product.field(\"updateDate\", new java.util.Date());\n            product.save();\n        }\n    }\n\n    protected List<ODocument> searchProductDb(Map<String, Object> criteria) {\n        List<ODocument> products = null;\n        StringBuilder sql = new StringBuilder(\"SELECT FROM Product \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sql.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sql.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sql.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sql.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql.toString());\n            products = db.command(query).execute();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return products;\n    }\n\n    protected String searchProduct(Map<String, Object> criteria) throws Exception {\n        // first check if the full list is in cache.\n        String json = null;\n        Map<String, Object> result = new HashMap<String, Object>();\n        List<ODocument> products = new ArrayList<ODocument>();\n        int total = 0;\n        String host = (String)criteria.get(\"host\");\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        Map<String, Object> hostMap = (Map<String, Object>)productMap.get(host);\n        if(hostMap == null) {\n            hostMap = new ConcurrentHashMap<String, Object>(10, 0.9f, 1);\n            productMap.put(host, hostMap);\n        }\n        String key = null;\n        String categoryRid = (String)criteria.get(\"categoryRid\");\n        if(categoryRid != null) {\n            key = categoryRid + criteria.get(\"sortedBy\");\n        } else {\n            key = \"\" + criteria.get(\"sortedBy\");\n        }\n        Integer pageNo = (Integer)criteria.remove(\"pageNo\");\n        Integer pageSize = (Integer)criteria.remove(\"pageSize\");\n        List<String> list = (List<String>)hostMap.get(key);\n        if(list == null) {\n            // not in cache, search from db and put them in cache.\n            List<ODocument> docs = searchProductDb(criteria);\n            total = docs.size();\n            int i = 0;\n            list = new ArrayList<String>();\n            for(ODocument doc: docs) {\n                list.add(doc.field(\"@rid\").toString());\n                if(i >= pageSize * (pageNo - 1) && i < pageSize*pageNo) {\n                    products.add(doc);\n                    i++;\n                    // put only the current page in cache.\n                    ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n                    if(cache == null) {\n                        cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                                .maximumWeightedCapacity(1000)\n                                .build();\n                        productMap.put(\"cache\", cache);\n                    }\n                    cache.put(doc.field(\"@rid\").toString(), doc);\n                }\n            }\n        } else {\n            // we have a list of rids.\n            total = list.size();\n            for(int i = pageSize*(pageNo - 1); i < Math.min(pageSize * pageNo, list.size()); i++) {\n                String rid = (String)list.get(i);\n                ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n                ODocument product = (ODocument)cache.get(rid);\n                if(product == null) {\n                    // not in cache, get from db and put it into the cache.\n                    product = DbService.getODocumentByRid(rid);\n                    cache.put(rid, product);\n                }\n                products.add(product);\n            }\n        }\n        if(products != null && products.size() > 0) {\n            result.put(\"total\", total);\n            result.put(\"products\", OJSONWriter.listToJSON(products, null));\n            json = mapper.writeValueAsString(result);\n        }\n        return json;\n    }\n\n    protected Map<String, Object> refreshCache(String host) {\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        Map<String, Object> criteria = new HashMap<String, Object>();\n        criteria.put(\"host\", host);\n        criteria.put(\"sortedBy\", \"updateDate\");\n        criteria.put(\"sortDir\", \"DESC\");\n        List<ODocument> products = searchProductDb(criteria);\n        Map<String, Object> hostMap = new ConcurrentHashMap<String, Object>(2, 0.9f, 1);\n        List<String> newList = new ArrayList<String>();\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            productMap.put(\"cache\", cache);\n        }\n        int i = 0;\n        int pageSize = 2; // TODO get from config\n        for (ODocument product : products) {\n            // cache the first page for now. most people will read the first page as it contains\n            // new posts.\n            if(i < pageSize) {\n                cache.put(product.field(\"@rid\").toString(), product);\n            }\n            newList.add(product.field(\"@rid\").toString());\n        }\n        hostMap.put(\"newList\", newList);\n\n        // TODO build hot list\n\n        productMap.put(host, hostMap);\n        return hostMap;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.AbstractProductRule",
      "createDate": "2015-01-12T03:09:38.033"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:38.033",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:160",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.product;\n\nimport com.networknt.light.rule.Rule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class AddProductRule extends AbstractProductRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n\n        String host = (String)data.get(\"host\");\n        String name = (String)data.get(\"name\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            // TODO check if the user has permission to do so.\n\n            ODocument product = getProductByHostName(host, name);\n            if(product != null) {\n                error = \"Product with the same name exists in host\" + host;\n                inputMap.put(\"responseCode\", 400);\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.AddProductRule",
      "createDate": "2015-01-12T03:09:38.219"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:38.219",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:161",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.product;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.category.AbstractCategoryRule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class DelProductRule extends AbstractProductRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n\n        String rid = (String)data.get(\"@rid\");\n        String host = (String)data.get(\"host\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            // TODO check if the user has permission to do so.\n\n            ODocument product = getProductByRid(rid);\n            if(product == null) {\n                error = \"Category does not exist in host\" + host;\n                inputMap.put(\"responseCode\", 404);\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.DelProductRule",
      "createDate": "2015-01-12T03:09:38.400"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:38.400",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:162",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.product;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.category.AbstractCategoryRule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class DelProductEvRule extends AbstractProductRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String productRid = (String) data.get(\"@rid\");\n        delProduct(productRid);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.DelProductEvRule",
      "createDate": "2015-01-12T03:09:38.613"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:38.613",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:163",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.product;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.category.AbstractCategoryRule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class UpdProductRule extends AbstractProductRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n\n        String rid = (String)data.get(\"@rid\");\n        String host = (String)data.get(\"host\");\n        int inputVersion = (int)data.get(\"@version\");\n\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            // TODO check if the user has permission to do so.\n\n            ODocument product = getProductByRid(rid);\n            if(product == null) {\n                error = \"Product does not exist in host\" + host;\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if the version is the same.\n                int storedVersion = (int)product.field(\"@version\");\n                if(inputVersion != storedVersion) {\n                    error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    inputMap.put(\"responseCode\", 400);\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.UpdProductRule",
      "createDate": "2015-01-12T03:09:38.826"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:38.826",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:164",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.product;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.category.AbstractCategoryRule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class AddProductEvRule extends AbstractProductRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String userId = (String)user.get(\"userId\");\n        addProduct(data, userId);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.AddProductEvRule",
      "createDate": "2015-01-12T03:09:39.049"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:39.049",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:165",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.product;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.category.AbstractCategoryRule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic class UpdProductEvRule extends AbstractProductRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String productRid = (String) data.get(\"@rid\");\n        updProduct(productRid, data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.UpdProductEvRule",
      "createDate": "2015-01-12T03:09:39.261"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:39.261",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:166",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.product;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.blog.AbstractBlogRule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by husteve on 10/14/2014.\n * if there is category passed in get the list of products in that category and subcategories.\n * sort by order by\n *\n */\npublic class GetProductRule extends AbstractProductRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> productMap = ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        String host = (String)data.get(\"host\");\n        if(host == null) {\n            inputMap.put(\"result\", \"host is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        Integer pageSize = (Integer)data.get(\"pageSize\");\n        if(pageSize == null) {\n            inputMap.put(\"result\", \"pageSize is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        Integer pageNo = (Integer)data.get(\"pageNo\");\n        if(pageNo == null) {\n            inputMap.put(\"result\", \"pageNo is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        String json = searchProduct(data);\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No product can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.GetProductRule",
      "createDate": "2015-01-12T03:09:39.420"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:39.420",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:167",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class DelNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBfn(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DelNewsRule",
      "createDate": "2015-01-12T03:09:39.627"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:39.627",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:168",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class GetNewsTreeRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnTree(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.GetNewsTreeRule",
      "createDate": "2015-01-12T03:09:39.814"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:39.814",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:169",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBfnEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.AddNewsEvRule",
      "createDate": "2015-01-12T03:09:39.973"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:39.973",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:170",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class UpdNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBfnEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpdNewsEvRule",
      "createDate": "2015-01-12T03:09:40.134"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:40.134",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:171",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class GetNewsDropdownRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnDropdown(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.GetNewsDropdownRule",
      "createDate": "2015-01-12T03:09:40.308"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:40.308",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:172",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class GetNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfn(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.GetNewsRule",
      "createDate": "2015-01-12T03:09:40.516"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:40.516",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:173",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class DelNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBfnEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DelNewsEvRule",
      "createDate": "2015-01-12T03:09:40.698"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:40.698",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:174",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBfn(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.AddNewsRule",
      "createDate": "2015-01-12T03:09:40.879"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:40.879",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:175",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPostEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.AddPostEvRule",
      "createDate": "2015-01-12T03:09:41.047"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:41.047",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:176",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class GetNewsPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnPost(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.GetNewsPostRule",
      "createDate": "2015-01-12T03:09:41.209"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:41.209",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:177",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPost(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.AddPostRule",
      "createDate": "2015-01-12T03:09:41.370"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:41.370",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:178",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class UpdNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBfn(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpdNewsRule",
      "createDate": "2015-01-12T03:09:41.562"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:41.562",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:179",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.role.AbstractRoleRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 07/11/14.\n */\npublic class DelRuleEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delRule(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.DelRuleEvRule",
      "createDate": "2015-01-12T03:09:41.760"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:41.760",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:180",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.role.AbstractRoleRule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic class GetRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\") || roles.contains(\"admin\") || roles.contains(\"ruleAdmin\")) {\n            String host = (String) user.get(\"host\");\n            String hostRules = getRules(host);\n            if(hostRules != null) {\n                inputMap.put(\"result\", hostRules);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No rule can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"Permission denied\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.GetRuleRule",
      "createDate": "2015-01-12T03:09:41.988"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:41.988",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:181",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n *\n * This is the rule that allow user to add brand new rule from rule admin interface. It will fail\n * if the rule exist in database. And normally, you only construct simple rules on the fly. Most of\n * the time, you should use impRuleRule instead.\n *\n *\n */\npublic class AddRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"ruleAdmin\")) {\n                error = \"Role owner or admin or ruleAdmin is required to add rule\";\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null) {\n                    if(!host.equals(data.get(\"host\"))) {\n                        error = \"User can only add rule from host: \" + host;\n                        inputMap.put(\"responseCode\", 403);\n                    } else {\n                        // check if the rule exists or not\n                        String json = getRuleByRuleClass((String)data.get(\"ruleClass\"));\n                        if(json != null) {\n                            error = \"ruleClass for the rule exists\";\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"host\", host);\n\n                            eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                            eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                            eventData.put(\"createDate\", new java.util.Date());\n                            eventData.put(\"createUserId\", user.get(\"userId\"));\n                        }\n                    }\n                } else {\n                    // check if the rule exists or not.\n                    String json = getRuleByRuleClass((String)data.get(\"ruleClass\"));\n                    if(json != null) {\n                        error = \"ruleClass for the rule exists\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        // This is owner to import rule, notice that no host is passed in.\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.AddRuleRule",
      "createDate": "2015-01-12T03:09:42.185"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:42.185",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:182",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic class AddRuleEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addRule(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.AddRuleEvRule",
      "createDate": "2015-01-12T03:09:42.394"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:42.394",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:183",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic class UpdRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        int inputVersion = (int)data.get(\"@version\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"ruleAdmin\")) {\n                error = \"Role owner or admin or ruleAdmin is required to update rule\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null) {\n                    if(!host.equals(data.get(\"host\"))) {\n                        error = \"User can only update rule for host: \" + host;\n                        inputMap.put(\"responseCode\", 403);\n                    } else {\n                        ODocument rule = DbService.getODocumentByRid(rid);\n                        if(rule == null) {\n                            error = \"Rule with @rid \" + rid + \" cannot be found\";\n                            inputMap.put(\"responseCode\", 404);\n                        } else {\n                            int storedVersion = rule.field(\"@version\");\n                            if(inputVersion != storedVersion) {\n                                error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                                inputMap.put(\"responseCode\", 400);\n                            } else {\n                                Map eventMap = getEventMap(inputMap);\n                                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                                inputMap.put(\"eventMap\", eventMap);\n                                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                                eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                                eventData.put(\"updateDate\", new java.util.Date());\n                                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            }\n                        }\n                    }\n                } else {\n                    ODocument rule = DbService.getODocumentByRid(rid);\n                    if(rule == null) {\n                        error = \"Rule with @rid \" + rid + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        int storedVersion = rule.field(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                            eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdRuleRule",
      "createDate": "2015-01-12T03:09:42.597"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:42.597",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:184",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic class UpdRuleEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updRule(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdRuleEvRule",
      "createDate": "2015-01-12T03:09:42.782"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:42.782",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:185",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.role.AbstractRoleRule;\nimport com.networknt.light.server.DbService;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 07/11/14.\n */\npublic class DelRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String rid = (String)data.get(\"@rid\");\n        int inputVersion = (int)data.get(\"@version\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"ruleAdmin\")) {\n                error = \"Role owner or admin or ruleAdmin is required to delete rule\";\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null && !host.equals(data.get(\"host\"))) {\n                    error = \"User can only delete rule for host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    ODocument rule = DbService.getODocumentByRid(rid);\n                    if(rule == null) {\n                        error = \"Rule with @rid \" + rid + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        int storedVersion = rule.field(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    }\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.DelRuleRule",
      "createDate": "2015-01-12T03:09:42.953"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:42.953",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:186",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 30/12/14.\n */\npublic class ImpRuleEvRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(ImpRuleEvRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        impRule(data);\n        return true;\n    }\n\n    private String impRule(Map<String, Object> data) throws Exception {\n        String json = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            // remove the existing rule if there is.\n            OIndex<?> ruleClassIdx = db.getMetadata().getIndexManager().getIndex(\"Rule.ruleClass\");\n            OIdentifiable oid = (OIdentifiable) ruleClassIdx.get(data.get(\"ruleClass\"));\n            if (oid != null) {\n                logger.info(\"Rule {} exists in db. Removing...\", data.get(\"ruleClass\"));\n                db.delete((ODocument) oid.getRecord());\n            }\n            // create a new rule\n            ODocument rule = new ODocument(schema.getClass(\"Rule\"));\n            rule.field(\"ruleClass\", data.get(\"ruleClass\"));\n            if(data.get(\"host\") != null) rule.field(\"host\", data.get(\"host\"));\n            rule.field(\"sourceCode\", data.get(\"sourceCode\"));\n            rule.field(\"createDate\", data.get(\"createDate\"));\n            rule.field(\"createUserId\", data.get(\"createUserId\"));\n            rule.save();\n            db.commit();\n            json  = rule.toJSON();\n        } catch (Exception e) {\n            db.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.ImpRuleEvRule",
      "createDate": "2015-01-12T03:09:43.137"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:43.137",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:187",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.metadata.schema.OType;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 30/12/14.\n * This is the rule that will be loaded by the db script in initDatabase to bootstrap rule\n * loading for others. Also, it can be used to import rules developed and tested locally from\n * Rule Admin interface.\n *\n * Warning: it will replace any existing rules if Rule Class is the same.\n *\n */\npublic class ImpRuleRule extends AbstractRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"ruleAdmin\")) {\n                error = \"Role owner or admin or ruleAdmin is required to add rule\";\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null) {\n                    if(!host.equals(data.get(\"host\"))) {\n                        error = \"User can only add rule from host: \" + host;\n                        inputMap.put(\"responseCode\", 403);\n                    } else {\n                        // Won't check if rule exists or not here.\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"host\", host);\n\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                } else {\n                    // This is owner to import rule, notice that no host is passed in.\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n\n                    eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                    eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.ImpRuleRule",
      "createDate": "2015-01-12T03:09:43.366"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:43.366",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:188",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.metadata.schema.OType;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/8/2014.\n */\npublic abstract class AbstractRuleRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractRuleRule.class);\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected String getRuleByRuleClass(String ruleClass) {\n        String json = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OIndex<?> ruleClassIdx = db.getMetadata().getIndexManager().getIndex(\"Rule.ruleClass\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OIdentifiable rule = (OIdentifiable) ruleClassIdx.get(ruleClass);\n            if (rule != null && rule.getRecord() != null) {\n                json = ((ODocument) rule.getRecord()).toJSON();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    protected String addRule(Map<String, Object> data) throws Exception {\n        String json = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            ODocument rule = new ODocument(schema.getClass(\"Rule\"));\n            rule.field(\"ruleClass\", data.get(\"ruleClass\"));\n            if(data.get(\"host\") != null) rule.field(\"host\", data.get(\"host\"));\n            rule.field(\"sourceCode\", data.get(\"sourceCode\"));\n            rule.field(\"createDate\", data.get(\"createDate\"));\n            rule.field(\"createUserId\", data.get(\"createUserId\"));\n            rule.save();\n            db.commit();\n            json  = rule.toJSON();\n        } catch (Exception e) {\n            db.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n    protected void updRule(Map<String, Object> data) throws Exception {\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> ruleClassIdx = db.getMetadata().getIndexManager().getIndex(\"Rule.ruleClass\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OIdentifiable oid = (OIdentifiable) ruleClassIdx.get(data.get(\"ruleClass\"));\n            if (oid != null && oid.getRecord() != null) {\n                ODocument rule = (ODocument) oid.getRecord();\n                String sourceCode = (String)data.get(\"sourceCode\");\n                if(sourceCode != null && !sourceCode.equals(rule.field(\"sourceCode\"))) {\n                    rule.field(\"sourceCode\", sourceCode);\n                }\n                rule.field(\"updateDate\", data.get(\"updateDate\"));\n                rule.field(\"updateUserId\", data.get(\"updateUserId\"));\n                rule.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            db.close();\n        }\n    }\n\n    protected void delRule(Map<String, Object> data) throws Exception {\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n\n            OIndex<?> ruleClassIdx = db.getMetadata().getIndexManager().getIndex(\"Rule.ruleClass\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OIdentifiable oid = (OIdentifiable) ruleClassIdx.get(data.get(\"ruleClass\"));\n            if (oid != null && oid.getRecord() != null) {\n                ODocument rule = (ODocument) oid.getRecord();\n                rule.delete();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            db.close();\n        }\n    }\n\n    protected String getRules(String host) {\n        String sql = \"SELECT FROM Rule\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host;\n        }\n        String json = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> roles = db.command(query).execute();\n            json = OJSONWriter.listToJSON(roles, null);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            db.close();\n        }\n        return json;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.AbstractRuleRule",
      "createDate": "2015-01-12T03:09:43.603"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:43.603",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:189",
    "@version": 1,
    "@class": "Event",
    "category": "rule",
    "name": "impRule",
    "data": {
      "sourceCode": "package com.networknt.light.rule;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic abstract class AbstractRule implements Rule {\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected ODocument getCategoryByRid(String categoryRid) {\n        Map<String, Object> categoryMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)categoryMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            categoryMap.put(\"cache\", cache);\n        }\n        ODocument category = (ODocument)cache.get(\"categoryRid\");\n        if(category == null) {\n            // TODO warning to increase cache if this happens.\n            category = DbService.getODocumentByRid(categoryRid);\n            // put it into the category cache.\n            if(category != null) {\n                cache.put(categoryRid, category);\n            }\n        }\n        return category;\n    }\n\n    protected ODocument getProductByRid(String productRid) {\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            productMap.put(\"cache\", cache);\n        }\n        ODocument product = (ODocument)cache.get(\"productRid\");\n        if(product == null) {\n            // TODO warning to increase cache if this happens.\n            product = DbService.getODocumentByRid(productRid);\n            if(product != null) {\n                cache.put(productRid, product);\n            }\n        }\n        return product;\n    }\n\n    protected Map<String, Object> getEventMap(Map<String, Object> inputMap) {\n        Map<String, Object> eventMap = new HashMap<String, Object>();\n        Map<String, Object> payload = (Map<String, Object>)inputMap.get(\"payload\");\n        if(payload != null) {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            if(user != null)  eventMap.put(\"createUserId\", user.get(\"userId\"));\n        }\n\n        if(inputMap.get(\"host\") != null) {\n            eventMap.put(\"host\", inputMap.get(\"host\"));\n        }\n        if(inputMap.get(\"app\") != null) {\n            eventMap.put(\"app\", inputMap.get(\"app\"));\n        }\n        eventMap.put(\"category\", inputMap.get(\"category\"));\n        eventMap.put(\"name\", inputMap.get(\"name\"));\n        eventMap.put(\"createDate\", new java.util.Date());\n        eventMap.put(\"data\", new HashMap<String, Object>());\n        return eventMap;\n    }\n\n    protected ODocument getODocumentByHostId(String index, String host, String id) {\n        ODocument doc = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OIndex<?> hostIdIdx = db.getMetadata().getIndexManager().getIndex(index);\n            // this is a unique index, so it retrieves a OIdentifiable\n            OCompositeKey key = new OCompositeKey(host, id);\n            OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n            if (oid != null) {\n                doc = (ODocument)oid.getRecord();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return doc;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.AbstractRule",
      "createDate": "2015-01-12T03:09:43.779"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:09:43.779",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:191",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Upload Event File",
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "title": "Event Content",
            "type": "string",
            "format": "file-reader"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "content"
      ],
      "action": [
        {
          "category": "db",
          "name": "replayEvent",
          "readOnly": true,
          "title": "Replay Event",
          "success": "/page/com-networknt-light-v-db-admin-home"
        }
      ],
      "id": "com.networknt.light.db.replayEvent",
      "createDate": "2015-01-12T03:10:05.112"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:05.112",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:192",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Page",
        "required": [
          "id",
          "content"
        ],
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "id",
        {
          "key": "content",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "html"
          }
        }
      ],
      "action": [
        {
          "category": "page",
          "name": "addPage",
          "readOnly": false,
          "title": "Submit"
        }
      ],
      "id": "com.networknt.light.page.add",
      "createDate": "2015-01-12T03:10:05.271"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:05.271",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:193",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Demo Select",
        "required": [
          "strapSingleSelectStatic",
          "strapMultipleSelectStatic",
          "strapSingleSelectDynamic",
          "strapMultipleSelectDynamic"
        ],
        "properties": {
          "strapSingleSelectStatic": {
            "title": "Strap Single Select Static",
            "type": "string",
            "format": "strapselect",
            "items": [
              {
                "value": "value1",
                "label": "label1"
              },
              {
                "value": "value2",
                "label": "label2"
              },
              {
                "value": "value3",
                "label": "label3"
              }
            ]
          },
          "strapMultipleSelectStatic": {
            "title": "Strap Multiple Select Static",
            "type": "array",
            "format": "strapselect",
            "items": [
              {
                "value": "value1",
                "label": "label1"
              },
              {
                "value": "value2",
                "label": "label2"
              },
              {
                "value": "value3",
                "label": "long very very long label3"
              }
            ]
          },
          "strapSingleSelectDynamic": {
            "title": "Strap Single Select Dynamic",
            "type": "string",
            "format": "strapselectdynamic"
          },
          "strapMultipleSelectDynamic": {
            "title": "Strap Multiple Select Dynamic",
            "type": "array",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        {
          "key": "strapSingleSelectStatic"
        },
        {
          "key": "strapMultipleSelectStatic"
        },
        {
          "key": "strapSingleSelectDynamic",
          "options": {
            "category": "forum",
            "name": "getForumDropdown"
          }
        },
        {
          "key": "strapMultipleSelectDynamic",
          "options": {
            "category": "forum",
            "name": "getForumDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "demo",
          "name": "selectDemo",
          "readOnly": false,
          "title": "Submit"
        }
      ],
      "id": "com.networknt.light.demo.select",
      "createDate": "2015-01-12T03:10:05.449"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:05.449",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:194",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Menu Item",
        "required": [
          "id",
          "label"
        ],
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "type": "string"
          },
          "host": {
            "title": "Host",
            "type": "string"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "tpl": {
            "title": "Template",
            "type": "string"
          },
          "ctrl": {
            "title": "Controller",
            "type": "string"
          },
          "left": {
            "title": "Position Left",
            "type": "boolean"
          },
          "roles": {
            "title": "Roles",
            "type": "array",
            "format": "strapselectdynamic"
          },
          "menuItems": {
            "type": "array",
            "title": "Menu Items",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "id",
        "label",
        "host",
        "path",
        "tpl",
        "ctrl",
        "left",
        {
          "key": "roles",
          "options": {
            "category": "role",
            "name": "getRoleDropdown"
          }
        },
        {
          "key": "menuItems",
          "options": {
            "category": "menu",
            "name": "getAllMenuItem"
          }
        }
      ],
      "action": [
        {
          "category": "menu",
          "name": "addMenuItem",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-menu-admin-home"
        }
      ],
      "id": "com.networknt.light.menu.addMenuItem",
      "createDate": "2015-01-12T03:10:05.597"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:05.597",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:195",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Rule",
        "required": [
          "sourceCode"
        ],
        "properties": {
          "sourceCode": {
            "title": "Source Code",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        {
          "key": "sourceCode",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "java"
          }
        }
      ],
      "action": [
        {
          "category": "rule",
          "name": "updRule",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-rule-admin-home"
        }
      ],
      "id": "com.networknt.light.rule.update",
      "createDate": "2015-01-12T03:10:05.742"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:05.742",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:196",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Post",
        "required": [
          "title",
          "content"
        ],
        "properties": {
          "title": {
            "title": "Title [Mandatory, 12 to 90 characters]",
            "type": "string"
          },
          "content": {
            "title": "Content [MarkDown Syntax, 24 to 20480 characters. Drag right bottom to enlarge]",
            "type": "string"
          },
          "tags": {
            "title": "Tags [Maximum 5 tags]",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        {
          "type": "fieldset",
          "title": "Post",
          "items": [
            {
              "type": "tabs",
              "tabs": [
                {
                  "title": "Edit Content",
                  "items": [
                    {
                      "key": "title",
                      "onChange": "updSubjectLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "key": "content",
                      "type": "ace",
                      "style": {
                        "height": "500px"
                      },
                      "aceOptions": {
                        "theme": "eclipse",
                        "mode": "markdown"
                      },
                      "onChange": "updContentLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "key": "tags",
                      "type": "textarea",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    }
                  ]
                },
                {
                  "title": "Preview",
                  "items": [
                    {
                      "type": "help",
                      "helpvalue": "<br><h4>Content</h4><br>"
                    },
                    {
                      "key": "content",
                      "type": "marked"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "action": [
        {
          "category": "news",
          "name": "addPost",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-news-post"
        }
      ],
      "id": "com.networknt.light.news.post.add",
      "createDate": "2015-01-12T03:10:05.884"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:05.884",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:197",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Post",
        "required": [
          "title",
          "content"
        ],
        "properties": {
          "title": {
            "title": "Title [Mandatory, 12 to 90 characters]",
            "type": "string"
          },
          "source": {
            "title": "Source [If re-post from another site, URL here]",
            "type": "string"
          },
          "summary": {
            "title": "Summary [MarkDown Syntax, 24 to 300 characters. Displayed in blog home page]",
            "type": "string"
          },
          "content": {
            "title": "Content [MarkDown Syntax, 24 to 20480 characters. Drag right bottom to enlarge]",
            "type": "string"
          },
          "tags": {
            "title": "Tags [Maximum 5 tags]",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        {
          "type": "fieldset",
          "title": "Post",
          "items": [
            {
              "type": "tabs",
              "tabs": [
                {
                  "title": "Edit Content",
                  "items": [
                    {
                      "key": "title",
                      "onChange": "updSubjectLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "key": "source",
                      "type": "url",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "key": "summary",
                      "type": "ace",
                      "style": {
                        "height": "300px"
                      },
                      "aceOptions": {
                        "theme": "eclipse",
                        "mode": "markdown"
                      },
                      "onChange": "updSummaryLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "key": "content",
                      "type": "ace",
                      "style": {
                        "height": "500px"
                      },
                      "aceOptions": {
                        "theme": "eclipse",
                        "mode": "markdown"
                      },
                      "onChange": "updContentLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "key": "tags",
                      "type": "textarea",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    }
                  ]
                },
                {
                  "title": "Preview",
                  "items": [
                    {
                      "type": "help",
                      "helpvalue": "<h4>Summary</h4><br>"
                    },
                    {
                      "key": "summary",
                      "type": "marked"
                    },
                    {
                      "type": "help",
                      "helpvalue": "<br><h4>Content</h4><br>"
                    },
                    {
                      "key": "content",
                      "type": "marked"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "action": [
        {
          "category": "blog",
          "name": "addPost",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-blog-post"
        }
      ],
      "id": "com.networknt.light.blog.post.add",
      "createDate": "2015-01-12T03:10:06.024"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:06.024",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:198",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Forum",
        "required": [
          "id",
          "desc"
        ],
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "desc": {
            "title": "Description",
            "type": "string"
          },
          "parent": {
            "title": "Parent",
            "type": "string",
            "format": "strapselectdynamic"
          },
          "children": {
            "title": "Children",
            "type": "array",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "id",
        "desc",
        {
          "key": "parent",
          "options": {
            "category": "forum",
            "name": "getForumDropdown"
          }
        },
        {
          "key": "children",
          "options": {
            "category": "forum",
            "name": "getForumDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "forum",
          "name": "addForum",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-forum-admin-home"
        }
      ],
      "id": "com.networknt.light.forum.add",
      "createDate": "2015-01-12T03:10:06.167"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:06.167",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:199",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Import Form File",
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "title": "Form Content",
            "type": "string",
            "format": "file-reader"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "content"
      ],
      "action": [
        {
          "category": "form",
          "name": "impForm",
          "readOnly": false,
          "title": "Import Form",
          "success": "/page/com-networknt-light-v-form-admin-home"
        }
      ],
      "id": "com.networknt.light.form.import",
      "createDate": "2015-01-12T03:10:06.341"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:06.341",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:200",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Download Events",
        "required": [
          "createDateFrom"
        ],
        "properties": {
          "createDateFrom": {
            "title": "Event From Date",
            "type": "object",
            "format": "datetimepicker"
          },
          "createDateTo": {
            "title": "Event To Date",
            "type": "object",
            "format": "datetimepicker"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        {
          "key": "createDateFrom",
          "options": {
            "autoclose": 1
          }
        },
        {
          "key": "createDateTo",
          "options": {
            "autoclose": 1
          }
        }
      ],
      "action": [
        {
          "category": "db",
          "name": "downloadEvent",
          "readOnly": true,
          "title": "Download Events"
        }
      ],
      "id": "com.networknt.light.db.downloadEvent",
      "createDate": "2015-01-12T03:10:06.524"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:06.524",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:201",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "required": [
          "userId",
          "email",
          "password",
          "password_confirm"
        ],
        "title": "Sign Up",
        "properties": {
          "userId": {
            "title": "User Id",
            "type": "string",
            "description": "User Id can be used to log in."
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email can be used to log in."
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "passwordConfirm": {
            "title": "Password Confirmation",
            "type": "string"
          },
          "firstName": {
            "title": "First Name",
            "type": "string"
          },
          "lastName": {
            "title": "Last Name",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "userId",
        {
          "key": "email",
          "type": "email"
        },
        {
          "key": "password",
          "type": "password"
        },
        {
          "key": "passwordConfirm",
          "type": "password"
        },
        "firstName",
        "lastName"
      ],
      "action": [
        {
          "category": "user",
          "name": "signUpUser",
          "readOnly": false,
          "title": "Register"
        }
      ],
      "id": "com.networknt.light.user.signup",
      "createDate": "2015-01-12T03:10:06.703"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:06.703",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:202",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "required": [
          "host",
          "app"
        ],
        "title": "Configuration",
        "properties": {
          "host": {
            "type": "string",
            "title": "Host",
            "enum": [
              "injector",
              "www.networknt.com",
              "www.edibleforestgarden.ca"
            ]
          },
          "app": {
            "type": "string",
            "title": "Application",
            "enum": [
              "main",
              "blog"
            ]
          },
          "blogCacheSize": {
            "type": "number",
            "title": "Blog Cache Size (number of blogs cached for the entire server. max 9999)",
            "maxLength": 4
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "host",
        "app",
        "blogCacheSize"
      ],
      "action": [
        {
          "category": "config",
          "name": "updConfig",
          "readOnly": false,
          "title": "Update"
        }
      ],
      "id": "com.networknt.light.config.update",
      "createDate": "2015-01-12T03:10:06.900"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:06.900",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:203",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "News",
        "required": [
          "id",
          "desc"
        ],
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "desc": {
            "title": "Description",
            "type": "string"
          },
          "parent": {
            "title": "Parent",
            "type": "string",
            "format": "strapselectdynamic"
          },
          "children": {
            "title": "Children",
            "type": "array",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "id",
        "desc",
        {
          "key": "parent",
          "options": {
            "category": "news",
            "name": "getNewsDropdown"
          }
        },
        {
          "key": "children",
          "options": {
            "category": "news",
            "name": "getNewsDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "news",
          "name": "updNews",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-news-admin-home"
        }
      ],
      "id": "com.networknt.light.news.update",
      "createDate": "2015-01-12T03:10:07.080"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:07.080",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:204",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Menu Item",
        "required": [
          "label"
        ],
        "properties": {
          "label": {
            "title": "Label",
            "type": "string"
          },
          "host": {
            "title": "Host",
            "type": "string"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "tpl": {
            "title": "Template",
            "type": "string"
          },
          "ctrl": {
            "title": "Controller",
            "type": "string"
          },
          "left": {
            "title": "Position Left",
            "type": "boolean"
          },
          "roles": {
            "title": "Roles",
            "type": "array",
            "format": "strapselectdynamic"
          },
          "menuItems": {
            "type": "array",
            "title": "Menu Items",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "label",
        "host",
        "path",
        "tpl",
        "ctrl",
        "left",
        {
          "key": "roles",
          "options": {
            "category": "role",
            "name": "getRoleDropdown"
          }
        },
        {
          "key": "menuItems",
          "options": {
            "category": "menu",
            "name": "getAllMenuItem"
          }
        }
      ],
      "action": [
        {
          "category": "menu",
          "name": "updMenuItem",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-menu-admin-home"
        }
      ],
      "id": "com.networknt.light.menu.updateMenuItem",
      "createDate": "2015-01-12T03:10:07.241"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:07.241",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:205",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Menu",
        "required": [
          "host"
        ],
        "properties": {
          "host": {
            "title": "Host that the menu is added to",
            "type": "string"
          },
          "menuItems": {
            "type": "array",
            "title": "Menu Items",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "host",
        {
          "key": "menuItems",
          "options": {
            "category": "menu",
            "name": "getAllMenuItem"
          }
        }
      ],
      "action": [
        {
          "category": "menu",
          "name": "updMenu",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-menu-admin-home"
        }
      ],
      "id": "com.networknt.light.menu.updateMenu",
      "createDate": "2015-01-12T03:10:07.398"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:07.398",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:206",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Blog",
        "required": [
          "id",
          "desc"
        ],
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "desc": {
            "title": "Description",
            "type": "string"
          },
          "parent": {
            "title": "Parent",
            "type": "string",
            "format": "strapselectdynamic"
          },
          "children": {
            "title": "Children",
            "type": "array",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "id",
        "desc",
        {
          "key": "parent",
          "options": {
            "category": "blog",
            "name": "getBlogDropdown"
          }
        },
        {
          "key": "children",
          "options": {
            "category": "blog",
            "name": "getBlogDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "blog",
          "name": "addBlog",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-blog-admin-home"
        }
      ],
      "id": "com.networknt.light.blog.add",
      "createDate": "2015-01-12T03:10:07.601"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:07.601",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:207",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "required": [
          "password",
          "password_confirm"
        ],
        "title": "Change Password",
        "properties": {
          "password": {
            "title": "Password",
            "type": "string"
          },
          "passwordConfirm": {
            "title": "Password Confirmation",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        {
          "key": "password",
          "type": "password"
        },
        {
          "key": "passwordConfirm",
          "type": "password"
        }
      ],
      "action": [
        {
          "category": "user",
          "name": "updPassword",
          "readOnly": false,
          "title": "Change Password"
        }
      ],
      "id": "com.networknt.light.user.change.password",
      "createDate": "2015-01-12T03:10:07.798"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:07.798",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:208",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Role",
        "required": [
          "desc"
        ],
        "properties": {
          "desc": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "desc"
      ],
      "action": [
        {
          "category": "role",
          "name": "updRole",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-role-admin-home"
        }
      ],
      "id": "com.networknt.light.role.update",
      "createDate": "2015-01-12T03:10:07.944"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:07.944",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:209",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "required": [
          "email",
          "password",
          "password_confirm"
        ],
        "title": "Sign Up",
        "properties": {
          "userId": {
            "title": "User Id",
            "type": "string",
            "description": "User Id can be used to log in."
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email can be used to log in."
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "passwordConfirm": {
            "title": "Password Confirmation",
            "type": "string"
          },
          "firstName": {
            "title": "First Name",
            "type": "string"
          },
          "lastName": {
            "title": "Last Name",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "userId",
        {
          "key": "email",
          "type": "email"
        },
        {
          "key": "password",
          "type": "password"
        },
        {
          "key": "passwordConfirm",
          "type": "password"
        },
        "firstName",
        "lastName"
      ],
      "action": [
        {
          "category": "user",
          "name": "updProfile",
          "readOnly": false,
          "title": "Update Profile"
        },
        {
          "category": "user",
          "name": "updPassword",
          "readOnly": false,
          "title": "Change Password"
        },
        {
          "category": "user",
          "name": "lockUser",
          "readOnly": false,
          "title": "Lock User"
        },
        {
          "category": "user",
          "name": "unlockUser",
          "readOnly": false,
          "title": "Unlock User"
        },
        {
          "category": "user",
          "name": "delUser",
          "readOnly": false,
          "title": "Delete User"
        },
        {
          "category": "user",
          "name": "upUser",
          "readOnly": false,
          "title": "Up Vote User"
        },
        {
          "category": "user",
          "name": "downUser",
          "readOnly": false,
          "title": "Down Vote User"
        }
      ],
      "id": "com.networknt.light.user.profile",
      "createDate": "2015-01-12T03:10:08.085"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:08.085",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:210",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Sign In",
        "required": [
          "userIdEmail",
          "password"
        ],
        "properties": {
          "userIdEmail": {
            "title": "UserId or Email",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "rememberMe": {
            "title": "Remember me",
            "type": "boolean",
            "default": false
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "userIdEmail",
        {
          "key": "password",
          "type": "password"
        },
        "rememberMe"
      ],
      "action": [
        {
          "category": "user",
          "name": "signInUser",
          "readOnly": false,
          "title": "Sign In"
        }
      ],
      "id": "com.networknt.light.user.signin",
      "createDate": "2015-01-12T03:10:08.223"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:08.223",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:211",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Post",
        "required": [
          "title",
          "content"
        ],
        "properties": {
          "title": {
            "title": "Title [Mandatory, 12 to 90 characters]",
            "type": "string"
          },
          "source": {
            "title": "Source [If re-post from another site, URL here]",
            "type": "string"
          },
          "summary": {
            "title": "Summary [MarkDown Syntax, 24 to 300 characters. Displayed in blog home page]",
            "type": "string"
          },
          "content": {
            "title": "Content [MarkDown Syntax, 24 to 20480 characters. Drag right bottom to enlarge]",
            "type": "string"
          },
          "tags": {
            "title": "Tags [Maximum 5 tags]",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        {
          "type": "fieldset",
          "title": "Post",
          "items": [
            {
              "type": "tabs",
              "tabs": [
                {
                  "title": "Edit Content",
                  "items": [
                    {
                      "key": "title",
                      "onChange": "updSubjectLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "key": "source",
                      "type": "url",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "key": "summary",
                      "type": "ace",
                      "style": {
                        "height": "300px"
                      },
                      "onChange": "updSummaryLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "key": "content",
                      "type": "ace",
                      "style": {
                        "height": "500px"
                      },
                      "aceOptions": {
                        "theme": "eclipse",
                        "mode": "markdown"
                      },
                      "onChange": "updContentLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "key": "tags",
                      "type": "textarea",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    }
                  ]
                },
                {
                  "title": "Preview",
                  "items": [
                    {
                      "type": "help",
                      "helpvalue": "<h4>Summary</h4><br>"
                    },
                    {
                      "key": "summary",
                      "type": "marked"
                    },
                    {
                      "type": "help",
                      "helpvalue": "<br><h4>Content</h4><br>"
                    },
                    {
                      "key": "content",
                      "type": "marked"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "action": [
        {
          "category": "blog",
          "name": "updBlog",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-blog-admin-home"
        }
      ],
      "id": "com.networknt.light.blog.update",
      "createDate": "2015-01-12T03:10:08.393"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:08.393",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:212",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Role",
        "required": [
          "id",
          "desc"
        ],
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "desc": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "id",
        "desc"
      ],
      "action": [
        {
          "category": "role",
          "name": "addRole",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-role-admin-home"
        }
      ],
      "id": "com.networknt.light.role.add",
      "createDate": "2015-01-12T03:10:08.544"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:08.544",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:213",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Import Rule File",
        "required": [
          "ruleClass",
          "sourceCode"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string"
          },
          "sourceCode": {
            "title": "Rule Source Code",
            "type": "string",
            "format": "file-reader"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "ruleClass",
        "sourceCode"
      ],
      "action": [
        {
          "category": "rule",
          "name": "impRule",
          "readOnly": false,
          "title": "Import Rule",
          "success": "/page/com-networknt-light-v-rule-admin-home"
        }
      ],
      "id": "com.networknt.light.rule.import",
      "createDate": "2015-01-12T03:10:08.678"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:08.678",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:214",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Update Profile",
        "properties": {
          "firstName": {
            "title": "First Name",
            "type": "string"
          },
          "lastName": {
            "title": "Last Name",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "firstName",
        "lastName"
      ],
      "action": [
        {
          "category": "user",
          "name": "updProfile",
          "readOnly": false,
          "title": "Update"
        }
      ],
      "id": "com.networknt.light.user.update.profile",
      "createDate": "2015-01-12T03:10:08.837"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:08.837",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:215",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Export",
        "required": [
          "path"
        ],
        "properties": {
          "path": {
            "title": "Path for export file",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "path"
      ],
      "action": [
        {
          "category": "db",
          "name": "exportDb",
          "readOnly": true,
          "title": "Export",
          "success": "/page/com-networknt-light-v-db-admin-home"
        }
      ],
      "id": "com.networknt.light.db.exportDb",
      "createDate": "2015-01-12T03:10:09.036"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:09.036",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:216",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "required": [
          "environment",
          "messageNumber",
          "hppInd",
          "centreCode"
        ],
        "title": "class",
        "properties": {
          "environment": {
            "type": "string",
            "title": "Environment",
            "enum": [
              "LOCAL",
              "IDT5N",
              "SIT1N",
              "SIT2N",
              "SIT3N",
              "UAT1N",
              "UAT2N"
            ]
          },
          "requestId": {
            "type": "number",
            "title": "Request Id",
            "maxLength": 10
          },
          "messageNumber": {
            "type": "string",
            "title": "Message Number",
            "enum": [
              "E0500",
              "E0450",
              "E0220",
              "E0130",
              "E0110",
              "E0014",
              "E0012",
              "E0010",
              "A0120",
              "A0090"
            ]
          },
          "loanNumber": {
            "type": "string",
            "title": "Loan Number",
            "maxLength": 10
          },
          "pid": {
            "type": "string",
            "title": "PID",
            "enum": [
              "263",
              "701",
              "702",
              "703",
              "704",
              "705",
              "706",
              "798",
              "799",
              "233",
              "237",
              "262",
              "265",
              "232",
              "257",
              "248",
              "238",
              "900",
              "910",
              "999",
              "259",
              "131",
              "600",
              "601",
              "602",
              "603",
              "697",
              "698",
              "699",
              "141",
              "142",
              "152",
              "232",
              "257",
              "800",
              "899"
            ]
          },
          "hppInd": {
            "type": "string",
            "title": "HPP Indicator",
            "enum": [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8"
            ]
          },
          "loanCategroy": {
            "title": "Loan Category",
            "type": "string",
            "enum": [
              "CMHC",
              "COL1",
              "COL2",
              "COL3",
              "ANEW",
              "ANUT",
              "AUSE",
              "AUUT",
              "MCYC",
              "MOHO",
              "TCCN",
              "TCCU",
              "GPIN",
              "GPIV"
            ],
            "default": "CHMC"
          },
          "debtConsolidation": {
            "title": "Debt Consolidation",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "N"
          },
          "incomeVerification": {
            "title": "Income Verification",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "N"
          },
          "liabilityType": {
            "title": "Liability Type",
            "type": "string",
            "enum": [
              "701",
              "700",
              "602",
              "603",
              "601",
              "600",
              "302",
              "301",
              "300",
              "BSC",
              "CLN",
              "PLC",
              "MTG",
              "REN",
              "DC0"
            ]
          },
          "plcPurposeCode": {
            "title": "Plc PurposeCode",
            "type": "string",
            "enum": [
              "000",
              "001",
              "002",
              "003",
              "004",
              "005",
              "006",
              "009"
            ]
          },
          "fullLiabilityIndicator": {
            "title": "Full Liability Indicator",
            "type": "string",
            "enum": [
              "1",
              "4"
            ]
          },
          "solicitorName": {
            "title": "Solicitor Name",
            "type": "string",
            "maxLength": 25
          },
          "propertyProvCode": {
            "title": "Property Prov Code",
            "type": "string",
            "enum": [
              "QC",
              "NS",
              "NU",
              "MB",
              "BC",
              "PE",
              "NT",
              "YT",
              "ON",
              "SK",
              "AB",
              "NB"
            ],
            "default": "ON"
          },
          "centreCode": {
            "title": "Centre Code",
            "type": "string",
            "enum": [
              "TO",
              "VA",
              "CA",
              "TB",
              "REBO",
              "Bank@Work",
              "WP",
              "HL",
              "Training",
              "MT",
              "RISK"
            ],
            "default": "TO"
          },
          "processingDate": {
            "title": "Processing Date",
            "type": "string",
            "format": "date"
          },
          "reportDate": {
            "title": "Report Date",
            "type": "string",
            "format": "date"
          },
          "customerName": {
            "title": "Customer Name",
            "type": "string",
            "maxLength": 250,
            "default": "New Injector"
          },
          "postNumber": {
            "title": "Post Number",
            "type": "string",
            "maxLength": 3,
            "default": "123"
          },
          "transit": {
            "title": "Transit",
            "type": "string",
            "maxLength": 5,
            "default": "00001"
          },
          "cid": {
            "title": "CID",
            "type": "string",
            "maxLength": 3,
            "default": "100"
          },
          "fundsDisbursed": {
            "title": "Funds Disbursed",
            "type": "number",
            "default": 1000
          },
          "relationship": {
            "title": "Relationship",
            "type": "string",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ],
            "default": "1"
          },
          "marketingSourceCode": {
            "title": "Marketing Source Code",
            "type": "string",
            "enum": [
              "DWPV",
              "PBCY",
              "BFIN",
              "BFCE",
              "BDLG",
              "OFFN",
              "BLAK",
              "EQLH",
              "OFFB",
              "NEW2",
              "FCBC",
              "JJ99",
              "AHBL",
              "CASE",
              "NRES",
              "BTOB",
              "GENL",
              "ABL1",
              "RP22",
              "RP99",
              "EQL1"
            ],
            "default": "RP99"
          },
          "provinceCode": {
            "title": "Province Code",
            "type": "string",
            "enum": [
              "QC",
              "NS",
              "NU",
              "MB",
              "BC",
              "PE",
              "NT",
              "YT",
              "ON",
              "SK",
              "AB",
              "NB"
            ],
            "default": "ON"
          },
          "newConstructionInd": {
            "title": "New Construction Ind",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "N"
          },
          "processTypeCd": {
            "title": "Process Type",
            "type": "string"
          },
          "processSubtypeCd": {
            "title": "Process Sub Type",
            "type": "string"
          },
          "tags": {
            "title": "Tags[Maximum 5 tags separated by ,]",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        {
          "type": "help",
          "helpvalue": "<h4>Class Feed Example</h4>"
        },
        "environment",
        {
          "type": "help",
          "helpvalue": "<h4>The following fields are for injection rules</h4>"
        },
        "messageNumber",
        "hppInd",
        {
          "type": "conditional",
          "condition": "modelData.hppInd==='0'",
          "items": [
            {
              "type": "conditional",
              "condition": "modelData.messageNumber==='E0012' || modelData.messageNumber === 'E0014'",
              "items": [
                "pid"
              ]
            },
            {
              "type": "conditional",
              "condition": "modelData.messageNumber==='E0010'",
              "items": [
                "pid",
                {
                  "key": "debtConsolidation",
                  "type": "radiobuttons"
                },
                "loanCategroy"
              ]
            }
          ]
        },
        {
          "type": "conditional",
          "condition": "modelData.hppInd !== '0'",
          "items": [
            {
              "type": "conditional",
              "condition": "modelData.messageNumber==='E0012'",
              "items": [
                "plcPurposeCode",
                "fullLiabilityIndicator",
                "solicitorName",
                "propertyProvCode"
              ]
            },
            {
              "type": "conditional",
              "condition": "modelData.messageNumber === 'E0014'",
              "items": [
                "plcPurposeCode",
                "solicitorName",
                "propertyProvCode"
              ]
            }
          ]
        },
        {
          "type": "help",
          "helpvalue": "<h4>The following fields are for epi mappings</h4>"
        },
        "loanNumber",
        "customerName",
        "postNumber",
        "transit",
        "cid",
        "fundsDisbursed",
        "relationship",
        "marketingSourceCode",
        {
          "key": "incomeVerification",
          "type": "radios",
          "titleMap": {
            "Y": "Income Verification is requried.",
            "N": "Income Verification is not required."
          }
        },
        "centreCode",
        "provinceCode",
        "newConstructionInd",
        {
          "type": "help",
          "helpvalue": "<h4>The following fields are for feed storage and retrieval only</h4>"
        },
        "processTypeCd",
        "processSubtypeCd",
        {
          "key": "tags",
          "type": "textarea"
        }
      ],
      "action": [
        {
          "host": "injector",
          "app": "main",
          "category": "feed",
          "name": "injClassFeed",
          "readOnly": false,
          "title": "Inject",
          "success": "/"
        },
        {
          "host": "injector",
          "app": "main",
          "category": "feed",
          "name": "updFeedMeta",
          "readOnly": false,
          "title": "Update Meta",
          "success": "/"
        }
      ],
      "id": "com.cibc.rop.class.feed",
      "createDate": "2015-01-12T03:10:09.206"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:09.206",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:217",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Blog",
        "required": [
          "id",
          "desc"
        ],
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "desc": {
            "title": "Description",
            "type": "string"
          },
          "parent": {
            "title": "Parent",
            "type": "string",
            "format": "strapselectdynamic"
          },
          "children": {
            "title": "Children",
            "type": "array",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "id",
        "desc",
        {
          "key": "parent",
          "options": {
            "category": "blog",
            "name": "getBlogDropdown"
          }
        },
        {
          "key": "children",
          "options": {
            "category": "blog",
            "name": "getBlogDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "blog",
          "name": "updBlog",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-blog-admin-home"
        }
      ],
      "id": "com.networknt.light.blog.update",
      "createDate": "2015-01-12T03:10:09.418"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:09.418",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:218",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "required": [
          "environment",
          "feeds"
        ],
        "title": "Feeds",
        "properties": {
          "environment": {
            "type": "string",
            "title": "Environment",
            "enum": [
              "LOCAL",
              "IDT5N",
              "SIT1N",
              "SIT2N",
              "SIT3N",
              "UAT1N",
              "UAT2N"
            ]
          },
          "feeds": {
            "type": "string",
            "title": "Feeds"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "environment",
        {
          "key": "feeds",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "json"
          }
        }
      ],
      "action": [
        {
          "host": "injector",
          "app": "main",
          "category": "feed",
          "name": "injAllFeed",
          "readOnly": false,
          "title": "Inject"
        }
      ],
      "id": "com.cibc.rop.feeds",
      "createDate": "2015-01-12T03:10:09.565"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:09.565",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:219",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Execute Command",
        "required": [
          "script"
        ],
        "properties": {
          "script": {
            "title": "Script",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        {
          "key": "script",
          "type": "ace",
          "style": {
            "height": "500px"
          },
          "aceOptions": {
            "theme": "eclipse",
            "mode": "sql"
          },
          "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
        }
      ],
      "action": [
        {
          "category": "db",
          "name": "execCommand",
          "readOnly": false,
          "title": "Execute",
          "success": "/page/com.networknt.light.db.admin.home"
        }
      ],
      "id": "com.networknt.light.db.execCommand",
      "createDate": "2015-01-12T03:10:09.791"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:09.791",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:220",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Menu",
        "required": [
          "host"
        ],
        "properties": {
          "host": {
            "title": "Host that the menu is added to",
            "type": "string"
          },
          "menuItems": {
            "type": "array",
            "title": "Menu Items",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "host",
        {
          "key": "menuItems",
          "options": {
            "category": "menu",
            "name": "getAllMenuItem"
          }
        }
      ],
      "action": [
        {
          "category": "menu",
          "name": "addMenu",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-menu-admin-home"
        }
      ],
      "id": "com.networknt.light.menu.addMenu",
      "createDate": "2015-01-12T03:10:09.937"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:09.937",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:221",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Forum",
        "required": [
          "id",
          "desc"
        ],
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "desc": {
            "title": "Description",
            "type": "string"
          },
          "parent": {
            "title": "Parent",
            "type": "string",
            "format": "strapselectdynamic"
          },
          "children": {
            "title": "Children",
            "type": "array",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "id",
        "desc",
        {
          "key": "parent",
          "options": {
            "category": "forum",
            "name": "getForumDropdown"
          }
        },
        {
          "key": "children",
          "options": {
            "category": "forum",
            "name": "getForumDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "forum",
          "name": "updForum",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-forum-admin-home"
        }
      ],
      "id": "com.networknt.light.forum.update",
      "createDate": "2015-01-12T03:10:10.067"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:10.067",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:222",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Command",
        "required": [
          "name",
          "data"
        ],
        "properties": {
          "host": {
            "title": "Host",
            "type": "string",
            "enum": [
              "www.networknt.com",
              "injector"
            ]
          },
          "app": {
            "title": "App",
            "type": "string",
            "enum": [
              "main",
              "forum",
              "blog",
              "shopping"
            ]
          },
          "category": {
            "title": "Category",
            "type": "string",
            "enum": [
              "user",
              "form"
            ]
          },
          "readOnly": {
            "title": "ReadOnly",
            "type": "boolean",
            "default": false
          },
          "name": {
            "title": "Name",
            "type": "string",
            "enum": [
              "getForm",
              "addForm",
              "delForm",
              "updForm",
              "getFormList"
            ]
          },
          "data": {
            "title": "Data",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "host",
        "app",
        "category",
        "readOnly",
        "name",
        {
          "key": "data",
          "type": "textarea"
        },
        {
          "type": "submit",
          "style": "btn-info",
          "title": "Submit"
        }
      ],
      "action": null,
      "id": "com.networknt.light.common.command",
      "createDate": "2015-01-12T03:10:10.211"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:10.211",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:223",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "News",
        "required": [
          "id",
          "desc"
        ],
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "desc": {
            "title": "Description",
            "type": "string"
          },
          "parent": {
            "title": "Parent",
            "type": "string",
            "format": "strapselectdynamic"
          },
          "children": {
            "title": "Children",
            "type": "array",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "id",
        "desc",
        {
          "key": "parent",
          "options": {
            "category": "news",
            "name": "getNewsDropdown"
          }
        },
        {
          "key": "children",
          "options": {
            "category": "news",
            "name": "getNewsDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "news",
          "name": "addNews",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-news-admin-home"
        }
      ],
      "id": "com.networknt.light.news.add",
      "createDate": "2015-01-12T03:10:10.343"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:10.343",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:224",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Rule",
        "required": [
          "ruleClass",
          "sourceCode"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string"
          },
          "sourceCode": {
            "title": "Source Code",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "ruleClass",
        {
          "key": "sourceCode",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "java"
          }
        }
      ],
      "action": [
        {
          "category": "rule",
          "name": "addRule",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-rule-admin-home"
        }
      ],
      "id": "com.networknt.light.rule.add",
      "createDate": "2015-01-12T03:10:10.499"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:10.499",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:225",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Import Page File",
        "required": [
          "id",
          "content"
        ],
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "content": {
            "title": "Page Content",
            "type": "string",
            "format": "file-reader"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "id",
        "content"
      ],
      "action": [
        {
          "category": "page",
          "name": "impPage",
          "readOnly": false,
          "title": "Import Page",
          "success": "/page/com-networknt-light-v-page-admin-home"
        }
      ],
      "id": "com.networknt.light.page.import",
      "createDate": "2015-01-12T03:10:10.628"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:10.628",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:226",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Post",
        "required": [
          "title",
          "content"
        ],
        "properties": {
          "title": {
            "title": "Title [Mandatory, 12 to 90 characters]",
            "type": "string"
          },
          "content": {
            "title": "Content [MarkDown Syntax, 24 to 20480 characters. Drag right bottom to enlarge]",
            "type": "string"
          },
          "tags": {
            "title": "Tags [Maximum 5 tags]",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        {
          "type": "fieldset",
          "title": "Post",
          "items": [
            {
              "type": "tabs",
              "tabs": [
                {
                  "title": "Edit Content",
                  "items": [
                    {
                      "key": "title",
                      "onChange": "updSubjectLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "key": "content",
                      "type": "ace",
                      "style": {
                        "height": "500px"
                      },
                      "aceOptions": {
                        "theme": "eclipse",
                        "mode": "markdown"
                      },
                      "onChange": "updContentLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "key": "tags",
                      "type": "textarea",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    }
                  ]
                },
                {
                  "title": "Preview",
                  "items": [
                    {
                      "type": "help",
                      "helpvalue": "<br><h4>Content</h4><br>"
                    },
                    {
                      "key": "content",
                      "type": "marked"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "action": [
        {
          "category": "forum",
          "name": "addPost",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-forum-post"
        }
      ],
      "id": "com.networknt.light.forum.post.add",
      "createDate": "2015-01-12T03:10:10.779"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:10.779",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:227",
    "@version": 1,
    "@class": "Event",
    "category": "form",
    "name": "impForm",
    "data": {
      "schema": {
        "type": "object",
        "title": "Page",
        "required": [
          "id",
          "content"
        ],
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "modelData": null,
      "form": [
        "id",
        {
          "key": "content",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "html"
          }
        }
      ],
      "action": [
        {
          "category": "page",
          "name": "updPage",
          "readOnly": false,
          "title": "Submit"
        }
      ],
      "id": "com.networknt.light.page.update",
      "createDate": "2015-01-12T03:10:10.909"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:10.909",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:229",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-user-admin-home",
      "content": "<script type='text/javascript'>\n    (function(angular) {\n        'use strict';\n        angular.module('lightApp').controller('com.networknt.light.UserAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n            $scope.getAllUser = {\n                category : 'user',\n                name : 'getAllUser',\n                readOnly: true,\n                data : {\n                    pageSize : 10,\n                    pageNo : 1,\n                    sortDir : 'desc',\n                    sortedBy : 'createDate'\n                }\n            };\n            $scope.delUser = {\n                category : 'user',\n                name : 'delUser',\n                readOnly: false\n            };\n            $scope.lockUser = {\n                category : 'user',\n                name : 'lockUser',\n                readOnly: false\n            };\n            $scope.unlockUser = {\n                category : 'user',\n                name : 'unlockUser',\n                readOnly: false\n            };\n\n            $scope.page = { maxSize: 5, totalItems: 0, numPages: 0 };\n            $scope.users = [];\n            $scope.roles = [];\n            $scope.hosts = [];\n            $scope.userHeaders = [\n                {\n                    title: 'Delete',\n                    value: 'delete'\n                },\n                {\n                    title: 'Locked',\n                    value: 'locked'\n                },\n                {\n                    title: 'User Id',\n                    value: 'userId'\n                },\n                {\n                    title: 'Host',\n                    value: 'host'\n                },\n                {\n                    title: 'Roles',\n                    value: 'roles'\n                },\n                {\n                    title: 'Email',\n                    value: 'email'\n                },\n                {\n                    title: 'First Name',\n                    value: 'firstName'\n                },\n                {\n                    title: 'Last Name',\n                    value: 'lastName'\n                },\n                {\n                    title: 'Up Users',\n                    value: 'upUsers'\n                },\n                {\n                    title: 'Down Users',\n                    value: 'downUsers'\n                },\n                {\n                    title: 'Karma',\n                    value: 'karma'\n                },\n                {\n                    title: 'Create Date',\n                    value: 'createDate'\n                },\n                {\n                    title: 'Update Date',\n                    value: 'updateDate'\n                },\n                {\n                    title: 'Log in Date',\n                    value: 'logInDate'\n                },\n                {\n                    title: 'Log out Date',\n                    value: 'logOutDate'\n                }\n            ];\n\n            $scope.roleHeaders = [\n                {\n                    title: 'Delete',\n                    value: 'delete'\n                },\n                {\n                    title: 'Role Id',\n                    value: 'id'\n                },\n                {\n                    title: 'Host',\n                    value: 'host'\n                },\n                {\n                    title: 'Description',\n                    value: 'desc'\n                },\n                {\n                    title: 'Create User Id',\n                    value: 'createUserId'\n                },\n                {\n                    title: 'Create Date',\n                    value: 'createDate'\n                }\n            ];\n\n            $scope.hostHeaders = [\n                {\n                    title: 'Delete',\n                    value: 'delete'\n                },\n                {\n                    title: 'Host',\n                    value: 'host'\n                },\n                {\n                    title: 'Base',\n                    value: 'base'\n                },\n                {\n                    title: 'TransferMinSize',\n                    value: 'transferMinSize'\n                },\n                {\n                    title: 'DirectoryListingEnabled',\n                    value: 'directoryListingEnabled'\n                }\n            ];\n\n            $scope.roleSort = {\n                sortDir : 'asc',\n                sortedBy : 'id'\n            };\n            $scope.hostSort = {\n                sortDir : 'asc',\n                sortedBy : 'host'\n            };\n            $scope.roleFilter = {};\n            $scope.hostFilter = {};\n\n            $scope.fetchResult = function () {\n                $http.post('api/rs', $scope.getAllUser)\n                        .success(function (result, status, headers, config) {\n                            $scope.users = result.users;\n                            $scope.roles = result.roles;\n                            $scope.hosts = result.hosts;\n                            $scope.page.totalItems = result.total;\n                            //console.log($scope.users);\n                            console.log($scope.roles);\n                            console.log($scope.hosts);\n                            //console.log($scope.page.totalItems);\n                            $scope.page.numPages = Math.ceil($scope.page.totalItems / $scope.getAllUser.data.pageSize);\n                            //console.log($scope.page.numPages);\n                        })\n            };\n\n            $scope.onUserSort = function (sortedBy, sortDir) {\n                $scope.getAllUser.data.sortDir = sortDir;\n                $scope.getAllUser.data.sortedBy = sortedBy;\n                $scope.getAllUser.data.pageNo = 1;\n                $scope.fetchResult();\n            };\n\n            $scope.onRoleSort = function (sortedBy, sortDir) {\n                $scope.roleSort.sortDir = sortDir;\n                $scope.roleSort.sortedBy = sortedBy;\n            };\n\n            $scope.onHostSort = function (sortedBy, sortDir) {\n                $scope.hostSort.sortDir = sortDir;\n                $scope.hostSort.sortedBy = sortedBy;\n            };\n\n            //Will be called when filtering the grid, will reset the page number to one\n            $scope.filterResult = function () {\n                $scope.getAllUser.data.pageNo = 1;\n                $scope.fetchResult();\n            };\n\n            $scope.pageChanged = function() {\n                $scope.fetchResult();\n            };\n\n            $scope.lock = function(user) {\n                $scope.lockUser.data = user;\n                $http.post('api/rs', $scope.lockUser)\n                        .success(function (data, status, headers, config) {\n                            user.locked = true;\n                            toaster.pop('success', status, data, 3000);\n                        })\n            };\n\n            $scope.unlock = function(user) {\n                $scope.unlockUser.data = user;\n                $http.post('api/rs', $scope.unlockUser)\n                        .success(function (data, status, headers, config) {\n                            user.locked = false;\n                            toaster.pop('success', status, data, 3000);\n                        })\n            };\n\n            $scope.deleteUser = function(user) {\n                $scope.delUser.data = user;\n                $http.post('api/rs', $scope.delUser)\n                        .success(function (data, status, headers, config) {\n                            $scope.users.splice($scope.users.indexOf(user), 1);\n                            toaster.pop('success', status, data, 3000);\n                        })\n            };\n\n            $scope.updateUser = function(user) {\n                modelDataService.setModelData(user);\n                $location.path(\"/form/com.networknt.light.user.update.permission\");\n            };\n\n            $scope.deleteRole = function(role) {\n                $scope.delRole.data = role;\n                $http.post('api/rs', $scope.delRole)\n                        .success(function (data, status, headers, config) {\n                            $scope.roles.splice($scope.roles.indexOf(role), 1);\n                            toaster.pop('success', status, data, 3000);\n                        })\n            };\n\n            $scope.updateRole = function(role) {\n                modelDataService.setModelData(role);\n                $location.path(\"/form/com.networknt.light.user.update.role\");\n            };\n\n            $scope.addRole = function() {\n                $location.path(\"/form/com.networknt.light.user.add.role\");\n            };\n\n            $scope.pageChanged();\n        }]);\n    })(window.angular);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.UserAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <tabset>\n                <tab heading=\"Users\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in userHeaders\">\n                                <sort-by onsort=\"onUserSort\" sortdir=\"getAllUser.data.sortDir\" sortedby=\"getAllUser.data.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.locked\" type=\"checkbox\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.userId\" type=\"text\" /></td>\n                            <td>\n                                <select ng-change=\"filterResult()\" ng-model=\"getAllUser.data.host\" ng-options=\"host for host in hosts\" >\n                                    <option value=\"\"> </option>\n                                </select>\n                            </td>\n                            <td>\n                                <select ng-change=\"filterResult()\" ng-model=\"getAllUser.data.roles\" ng-options=\"role for role in roles\" >\n                                    <option value=\"\"> </option>\n                                </select>\n                            </td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.email\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.firstName\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.lastName\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.upUsers\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.downUsers\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.karma\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.createDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.updateDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.logInDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.logOutDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"user in users\">\n                            <td><a href ng-click=\"deleteUser(user)\">Delete</a></td>\n                            <td><a href ng-click=\"lock(user)\">{{user.locked}}</a></td>\n                            <td><a href ng-click=\"updateUser(user)\">{{user.userId}}</a></td>\n                            <td>{{user.host}}</td>\n                            <td>{{user.roles}}</td>\n                            <td>{{user.email}}</td>\n                            <td>{{user.firstName}}</td>\n                            <td>{{user.lastName}}</td>\n                            <td>{{user.upUsers}}</td>\n                            <td>{{user.downUsers}}</td>\n                            <td>{{user.karma}}</td>\n                            <td>{{user.createDate}}</td>\n                            <td>{{user.updateDate}}</td>\n                            <td>{{user.logInDate}}</td>\n                            <td>{{page.logOutDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                    <pagination total-items=\"page.totalItems\" items-per-page=\"getAllUser.data.pageSize\" ng-model=\"getAllUser.data.pageNo\" max-size=\"page.maxSize\" class=\"pagination-sm\" boundary-links=\"true\" rotate=\"false\" num-pages=\"page.numPages\" ng-change=\"pageChanged()\"></pagination>\n                    <table>\n                        <tr>\n                            <td>Page: {{getAllUser.data.pageNo}} / {{page.numPages}}</td>\n                            <td>&nbsp;</td>\n                            <td>Page Size:</td>\n                            <td><input type=\"number\" min=\"1\" max=\"200\" ng-change=\"filterResult()\" ng-model=\"getAllUser.data.pageSize\"></td>\n                        </tr>\n                    </table>\n                </tab>\n                <tab heading=\"Hosts\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in hostHeaders\">\n                                <sort-by onsort=\"onHostSort\" sortdir=\"hostSort.sortDir\" sortedby=\"hostSort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.userId\" type=\"text\" /></td>\n                            <td>\n                                <select ng-change=\"filterResult()\" ng-model=\"getAllUser.data.host\" ng-options=\"host for host in hosts\" >\n                                    <option value=\"\"> </option>\n                                </select>\n                            </td>\n                            <td>\n                                <select ng-change=\"filterResult()\" ng-model=\"getAllUser.data.roles\" ng-options=\"role for role in roles\" >\n                                    <option value=\"\"> </option>\n                                </select>\n                            </td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.email\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.firstName\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.lastName\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.upUsers\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.downUsers\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.karma\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.createDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.updateDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.logInDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.logOutDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"user in users\">\n                            <td><a href ng-click=\"delete(user)\">Delete</a></td>\n                            <td><a href ng-click=\"lock(user)\">{{user.locked}}</a></td>\n                            <td><a href ng-click=\"update(user)\">{{user.userId}}</a></td>\n                            <td>{{user.host}}</td>\n                            <td>{{user.roles}}</td>\n                            <td>{{user.email}}</td>\n                            <td>{{user.firstName}}</td>\n                            <td>{{user.lastName}}</td>\n                            <td>{{user.upUsers}}</td>\n                            <td>{{user.downUsers}}</td>\n                            <td>{{user.karma}}</td>\n                            <td>{{user.createDate}}</td>\n                            <td>{{user.updateDate}}</td>\n                            <td>{{user.logInDate}}</td>\n                            <td>{{page.logOutDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-01-12T03:10:33.905"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:33.905",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:230",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-db-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.DbAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n\n        $scope.execCommand = {\n            category : 'db',\n            name : 'execCommand',\n            readOnly: false,\n            data: {}\n        };\n\n        $scope.exportDb = {\n            category : 'db',\n            name : 'exportDb',\n            readOnly: true,\n            data: {}\n        };\n        $scope.replayEvent = {\n            category : 'db',\n            name : 'replayEvent',\n            readOnly: false,\n            data: {}\n        };\n\n        $scope.downloadEvent = {\n            category : 'db',\n            name : 'downloadEvent',\n            readOnly: true,\n            data: {}\n        };\n\n        $scope.exportDb = function() {\n            console.log(\"go to exportDb form\");\n            $location.path('/form/com.networknt.light.db.exportDb');\n        };\n\n        $scope.execCommand = function() {\n            $location.path('/form/com.networknt.light.db.execCommand');\n        };\n\n        $scope.replayEvent = function() {\n            $location.path('/form/com.networknt.light.db.replayEvent');\n        };\n\n        $scope.downloadEvent = function() {\n            $location.path('/page/com-networknt-light-v-db-event-download');\n        };\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.DbAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <tabset>\n                <tab heading=\"Event\">\n                    <h1>Event</h1>\n                    <p><a ng-click=\"exportDb()\" href=\"\">Export Database</a></p>\n                    <p><a ng-click=\"execCommand()\" href=\"\">Exec Commands</a></p>\n                    <p><a ng-click=\"downloadEvent()\" href=\"\">Download Events</a></p>\n                    <p><a ng-click=\"replayEvent()\" href=\"\">Replay Events</a></p>\n                </tab>\n                <tab heading=\"Database Statistic\">\n                    <table class=\"table table-striped\">\n                    </table>\n                </tab>\n                <tab heading=\"Bookmark\">\n                    <table class=\"table table-striped\">\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-01-12T03:10:34.029"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:34.029",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:231",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-page-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.PageAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getAllPage = {\n            category : 'page',\n            name : 'getAllPage',\n            readOnly: true\n        };\n        $scope.delPage = {\n            category : 'page',\n            name : 'delPage',\n            readOnly: false,\n            data: {}\n        };\n        $scope.pages = [];\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Id',\n                value: 'id'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'updateDate'\n        };\n        $scope.filter = {};\n\n        //call back function that we passed to our custom directive sortBy, will be called when clicking on any field to sort\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(page) {\n            $scope.delPage.data = page;\n            $http.post('api/rs', $scope.delPage)\n                    .success(function (data, status, headers, config) {\n                        $scope.pages.splice($scope.pages.indexOf(page), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n\n        $scope.update = function(page) {\n            modelDataService.setModelData(page);\n            $location.path(\"/form/com.networknt.light.page.update\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.page.add\");\n        };\n\n        $scope.import = function() {\n            $location.path(\"/form/com.networknt.light.page.import\");\n        };\n\n        //The function that is responsible of fetching the result from the server and setting the grid to the new result\n        $scope.fetchResult = function () {\n            $http.post('api/rs', $scope.getAllPage)\n                    .success(function (result, status, headers, config) {\n                        $scope.pages = result;\n                        //console.log($scope.pages);\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.PageAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"import()\"><i class=\"glyphicon glyphicon-edit\"></i>Import</button>\n            </div>\n            <tabset>\n                <tab heading=\"Recent\">\n                    <h1>Pages</h1>\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.id\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"page in pages | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(page)\">Delete</a></td>\n                            <td><a href ng-click=\"update(page)\">{{page.id}}</a></td>\n                            <td>{{page.host}}</td>\n                            <td>{{page.createUserId}}</td>\n                            <td>{{page.createDate}}</td>\n                            <td>{{page.updateUserId}}</td>\n                            <td>{{page.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n                <tab heading=\"Updated\">\n                    <div>This is tab updated</div>\n                </tab>\n                <tab heading=\"MyPage\" ng-if=\"global.isLogin\">\n                    <div>This is tab MyPage</div>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-01-12T03:10:34.149"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:34.149",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:232",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-challenges",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Web application development challenges</h1>\n            <p>\n            Today?s software engineering approach has some challenges and OCA Framework is designed to address these.\n\n            <h2>Productivity</h2>\n            <p>\n            Light Framework supports and encourages Agile Development. Agile software development is a software development methods in which requirements and solutions evolve through collaboration between self-organizing, cross-functional teams. It promotes adaptive planning, evolutionary development, early delivery, continuous improvement and encourages rapid and flexible response to change. A group of people take responsibility for the entire life cycle of the software development and work with other teams for integration. This makes each team more productive as decisions happen locally without management overhead. Teams have their own mission ? to produce reusable web component, view or application. Component team needs to be aligned with view team and view team needs to be aligned with application team. In this sense they are loosely coupled but tightly aligned to the same mission.\n            <p>\n            The framework itself provides so many reusable common components, views and applications that are ready to be used or customized. So most of the applications can be assembled from existing pieces from OCA store and only certain customizations are needed. Of cause, you may need to build your domain specific modules but the existing ones can give you examples to follow. The framework also encourages brands and developer to publish their modules. The more brands using your brand?s experience, the more brand value you have. The more developers are using your modules the more support and customization revenue you will have as developers.\n            <p>\n            By using the framework, large projects can be break down to more manageable pieces and integration happens continuously to allow components, views and applications grow gradually. This makes the development teams scalable and reduces the risks for large projects.\n\n            <h2>Quality Assurance</h2>\n            <p>\n            Different teams manage components, views and applications independently and reusability is the main goal in design. All pieces have unit tests and end-to-end tests in order to promote and give confidence for the end users. Also, each team have a sample application so end users can play with the module.\n            <p>\n            Front end AngularJS is known as testable Javascript framework and backend does not have any container so rules can be tested as POJO. You don?t need to start a server to test your backend code.\n            <p>\n            Agile encourages QA and DEV teams are working together in one team. The developers are writing the unit test cases and the testers are writing e2e test cases.\n            <p>\n            If your organization won?t allow it, then a DIT exist report will be produced by the development team to assist QA team for testing.\n            <p>\n            The report contains some information generated by the tools and some information written by the developers.\n            <p>\n            <ul>Version number</ul>\n            <ul>Scope of the change</ul>\n            <ul>Unit test cases (generated)</ul>\n            <ul>e2e test cases (generated)</ul>\n            <ul>Complexity and coverage (generated)</ul>\n            <ul>What need to be tested as it cannot be tested in dev environment</ul>\n            <ul>Dependencies( related to the scope of testing) what modules are depending on the changed module that need to be regression tested</ul>\n            <p>\n\n            <h2>Release Management</h2>\n            <p>\n            The OCA framework is based on event sourcing and deployment just means to generate events file from development environment and replay the events on DIT, SIT, UAT, PAT and PROD.\n            <p>\n\n            Traditionally, release a new version of product is very costly and risky so some organizations might limit the number of releases to 3 or 4 times per year. Each release will involve so many teams and last so long for testing and many changes will be packed into the same batch. An army consists of DBAs, System Administrators and Deployment Engineers will be work together during deployment time and they follow the document step by step to get the job done. This impacts the productivity and makes fixing defects, adding new features so slow and could not meet business need in this dynamically changing world.\n            <p>\n\n            In OCA framework, we want the benefits of agile development and continuous integration all the way to production. We encourage more deployments with high velocity and short cycles that lead to financial success. This conflicts with the traditional approach - fewer deployments with big thoroughly test batch deployment that lead to financial success.\n            <p>\n\n            Above two approaches have the same goal but it seems conflicting each other. How come they can lead to the same goal for financial success? To understand that, we need to understand how risk is calculated.\n            <p>\n\n            ALE (Annual Loss Expectancy) = Single Loss Expectancy * Exposure Rate * Annualized Frequency\n            <p>\n\n            In our software release world, we can understand it as\n            <p>\n\n            Loss = Single lost of error * Percentage of deployment error * Number of deployments\n            <p>\n\n            For example, if one error occurs in 100 deployments, each error will cost $5000 and there are 4 deployments per year, then the ALE would be 0.0150004 = 200\n            <p>\n\n            The traditional approach is to reduce the number of deployments to reduce the lost.\n            <p>\n\n            And our approach is to increase the number of deployments and reduce the single lost of error and percentage of deployment error. If this can be done, we can avoid financial losses due to downtime, bugs, noncompliance and loss of reputation.\n            <p>\n\n            Let?s look at the source of errors and try to lower the percentage of occurrence\n            <p>\n            <h3>Defects in code</h3>\n            This can be addressed by unit test cases and e2e test cases. If we have enough coverage, then we can change the code with confidence.\n            <p>\n\n            <h3>Errors in assembly or packaging</h3>\n            Fast tests in continuous integration and delivery Fail slow tests and violation of architecture and coding standards. Clean build everything from Git repository Deploy the same way everywhere using events Manage dependencies and versions with graph database Manage Git branch and trunk through database to map to different release and environment. Basically, make everything automatic.\n            <p>\n\n            <h3>Errors executing changes</h3>\n            Make deployment the same process everywhere by just replay serial events which include database updates, business rules updates, rule data updates, template updates, apps and experience updates etc. Basically, we don?t need a army for deployment, it is one click at the right time and place.\n\n            <p>\n            Now, let?s look at the cost of error and see if we can reduce it.\n            <p>\n\n            Zero down time deployment. Database migrations and schema-less (database change won?t break previous version of code) Versioned identifiers for assets Protocol versioning Endpoint versioning Decoupled architecture Separate data and logic and they can be deployed independently. Configurable default version for every component Let end-user to choose if they want to use the updated version Employees try out the new version before making it default version User can downgrade version if they don?t like the new one. Basically user owns experience.\n            <p>\n\n            In order to archive the above, we have the make our deployment unit the smallest possible. Within the framework, we have component, view and app and each of them can be versioned and deployed independently. Further, they can be break up to even smaller piece to be deployed independently.\n            <p>\n\n            For example: a component can have the following part that can be deployed independently and versioned independently.\n            <p>\n\n            AngularJS code (front end)\n            <p>\n            Template (front end)\n            <p>\n            Rules (back end)\n            <p>\n            Rules Data (back end)\n            <p>\n            Reference and configuration (back end)\n            <p>\n\n            For example, only template get a new version 1.0.2 deployed on the server and other pieces are still in version 1.0.1 and we have an component version 1.0.2. One site can user version 1.0.1 and another site can user 1.0.2 and this allows site to customize the template for their channel as well.\n            <p>\n\n            <p>\n            Even further, we can set the template 1.0.1 as default so all the customer will have the default template but we ask our employee to try 1.0.2 version for a while before make it as default.\n            <p>\n\n            <p>\n            Although each piece can be deployed independently, they are loaded dynamically at the view level as part of angular routing. When Angular bootstraps, providers will be saved and they will be used to lazy load and register controllers, directives, filters, services, factories and providers etc. When angular requires a page, an page id and page version will be passed to the server. (no version means default version will be used) The server will check the dependencies of the page and assembly all piece together (java script code and templates) and send to the angular as response. This is for the first time, the next time the same version is required, it just response back the page cached. The cached will only be updated once any piece of the page is changed through event.\n            <p>\n\n            During the assembly phase, the configuration data and be combined with logic and the final page is pre-processed. For example, the dynamic dropdown list will be generated at this phase for a form component.\n            <p>\n\n            Breaking up the component to this level is no mandatory and it makes sense to have simple component packaged together and give it only one version. You only need to break it up if you component is so complicated and have too many moving part that is configurable and customizable.\n            <p>\n\n            <h2>Production Configuration</h2>\n            <p>\n\n            To make the application configurable on production, we need to separate the logic and data. The framework has three levels of configurations that can be performed on production and they have different level of risk associated with them.\n            <p>\n\n            The first level is reference data configuration. Most applications have reference data like dropdowns, translations etc. These will be saved into a set of schemas or tables and can be changed through table maintenance app. The reference data is cached but will be refreshed after midnight. This is the lowest risk change on production as it will only impact the UI look and feel most of the time and can be rolled back if negative impact occurred. Of cause, certain level of validation has to be done and approve process must be in place.\n            <p>\n\n            The second level is rules data configuration\n            <p>\n\n            All requests are handled by Light Rule Engine rules and rules are designed to be two part, Data and logic. This level is address the rule data change and it is at low risk as it won?t impact rule logic and the rule logic can be written to validate the data for the rules. For example, the system admin has the right to give promotion to discount one product for 10 percent off. The 10 percent is the data. And the rule might have validation between 1 to 99 or 1 to 55. This piece of data is more important then reference data as it is impact application logic but it is isolated from the rules. It can be changed easily without breaking the application.\n            <p>\n\n            The third level is rule logic configuration\n            <p>\n\n            The rules are just POJOs and can be updated and deployed though application interface. This change is bigger and risk is still manageable as you only need to regression to all the component/view/app that depends on the rule. Rules are working independently and it fails it only impact one area of the app and it can be easily rolled back.\n            <p>\n\n            <h2>Security</h2>\n            <p>\n\n            Api security or resource security is done by JWT token. When user is trying to access to protected resources, it will check if the access token is in the http request header. If it don?t exist, it will redirect the user to login page. The access token will be short lived up to 30 minutes and a 401 response along with token_expired will be sent back to client for refresh token if the user checked remember me when logging in or login page will be shown up.\n            <p>\n\n            Access token contains roles and userId so that the resource serve can grant access based on role-based authorization or based on user-based authorization.\n            <p>\n\n            Visibility control will be put into place based on the role of the users. For example, certain menu won?t be shown up unless you login as an admin role or certain web component shows only partial of data the user role is just anonymous.\n            <p>\n\n            OCA framework server provides another layer of security for the back-end legacy system for Angular application is not talking to back-end API directly. Also, this layer will do the validation before calling to back-end API so that a lot of invalid requests will be filtered out.\n            <p>\n\n            <h2>Performance</h2>\n\n            <h2>Monitoring</h2>\n            <p>\n\n            Traceability is more important with Angular application as it is running on the end users? browser. The server doesn?t have the state of the user session and only angular application knows. In this case, event sourcing is utilized to log all the events happening on the browser side. Every user action will generate an event and it is sent to the server along with JWT token that is identifier for the user. The server is logging events into event store.\n            <p>\n\n            Un-caught runtime exception in Angular will logged as an event and it will be easily reproduced given a serial events leading to it for the same user in event store.\n            <p>\n\n            Server error response will be logged on server side as it is known who sent the request. For example, 404 error response is sent to the client and support team need to reproduce it.\n            <p>\n\n            Server side exception is logged with stack trace and it can be reproduced along with events leading to it.\n            <p>\n\n            Security violation will be logged when system identify that the request is not sent from our AngularJS app but some raw request with missing data or wrong parameters.\n            <p>\n\n            System statistic can be viewed from admin page with information like how many users are online, how many requests are served within a period of time etc.\n            <p>\n\n            Health check is an application that will check certain area of the application based on the configuration data in order to make sure the over all system is healthy. For example, it will check the connectivity with legacy system etc. It is normally called once new release is deployed and when system is behaved strangely.\n            <p>\n\n            User behaviour analysis is an app that analyzes user online behaviour and it can be very valuable to drive sales. If customer goes to a bank branch to save a check and the sale person knows the customer was browsing life insurance product yesterday with his mobile phone.\n            <p>\n\n            Module update notification will monitor if there are any security updates from the framework and notify system admin to take action.\n            <p>\n\n            <h2>Legacy Coexistence</h2>\n            <p>\n\n            The framework can work with legacy web application together and this might be the requirement for some organization that invested big effort on a large system and they cannot convert everything into OCA framework in one step. They can switch part of the site to OCA and leave the rest still running on the legacy server. When user logs in, one request will be sent to the legacy server to create the session and another request will be sent to the framework Authentication/Authorization server to get access token. OCA modules will use the JWT access token to take to OCA server and the existing pages will still talk to legacy server using session.\n            <p>\n\n            Above assumes that OCA application and legacy application have only routing relationship. If OCA component will be embedded into legacy page, then thinks will be more complicated. We need to manage the communication with the legacy components, manage css conflicts etc. It is doable but not encouraged as there might be more work then just convert apps page by page.\n            <p>\n\n            <h2>OCA Server</h2>\n            <p>\n\n            The most important role of the OCA sever is to add another layer of security before our legacy system API. Otherwise, our legacy systems will be exposed to outside world and subject to attacks. The OCA Server will validate all the requests from browser and make sure only valid request goes to resource server and it is designed to identify attacks or misuse.\n            <p>\n\n            The OCA server supports integration with legacy system. Instead changing the legacy systems to provide REST API, we leave legacy system along and our OCA server will be acted as a proxy to the existing legacy API. There are two benefits:\n            <ul>Avoid updating legacy system that is costly or adding another layer just for REST API purpose. Our OCA server will call the existing API directly regardless the service types, Remote Session Bean, EMB, Web Services, .Net etc.</ul>\n            <ul>When OCA apps and experiences communicate with their own API, the interface will be relatively stable and any legacy API change will be done on the rules running on the server.</ul>\n            <p>\n            The OCA server provides references, configurations for our OCA apps and experiences. This allows us to develop data driven components with customization in mind. For example, we can have a form component that renders different forms given different form schemas and form configurations. Another example would be account summary, number of columns and column headers can all be customized.\n            <p>\n            The OCA server also serves as a distributed cache layer for legacy system and data is cached in the final consumption json format. It is Domain Driven Design with command/event sourcing along with CQRS and can be clustered with Distributed cache like coherence or Hazelcast. Possible to have all the cached data in memory to serve query part of the app and support decision making for UI commands depending on the nature of the application and infrastructure.\n            <p>\n            The server is responsible for logging, monitoring, auditing and user behaviour analysis. As apps and experiences are running on browser, you don?t know if end users get exceptions or not. Given we are using event sourcing, all the user actions on the browser will be in our event store. Uncaught Exceptions on UI will be logged as an event, Error response on the server will be logged as an event, service side exception will be logged as an event and all the events are associated with the user as JWT token is passing alone. From the event store, it is very easy to reproduce front end exception and back end exception as all the sequence and data are available and simply replay will reproduce. Monitoring meaning we will have a filter rule for events so that certain events will trigger notifications to administrators such as UI exception and server exception. For enterprise system, auditing is very important so that all the updates to the system are traceable. Our event store will serve the audit well and beyond. The information in event store are valuable for understanding customer behaviours, detect attacks etc.\n            <p>\n            The OCA server stack would be Undertow, OrientDB, Hazelcast and Light Rule Engine.\n\n            <h2>Future proof</h2>\n            <p>\n\n            AngularJS 1.X vs AngularJS 2.X and ES5 vs ES6 The change between AngularJS 2.x and 1.x are huge and there is no clear path for migration at the moment. In order to protect our investment, we should write our code in 2.x style if possible so the migration won?t be so painful. Also, Javascript language is in a transition between ES5 and ES6 and today we can leverage some of the ES6 features and using transpiler like Traceur and 6to5. Both of them have grunt and gulp tasks ready to be used.\n            <p>\n\n            Background and Attribution Some of the challenges faced by the OMNI-Channel Architecture group are not unique to TD. Other organizations have used a similar software engineering approach as OCA to deal with these issues. Recently, Spotify consultant Henrik Kniberg assembled two videos (here and here) describing the music site's engineering culture which is uncannily similar to that of our own. Michael T. Nygard's video presentation \"Dispand the Deployment Army\" and lecture deck make a quantifiable call-to-arms to simplify and cut the costs of software deployments. A few years back, Google employee Steve Yegge wrote a scathing missive within Google that leaked out, lambasting his employer for not embracing the company-as-a-platform model so well monetized by his former employer Amazon. It gives a cursory overview of Amazon's foret into that market and references others entrenched in being platform-first companies. What follows is a breakdown and explanation of the OMNI-Channel Architecture influenced by the tone and principles defined in Kniberg's videos, Nygard's presentation and Yegge's rant.\n        </div>\n    </div>\n</div>",
      "createDate": "2015-01-12T03:10:34.272"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:34.272",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:233",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-rule-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.RuleAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getRule = {\n            category : 'rule',\n            name : 'getRule',\n            readOnly: true\n        };\n        $scope.delRule = {\n            category : 'rule',\n            name : 'delRule',\n            readOnly: false\n        };\n        $scope.rules = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Rule Class',\n                value: 'ruleClass'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'createDate'\n        };\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(rule) {\n            $scope.delRule.data = rule;\n            $http.post('api/rs', $scope.delRule)\n                    .success(function (data, status, headers, config) {\n                        $scope.rules.splice($scope.rules.indexOf(rule), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n\n        $scope.update = function(rule) {\n            modelDataService.setModelData(rule);\n            $location.path(\"/form/com.networknt.light.rule.update\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.rule.add\");\n        };\n\n        $scope.import = function() {\n            $location.path(\"/form/com.networknt.light.rule.import\");\n        };\n\n        $scope.fetchResult = function () {\n            $http.post('api/rs', $scope.getRule)\n                    .success(function (data, status, headers, config) {\n                        $scope.rules = data;\n                        //console.log($scope.rules);\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.RuleAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"import()\"><i class=\"glyphicon glyphicon-edit\"></i>Import</button>\n            </div>\n            <tabset>\n                <tab heading=\"Rules\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.ruleClass\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"rule in rules | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(rule)\">Delete</a></td>\n                            <td><a href ng-click=\"update(rule)\">{{rule.ruleClass}}</a></td>\n                            <td>{{rule.host}}</td>\n                            <td>{{rule.createUserId}}</td>\n                            <td>{{rule.createDate}}</td>\n                            <td>{{rule.updateUserId}}</td>\n                            <td>{{rule.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-01-12T03:10:34.370"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:34.370",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:234",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-test-command-get",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.TestCommandCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\n        var getTest = {\n            category : 'test',\n            name : 'getTest',\n            readOnly: true,\n            data : {\n                pageSize : 10,\n                pageNo : 1,\n                sortDir : 'desc',\n                sortedBy : 'createDate'\n            }\n        };\n\n        $scope.data = '';\n\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify(getTest))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.data = result;\n                        console.log($scope.data);\n                    })\n        };\n        //$scope.fetchResult();\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.TestCommandCtrl\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\n            <button class=\"btn btn-info\" ng-click=\"fetchResult()\"><i class=\"glyphicon glyphicon-edit\"></i>Fetch</button>\n            {{data}}\n        </div>\n    </div>\n</div>",
      "createDate": "2015-01-12T03:10:34.487"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:34.487",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:235",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-production_cluster",
      "content": "<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n\n</body>\n</html>",
      "createDate": "2015-01-12T03:10:34.587"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:34.587",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:236",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-forum-post-view",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.ForumPostViewCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\n        $scope.getComment = {\n            category : 'comment',\n            name: 'getCommentTree',\n            readOnly: true\n        }\n\n        $scope.addComment = {\n            category : 'comment',\n            name: 'addComment',\n            readOnly: false\n        }\n\n        $scope.getComment.data = modelDataService.getModelData();\n        $scope.addComment.data = modelDataService.getModelData();\n\n        $scope.comments = [];\n\n        $scope.fetchResult = function () {\n            $http.post('api/rs', $scope.getComment)\n                    .success(function (result, status, headers, config) {\n                        $scope.comments = result;\n                        console.log($scope.comments);\n                    })\n        };\n        $scope.fetchResult();\n\n        $scope.aceOption = {\n            useWrapMode : true,\n            showGutter: false,\n            theme:'eclipse',\n            mode: 'markdown'\n        };\n\n        $scope.submit = function () {\n            $http.post('api/rs', $scope.addComment)\n                    .success(function (data, status, headers, config) {\n                        toaster.pop('success', status, data);\n                        $scope.fetchResult();\n                    })\n        }\n\n        $scope.toggle = function(scope) {\n            scope.toggle();\n        };\n\n        var getRootNodesScope = function() {\n            return angular.element(document.getElementById(\"tree-root\")).scope();\n        };\n\n        $scope.collapseAll = function() {\n            var scope = getRootNodesScope();\n            scope.collapseAll();\n        };\n\n        $scope.expandAll = function() {\n            var scope = getRootNodesScope();\n            scope.expandAll();\n        };\n\n        $scope.treeFilter = $filter('uiTreeFilter');\n\n        $scope.supportedFields = ['content'];\n\n        $scope.toggledForm = false;\n        $scope.btnText = 'add comment';\n\n        $scope.toggleForm = function() {\n            $scope.toggledForm = !$scope.toggledForm;\n            $scope.btnText = ($scope.toggledForm) ? 'add comment' : 'close';\n        };\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.ForumPostViewCtrl\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12\">\n            <div>\n                <div>{{getComment.data.title}}</div>\n                <div>{{getComment.data.createUserId}} {{getComment.data.createDate}}</div>\n                <div marked=\"getComment.data.content\"></div>\n            </div>\n            <div ui-ace=\"aceOption\" ng-model=\"addComment.data.comment\"></div>\n            <button class=\"pure-button pure-button-small success-bg\" ng-click=\"submit()\">Submit</button>\n\n            <div>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\">Collapse all</a>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"expandAll()\">Expand all</a>\n                <input ng-model=\"pattern\" placeholder=\"Type a part of any comment\"/>\n            </div>\n            <!-- Nested node template -->\n            <script type=\"text/ng-template\" id=\"nodes_renderer.html\">\n                <div ui-tree-handle class=\"tree-node tree-node-content\">\n                    <a class=\"btn btn-success btn-xs\" ng-if=\"node.children && node.children.length > 0\" data-nodrag ng-click=\"toggle(this)\"><span class=\"glyphicon\" ng-class=\"{'glyphicon glyphicon-plus': collapsed, 'glyphicon glyphicon-minus': !collapsed}\"></span></a>\n                    <a href=\"http://www.reddit.com/user/JhnnyTsunami\" class=\"author may-blank id-t2_95r8a\"><span ng-bind-html=\"node.createUserId | highlight:pattern | trust\"></span></a>&#32;<span>{{node.createDate}}</span>\n                    <div ng-bind-html=\"node.content | highlight:pattern | trust\"></div>\n                    <!--\n                    <div class=\"panel-body\">\n                        <form name=\"form\" ng-submit=\"action(node)\" class=\"form-inline\" ng-hide=\"toggledForm\">\n                            <div class=\"form-group\">\n                                <textarea ng-model=\"child.text\" value=\"your comment..\" class=\"form-control\" rows=\"1\" ng-minlength=\"5\" required></textarea>\n                            </div>\n                            <button ng-disabled=\"form.$invalid\" type=\"submit\" class=\"btn btn-primary\">Submit</button>\n                        </form>\n                        <span class=\"label pull-right pointer\" ng-click=\"toggleForm()\"\n                        ng-class=\"{'label-success': toggledForm, 'label-warning': !toggledForm}\">{{ btnText }}</span>\n                    </div>\n                    -->\n                </div>\n                <ol ui-tree-nodes=\"\" ng-model=\"node.children\" ng-class=\"{hidden: collapsed}\">\n                    <li ng-repeat=\"node in node.children\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </script>\n            <div ui-tree id=\"tree-root\">\n                <ol ui-tree-nodes ng-model=\"comments\">\n                    <li ng-repeat=\"node in comments\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </div>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-01-12T03:10:34.689"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:34.689",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:237",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-omnichannel",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Omnichannel and Omnichannel Experience</h1>\n            <p>\n                Omnichannel is a still new and the idea is still developing. People talking about it online at different levels but majorities are limited within a single brand. Omnichannel is about true continuity of your experience. But the key is that it extends beyond a single brand?s universe. Being omniscient is perceiving and understanding all things. Not all things at Best Buy. Not all things at Target. Not all things at Citi. Omni is perceiving all things. And the best way for a customer to perceive everything is to allow them to own their data and experience, then give them the ability to use it to guide creation and context of every future experience.\n            </p>\n            <p>\n                Omni comes from the word Omnis which can mean all or universal. This is in comparison to other concepts out there, like ?multichannel?, from the Latin word Multus, meaning multiple or many and from crosschannel, derived from the Latin word Crux, meaning to go across. The way that many are explaining omnichannel today is: ?cross channel being done well?. Examples are often that the mobile app should match the responsive design of the website which should thematically reflect the look and feel inside the store. We?d argue that doing cross channel well with the user in mind, is not worthy (nor useful) enough to deserve a new concept. Instead, we hold the belief that Omnichannel is something new and notable, even revolutionary, not just a marginal evolution of existing thinking.\n            </p>\n            <p>\n                Think about it. Today our life is continuous, but our customer experience is anything but that. We learn and have memory of all the good and bad things in life. We strive to limit or eliminate the negative ones and increase the good. These patterns that we strive to replicate are our preferences. The ability to have a continuous experience across brands, across format and across devices that is completely customized ? that is the promise of a new way of thinking and marketing that has been long unnoticed.\n            </p>\n            <p>\n                I am shopping at Amazon.com, Newegg.com and other online retailers. I like Amazon's catelog to do research and Newegg's checkout process. Would I be a happy customer of both if Amazon can provide me the Newegg checkout experience and Newegg can provide me Amazon catelog experience? I have a checking account at bank A, a saving account at bank B and an investment account at bank C. Can I use Bank A online transfter experience on Bank B and Bank C websites?\n            </p>\n            <p>\n                But wait, are you suggesting that Amazon helps people buy computers from Newegg? That would be counter to everything retailers try to do. When brands think customer experience they need to think omni. Its not about your customers or their customers, its about all customers. The brands who can best interpret omnichannel data and understand all customers are the winners. There will be a new dimension of customer decision. As a final decision is being made to purchase, price, relationship, service and continuity will all be considered.\n            </p>\n            <p>\n                With the rise of NFC and personal device use in store, brands need to awake to the idea that the days of closed data and 75% off for loyalty points from only shopping at their brand are changing quickly. If a brand wants to start thinking omnichannel, then they need to be open and involved in making the customer?s experience continuous and universal. Have doubts? Look at the role of social media and customer relationship. Remember those brands who have refused to evolve and engage and have a dialogue? Many of them aren?t with us today.\n            </p>\n            <p>\n                As much as the social media revolution has meant the two-way exchange in dialogue and interaction, omnichannel is the realization of social business. If the first phase in the evolution of the customer relationship was messaging and media, the future is product research, selection and payment. With personal preference data that can be used universally on devices, brand can either jump at the opportunities made real by omnichannel or wait until their brand is the only one not integrated and playing nicely to allow consumers to be continuous.\n            </p>\n            <p>\n                If you?re thinking that matching the colors and content across devices is omnichannel, we would encourage you to reconsider. If you are ready to lead in the next phase of social business and get the most out of the promise that our new identity as customers is truly omniscient, then let?s connect. This way of thinking is the future promise on which we started Omnichannel Application Framework.\n            </p>\n            <p>\n                There are a few key features in the framework that allowed this idea to be made reality:\n                <ul>\n                    In exploring and discovering products in your brand domain that data should be transferable for me to collect and use universally.\n                </ul>\n                <ul>\n                    In exchange for this data, the customer will give you access to other data they have collected that will far outweigh the value of the limited data in your brand universe.\n                </ul>\n                <ul>\n                    All experiences offline and online should allow an individual to identify themselves and present a brand with the opportunity to access my preferences.\n                </ul>\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2015-01-12T03:10:34.792"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:34.791",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:238",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-blog-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.BlogAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getBlog = {\n            category : 'blog',\n            name : 'getBlog',\n            readOnly: true\n        };\n\n        $scope.delBlog = {\n            category : 'blog',\n            name : 'delBlog',\n            readOnly: false\n        };\n\n        $scope.blogs = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Id',\n                value: 'id'\n            },\n            {\n                title: 'Desc',\n                value: 'desc'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'updateDate'\n        };\n\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n\n        $scope.delete = function(blog) {\n            $scope.delBlog.data = blog;\n            $http.post('api/rs', $scope.delBlog)\n                    .success(function (data, status, headers, config) {\n                        $scope.blogs.splice($scope.blogs.indexOf(blog), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.blog.add\");\n        };\n\n        $scope.update = function(blog) {\n            modelDataService.setModelData(blog);\n            $location.path(\"/form/com.networknt.light.blog.update\");\n        };\n\n        //The function that is responsible of fetching the result from the server\n        $scope.fetchResult = function () {\n            $http.post('api/rs', $scope.getBlog)\n                    .success(function (result, status, headers, config) {\n                        $scope.blogs = result;\n                        //console.log($scope.blogs);\n                    })\n        };\n\n        $scope.fetchResult();\n\n    }]);\n</script>\n\n<div class=\"container\" ng-controller=\"com.networknt.light.BlogAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <tabset>\n                <tab heading=\"Recent\">\n                    <h4>Blog</h4>\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.id\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.desc\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"blog in blogs | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(blog)\">Delete</a></td>\n                            <td><a href ng-click=\"update(blog)\">{{blog.id}}</a></td>\n                            <td>{{blog.desc}}</td>\n                            <td>{{blog.createUserId}}</td>\n                            <td>{{blog.createDate}}</td>\n                            <td>{{blog.updateUserId}}</td>\n                            <td>{{blog.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-01-12T03:10:34.893"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:34.893",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:239",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-db-event-download",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.DbEventDownloadCtrl', ['$scope', '$routeParams', '$http', '$location', 'toaster', 'modelDataService', function($scope, $routeParams, $http, $location, toaster, modelDataService) {\n        var getForm = {\n            category : 'form',\n            name : 'getForm',\n            readOnly: true,\n            data : {\n                id : 'com.networknt.light.db.downloadEvent'\n            }\n        };\n\n        $scope.content = '';\n\n        $scope.saveTextAsFile = function ()\n        {\n            var textToWrite = document.getElementById(\"inputTextToSave\").value;\n            var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});\n            var fileNameToSaveAs = document.getElementById(\"inputFileNameToSaveAs\").value;\n\n            var downloadLink = document.createElement(\"a\");\n            downloadLink.download = fileNameToSaveAs;\n            downloadLink.innerHTML = \"Download File\";\n            if (window.webkitURL != null)\n            {\n                // Chrome allows the link to be clicked\n                // without actually adding it to the DOM.\n                downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);\n            }\n            else\n            {\n                // Firefox requires the link to be added to the DOM\n                // before it can be clicked.\n                downloadLink.href = window.URL.createObjectURL(textFileAsBlob);\n                downloadLink.onclick = destroyClickedElement;\n                downloadLink.style.display = \"none\";\n                document.body.appendChild(downloadLink);\n            }\n\n            downloadLink.click();\n        }\n\n        function destroyClickedElement(event)\n        {\n            document.body.removeChild(event.target);\n        }\n\n\n        $http.post('api/rs', getForm)\n                .success(function(result, status, headers, config) {\n                    $scope.schema = result.schema;\n                    console.log('schema = ', $scope.schema);\n                    $scope.form = result.form;\n                    console.log('form = ', $scope.form);\n                    $scope.action = result.action;\n                    console.log('action = ', $scope.action);\n                    $scope.schemaJson = JSON.stringify($scope.schema, undefined, 2);\n                    $scope.formJson = JSON.stringify($scope.form, undefined, 2);\n                    $scope.modelData = result.model || modelDataService.getModelData() || {};\n                    modelDataService.setModelData(null); // reset the modelDataService variable.\n                    $scope.decorator = 'bootstrap-decorator';\n                })\n\n        $scope.setButtonIndex = function(index) {\n            $scope.buttonIndex = index;\n        };\n\n        $scope.submitForm = function(form, model) {\n            // First we broadcast an event so all fields validate themselves\n            $scope.$broadcast('schemaFormValidate');\n            // Then we check if the form is valid\n            if (form.$valid) {\n                $scope.action[$scope.buttonIndex].data = $scope.modelData;\n                $scope.action[$scope.buttonIndex].data.parentId = $routeParams.parentId;\n                $http.post('/api/rs', $scope.action[$scope.buttonIndex])\n                        .success(function (data, status, headers, config) {\n                            $scope.content = JSON.stringify(data, undefined, 2);\n                        })\n            }\n        };\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.DbEventDownloadCtrl\">\n    <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\n        <form name=\"ngform\" ng-submit=\"submitForm(ngform, modelData)\">\n            <div sf-model=\"modelData\" sf-form=\"form\" sf-schema=\"schema\">\n            </div>\n\n            <div ng-repeat=\"act in action\">\n                <input type=\"submit\" ng-click=\"setButtonIndex($index)\" class=\"btn btn-primary pull-right\" value=\"{{act.title}}\">\n            </div>\n        </form>\n    </div>\n    <div class=\"col-md-12\">\n        <table>\n            <tr><td>Events to Save:</td></tr>\n            <tr>\n                <td colspan=\"3\">\n                    <textarea id=\"inputTextToSave\" ng-model=\"content\" style=\"height:256px\"></textarea>\n                </td>\n            </tr>\n            <tr>\n                <td>Filename to Save As:</td>\n                <td><input id=\"inputFileNameToSaveAs\"/></td>\n                <td><button ng-click=\"saveTextAsFile()\">Save Text to File</button></td>\n            </tr>\n        </table>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-01-12T03:10:34.992"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:34.992",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:240",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-blog-post",
      "content": "<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n\n</body>\n</html>",
      "createDate": "2015-01-12T03:10:35.088"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:35.088",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:241",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-get-started",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Get started</h1>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-dev-linux\">Check out and set up development environment on Linux</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-dev-windows7\">Check out and set up development environment on Windows 7</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-dev-mac\">Check out and set up development environment on MAC OS X</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-first-component\">Create your first component</a></h2>Component is the smallest development and deployment unit in the framework. It can be used to construct view/page which can be part of an application.\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-first-view\">Create your first view</a></h2>View is an smallest downloadable unit from the server and it has dependencies with other views through routing.\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-first-application\">Create your first application</a></h2>Application consists of multiple views and manages routing between views.\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2015-01-12T03:10:35.186"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:35.186",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:242",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-first-view",
      "content": "<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n\n</body>\n</html>",
      "createDate": "2015-01-12T03:10:35.284"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:35.284",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:243",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-dev-windows7",
      "content": "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <h1>Development Environment Windows 7</h1>\r\n            <p>\r\n                I have set up my development environment on a Windows 7 desktop and here is the steps. I am using Google Chrome as my default browser for testing and debugging.\r\n            </p>\r\n            <p>\r\n                The set up is very similar with Linux and Mac\r\n            </p>\r\n            <p>\r\n                1. Create a user for development: (If you have a user already please use it. this user needs to have admin access though. )\r\n            </p>\r\n            <p>\r\n                2. Install JDK8, maven, node.js and npm with sudo and then using npm to install Grunt, Gulp, Bower and other modules.\r\n            </p>\r\n            <p>\r\n                3. Create dev folder and check out the source code.\r\n                <pre>\r\n            log in to the user you just created. Open a terminal window Command Prompt and you should be in your home directory c:\\Users\\steve\r\n            $mkdir networknt\r\n            $cd networknt\r\n\r\n            Check out Json Token which is forked from Google and fixed some of the issues.\r\n            $git clone https://github.com/networknt/jsontoken.git\r\n            Check out light rule engine which is a Java based rule engine used in the back end\r\n            $git clone https://github.com/networknt/rule-engine.git\r\n            Check out the light framework and other projects\r\n            $git clone https://github.com/networknt/light.git\r\n\r\n            $cd jsontoken\r\n            $mvn clean install\r\n            $cd ..\r\n            $cd rule-engine\r\n            $mvn clean install\r\n            $cd rule-loader\r\n            $mvn clean install\r\n            $cd ~\r\n            $cd light\r\n            $mvn clean install -DskipTests\r\n\r\n            Now you have all the Java code built already.\r\n\r\n                </pre>\r\n            </p>\r\n            <p>\r\n                4. Open the source code with your IDE. I am using JetBrains Idea but other IDE like Eclipse will work. From Idea, you can just select File/Open... and then choose ~/networknt/light folder to open. It will import the pom.xml file under the light folder. You might need to select JDK for java projects if Idea couldn't find the JDK.\r\n            </p>\r\n            <p>\r\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\r\n            <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\r\n            <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a socail commerce site to demo the features of the framework</ul>\r\n            <ul>example folder is a template site that can be copied to start your own web site.</ul>\r\n            Let's create three users for each site and if you are building a new site, create one extra user for it.\r\n                <pre>\r\n            create user networknt and home directory c:\\Users\\networknt\r\n            create user edibleforestgarden and home directory c:\\Users\\edibleforestgarden\r\n            create user example and home directory c:\\Users\\example\r\n                </pre>\r\n            Within each user's home directory, create web subdirectory and grant access to the development user. steve in my case. If you run grunt build from these projects in light folder, you website will be compiled and copied to these web folders and the server will serve the content from these folders for each site. This is like running in production mode.\r\n            Update virtualhost.json under server resource folder to specify host location. Change from /home/xxx to /Users/xxx and update them if necessary.\r\n            Add the following line into Windows/System32/drivers/etc/hosts in order to test locally using domain names.\r\n                <pre>\r\n            127.0.0.1\twww.edibleforestgarden.ca www.networknt.com example\r\n                </pre>\r\n            </p>\r\n\r\n            <p>\r\n                6. Start server from IDE in debug mode. From your IDE, right click server/src/main/java/com/networknt/light/server/LightServer and select Debug. The first time the server is started it will create the database and replay the event in resources/initdb.json. It will take several minutes until the debug info is stopped. At this time, you can start Grunt webserver to monitor all your changes in the local directory.\r\n                <pre>\r\n        cd ~/networknt/light/networknt\r\n        npm install\r\n        bower install\r\n        grunt serve\r\n                </pre>\r\n            assuming that Chrome is your default browser, it will be started now and point to localhost:9000 with www.networknt.com site content. You can login with stevehu/123456 to check the admin features. I am in a process to move everything from Grunt to Gulp but it is not been done yet.\r\n\r\n            </p>\r\n            <p>\r\n                For individual component/view/application development, you can go the the folder and run the following commands to start another webserver using gulp\r\n        <pre>\r\n        cd ~/networknt/light/view/com-networknt-light-v-example\r\n        npm install\r\n        bower install\r\n        gulp webserver\r\n        </pre>\r\n            Now another server is up listening localhost:8001 using gulp webserver. You can switch to other folders to do the same.\r\n\r\n            </p>\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-01-12T03:10:35.387"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:35.387",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:244",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-news-home",
      "content": "<script type='text/javascript'>\n    (function(angular) {\n        'use strict';\n        angular.module('lightApp').controller('com.networknt.light.NewsHomeCtrl', ['$scope', '$http', '$location', '$filter', 'authService', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, authService, toaster, modelDataService) {\n\n            $scope.getNews = {\n                category : 'news',\n                name : 'getNewsTree',\n                readOnly: true\n            };\n\n            //The function that is responsible of fetching the result from the server\n            $scope.fetchResult = function () {\n                $http.post('api/rs', $scope.getNews)\n                        .success(function (result, status, headers, config) {\n                            $scope.news = result;\n                        })\n            };\n\n            $scope.fetchResult();\n\n            $scope.toggle = function(scope) {\n                scope.toggle();\n            };\n\n            var getRootNodesScope = function() {\n                return angular.element(document.getElementById(\"tree-root\")).scope();\n            };\n\n            $scope.collapseAll = function() {\n                var scope = getRootNodesScope();\n                scope.collapseAll();\n            };\n\n            $scope.expandAll = function() {\n                var scope = getRootNodesScope();\n                scope.expandAll();\n            };\n\n            $scope.treeFilter = $filter('uiTreeFilter');\n\n            $scope.supportedFields = ['id', 'desc'];\n\n            $scope.gotoNews = function(id) {\n                modelDataService.setModelData(id);\n                $location.path(\"/page/com-networknt-light-v-news-post\");\n            }\n        }]);\n    })(window.angular);\n</script>\n<div class=\"container\" data-ng-controller=\"com.networknt.light.NewsHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\n            <h4 class=\"page-header\">News</h4>\n            <div>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\">Collapse all</a>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"expandAll()\">Expand all</a>\n                <input ng-model=\"pattern\" placeholder=\"Type a part of any news\"/>\n            </div>\n            <!-- Nested node template -->\n            <script type=\"text/ng-template\" id=\"nodes_renderer.html\">\n                <div ui-tree-handle class=\"tree-node tree-node-content\">\n                    <a class=\"btn btn-success btn-xs\" ng-if=\"node.children && node.children.length > 0\" data-nodrag ng-click=\"toggle(this)\"><span class=\"glyphicon\" ng-class=\"{'glyphicon glyphicon-plus': collapsed, 'glyphicon glyphicon-minus': !collapsed}\"></span></a>\n                    <!--{{node.id | highlight:pattern | trust}}-->\n                    <a href ng-click=\"gotoNews(node.id)\" ng-bind-html=\"node.id | highlight:pattern | trust\"></a>\n                    <small ng-bind-html=\"node.desc | highlight:pattern | trust\"></small>\n                </div>\n                <ol ui-tree-nodes=\"\" ng-model=\"node.children\" ng-class=\"{hidden: collapsed}\">\n                    <li ng-repeat=\"node in node.children\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </script>\n            <div ui-tree data-drag-enabled=false id=\"tree-root\">\n                <ol ui-tree-nodes ng-model=\"news\">\n                    <li ng-repeat=\"node in news\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </div>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-01-12T03:10:35.485"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:35.485",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:245",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-production_single",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Production Environment Setup</h1>\n            <p>\n                I personally use CentOS 6.5 32bit Linux as my production environment and I would recommend it to you; however, other Linux distributions, Mac and Windows are perfectly OK.\n                The following steps are for CentOS 6.5 32bit Linux and the setup is single node that hosts three sites. For cluster and load balance setup, please read <a href=\"/page/production_cluster\">here</a>\n            </p>\n            <p>\n                On Linux, the production environment is very similar with development environment.\n            </p>\n            <p>\n                1. Create a working user for production other than root: (If you have a user already on the Linux box, please use it) The following assumes that you logged in as root.\n                <pre>\n            #adduser steve\n            #passwd steve\n\n            #visudo\n            This is to edit /etc/sudoers to add steve to the last line so that he can use sudo command\n            Never use vi to edit the above file!\n\n            Add steve right after\n            root ALL=(ALL)   ALL\n            with\n            steve ALL=(ALL)   ALL\n\n            vi /etc/ssh/sshd_config\n\n            change the following line\n            #PermitRootLogin  yes\n            to\n            PermitRootLogin no\n\n            change the following line\n            #UserDNS yes\n            to\n            UserDNS  no\n\n            Log out from root and log in with steve. From this moment on, please use sudo command instead of logging in as root.\n                </pre>\n            </p>\n            <p>\n                2. Install JDK8, maven, node.js and npm with sudo and then using npm to install Grunt, Gulp, Bower and other modules.\n            </p>\n            <p>\n                3. Create dev folder and check out the source code.\n                <pre>\n            log in to the user you just created.\n            $mkdir networknt\n            $cd networknt\n\n            Check out Json Token which is forked from Google and fixed some of the issues.\n            $git clone https://github.com/networknt/jsontoken.git\n            Check out light rule engine which is a Java based rule engine used in the back end\n            $git clone https://github.com/networknt/rule-engine.git\n            Check out the light framework and other projects\n            $git clone https://github.com/networknt/light.git\n\n            $cd jsontoken\n            $mvn clean install\n            $cd ..\n            $cd rule-engine\n            $mvn clean install\n            $cd rule-loader\n            $mvn clean install\n            $cd ~\n            $cd light\n            $mvn clean install -DskipTests\n\n            Now you have all the Java code built already.\n\n                </pre>\n            </p>\n            <p>\n                4. Open the source code with your IDE. I am using JetBrains Idea but other IDE like Eclipse will work. From Idea, you can just select File/Open... and then choose ~/networknt/light folder to open. It will import the pom.xml file under the light folder.\n            </p>\n            <p>\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\n            <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\n            <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a socail commerce site to demo the features of the framework</ul>\n            <ul>example folder is a template site that can be copied to start your own web site.</ul>\n            OK. Let's create three users for each site and if you are building a new site, create one extra user for it.\n\n            </p>\n            <p>\n                If you?re thinking that matching the colors and content across devices is omnichannel, we would encourage you to reconsider. If you are ready to lead in the next phase of social business and get the most out of the promise that our new identity as customers is truly omniscient, then let?s connect. This way of thinking is the future promise on which we started Omnichannel Application Framework.\n            </p>\n            <p>\n                There are a few key features in the framework that allowed this idea to be made reality:\n            <ul>\n                In exploring and discovering products in your brand domain that data should be transferable for me to collect and use universally.\n            </ul>\n            <ul>\n                In exchange for this data, the customer will give you access to other data they have collected that will far outweigh the value of the limited data in your brand universe.\n            </ul>\n            <ul>\n                All experiences offline and online should allow an individual to identify themselves and present a brand with the opportunity to access my preferences.\n            </ul>\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2015-01-12T03:10:35.577"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:35.577",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:246",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-role-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.RoleAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getRole = {\n            category : 'role',\n            name : 'getRole',\n            readOnly: true\n        };\n        $scope.delRole = {\n            category : 'role',\n            name : 'delRole',\n            readOnly: false\n        };\n        $scope.roles = [];\n        $scope.hosts = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Id',\n                value: 'id'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: \"Description\",\n                value: \"desc\"\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'createDate'\n        };\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(role) {\n            $scope.delRole.data = role;\n            $http.post('api/rs', $scope.delRole)\n                    .success(function (data, status, headers, config) {\n                        $scope.roles.splice($scope.roles.indexOf(role), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n\n        $scope.update = function(role) {\n            modelDataService.setModelData(role);\n            $location.path(\"/form/com.networknt.light.role.update\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.role.add\");\n        };\n\n        $scope.fetchResult = function () {\n            $http.post('api/rs', $scope.getRole)\n                    .success(function (result, status, headers, config) {\n                        $scope.roles = result.roles;\n                        $scope.hosts = result.hosts;\n                        //console.log($scope.roles);\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.RoleAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <tabset>\n                <tab heading=\"Roles\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.id\" type=\"text\" /></td>\n                            <td>\n                                <select ng-model=\"filter.host\" ng-options=\"host for host in hosts\" >\n                                    <option value=\"\"> </option>\n                                </select>\n                            </td>\n                            <td><input ng-model=\"filter.desc\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"role in roles | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(role)\">Delete</a></td>\n                            <td><a href ng-click=\"update(role)\">{{role.id}}</a></td>\n                            <td>{{role.host}}</td>\n                            <td>{{role.desc}}</td>\n                            <td>{{role.createUserId}}</td>\n                            <td>{{role.createDate}}</td>\n                            <td>{{role.updateUserId}}</td>\n                            <td>{{role.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-01-12T03:10:35.703"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:35.703",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:247",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-forum-post",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.ForumPostCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\n        $scope.getForumPost = {\n            category : 'forum',\n            name: 'getForumPost',\n            readOnly: true,\n            data: {}\n        }\n\n        $scope.posts = [];\n        $scope.forums = [];\n\n        $scope.fetchResult = function () {\n            $scope.getForumPost.data.id = modelDataService.getModelData();\n            modelDataService.setModelData(null); // reset the modelDataService variable.\n            $http.post('api/rs', $scope.getForumPost)\n                    .success(function (result, status, headers, config) {\n                        $scope.posts = result;\n                        console.log($scope.posts);\n                    })\n        };\n        $scope.fetchResult();\n\n        $scope.post = function() {\n            $location.path(\"/form/com.networknt.light.forum.post.add/\" + $scope.getForumPost.data.id);\n        };\n\n        $scope.view = function(post) {\n            modelDataService.setModelData(post);\n            $location.path(\"/page/com.networknt.light.forum.post.view\");\n        };\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.ForumPostCtrl\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"post()\"><i class=\"glyphicon glyphicon-edit\"></i>Post</button>\n            </div>\n            <tabset>\n                <tab heading=\"Recent\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"view(post)\">{{post.title}}</a></td>\n                        </tr>\n                        <tr>\n                            <td>{{post.createUser}} {{post.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n                <tab heading=\"Bookmark\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\">\n                            <td>\n                                <div><a href ng-click=\"view(post)\">{{post.title}}</a></div>\n                                <div>{{post.createUser}} {{post.createDate}}</div>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-01-12T03:10:35.802"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:35.802",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:248",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-first-application",
      "content": "<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n\n</body>\n</html>",
      "createDate": "2015-01-12T03:10:35.898"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:35.898",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:249",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-blog-home",
      "content": "<script type='text/javascript'>\n    (function(angular) {\n        'use strict';\n        angular.module('lightApp').controller('com.networknt.light.BlogHomeCtrl', ['$scope', '$http', '$location', '$filter', 'authService', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, authService, toaster, modelDataService) {\n\n            $scope.getBlog = {\n                category : 'blog',\n                name : 'getBlogTree',\n                readOnly: true\n            };\n\n            //The function that is responsible of fetching the result from the server\n            $scope.fetchResult = function () {\n                $http.post('api/rs', $scope.getBlog)\n                    .success(function (result, status, headers, config) {\n                        $scope.blogs = result;\n                    })\n            };\n\n            $scope.fetchResult();\n\n            $scope.toggle = function(scope) {\n                scope.toggle();\n            };\n\n            var getRootNodesScope = function() {\n                return angular.element(document.getElementById(\"tree-root\")).scope();\n            };\n\n            $scope.collapseAll = function() {\n                var scope = getRootNodesScope();\n                scope.collapseAll();\n            };\n\n            $scope.expandAll = function() {\n                var scope = getRootNodesScope();\n                scope.expandAll();\n            };\n\n            $scope.treeFilter = $filter('uiTreeFilter');\n\n            $scope.supportedFields = ['id', 'desc'];\n\n            $scope.gotoBlog = function(id) {\n                modelDataService.setModelData(id);\n                $location.path(\"/page/com-networknt-light-v-blog-post\");\n            }\n        }]);\n    })(window.angular);\n</script>\n<div class=\"container\" data-ng-controller=\"com.networknt.light.BlogHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\n            <h4 class=\"page-header\">Blog</h4>\n            <div>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\">Collapse all</a>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"expandAll()\">Expand all</a>\n                <input ng-model=\"pattern\" placeholder=\"Type a part of any blog\"/>\n            </div>\n            <!-- Nested node template -->\n            <script type=\"text/ng-template\" id=\"nodes_renderer.html\">\n                <div ui-tree-handle class=\"tree-node tree-node-content\">\n                    <a class=\"btn btn-success btn-xs\" ng-if=\"node.children && node.children.length > 0\" data-nodrag ng-click=\"toggle(this)\"><span class=\"glyphicon\" ng-class=\"{'glyphicon glyphicon-plus': collapsed, 'glyphicon glyphicon-minus': !collapsed}\"></span></a>\n                    <!--{{node.id | highlight:pattern | trust}}-->\n                    <a href ng-click=\"gotoBlog(node.id)\" ng-bind-html=\"node.id | highlight:pattern | trust\"></a>\n                    <small ng-bind-html=\"node.desc | highlight:pattern | trust\"></small>\n                </div>\n                <ol ui-tree-nodes=\"\" ng-model=\"node.children\" ng-class=\"{hidden: collapsed}\">\n                    <li ng-repeat=\"node in node.children\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </script>\n            <div ui-tree data-drag-enabled=false id=\"tree-root\">\n                <ol ui-tree-nodes ng-model=\"blogs\">\n                    <li ng-repeat=\"node in blogs\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </div>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-01-12T03:10:35.995"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:35.995",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:250",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-news-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.NewsAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getNews = {\n            category : 'news',\n            name : 'getNews',\n            readOnly: true\n        };\n\n        $scope.delNews = {\n            category : 'news',\n            name : 'delNews',\n            readOnly: false\n        };\n\n        $scope.news = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Id',\n                value: 'id'\n            },\n            {\n                title: 'Desc',\n                value: 'desc'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'updateDate'\n        };\n\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n\n        $scope.delete = function(news) {\n            $scope.delNews.data = news;\n            $http.post('api/rs', $scope.delNews)\n                    .success(function (data, status, headers, config) {\n                        $scope.news.splice($scope.news.indexOf(news), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.news.add\");\n        };\n\n        $scope.update = function(news) {\n            modelDataService.setModelData(news);\n            $location.path(\"/form/com.networknt.light.news.update\");\n        };\n\n        //The function that is responsible of fetching the result from the server\n        $scope.fetchResult = function () {\n            $http.post('api/rs', $scope.getNews)\n                    .success(function (result, status, headers, config) {\n                        $scope.news = result;\n                    })\n        };\n\n        $scope.fetchResult();\n\n    }]);\n</script>\n\n<div class=\"container\" ng-controller=\"com.networknt.light.NewsAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <tabset>\n                <tab heading=\"Recent\">\n                    <h4>News</h4>\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.id\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.desc\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"new in news | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(new)\">Delete</a></td>\n                            <td><a href ng-click=\"update(new)\">{{new.id}}</a></td>\n                            <td>{{new.desc}}</td>\n                            <td>{{new.createUserId}}</td>\n                            <td>{{new.createDate}}</td>\n                            <td>{{new.updateUserId}}</td>\n                            <td>{{new.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-01-12T03:10:36.091"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:36.091",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:251",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-user-public-profile",
      "content": "<div>This is public user profile that you can see the general user info and up vote and down vote user if you like</div>",
      "createDate": "2015-01-12T03:10:36.186"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:36.186",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:252",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-form-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.FormAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getAllForm = {\n            category : 'form',\n            name : 'getAllForm',\n            readOnly: true\n        };\n        $scope.delForm = {\n            category : 'form',\n            name : 'delForm',\n            readOnly: false\n        };\n        $scope.forms = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Id',\n                value: 'id'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'createDate'\n        };\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(form) {\n            $scope.delForm.data = form;\n            $http.post('api/rs', $scope.delForm)\n                    .success(function (data, status, headers, config) {\n                        $scope.forms.splice($scope.forms.indexOf(form), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n\n        $scope.update = function(form) {\n            modelDataService.setModelData(form);\n            $location.path(\"/page/com-networknt-light-v-form-admin-update\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/page/com-networknt-light-v-form-admin-add\");\n        };\n\n        $scope.import = function() {\n            $location.path(\"/form/com.networknt.light.form.import\");\n        };\n\n        $scope.fetchResult = function () {\n            $http.post('api/rs', $scope.getAllForm)\n                    .success(function (result, status, headers, config) {\n                        $scope.forms = result;\n                        console.log($scope.forms);\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.FormAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"import()\"><i class=\"glyphicon glyphicon-edit\"></i>Import</button>\n            </div>\n            <tabset>\n                <tab heading=\"Forms\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.id\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"form in forms | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(form)\">Delete</a></td>\n                            <td><a href ng-click=\"update(form)\">{{form.id}}</a></td>\n                            <td>{{form.host}}</td>\n                            <td>{{form.createUserId}}</td>\n                            <td>{{form.createDate}}</td>\n                            <td>{{form.updateUserId}}</td>\n                            <td>{{form.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-01-12T03:10:36.284"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:36.284",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:253",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-menu-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.MenuAdminHomeCtrl', ['$scope', '$http', '$location', 'modelDataService', 'toaster', function ($scope, $http, $location, modelDataService, toaster) {\n        $scope.getAllMenu = {\n            category : 'menu',\n            name : 'getAllMenu',\n            readOnly: true\n        };\n\n        $scope.delMenu = {\n            category : 'menu',\n            name : 'delMenu',\n            readOnly: false\n        };\n\n        $scope.delMenuItem = {\n            category : 'menu',\n            name : 'delMenuItem',\n            readOnly: false\n        };\n\n        $scope.menus = [];\n        $scope.menuItems = [];\n\n        $scope.menuHeaders = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.menuItemHeaders = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Id',\n                value: 'id'\n            },\n            {\n                title: 'Label',\n                value: 'label'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Path',\n                value: 'path'\n            },\n            {\n                title: 'Click',\n                value: 'click'\n            },\n            {\n                title: 'Template',\n                value: 'tpl'\n            },\n            {\n                title: 'Controller',\n                value: 'ctrl'\n            },\n            {\n                title: 'Position Left',\n                value: 'left'\n            },\n            {\n                title: 'Roles',\n                value: 'roles'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'updateDate'\n        };\n        $scope.menuFilter = {};\n        $scope.menuItemFilter = {};\n\n        //call back function that we passed to our custom directive sortBy, will be called when clicking on any field to sort\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.addMenu = function () {\n            $location.path(\"/form/com.networknt.light.menu.addMenu\");\n        }\n\n        $scope.addMenuItem = function () {\n            $location.path(\"/form/com.networknt.light.menu.addMenuItem\");\n        }\n\n        $scope.deleteMenu = function(menu) {\n            $scope.delMenu.data = menu;\n            $http.post('api/rs', $scope.delMenu)\n                    .success(function (data, status, headers, config) {\n                        $scope.menus.splice($scope.menus.indexOf(menu), 1);\n                        $scope.fetchResult(); // when delete a host, all the menuItems belong to the host will be deleted.\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n        $scope.deleteMenuItem = function(menuItem) {\n            $scope.delMenuItem.data = menuItem;\n            $http.post('api/rs', $scope.delMenuItem)\n                    .success(function (data, status, headers, config) {\n                        $scope.menuItems.splice($scope.menuItems.indexOf(menuItem), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n        $scope.updateMenu = function(menu) {\n            console.log(\"menu to be passed\", menu);\n            modelDataService.setModelData(menu);\n            $location.path(\"/form/com.networknt.light.menu.updateMenu\");\n        };\n\n        $scope.updateMenuItem = function(menuItem) {\n            modelDataService.setModelData(menuItem);\n            $location.path(\"/form/com.networknt.light.menu.updateMenuItem\");\n        };\n\n        //The function that is responsible of fetching the result from the server and setting the grid to the new result\n        $scope.fetchResult = function () {\n            $http.post('api/rs', $scope.getAllMenu)\n                    .success(function (result, status, headers, config) {\n                        $scope.menus = result.menus;\n                        $scope.menuItems = result.menuItems;\n                        //console.log('menus', $scope.menus);\n                        //console.log('menuItems', $scope.menuItems);\n                    })\n        };\n        $scope.fetchResult();\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.MenuAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"addMenu()\"><i class=\"glyphicon glyphicon-edit\"></i>Add Menu</button>\n            </div>\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"addMenuItem()\"><i class=\"glyphicon glyphicon-edit\"></i>Add Menu Item</button>\n            </div>\n            <tabset>\n                <tab heading=\"Host Menu\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in menuHeaders\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuFilter.host\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuFilter.createUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuFilter.createDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuFilter.updateUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuFilter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"menu in menus | filter: menuFilter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"deleteMenu(menu)\">Delete</a></td>\n                            <td><a href ng-click=\"updateMenu(menu)\">{{menu.host}}</a></td>\n                            <td>{{menu.createUserId}}</td>\n                            <td>{{menu.createDate}}</td>\n                            <td>{{menu.updateUserId}}</td>\n                            <td>{{menu.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n                <tab heading=\"Menu Items\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in menuItemHeaders\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.id\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.label\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.host\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.path\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.click\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.tpl\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.ctrl\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.left\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.roles\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.createUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.createDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.updateUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"menuItem in menuItems | filter: menuItemFilter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"deleteMenuItem(menuItem)\">Delete</a></td>\n                            <td><a href ng-click=\"updateMenuItem(menuItem)\">{{menuItem.id}}</a></td>\n                            <td>{{menuItem.label}}</td>\n                            <td>{{menuItem.host}}</td>\n                            <td>{{menuItem.path}}</td>\n                            <td>{{menuItem.click}}</td>\n                            <td>{{menuItem.tpl}}</td>\n                            <td>{{menuItem.ctrl}}</td>\n                            <td>{{menuItem.left}}</td>\n                            <td>{{menuItem.roles}}</td>\n                            <td>{{menuItem.createUserId}}</td>\n                            <td>{{menuItem.createDate}}</td>\n                            <td>{{menuItem.updateUserId}}</td>\n                            <td>{{menuItem.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div>",
      "createDate": "2015-01-12T03:10:36.381"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:36.381",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:254",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-form-admin-add",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.FormAdminAddCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.addFormPost = {\n            category : 'form',\n            name : 'addForm',\n            readOnly: false,\n            data: {}\n        };\n\n        $scope.schema = {};\n        $scope.form = [];\n        $scope.action = [];\n        $scope.modelData = {};\n        $scope.schemaJson = JSON.stringify($scope.schema, undefined, 2);\n        $scope.formJson = JSON.stringify($scope.form, undefined, 2);\n        $scope.actionJson = JSON.stringify($scope.action, undefined, 2);\n        $scope.decorator = 'bootstrap-decorator';\n\n        $scope.itParsesSchema = true;\n        $scope.itParsesForm = true;\n        $scope.itParsesAction = true;\n\n        $scope.$watch('schemaJson',function(val,old){\n            if (val && val !== old) {\n                try {\n                    $scope.schema = JSON.parse($scope.schemaJson);\n                    $scope.itParsesSchema = true;\n                } catch (e){\n                    $scope.itParsesSchema = false;\n                }\n            }\n        });\n\n        $scope.$watch('formJson',function(val,old){\n            if (val && val !== old) {\n                try {\n                    $scope.form = JSON.parse($scope.formJson);\n                    $scope.itParsesForm = true;\n                } catch (e){\n                    $scope.itParsesForm = false;\n                }\n            }\n        });\n\n        $scope.$watch('actionJson',function(val,old){\n            if (val && val !== old) {\n                try {\n                    $scope.action = JSON.parse($scope.actionJson);\n                    $scope.itParsesAction = true;\n                } catch (e){\n                    $scope.itParsesAction = false;\n                }\n            }\n        });\n\n        $scope.pretty = function(){\n            return JSON.stringify($scope.modelData,undefined,2,2);\n        };\n\n        $scope.submitForm = function(form, model) {\n            // First we broadcast an event so all fields validate themselves\n            //console.log(model);\n            $scope.$broadcast('schemaFormValidate');\n            // Then we check if the form is valid\n            if (form.$valid) {\n                // TODO submit the form based on the action defined.\n\n\n            }\n        };\n\n        $scope.submitSchema = function() {\n            console.log('submitSchema is called');\n            $scope.addFormPost.data.id = $scope.id;\n            $scope.addFormPost.data.schema = $scope.schema;\n            $scope.addFormPost.data.form = $scope.form;\n            $scope.addFormPost.data.action = $scope.action;\n            $http.post('api/rs', $scope.addFormPost)\n                    .success(function(data, status, headers, config) {\n                        toaster.pop('success', status, data, 3000);\n                        $location.path(\"/page/com-networknt-light-v-form-admin-home\");\n                    })\n\n        };\n\n        $scope.saveModel = function() {\n            console.log('saveModel is called');\n            console.log($scope.modelData);\n            $scope.addFormPost.data.modelData = $scope.modelData;\n            $http.post('api/rs', $scope.addFormPost)\n                    .success(function(data, status, headers, config) {\n                        toaster.pop('success', status, data, 3000);\n                        $location.path(\"/page/com-networknt-light-v-form-admin-home\");\n                    })\n        };\n\n    }]);\n</script>\n<style type=\"text/css\">\n\n    body,html {\n        min-height: 1400px;\n    }\n\n    .alert .form-group {\n        margin-bottom: 0px;\n    }\n\n    .red {\n        border: 1px solid red;\n        background: #fee;\n    }\n\n    .ace_editor { font-size: 20px !important;}\n    .form {  height: 400px;  }\n    .action { height: 200px; }\n    .schema {  height: 800px;  }\n</style>\n<div class=\"col-md-12\" ng-app=\"lightApp\" ng-controller=\"com.networknt.light.FormAdminAddCtrl\">\n    <h1>Schema Form Admin</h1>\n    <div class=\"row\">\n        <div class=\"col-sm-4\">\n            <h3>The Generated Form</h3>\n            <form name=\"ngform\" ng-submit=\"submitForm(ngform, modelData)\">\n                <div sf-model=\"modelData\" sf-form=\"form\" sf-schema=\"schema\"></div>\n                <div ng-repeat=\"act in action\">\n                    <input type=\"submit\" ng-click=\"setButtonIndex($index)\" class=\"btn btn-primary pull-right\" value=\"{{act.title}}\">\n                </div>\n            </form>\n\n            <h3>Model</h3>\n            <pre ng-cloak>{{pretty()}}</pre>\n            <div class=\"col-xs-3 col-md-3\"><input type=\"submit\" value=\"Save Model\" ng-click=\"saveModel()\" class=\"btn btn-primary btn-block\"></div>\n        </div>\n        <div class=\"col-sm-8\">\n            <h3>Form Id</h3>\n            <div><input type=\"text\" ng-model=\"id\"></div>\n            <h3>Form</h3>\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesForm}\" ng-model=\"formJson\" class=\"form-control form\"></div>\n            <h3>Action</h3>\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesAction}\" ng-model=\"actionJson\" class=\"form-control action\"></div>\n            <h3>Schema</h3>\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesSchema}\" ng-model=\"schemaJson\" class=\"form-control schema\"></div>\n            <div class=\"col-xs-2 col-md-2\"><input type=\"submit\" value=\"Save Schema\" ng-click=\"submitSchema()\" class=\"btn btn-primary btn-block\"></div>\n        </div>\n    </div>\n</div>",
      "createDate": "2015-01-12T03:10:36.480"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:36.480",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:255",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-news-post",
      "content": "<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n\n</body>\n</html>",
      "createDate": "2015-01-12T03:10:36.576"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:36.576",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:256",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-form-admin-update",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.FormAdminUpdateCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.updFormPost = {\n            category : 'form',\n            name : 'updForm',\n            readOnly: false\n        };\n\n        $scope.data = modelDataService.getModelData() || {};\n        modelDataService.setModelData(null); // reset the modelDataService variable.\n        //console.log($scope.data);\n        //console.log($scope.data.id);\n        $scope.updFormPost.data = $scope.data;\n        $scope.schema = $scope.data.schema;\n        //console.log($scope.schema);\n        $scope.form = $scope.data.form;\n        //console.log($scope.form);\n        $scope.action = $scope.data.action;\n        //console.log($scope.action);\n        $scope.schemaJson = JSON.stringify($scope.schema, undefined, 2);\n        $scope.formJson = JSON.stringify($scope.form, undefined, 2);\n        $scope.actionJson = JSON.stringify($scope.action, undefined, 2);\n        $scope.modelData = $scope.data.modelData || {};\n        $scope.decorator = 'bootstrap-decorator';\n\n        $scope.itParsesSchema = true;\n        $scope.itParsesForm = true;\n        $scope.itParsesAction = true;\n\n        $scope.$watch('schemaJson',function(val,old){\n            if (val && val !== old) {\n                try {\n                    $scope.schema = JSON.parse($scope.schemaJson);\n                    $scope.itParsesSchema = true;\n                } catch (e){\n                    $scope.itParsesSchema = false;\n                }\n            }\n        });\n\n        $scope.$watch('formJson',function(val,old){\n            if (val && val !== old) {\n                try {\n                    $scope.form = JSON.parse($scope.formJson);\n                    $scope.itParsesForm = true;\n                } catch (e){\n                    $scope.itParsesForm = false;\n                }\n            }\n        });\n\n        $scope.$watch('actionJson',function(val,old){\n            if (val && val !== old) {\n                try {\n                    $scope.action = JSON.parse($scope.actionJson);\n                    $scope.itParsesAction = true;\n                } catch (e){\n                    $scope.itParsesAction = false;\n                }\n            }\n        });\n\n        $scope.pretty = function(){\n            return JSON.stringify($scope.modelData,undefined,2,2);\n        };\n\n        $scope.submitForm = function(form, model) {\n            // First we broadcast an event so all fields validate themselves\n            //console.log(model);\n            $scope.$broadcast('schemaFormValidate');\n            // Then we check if the form is valid\n            if (form.$valid) {\n                // TODO submit the form based on the action defined.\n\n\n            }\n        };\n\n        $scope.submitSchema = function() {\n            console.log('submitSchema is called');\n            $scope.updFormPost.data.schema = $scope.schema;\n            console.log($scope.schema);\n            $scope.updFormPost.data.form = $scope.form;\n            console.log($scope.form);\n            $scope.updFormPost.data.action = $scope.action;\n            console.log($scope.action);\n            $http.post('api/rs', $scope.updFormPost)\n                    .success(function(data, status, headers, config) {\n                        toaster.pop('success', status, data, 3000);\n                        $location.path(\"/page/com-networknt-light-v-form-admin-home\");\n                    })\n\n        };\n\n        $scope.saveModel = function() {\n            console.log('saveModel is called');\n            console.log($scope.modelData);\n            $scope.updFormPost.data.modelData = $scope.modelData;\n            $http.post('api/rs', $scope.updFormPost)\n                    .success(function(data, status, headers, config) {\n                        toaster.pop('success', status, data, 3000);\n                        $location.path(\"/page/com-networknt-light-v-form-admin-home\");\n                    })\n        };\n\n    }]);\n</script>\n<style type=\"text/css\">\n\n    body,html {\n        min-height: 1400px;\n    }\n\n    .alert .form-group {\n        margin-bottom: 0px;\n    }\n\n    .red {\n        border: 1px solid red;\n        background: #fee;\n    }\n\n    .ace_editor { font-size: 20px !important;}\n    .form {  height: 400px;  }\n    .action { height: 200px; }\n    .schema {  height: 800px;  }\n</style>\n<div class=\"col-md-12\" ng-app=\"lightApp\" ng-controller=\"com.networknt.light.FormAdminUpdateCtrl\">\n    <h1>Schema Form Admin</h1>\n    <div class=\"row\">\n        <div class=\"col-sm-4\">\n            <h3>The Generated Form</h3>\n            <form name=\"ngform\" ng-submit=\"submitForm(ngform, modelData)\">\n                <div sf-model=\"modelData\" sf-form=\"form\" sf-schema=\"schema\"></div>\n                <div ng-repeat=\"act in action\">\n                    <input type=\"submit\" ng-click=\"setButtonIndex($index)\" class=\"btn btn-primary pull-right\" value=\"{{act.title}}\">\n                </div>\n            </form>\n\n            <h3>Model</h3>\n            <pre ng-cloak>{{pretty()}}</pre>\n            <div class=\"col-xs-3 col-md-3\"><input type=\"submit\" value=\"Save Model\" ng-click=\"saveModel()\" class=\"btn btn-primary btn-block\"></div>\n        </div>\n        <div class=\"col-sm-8\">\n            <h3>Selected Form: {{data.id}}</h3>\n            <h3>Form</h3>\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesForm}\" ng-model=\"formJson\" class=\"form-control form\"></div>\n            <h3>Action</h3>\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesAction}\" ng-model=\"actionJson\" class=\"form-control action\"></div>\n            <h3>Schema</h3>\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesSchema}\" ng-model=\"schemaJson\" class=\"form-control schema\"></div>\n            <div class=\"col-xs-2 col-md-2\"><input type=\"submit\" value=\"Save Schema\" ng-click=\"submitSchema()\" class=\"btn btn-primary btn-block\"></div>\n        </div>\n    </div>\n</div>",
      "createDate": "2015-01-12T03:10:36.671"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:36.671",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:257",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-user-logout",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.UserLogoutCtrl', ['$scope', '$http', '$location', 'toaster', 'authService', function ($scope, $http, $location, toaster, authService) {\n        var logOutUser = {\n            category : 'user',\n            name : 'logOutUser',\n            readOnly: false,\n            data: {\n                refreshToken : authService.getRefreshToken()\n            }\n        };\n        console.log(\"logOutUser\", logOutUser);\n        $http.post('api/rs', logOutUser)\n                .success(function (result, status, headers, config) {\n                    // call logOut function\n                    authService.logOut();\n                    // move to main location\n                    $location.path(\"/\");\n                })\n    }]);\n</script>\n<div ng-controller=\"com.networknt.light.UserLogoutCtrl\"></div>",
      "createDate": "2015-01-12T03:10:36.766"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:36.766",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:258",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-dev-linux",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Development Environment Linux</h1>\n            <p>\n                I personally use Linux as my dev environment and I would recommend you do so; however, Mac and Windows are perfectly OK.\n                The following steps are for Ubuntu Linux and some of the commands might be different on Other Linux distributions, Mac and Windows. My production is CentOS 6.5 32bit and the installation guide is <a href=\"/page/production_single\">here</a>\n\n                I also recommend Google Chrome as your browser for Front End AngularJS testing and debugging.\n            </p>\n            <p>\n                On Linux, the dev environment will mimic production environment so it is easier to deploy your site to Linux based production. Also, you can learn a lot about security once your site is public.\n            </p>\n            <p>\n                1. Create a user for development: (If you have a user already on the Linux box other than root, please use it) The following assumes that you logged in as root.\n                <pre>\n            #adduser steve\n\n            #visudo\n            This is to edit /etc/sudoers to add steve to the last line so that he can use sudo command\n            Never use vi to edit the above file!\n\n            Add steve right after\n            root ALL=(ALL)   ALL\n            with\n            steve ALL=(ALL)   ALL\n\n            vi /etc/ssh/sshd_config\n\n            change the following line\n            #PermitRootLogin  yes\n            to\n            PermitRootLogin no\n\n            change the following line\n            #UserDNS yes\n            to\n            UserDNS  no\n\n            Log out from root and log in with steve. From this moment on, please use sudo command instead of logging in as root.\n                </pre>\n            </p>\n            <p>\n                2. Install JDK8, maven, node.js and npm with sudo and then using npm to install Grunt, Gulp, Bower and other modules.\n\n                \n\n            </p>\n            <p>\n                3. Create dev folder and check out the source code.\n                <pre>\n            log in to the user you just created.\n            $mkdir networknt\n            $cd networknt\n\n            Check out Json Token which is forked from Google and fixed some of the issues.\n            $git clone https://github.com/networknt/jsontoken.git\n            Check out light rule engine which is a Java based rule engine used in the back end\n            $git clone https://github.com/networknt/rule-engine.git\n            Check out the light framework and other projects\n            $git clone https://github.com/networknt/light.git\n\n            $cd jsontoken\n            $mvn clean install\n            $cd ..\n            $cd rule-engine\n            $mvn clean install\n            $cd rule-loader\n            $mvn clean install\n            $cd ~\n            $cd light\n            $mvn clean install -DskipTests\n\n            Now you have all the Java code built already.\n\n                </pre>\n            </p>\n            <p>\n                4. Open the source code with your IDE. I am using JetBrains Idea but other IDE like Eclipse will work. From Idea, you can just select File/Open... and then choose ~/networknt/light folder to open. It will import the pom.xml file under the light folder. You might need to select JDK for java projects if Idea couldn't find the JDK.\n            </p>\n            <p>\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\n                <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\n                <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a socail commerce site to demo the features of the framework</ul>\n                <ul>example folder is a template site that can be copied to start your own web site.</ul>\n                Let's create three users for each site and if you are building a new site, create one extra user for it.\n                <pre>\n            sudo adduser networknt\n            sudo adduser edibleforestgarden\n            sudo adduser example\n                </pre>\n            Within each user's home directory, create web subdirectory and grant access to the development user. steve in my case. If you run grunt build from these projects in light folder, you website will be compiled and copied to these web folders and the server will serve the content from these folders for each site. This is like running in production mode.\n            update virtualhost.json under networknt/light/server/src/main/resources folder to specify site location.\n            Add the following line into /etc/hosts in order to test locally using domain names.\n                <pre>\n            127.0.0.1\twww.edibleforestgarden.ca www.networknt.com example\n                </pre>\n            </p>\n\n            <p>\n                6. Start server from IDE in debug mode. From your IDE, right click server/src/main/java/com/networknt/light/server/LightServer and select Debug. The first time the server is started it will create the database and replay the event in resources/initdb.json. It will take several minutes until the debug info is stopped. At this time, you can start Grunt webserver to monitor all your changes in the local directory.\n                <pre>\n        cd ~/networknt/light/networknt\n        npm install\n        bower install\n        grunt serve\n                </pre>\n                assuming that Chrome is your default browser, it will be started now and point to localhost:9000 with www.networknt.com site content. I am in a process to move everything from Grunt to Gulp but it is not been done yet.\n\n            </p>\n            <p>\n                For individual component/view/application development, you can go the the folder and run the following commands to start another webserver using gulp\n        <pre>\n        cd ~/networknt/light/view/com-networknt-light-v-example\n        npm install\n        bower install\n        gulp webserver\n        </pre>\n               Now another server is up listening localhost:8001 using gulp webserver. You can switch to other folders to do the same.\n\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2015-01-12T03:10:36.862"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:36.862",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:259",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-dev-mac",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Development Environment Mac OS X</h1>\n            <p>\n                I have set up my development environment on a Mac Book Pro and here is the steps. I am using Google Chrome as my default browser for testing and debugging.\n            </p>\n            <p>\n                The set up is very similar with Linux and Windows 7\n            </p>\n            <p>\n                1. Create a user for development: (If you have a user already please use it. this user needs to have sudo access though. )\n            </p>\n            <p>\n                2. Install JDK8, maven, node.js and npm with sudo and then using npm to install Grunt, Gulp, Bower and other modules.\n            </p>\n            <p>\n                3. Create dev folder and check out the source code.\n                <pre>\n            log in to the user you just created. Open a terminal and you should be in your home directory c:\\Users\\steve\n            $mkdir networknt\n            $cd networknt\n\n            Check out Json Token which is forked from Google and fixed some of the issues.\n            $git clone https://github.com/networknt/jsontoken.git\n            Check out light rule engine which is a Java based rule engine used in the back end\n            $git clone https://github.com/networknt/rule-engine.git\n            Check out the light framework and other projects\n            $git clone https://github.com/networknt/light.git\n\n            $cd jsontoken\n            $mvn clean install\n            $cd ..\n            $cd rule-engine\n            $mvn clean install\n            $cd rule-loader\n            $mvn clean install\n            $cd ~\n            $cd light\n            $mvn clean install -DskipTests\n\n            Now you have all the Java code built already.\n\n                </pre>\n            </p>\n            <p>\n                4. Open the source code with your IDE. I am using JetBrains Idea but other IDE like Eclipse will work. From Idea, you can just select File/Open... and then choose ~/networknt/light folder to open. It will import the pom.xml file under the light folder. You might need to select JDK for java projects if Idea couldn't find the JDK.\n            </p>\n            <p>\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\n            <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\n            <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a socail commerce site to demo the features of the framework</ul>\n            <ul>example folder is a template site that can be copied to start your own web site.</ul>\n            Let's create three users for each site and if you are building a new site, create one extra user for it.\n                <pre>\n            create user networknt and home directory c:\\Users\\networknt\n            create user edibleforestgarden and home directory c:\\Users\\edibleforestgarden\n            create user example and home directory c:\\Users\\example\n                </pre>\n            Within each user's home directory, create web subdirectory and grant access to the development user. steve in my case. If you run grunt build from these projects in light folder, you website will be compiled and copied to these web folders and the server will serve the content from these folders for each site. This is like running in production mode.\n            Update virtualhost.json under server resource folder to specify host location. Change from /home/xxx to /Users/xxx and update them if necessary.\n            Add the following line into /etc/hosts in order to test locally using domain names.\n                <pre>\n            127.0.0.1\twww.edibleforestgarden.ca www.networknt.com example\n                </pre>\n            </p>\n\n            <p>\n                6. Start server from IDE in debug mode. From your IDE, right click server/src/main/java/com/networknt/light/server/LightServer and select Debug. The first time the server is started it will create the database and replay the event in resources/initdb.json. It will take several minutes until the debug info is stopped. At this time, you can start Grunt webserver to monitor all your changes in the local directory.\n                <pre>\n        cd ~/networknt/light/networknt\n        npm install\n        bower install\n        grunt serve\n                </pre>\n            assuming that Chrome is your default browser, it will be started now and point to localhost:9000 with www.networknt.com site content. You can login with stevehu/123456 to check the admin features. I am in a process to move everything from Grunt to Gulp but it is not been done yet.\n\n            </p>\n            <p>\n                For individual component/view/application development, you can go the the folder and run the following commands to start another webserver using gulp\n        <pre>\n        cd ~/networknt/light/view/com-networknt-light-v-example\n        npm install\n        bower install\n        gulp webserver\n        </pre>\n            Now another server is up listening localhost:8001 using gulp webserver. You can switch to other folders to do the same.\n\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2015-01-12T03:10:36.962"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:36.962",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:260",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-forum-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.ForumAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getForum = {\n            category : 'forum',\n            name : 'getForum',\n            readOnly: true\n        };\n        $scope.delForum = {\n            category : 'forum',\n            name : 'delForum',\n            readOnly: false\n        };\n\n        $scope.forums = [];\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Id',\n                value: 'id'\n            },\n            {\n                title: 'Desc',\n                value: 'desc'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'updateDate'\n        };\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(forum) {\n            $scope.delForum.data = forum;\n            $http.post('api/rs', $scope.delForum)\n                    .success(function (data, status, headers, config) {\n                        $scope.forums.splice($scope.forums.indexOf(forum), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n        $scope.update = function(forum) {\n            modelDataService.setModelData(forum);\n            $location.path(\"/form/com.networknt.light.forum.update\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.forum.add\");\n        };\n\n        $scope.fetchResult = function () {\n            $http.post('api/rs', $scope.getForum)\n                    .success(function (result, status, headers, config) {\n                        $scope.forums = result;\n                        console.log($scope.forums);\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.ForumAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <tabset>\n                <tab heading=\"Recent\">\n                    <h4>Forums</h4>\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.id\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.desc\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"forum in forums | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(forum)\">Delete</a></td>\n                            <td><a href ng-click=\"update(forum)\">{{forum.id}}</a></td>\n                            <td>{{forum.desc}}</td>\n                            <td>{{forum.createUserId}}</td>\n                            <td>{{forum.createDate}}</td>\n                            <td>{{forum.updateUserId}}</td>\n                            <td>{{forum.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                    <pagination total-items=\"page.totalItems\" items-per-page=\"getForum.data.pageSize\" ng-model=\"getForum.data.pageNo\" max-size=\"page.maxSize\" class=\"pagination-sm\" boundary-links=\"true\" rotate=\"false\" num-pages=\"page.numPages\" ng-change=\"pageChanged()\"></pagination>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-01-12T03:10:37.061"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:37.061",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:261",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-stacks",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Technology Stacks</h1>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-why-angularjs\">Why to choose AngularJS</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-why-bootstrap\">Why to choose Twitter Bootstrap</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-why-undertow\">Why to choose Undertow</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-why-orientdb\">Why to choose OrientDB</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-why-hazelcast\">Why to choose Hazelcast</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-why-light-ruleengine\">Why to choose Light Rule Engine</a></h2>\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2015-01-12T03:10:37.158"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:37.158",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:262",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-user-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.UserHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getAllPage = {\n            category : 'page',\n            name : 'getAllPage',\n            readOnly: true\n        };\n        $scope.delPage = {\n            category : 'page',\n            name : 'delPage',\n            readOnly: false,\n            data: {}\n        };\n        $scope.pages = [];\n        $scope.headers = [\n            {\n                title: 'Check All',\n                value: 'checkAll'\n            },\n            {\n                title: 'Id',\n                value: 'id'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'updateDate'\n        };\n        $scope.filter = {};\n        $scope.selectedAll = false;\n\n        $scope.checkAll = function () {\n            $scope.selectedAll = !$scope.selectedAll;\n            angular.forEach($scope.pages, function(page) {\n                page.selected = $scope.selectedAll;\n            })\n        };\n\n        $scope.delete = function() {\n            var ids = '';\n            var selected = false;\n            angular.forEach($scope.pages, function(page) {\n                if(page.selected) {\n                    selected = true;\n                    $scope.delPage.data = page;\n                    $http.post('api/rs', $scope.delPage)\n                            .success(function (result, status, headers, config) {\n                                ids = ids + page.id + ' ';\n\n                            }).error(function (data, status, headers, config) {\n                                toaster.pop('error', 'data', data, 3000);\n                            }\n                    );\n                }\n            });\n            if(selected) {\n                $scope.fetchResult();\n                toaster.pop('success', 'data', ids, 3000);\n            } else {\n                toaster.pop('error', 'data', \"Nothing is selected to delete!\", 3000);\n            }\n        };\n\n        //call back function that we passed to our custom directive sortBy, will be called when clicking on any field to sort\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.update = function(index) {\n            console.log(index);\n            if(angular.isDefined(index)) {\n                var page = $scope.pages[index];\n                modelDataService.setModelData(page);\n                $location.path(\"/form/com.networknt.light.page.update\");\n            }\n        };\n\n        $scope.updateProfile = function() {\n            $location.path(\"/form/com.networknt.light.user.update.profile\");\n        };\n\n        $scope.changePassword = function() {\n            $location.path(\"/form/com.networknt.light.user.change.password\");\n        };\n\n        //The function that is responsible of fetching the result from the server and setting the grid to the new result\n        $scope.fetchResult = function () {\n            $http.post('api/rs', $scope.getAllPage)\n                    .success(function (result, status, headers, config) {\n                        $scope.pages = result;\n                        console.log($scope.pages);\n                    }).error(function (data, status, headers, config) {\n                        toaster.pop('error', status, data, 5000);\n                    }\n            );\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.UserHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <tabset>\n                <tab heading=\"Profile\">\n                    <h1>Profile</h1>\n                    <a ng-click=\"updateProfile()\" href=\"#\">Update Profile</a>\n                    <a ng-click=\"changePassword()\" href=\"#\">Change Password</a>\n                </tab>\n                <tab heading=\"Event History\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td><input ng-model=\"selectedAll\" ng-click=\"checkAll()\" type=\"checkbox\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.id\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"page in pages | filter: filter | orderBy: sort.sortedBy\">\n                            <td><input type=\"checkbox\" ng-model=\"page.selected\" /></td>\n                            <td><a href ng-click=\"update($index)\">{{page.id}}</a></td>\n                            <td>{{page.host}}</td>\n                            <td>{{page.createUserId}}</td>\n                            <td>{{page.createDate}}</td>\n                            <td>{{page.updateUserId}}</td>\n                            <td>{{page.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n                <tab heading=\"Bookmark\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td><input ng-model=\"selectedAll\" ng-click=\"checkAll()\" type=\"checkbox\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.id\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"page in pages | filter: filter | orderBy: sort.sortedBy\">\n                            <td><input type=\"checkbox\" ng-model=\"page.selected\" /></td>\n                            <td><a href ng-click=\"update($index)\">{{page.id}}</a></td>\n                            <td>{{page.host}}</td>\n                            <td>{{page.createUserId}}</td>\n                            <td>{{page.createDate}}</td>\n                            <td>{{page.updateUserId}}</td>\n                            <td>{{page.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2015-01-12T03:10:37.286"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:37.286",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:263",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-product-admin-home",
      "content": "<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n\n</body>\n</html>",
      "createDate": "2015-01-12T03:10:37.398"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:37.398",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:264",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-first-component",
      "content": "<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n\n</body>\n</html>",
      "createDate": "2015-01-12T03:10:37.542"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:37.542",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:265",
    "@version": 1,
    "@class": "Event",
    "category": "page",
    "name": "impPage",
    "data": {
      "createUserId": "stevehu",
      "id": "com-networknt-light-v-forum-home",
      "content": "<script type='text/javascript'>\n\n    'use strict';\n\n    angular.module('lightApp').controller('com.networknt.light.c.ForumCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\n    $scope.getForum = {\n    category : 'forum',\n    name : 'getForumTree',\n    readOnly: true\n    };\n\n    $scope.fetchResult = function () {\n    $http.post('api/rs', $scope.getForum)\n    .success(function (result, status, headers, config) {\n    $scope.forums = result;\n    console.log($scope.forums);\n    })\n    };\n    $scope.fetchResult();\n\n    $scope.toggle = function(scope) {\n    scope.toggle();\n    };\n\n    var getRootNodesScope = function() {\n    return angular.element(document.getElementById(\"tree-root\")).scope();\n    };\n\n    $scope.collapseAll = function() {\n    var scope = getRootNodesScope();\n    scope.collapseAll();\n    };\n\n    $scope.expandAll = function() {\n    var scope = getRootNodesScope();\n    scope.expandAll();\n    };\n\n    $scope.treeFilter = $filter('uiTreeFilter');\n\n    $scope.supportedFields = ['id', 'desc'];\n\n    $scope.gotoForum = function(id) {\n    modelDataService.setModelData(id);\n    $location.path(\"/page/com-networknt-light-v-forum-post\");\n    }\n\n    }]);\n</script>\n<div class=\"container\" data-ng-controller=\"com.networknt.light.c.ForumCtrl\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\n            <h4 class=\"page-header\">Forum</h4>\n            <div>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\">Collapse all</a>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"expandAll()\">Expand all</a>\n                <input ng-model=\"pattern\" placeholder=\"Type a part of any forum\"/>\n            </div>\n            <!-- Nested node template -->\n            <script type=\"text/ng-template\" id=\"nodes_renderer.html\">\n                <div ui-tree-handle class=\"tree-node tree-node-content\">\n                    <a class=\"btn btn-success btn-xs\" ng-if=\"node.children && node.children.length > 0\" data-nodrag ng-click=\"toggle(this)\"><span class=\"glyphicon\" ng-class=\"{'glyphicon glyphicon-plus': collapsed, 'glyphicon glyphicon-minus': !collapsed}\"></span></a>\n                    <!--{{node.id | highlight:pattern | trust}}-->\n                    <a href ng-click=\"gotoForum(node.id)\" ng-bind-html=\"node.id | highlight:pattern | trust\"></a>\n                    <small ng-bind-html=\"node.desc | highlight:pattern | trust\"></small>\n                </div>\n                <ol ui-tree-nodes=\"\" ng-model=\"node.children\" ng-class=\"{hidden: collapsed}\">\n                    <li ng-repeat=\"node in node.children\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </script>\n            <div ui-tree data-drag-enabled=false id=\"tree-root\">\n                <ol ui-tree-nodes ng-model=\"forums\">\n                    <li ng-repeat=\"node in forums\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </div>\n        </div>\n    </div>\n</div>",
      "createDate": "2015-01-12T03:10:37.658"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:10:37.658",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:87",
    "@version": 1,
    "@class": "Event",
    "category": "news",
    "name": "addNews",
    "data": {
      "host": "www.networknt.com",
      "createUserId": "stevehu",
      "id": "OmniChannel",
      "desc": "Application, architecture and experience",
      "createDate": "2015-01-11T19:07:24.333"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T19:07:24.333",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:88",
    "@version": 1,
    "@class": "Event",
    "category": "news",
    "name": "addNews",
    "data": {
      "host": "www.networknt.com",
      "createUserId": "stevehu",
      "id": "Light Framework",
      "desc": "Techniques, strategies and system design",
      "createDate": "2015-01-11T19:08:03.479"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T19:08:03.479",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:102",
    "@version": 1,
    "@class": "Event",
    "category": "news",
    "name": "addNews",
    "data": {
      "host": "www.networknt.com",
      "createUserId": "stevehu",
      "id": "JSON Token",
      "desc": "Updated google json token for JWT generation",
      "createDate": "2015-01-11T20:16:10.236"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T20:16:10.236",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:103",
    "@version": 1,
    "@class": "Event",
    "category": "news",
    "name": "addNews",
    "data": {
      "host": "www.networknt.com",
      "createUserId": "stevehu",
      "id": "Light Rule Engine",
      "desc": "A Java based rule engine that supports unit test and hot deployment",
      "createDate": "2015-01-11T20:16:47.103"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T20:16:47.103",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:122",
    "@version": 1,
    "@class": "Event",
    "category": "news",
    "name": "addNews",
    "data": {
      "host": "www.networknt.com",
      "parent": "Light Framework",
      "createUserId": "stevehu",
      "id": "View",
      "desc": "Smallest rendering unit that consists of web components",
      "createDate": "2015-01-11T20:27:05.132"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T20:27:05.132",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:123",
    "@version": 1,
    "@class": "Event",
    "category": "news",
    "name": "addNews",
    "data": {
      "parent": "Light Framework",
      "host": "www.networknt.com",
      "createUserId": "stevehu",
      "id": "Application",
      "desc": "Consists of multiple views with routing relationship to perform certain function",
      "createDate": "2015-01-11T20:27:31.283"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T20:27:31.283",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:121",
    "@version": 1,
    "@class": "Event",
    "category": "news",
    "name": "addNews",
    "data": {
      "host": "www.networknt.com",
      "parent": "Light Framework",
      "createUserId": "stevehu",
      "id": "Component",
      "desc": "Web Component that is implemented with AngularJS directive",
      "createDate": "2015-01-11T20:26:34.488"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T20:26:34.488",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:93",
    "@version": 1,
    "@class": "Event",
    "category": "blog",
    "name": "addBlog",
    "data": {
      "host": "www.networknt.com",
      "createUserId": "stevehu",
      "id": "Light Framework",
      "desc": "Techniques, strategies and system design",
      "createDate": "2015-01-11T19:49:42.600"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T19:49:42.600",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:100",
    "@version": 1,
    "@class": "Event",
    "category": "blog",
    "name": "addBlog",
    "data": {
      "host": "www.networknt.com",
      "createUserId": "stevehu",
      "id": "JSON Token",
      "desc": "Updated google json token to generate JWT",
      "createDate": "2015-01-11T20:13:00.375"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T20:13:00.375",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:101",
    "@version": 1,
    "@class": "Event",
    "category": "blog",
    "name": "addBlog",
    "data": {
      "host": "www.networknt.com",
      "createUserId": "stevehu",
      "id": "Light Rule Engine",
      "desc": "A Java based rule engine that supports unit test and hot deployment",
      "createDate": "2015-01-11T20:14:25.826"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T20:14:25.826",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:125",
    "@version": 1,
    "@class": "Event",
    "category": "blog",
    "name": "addBlog",
    "data": {
      "host": "www.networknt.com",
      "parent": "Light Framework",
      "createUserId": "stevehu",
      "id": "Component",
      "desc": "Web Component that is implemented with AngularJS directive",
      "createDate": "2015-01-11T20:28:19.921"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T20:28:19.921",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:126",
    "@version": 1,
    "@class": "Event",
    "category": "blog",
    "name": "addBlog",
    "data": {
      "host": "www.networknt.com",
      "parent": "Light Framework",
      "createUserId": "stevehu",
      "id": "View",
      "desc": "Smallest rendering unit that consists of web components",
      "createDate": "2015-01-11T20:28:44.574"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T20:28:44.574",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:127",
    "@version": 1,
    "@class": "Event",
    "category": "blog",
    "name": "addBlog",
    "data": {
      "host": "www.networknt.com",
      "parent": "Light Framework",
      "createUserId": "stevehu",
      "id": "Application",
      "desc": "Consists of multiple views with routing relationship to perform certain function",
      "createDate": "2015-01-11T20:29:14.109"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T20:29:14.109",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:104",
    "@version": 1,
    "@class": "Event",
    "category": "forum",
    "name": "addForum",
    "data": {
      "host": "www.networknt.com",
      "createUserId": "stevehu",
      "id": "JSON Token",
      "desc": "Updated google json token for JWT generation",
      "createDate": "2015-01-11T20:17:52.952"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T20:17:52.952",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:107",
    "@version": 1,
    "@class": "Event",
    "category": "forum",
    "name": "addForum",
    "data": {
      "host": "www.networknt.com",
      "createUserId": "stevehu",
      "id": "Light Rule Engine",
      "desc": "A Java based rule engine that supports unit test and hot deployment",
      "createDate": "2015-01-11T20:18:45.837"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T20:18:45.837",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:109",
    "@version": 1,
    "@class": "Event",
    "category": "forum",
    "name": "addForum",
    "data": {
      "host": "www.networknt.com",
      "createUserId": "stevehu",
      "id": "Light Framework",
      "desc": "Techniques, strategies and system design",
      "createDate": "2015-01-11T20:19:37.641"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T20:19:37.641",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:114",
    "@version": 1,
    "@class": "Event",
    "category": "forum",
    "name": "addForum",
    "data": {
      "host": "www.networknt.com",
      "createUserId": "stevehu",
      "id": "OmniChannel",
      "desc": "Application, architecture and experience",
      "createDate": "2015-01-11T20:21:03.260"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T20:21:03.260",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:115",
    "@version": 1,
    "@class": "Event",
    "category": "forum",
    "name": "addForum",
    "data": {
      "host": "www.networknt.com",
      "parent": "Light Framework",
      "createUserId": "stevehu",
      "id": "Component",
      "desc": "Web Component that is implemented with AngularJS directive",
      "createDate": "2015-01-11T20:22:12.122"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T20:22:12.122",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:117",
    "@version": 1,
    "@class": "Event",
    "category": "forum",
    "name": "addForum",
    "data": {
      "host": "www.networknt.com",
      "parent": "Light Framework",
      "createUserId": "stevehu",
      "id": "View",
      "desc": "Smallest rendering unit that consists of web components",
      "createDate": "2015-01-11T20:23:14.991"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T20:23:14.991",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:118",
    "@version": 1,
    "@class": "Event",
    "category": "forum",
    "name": "addForum",
    "data": {
      "host": "www.networknt.com",
      "parent": "Light Framework",
      "createUserId": "stevehu",
      "id": "Application",
      "desc": "Consists of multiple views with routing relationship to perform certain function",
      "createDate": "2015-01-11T20:25:15.731"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-11T20:25:15.731",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:1",
    "@version": 1,
    "@class": "Event",
    "category": "blog",
    "name": "addBlog",
    "data": {
      "host": "www.networknt.com",
      "createUserId": "stevehu",
      "id": "OmniChannel",
      "desc": "Application, architecture and experience",
      "createDate": "2015-01-12T03:18:13.051"
    },
    "createUserId": "stevehu",
    "createDate": "2015-01-12T03:18:13.051",
    "@fieldTypes": "createDate=t"
  }
]