[
  {
    "@type": "d",
    "@rid": "#17:1",
    "@version": 1,
    "@class": "Event",
    "eventId": 10002,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.github.fge.jsonschema.main.JsonSchema;\nimport com.github.fge.jsonschema.main.JsonSchemaFactory;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.model.CacheObject;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport io.undertow.server.HttpServerExchange;\nimport io.undertow.util.Headers;\nimport net.engio.mbassy.bus.MBassador;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic abstract class AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractRule.class);\n    static final JsonSchemaFactory schemaFactory = JsonSchemaFactory.byDefault();\n\n    protected ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void publishEvent(Map<String, Object> eventMap) throws Exception {\n        // get class name\n        System.out.println(this.getClass().getPackage());\n        System.out.println(this.getClass().getName());\n        System.out.println(\"category = \" + eventMap.get(\"category\"));\n        // check if publisher is enabled.\n        Map map = getRuleByRuleClass(this.getClass().getName());\n        Object isPublisher = map.get(\"isPublisher\");\n        if(isPublisher != null && (boolean)isPublisher) {\n            System.out.println(\"isPublisher\");\n            MBassador<Map<String, Object>> eventBus = ServiceLocator.getInstance().getEventBus((String)eventMap.get(\"category\"));\n            eventBus.publish(eventMap);\n        }\n    }\n\n    protected boolean matchEtag(Map<String, Object> inputMap, CacheObject co) {\n        HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n        String requestETag = exchange.getRequestHeaders().getFirst(Headers.IF_NONE_MATCH);\n        if (co.getEtag().equals(requestETag)) {\n            exchange.setResponseCode(304); // no change\n            return true;\n        } else {\n            exchange.getResponseHeaders().add(Headers.ETAG, co.getEtag());\n            return false;\n        }\n    }\n\n    public static Map<String, Object> getRuleByRuleClass(String ruleClass) throws Exception {\n        String sqlTransformReq = \"SELECT FROM TransformRequest WHERE ruleClass = '\" + ruleClass + \"' ORDER BY sequence\";\n        String sqlTransformRes = \"SELECT FROM TransformResponse WHERE ruleClass = '\" + ruleClass + \"' ORDER BY sequence\";\n\n        Map<String, Object> map = null;\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<String, Map<String, Object>> cache = (ConcurrentMap<String, Map<String, Object>>)ruleMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<String, Map<String, Object>>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            ruleMap.put(\"cache\", cache);\n        } else {\n            map = cache.get(ruleClass);\n        }\n        if(map == null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                OrientVertex rule = (OrientVertex)graph.getVertexByKey(\"Rule.ruleClass\", ruleClass);\n                if(rule != null) {\n                    map = rule.getRecord().toMap();\n                    // remove sourceCode as we don't need it and it is big\n                    map.remove(\"sourceCode\");\n\n                    // convert schema to JsonSchema in order to speed up validation.\n                    if(map.get(\"schema\") != null) {\n                        JsonNode schemaNode = ServiceLocator.getInstance().getMapper().valueToTree(map.get(\"schema\"));\n                        JsonSchema schema = schemaFactory.getJsonSchema(schemaNode);\n                        map.put(\"schema\", schema);\n                    }\n                    OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sqlTransformReq);\n                    List<ODocument> docs = graph.getRawGraph().command(query).execute();\n                    List<Map<String, Object>> reqTransforms = new ArrayList<Map<String, Object>>();\n                    if(docs != null) {\n                        for(ODocument doc: docs) {\n                            Map<String, Object> reqTransform = new HashMap<String, Object> ();\n                            reqTransform.put(\"sequence\", doc.field(\"sequence\"));\n                            reqTransform.put(\"transformRule\", doc.field(\"transformRule\"));\n                            reqTransform.put(\"transformData\", doc.field(\"transformData\"));\n                            reqTransform.put(\"createUserId\", doc.field(\"createUserId\"));\n                            reqTransforms.add(reqTransform);\n                        }\n                    }\n                    map.put(\"reqTransforms\", reqTransforms);\n\n                    query = new OSQLSynchQuery<>(sqlTransformRes);\n                    docs = graph.getRawGraph().command(query).execute();\n                    List<Map<String, Object>> resTransforms = new ArrayList<Map<String, Object>> ();\n                    if(docs != null) {\n                        for(ODocument doc: docs) {\n                            Map<String, Object> resTransform = new HashMap<String, Object> ();\n                            resTransform.put(\"sequence\", doc.field(\"sequence\"));\n                            resTransform.put(\"transformRule\", doc.field(\"transformRule\"));\n                            resTransform.put(\"transformData\", doc.field(\"transformData\"));\n                            resTransform.put(\"createUserId\", doc.field(\"createUserId\"));\n                            resTransforms.add(resTransform);\n                        }\n                    }\n                    map.put(\"resTransforms\", resTransforms);\n\n                    logger.debug(\"map = \" + map);\n                    cache.put(ruleClass, map);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        return map;\n    }\n\n    /*\n    protected ODocument getCategoryByRid(String categoryRid) {\n        Map<String, Object> categoryMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)categoryMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            categoryMap.put(\"cache\", cache);\n        }\n        ODocument category = (ODocument)cache.get(\"categoryRid\");\n        if(category == null) {\n            // TODO warning to increase cache if this happens.\n            category = DbService.getVertexByRid(categoryRid);\n            // put it into the category cache.\n            if(category != null) {\n                cache.put(categoryRid, category);\n            }\n        }\n        return category;\n    }\n\n    protected ODocument getProductByRid(String productRid) {\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            productMap.put(\"cache\", cache);\n        }\n        ODocument product = (ODocument)cache.get(\"productRid\");\n        if(product == null) {\n            // TODO warning to increase cache if this happens.\n            product = DbService.getODocumentByRid(productRid);\n            if(product != null) {\n                cache.put(productRid, product);\n            }\n        }\n        return product;\n    }\n    */\n    protected Map<String, Object> getEventMap(Map<String, Object> inputMap) {\n        Map<String, Object> eventMap = new HashMap<String, Object>();\n        Map<String, Object> payload = (Map<String, Object>)inputMap.get(\"payload\");\n        if(payload != null) {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            if(user != null)  eventMap.put(\"createUserId\", user.get(\"userId\"));\n        }\n        // IP address is used to identify event owner if user is not logged in.\n        if(inputMap.get(\"ipAddress\") != null) {\n            eventMap.put(\"ipAddress\", inputMap.get(\"ipAddress\"));\n        }\n        if(inputMap.get(\"host\") != null) {\n            eventMap.put(\"host\", inputMap.get(\"host\"));\n        }\n        if(inputMap.get(\"app\") != null) {\n            eventMap.put(\"app\", inputMap.get(\"app\"));\n        }\n        eventMap.put(\"category\", inputMap.get(\"category\"));\n        eventMap.put(\"name\", inputMap.get(\"name\"));\n        eventMap.put(\"createDate\", new java.util.Date());\n        eventMap.put(\"data\", new HashMap<String, Object>());\n        return eventMap;\n    }\n\n\n    protected ODocument getODocumentByHostId(OrientGraph graph, String index, String host, String id) {\n        ODocument doc = null;\n        OIndex<?> hostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(index);\n        // this is a unique index, so it retrieves a OIdentifiable\n        OCompositeKey key = new OCompositeKey(host, id);\n        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n        if (oid != null) {\n            doc = (ODocument)oid.getRecord();\n        }\n        return doc;\n    }\n\n    public Map<String, Object> getAccessByRuleClass(String ruleClass) throws Exception {\n        Map<String, Object> access = null;\n        Map<String, Object> accessMap = ServiceLocator.getInstance().getMemoryImage(\"accessMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)accessMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            accessMap.put(\"cache\", cache);\n        } else {\n            access = (Map<String, Object>)cache.get(ruleClass);\n        }\n        if(access == null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                OrientVertex accessVertex = (OrientVertex)graph.getVertexByKey(\"Access.ruleClass\", ruleClass);\n                if(accessVertex != null) {\n                    String json = accessVertex.getRecord().toJSON();\n                    access = mapper.readValue(json,\n                            new TypeReference<HashMap<String, Object>>() {\n                            });\n                    cache.put(ruleClass, access);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        return access;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.AbstractRule",
      "createDate": "2015-03-25T20:20:30.293"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.293",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:2",
    "@version": 1,
    "@class": "Event",
    "eventId": 10003,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 30/01/15.\n *\n * There is no addAccess endpoint as access is pre-populated when rule is added or imported.\n * You can only update Access policy. Do I need to delete it? Or it will be deleted once rule\n * is deleted.\n *\n * TODO Delete access when rule is deleted and retire delAccess\n *\n */\npublic abstract class AbstractAccessRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractAccessRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void updAccess(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String json = null;\n        try {\n            graph.begin();\n            OrientVertex access = (OrientVertex)graph.getVertexByKey(\"Access.ruleClass\", data.get(\"ruleClass\"));\n            if(access != null) {\n                access.setProperty(\"accessLevel\", data.get(\"accessLevel\"));\n                List<String> clients = (List)data.get(\"clients\");\n                if(clients != null && clients.size() > 0) {\n                    access.setProperty(\"clients\", clients);\n                } else {\n                    access.removeProperty(\"clients\");\n                }\n                List<String> roles = (List)data.get(\"roles\");\n                if(roles != null && roles.size() > 0) {\n                    access.setProperty(\"roles\", roles);\n                } else {\n                    access.removeProperty(\"roles\");\n                }\n                List<String> users = (List)data.get(\"users\");\n                if(users != null && users.size() > 0) {\n                    access.setProperty(\"users\", users);\n                } else {\n                    access.removeProperty(\"users\");\n                }\n                access.setProperty(\"updateDate\", data.get(\"updateDate\"));\n                Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n                updateUser.addEdge(\"Update\", access);\n            }\n            graph.commit();\n            json = access.getRecord().toJSON();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> accessMap = ServiceLocator.getInstance().getMemoryImage(\"accessMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)accessMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            accessMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"ruleClass\"), mapper.readValue(json,\n                new TypeReference<HashMap<String, Object>>() {\n                }));\n    }\n\n    protected void delAccess(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex access = graph.getVertexByKey(\"Access.ruleClass\", data.get(\"ruleClass\"));\n            if(access != null) {\n                graph.removeVertex(access);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> accessMap = ServiceLocator.getInstance().getMemoryImage(\"accessMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)accessMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected String getAccesses(String host) {\n        String sql = \"SELECT FROM Access\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host;\n        }\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> accesses = graph.getRawGraph().command(query).execute();\n            json = OJSONWriter.listToJSON(accesses, null);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.AbstractAccessRule",
      "createDate": "2015-03-25T20:20:30.349"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.349",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:3",
    "@version": 1,
    "@class": "Event",
    "eventId": 10004,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.rule.AbstractRuleRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 30/01/15.\n */\npublic class DelAccessEvRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delAccess(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.DelAccessEvRule",
      "createDate": "2015-03-25T20:20:30.406"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.406",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:4",
    "@version": 1,
    "@class": "Event",
    "eventId": 10005,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.rule.rule.AbstractRuleRule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 30/01/15.\n *\n * This is used in access admin to delete an access control for endpoints.\n *\n * owner can delete access control for any endpoint and host admin and ruleAdmin\n * can delete endpoint for their own host.\n *\n * Due to the importance of the API, the code level access control is in place.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class DelAccessRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String rid = (String)data.get(\"@rid\");\n        int inputVersion = (int)data.get(\"@version\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"ruleAdmin\")) {\n                error = \"Role owner or admin or ruleAdmin is required to delete rule\";\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null && !host.equals(data.get(\"host\"))) {\n                    error = \"User can only delete access control from host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    // check if the access control exist or not.\n                    OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                    try {\n                        Vertex access = DbService.getVertexByRid(graph, rid);\n                        if(access == null) {\n                            error = \"Access control with @rid \" + rid + \" cannot be found\";\n                            inputMap.put(\"responseCode\", 404);\n                        } else {\n                            int storedVersion = access.getProperty(\"@version\");\n                            if(inputVersion != storedVersion) {\n                                error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                                inputMap.put(\"responseCode\", 400);\n                            } else {\n                                Map eventMap = getEventMap(inputMap);\n                                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                                inputMap.put(\"eventMap\", eventMap);\n                                eventData.put(\"ruleClass\", ruleClass);\n                                eventData.put(\"updateDate\", new java.util.Date());\n                                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            }\n                        }\n                    } catch (Exception e) {\n                        logger.error(\"Exception:\", e);\n                        throw e;\n                    } finally {\n                        graph.shutdown();\n                    }\n                }\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.DelAccessRule",
      "createDate": "2015-03-25T20:20:30.446"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.446",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:5",
    "@version": 1,
    "@class": "Event",
    "eventId": 10006,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.rule.AbstractRuleRule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 30/01/15.\n *\n * This is the rule to get access control list for a particular endpoint.\n *\n * AccessLevel A\n *\n */\npublic class GetAccessRule extends AbstractAccessRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(GetAccessRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Map<String, Object> access = getAccessByRuleClass(ruleClass);\n        if(access != null) {\n            inputMap.put(\"result\", mapper.writeValueAsString(access));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No access control can be found for ruleClass\" + ruleClass);\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.GetAccessRule",
      "createDate": "2015-03-25T20:20:30.470"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.470",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:6",
    "@version": 1,
    "@class": "Event",
    "eventId": 10007,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 01/02/15.\n *\n * Get all the access control list policies for access admin page.\n *\n * Due to the importance of the API, the code level access control is in place.\n *\n * AccessLevel R [owner,admin, ruleAdmin]\n *\n */\npublic class GetAllAccessRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\") || roles.contains(\"admin\") || roles.contains(\"ruleAdmin\")) {\n            String host = (String) user.get(\"host\");\n            String hostAccesses = getAccesses(host);\n            if(hostAccesses != null) {\n                inputMap.put(\"result\", hostAccesses);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No access control can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"Permission denied\");\n            inputMap.put(\"responseCode\", 403);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.GetAllAccessRule",
      "createDate": "2015-03-25T20:20:30.535"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.535",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:7",
    "@version": 1,
    "@class": "Event",
    "eventId": 10008,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.rule.AbstractRuleRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 30/01/15.\n */\npublic class UpdAccessEvRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updAccess(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.UpdAccessEvRule",
      "createDate": "2015-03-25T20:20:30.565"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.565",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:8",
    "@version": 1,
    "@class": "Event",
    "eventId": 10009,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.rule.rule.AbstractRuleRule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.nio.ByteBuffer;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 30/01/15.\n *\n * This is the endpoint that can update access control list.\n *\n * Due to the importance of the API, the code level access control is in place.\n *\n * AccessLevel R [owner,admin,ruleAdmin]\n *\n */\npublic class UpdAccessRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        int inputVersion = (int)data.get(\"@version\");\n        String rid = (String)data.get(\"@rid\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"ruleAdmin\")) {\n                error = \"Role owner or admin or ruleAdmin is required to update access control\";\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null) {\n                    if (!host.equals(data.get(\"host\"))) {\n                        error = \"You can only update access control for host: \" + host;\n                        inputMap.put(\"responseCode\", 403);\n                    } else {\n                        // make sure the ruleClass contains the host.\n                        if (!ruleClass.contains(host)) {\n                            // you are not allowed to update access control to the rule as it is not owned by the host.\n                            error = \"ruleClass is not owned by the host: \" + host;\n                            inputMap.put(\"responseCode\", 403);\n                        }\n                    }\n                } else {\n                    OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                    try {\n                        Vertex access = DbService.getVertexByRid(graph, rid);\n                        if(access == null) {\n                            error = \"Access control with @rid \" + rid + \" cannot be found\";\n                            inputMap.put(\"responseCode\", 404);\n                        } else {\n                            int storedVersion = access.getProperty(\"@version\");\n                            if(inputVersion != storedVersion) {\n                                error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                                inputMap.put(\"responseCode\", 400);\n                            } else {\n                                Map eventMap = getEventMap(inputMap);\n                                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                                inputMap.put(\"eventMap\", eventMap);\n                                eventData.put(\"ruleClass\", ruleClass);\n                                String accessLevel = (String)data.get(\"accessLevel\");\n                                eventData.put(\"accessLevel\", accessLevel);\n                                List clients = (List)data.get(\"clients\");\n                                roles = (List)data.get(\"roles\");\n                                List users = (List)data.get(\"users\");\n                                switch (accessLevel) {\n                                    case \"A\":\n                                        // Access by anyone, ignore clients, roles and users\n                                        break;\n                                    case \"N\":\n                                        // Not accessible, ignore clients, roles and users.\n                                        break;\n                                    case \"C\":\n                                        // client id is in the jwt token like userId and roles.\n                                        if(clients == null || clients.size() == 0 ) {\n                                            error = \"Clients are empty for client based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"clients\", clients);\n                                        }\n                                        break;\n                                    case \"R\":\n                                        // role only\n                                        if(roles == null || roles.size() == 0 ) {\n                                            error = \"Roles are empty for role based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"roles\", roles);\n                                        }\n                                        break;\n                                    case \"U\":\n                                        //user only\n                                        if(users == null || users.size() == 0 ) {\n                                            error = \"Users are empty for user based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"users\", users);\n                                        }\n                                        break;\n                                    case \"CR\":\n                                        // client and role\n                                        if(clients == null || clients.size() == 0 || roles == null || roles.size() == 0) {\n                                            error = \"Clients or roles are empty for client and role based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"clients\", clients);\n                                            eventData.put(\"roles\", roles);\n                                        }\n                                        break;\n                                    case \"CU\":\n                                        // client and user\n                                        if(clients == null || clients.size() == 0 || users == null || users.size() == 0) {\n                                            error = \"Clients or users are empty for client and user based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"clients\", clients);\n                                            eventData.put(\"users\", users);\n                                        }\n                                        break;\n                                    case \"RU\":\n                                        // role and user\n                                        if(roles == null || roles.size() == 0 || users == null || users.size() == 0) {\n                                            error = \"Roles or users are empty for role and user based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"roles\", roles);\n                                            eventData.put(\"users\", users);\n                                        }\n                                        break;\n                                    case \"CRU\":\n                                        // client, role and user\n                                        if(clients == null || clients.size() == 0 || roles == null || roles.size() == 0 || users == null || users.size() == 0) {\n                                            error = \"Clients, roles or users are empty for client, role and user based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"clients\", clients);\n                                            eventData.put(\"roles\", roles);\n                                            eventData.put(\"users\", users);\n                                        }\n                                        break;\n                                    default:\n                                        logger.error(\"Invalid Access Level: \" + accessLevel);\n                                }\n                                eventData.put(\"updateDate\", new java.util.Date());\n                                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            }\n                        }\n\n                    } catch (Exception e) {\n                        logger.error(\"Exception:\", e);\n                        throw e;\n                    } finally {\n                        graph.shutdown();\n                    }\n\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.UpdAccessRule",
      "createDate": "2015-03-25T20:20:30.599"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.599",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:9",
    "@version": 1,
    "@class": "Event",
    "eventId": 10010,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.networknt.light.rule.client;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.*;\n\n/**\n * Created by steve on 31/01/15.\n * Now, we only support Browser, Android and iOS\n *\n * AccessLevel R [user]\n */\npublic class GetClientDropdownRule extends AbstractRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n        Set<String> keys = ServiceLocator.getInstance().getHostMap().keySet();\n        for(String key: keys) {\n            Map<String, Object> hostMap = (Map<String, Object>)ServiceLocator.getInstance().getHostMap().get(key);\n            List<String> supportDevices = (List)hostMap.get(\"supportDevices\");\n            for(String device: supportDevices) {\n                String client = key + \"@\" + device;\n                Map<String, String> map = new HashMap<String, String>();\n                map.put(\"label\", client);\n                map.put(\"value\", client);\n                list.add(map);\n            }\n        }\n        String clientDropdown = mapper.writeValueAsString(list);\n        if(clientDropdown != null) {\n            inputMap.put(\"result\", clientDropdown);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No client can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.client.GetClientDropdownRule",
      "createDate": "2015-03-25T20:20:30.629"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.629",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:10",
    "@version": 1,
    "@class": "Event",
    "eventId": 10011,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport com.orientechnologies.orient.core.command.OCommandOutputListener;\nimport com.orientechnologies.orient.core.command.script.OCommandScript;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.tool.ODatabaseExport;\nimport com.orientechnologies.orient.core.db.tool.ODatabaseImport;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 10/12/14.\n */\npublic abstract class AbstractDbRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractDbRule.class);\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void impDb(Map<String, Object> data) {\n        String content = (String) data.get(\"content\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            OCommandOutputListener listener = new OCommandOutputListener() {\n                @Override\n                public void onMessage(String iText) {\n                    logger.info(iText);\n                }\n            };\n            InputStream is = new ByteArrayInputStream(content.getBytes());\n            ODatabaseImport imp = new ODatabaseImport(graph.getRawGraph(), is, listener);\n            imp.importDatabase();\n            imp.close();\n        } catch (IOException ioe) {\n            logger.error(\"Exception:\", ioe);\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected String exportEvent(String path) {\n        final String[] result = new String[1];\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            OCommandOutputListener listener = new OCommandOutputListener() {\n                @Override\n                public void onMessage(String iText) {\n                    result[0] = result[0] + iText;\n                }\n            };\n            ODatabaseExport export = new ODatabaseExport(graph.getRawGraph(), path, listener);\n            export.exportDatabase();\n            export.close();\n        } catch(IOException ioe) {\n            ioe.printStackTrace();\n        } finally {\n            graph.shutdown();\n        }\n        return result[0];\n    }\n\n    protected String execUpdateCmd(Map<String, Object> data, boolean commit) {\n        String result = \"\";\n        String script = (String) data.get(\"script\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.command(new OCommandScript(\"sql\", script)).execute();\n            if(commit) {\n                graph.commit();\n            } else {\n                graph.rollback();\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            result = Util.stacktraceToString(e);\n        } finally {\n            graph.shutdown();\n        }\n        return result;\n    }\n\n    protected String execSchemaCmd(Map<String, Object> data) {\n        String result = \"\";\n        String script = (String) data.get(\"script\");\n        OrientGraphNoTx graph = ServiceLocator.getInstance().getGraphNoTx();\n        try{\n            graph.command(new OCommandScript(\"sql\", script)).execute();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            result = Util.stacktraceToString(e);\n        } finally {\n            graph.shutdown();\n        }\n        return result;\n    }\n\n    protected String execQueryCmd(OrientGraph graph, Map<String, Object> data) {\n        OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>((String)data.get(\"script\"));\n        List<ODocument> accesses = graph.getRawGraph().command(query).execute();\n        return OJSONWriter.listToJSON(accesses, null);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.AbstractDbRule",
      "createDate": "2015-03-25T20:20:30.662"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.662",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:11",
    "@version": 1,
    "@class": "Event",
    "eventId": 10012,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 21/12/14.\n * Download events from event store. Should be a search interface so that you can enter search\n * criteria.\n *\n * TODO make it searchable\n *\n * AccessLevel R [user]\n *\n */\npublic class DownloadEventRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        // everyone is allowed to download events performed by himself and replay it on\n        // other site build with the same framework.\n\n        // make sure that both from datetime and to datetime are in the past. And to datetime\n        // can be optional which means get everything after from datetime.\n\n        // Now let's build a criteria for db search.\n\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\")) {\n            // only owner can generate events for common components without host.\n            data.remove(\"host\");\n        }\n        data.put(\"createUserId\", user.get(\"userId\"));\n        String json = DbService.getData(\"Event\", data);\n        if(json != null) {\n            inputMap.put(\"result\", json);\n        } else {\n            error = \"No event can be found\";\n            inputMap.put(\"responseCode\", 400);\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.DownloadEventRule",
      "createDate": "2015-03-25T20:20:30.684"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.684",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:12",
    "@version": 1,
    "@class": "Event",
    "eventId": 10013,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 01/03/15.\n */\npublic class ExecQueryCmdRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String script = (String)data.get(\"script\");\n        // make sure the script is executable.\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String json = null;\n        try{\n            json = execQueryCmd(graph, data);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            inputMap.put(\"result\", Util.stacktraceToString(e));\n            inputMap.put(\"responseCode\", 500);\n            return false;\n        } finally {\n            graph.shutdown();\n        }\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"responseCode\", 404);\n            inputMap.put(\"result\", \"Not found\");\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExecQueryCmdRule",
      "createDate": "2015-03-25T20:20:30.713"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.713",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:13",
    "@version": 1,
    "@class": "Event",
    "eventId": 10014,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 01/03/15.\n */\npublic class ExecSchemaCmdEvRule extends AbstractDbRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        execSchemaCmd(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExecSchemaCmdEvRule",
      "createDate": "2015-03-25T20:20:30.731"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.731",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:14",
    "@version": 1,
    "@class": "Event",
    "eventId": 10015,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 01/03/15.\n *\n * This is the rule that create or update schema during new application initial setup.\n * Note that unlike update command we can try it out without commit, this one we cannot.\n *\n */\npublic class ExecSchemaCmdRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        // make sure we have content payload here.\n        String script = (String)data.get(\"script\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        eventData.put(\"script\", script);\n        eventData.put(\"createDate\", new java.util.Date());\n        eventData.put(\"createUserId\", user.get(\"userId\"));\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExecSchemaCmdRule",
      "createDate": "2015-03-25T20:20:30.755"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.755",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:15",
    "@version": 1,
    "@class": "Event",
    "eventId": 10016,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 01/03/15.\n */\npublic class ExecUpdateCmdEvRule extends AbstractDbRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        execUpdateCmd(data, true);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExecUpdateCmdEvRule",
      "createDate": "2015-03-25T20:20:30.779"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.779",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:16",
    "@version": 1,
    "@class": "Event",
    "eventId": 10017,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 11/12/14.\n *\n * Execute database command so that it can create schemas or other objects.\n *\n * Due to the importance of the API, the code level access control is in place.\n *\n * AccessLevel R [owner, admin, dbAdmin]\n *\n * Current AccessLevel R [owner]\n * as site level control is not done yet. TODO\n */\npublic class ExecUpdateCmdRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        // make sure we have content payload here.\n        String script = (String)data.get(\"script\");\n        if(script == null || script.length() == 0) {\n            error = \"Content is empty\";\n            inputMap.put(\"responseCode\", 400);\n        } else {\n            // make sure the script is executable.\n            String result = execUpdateCmd(data, false);\n            if(result.length() > 0) {\n                error = result;\n                inputMap.put(\"responseCode\", 500);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"script\", script);\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExecUpdateCmdRule",
      "createDate": "2015-03-25T20:20:30.804"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.804",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:17",
    "@version": 1,
    "@class": "Event",
    "eventId": 10018,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 15/02/15.\n *\n * Export db into a json file and download to local hard drive for backup. This\n * is for the entire database.\n *\n * TODO complete it.\n *\n * AccessLevel R [owner]\n *\n */\npublic class ExpDbRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n\n        // export into a json in memory\n        //\n        // send to client for download\n\n        // once it is done, then create an event for persistence\n\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        eventData.put(\"createDate\", new java.util.Date());\n        eventData.put(\"createUserId\", user.get(\"userId\"));\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExpDbRule",
      "createDate": "2015-03-25T20:20:30.829"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.829",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:18",
    "@version": 1,
    "@class": "Event",
    "eventId": 10019,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 12/12/14.\n *\n * Export only the event store for backup. There is no UI as of yet. TODO.\n *\n * Only owner can export the entire event store\n *\n * AccessLevel R [owner]\n *\n */\npublic class ExpEventRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"dbAdmin\")) {\n                error = \"Role owner or admin or dbAdmin is required to add schema\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String path = (String)data.get(\"path\");\n                if(path != null) {\n                    // make sure that the Path exists.\n                    File file = new File(path);\n                    if (!file.exists()) {\n                        String result = exportEvent(path);\n                        inputMap.put(\"result\", result);\n                    } else {\n                        error = \"Please remove existing file manually\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                } else {\n                    error = \"Path is required\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExpEventRule",
      "createDate": "2015-03-25T20:20:30.858"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.858",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:19",
    "@version": 1,
    "@class": "Event",
    "eventId": 10020,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.networknt.light.rule.dependency;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 3/9/2015.\n */\npublic abstract class AbstractDependencyRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractDependencyRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void addDependency(Map<String, Object> data) throws Exception {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex sourceRule = graph.getVertexByKey(\"Rule.ruleClass\", data.get(\"sourceRuleClass\"));\n            Vertex destRule = graph.getVertexByKey(\"Rule.ruleClass\", data.get(\"destRuleClass\"));\n            Edge edge = sourceRule.addEdge(\"Depend\", destRule);\n            edge.setProperty(\"content\", data.get(\"content\"));\n            graph.commit();\n            //json = edge.getRecord().toJSON();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            pageMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"pageId\"), json);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.dependency.AbstractDependencyRule",
      "createDate": "2015-03-25T20:20:30.885"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.885",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:20",
    "@version": 1,
    "@class": "Event",
    "eventId": 10021,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.networknt.light.rule.dependency;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.page.AbstractPageRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 3/9/2015.\n */\npublic class AddDependencyEvRule extends AbstractDependencyRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addDependency(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.dependency.AddDependencyEvRule",
      "createDate": "2015-03-25T20:20:30.912"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.912",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:21",
    "@version": 1,
    "@class": "Event",
    "eventId": 10022,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.networknt.light.rule.dependency;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.page.AbstractPageRule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 3/9/2015.\n *\n * for admin or ruleAdmin, you can select dest only belongs to the host. However, if source\n * is not publishing the message, you get nothing.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class AddDependencyRule extends AbstractDependencyRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String source = (String)data.get(\"source\");\n        String dest = (String)data.get(\"desc\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String userHost = (String)user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex sourceRule = DbService.getVertexByRid(graph, source);\n            Vertex destRule = DbService.getVertexByRid(graph, dest);\n            if(sourceRule == null || destRule == null) {\n                error = \"source rule or destination rule doesn't exist\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                String sourceRuleClass = sourceRule.getProperty(\"ruleClass\");\n                String destRuleClass = destRule.getProperty(\"ruleClass\");\n                if(userHost != null) {\n                    if (!userHost.equals(host)) {\n                        error = \"You can only add dependency from host: \" + host;\n                        inputMap.put(\"responseCode\", 403);\n                    } else {\n                        // make sure dest ruleClass contains host.\n                        if(!destRuleClass.contains(host)) {\n                            error = \"Destination rule doesn't belong to the host \" + host;\n                            inputMap.put(\"responseCode\", 403);\n                        } else {\n                            // check if there is an depend edge from source to dest\n                            boolean hasEdge = false;\n                            for (Edge edge : (Iterable<Edge>) sourceRule.getEdges(Direction.OUT, \"Own\")) {\n                                if(edge.getVertex(Direction.IN) == destRule) hasEdge = true;\n                            }\n                            if(hasEdge) {\n                                error = \"There is depend edge between source rule and dest rule\";\n                                inputMap.put(\"responseCode\", 400);\n                            } else {\n                                Map eventMap = getEventMap(inputMap);\n                                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                                inputMap.put(\"eventMap\", eventMap);\n                                eventData.put(\"sourceRuleClass\", sourceRuleClass);\n                                eventData.put(\"destRuleClass\", destRuleClass);\n                                eventData.put(\"content\", data.get(\"content\"));\n                                eventData.put(\"createDate\", new java.util.Date());\n                                eventData.put(\"createUserId\", user.get(\"userId\"));\n                            }\n                        }\n                    }\n                }\n\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.dependency.AddDependencyRule",
      "createDate": "2015-03-25T20:20:30.937"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.937",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:22",
    "@version": 1,
    "@class": "Event",
    "eventId": 10023,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.hazelcast.core.ITopic;\nimport com.hazelcast.core.Message;\nimport com.hazelcast.core.MessageListener;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport net.engio.mbassy.bus.MBassador;\nimport net.engio.mbassy.listener.Handler;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * Created by steve on 23/09/14.\n */\npublic abstract class AbstractFormRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractFormRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    static {\n        MBassador<Map<String, Object>> ruleBus = ServiceLocator.getInstance().getEventBus(\"rule\");\n        ruleBus.subscribe(new RuleMessageListenerImpl());\n    }\n\n    private static class RuleMessageListenerImpl {\n        @Handler\n        public void onMessage(Map<String, Object> eventMap) throws Exception {\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // which form has a drop down of rules that depending on addRule, delRule and impRule?\n            // it is defined in subscribe data for this rule AbstractFormRule. remove the form from\n            // cache so that the dropdown list can be enriched again when the form is called next\n            // time. The reason I don't reload the form here is because there might be so many rules\n            // imported at the same time and you don't want to reload again and again. Lazy loading.\n            Map map = getRuleByRuleClass(this.getClass().getName());\n            Object isSubscriber = map.get(\"isSubscriber\");\n            if(isSubscriber != null && (boolean)isSubscriber) {\n                Map subMap = (Map)map.get(\"subMap\");\n                List<String> formIds = (List)subMap.get(\"rule\");\n                Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n                ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n                if(cache != null) {\n                    for(String formId: formIds) {\n                        cache.remove(formId);\n                    }\n                }\n            }\n\n            // find the vertex for rule com.networknt.light.rule.rule.AbstractRuleRule and find edge\n            // Depend from Form vertex.\n\n            /*\n            Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"formId\"));\n            }\n            */\n        }\n    }\n\n    /*\n    static {\n        System.out.println(\"AbstractFromRule is called\");\n        ITopic<Map<String, Object>> rule = ServiceLocator.getInstance().getHzInstance().getTopic( \"rule\" );\n        rule.addMessageListener(new RuleMessageListenerImpl());\n\n        ITopic<Map<String, Object>> host = ServiceLocator.getInstance().getHzInstance().getTopic( \"host\" );\n        host.addMessageListener(new HostMessageListenerImpl());\n\n        ITopic<Map<String, Object>> role = ServiceLocator.getInstance().getHzInstance().getTopic( \"role\" );\n        role.addMessageListener(new RoleMessageListenerImpl());\n\n    }\n\n    private static class RuleMessageListenerImpl implements MessageListener<Map<String, Object>> {\n        @Override\n        public void onMessage(final Message<Map<String, Object>> message) {\n            Map<String, Object> eventMap = message.getMessageObject();\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // do we know which form to be removed from cache? Need to define the dependency between form\n            // and rule\n            Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"formId\"));\n            }\n        }\n    }\n\n    private static class HostMessageListenerImpl implements MessageListener<Map<String, Object>> {\n        @Override\n        public void onMessage(final Message<Map<String, Object>> message) {\n            Map<String, Object> eventMap = message.getMessageObject();\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // simply remove the page from cache in order to reload in the next getPage rule.\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"formId\"));\n            }\n        }\n    }\n\n    private static class RoleMessageListenerImpl implements MessageListener<Map<String, Object>> {\n        @Override\n        public void onMessage(final Message<Map<String, Object>> message) {\n            Map<String, Object> eventMap = message.getMessageObject();\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // simply remove the page from cache in order to reload in the next getPage rule.\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"formId\"));\n            }\n        }\n    }\n    */\n    protected String getFormById(Map<String, Object> inputMap) throws Exception {\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String formId = (String)data.get(\"formId\");\n        String json  = null;\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            formMap.put(\"cache\", cache);\n        } else {\n            json = (String)cache.get(formId);\n        }\n        if(json == null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                OrientVertex form = (OrientVertex)graph.getVertexByKey(\"Form.formId\", formId);\n                if(form != null) {\n                    json = form.getRecord().toJSON();\n                    if(formId.endsWith(\"_d\")) {\n                        // enrich the form with dynamicOptions for drop down values\n                        json = enrichForm(json, inputMap);\n                    }\n                    cache.put(formId, json);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        return json;\n    }\n\n    protected String enrichForm(String json, Map<String, Object> inputMap)  throws Exception {\n    \tMap<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Pattern pattern = Pattern.compile(\"\\\\[\\\\{\\\"label\\\":\\\"dynamic\\\",([^]]+)\\\\}\\\\]\");\n        Matcher m = pattern.matcher(json);\n        StringBuffer sb = new StringBuffer(json.length());\n        while (m.find()) {\n            String text = m.group(1);\n            // get the values from rules.\n            logger.debug(\"text = {}\", text);\n            text = text.substring(8);\n            logger.debug(\"text = {}\", text);\n            Map<String, Object> jsonMap = mapper.readValue(text,\n                    new TypeReference<HashMap<String, Object>>() {});\n            jsonMap.put(\"payload\", inputMap.get(\"payload\"));\n            // inject host into data here.\n            Map<String, Object> dataMap = new HashMap<String, Object>();\n            dataMap.put(\"host\", data.get(\"host\"));\n            jsonMap.put(\"data\", dataMap);\n            RuleEngine.getInstance().executeRule(Util.getCommandRuleId(jsonMap), jsonMap);\n            String result = (String)jsonMap.get(\"result\");\n            logger.debug(\"result = {}\", result);\n            if(result != null && result.length() > 0) {\n                m.appendReplacement(sb, Matcher.quoteReplacement(result));\n            } else {\n                m.appendReplacement(sb, Matcher.quoteReplacement(\"[ ]\"));\n            }\n        }\n        m.appendTail(sb);\n        logger.debug(\"form = {}\", sb.toString());\n        return sb.toString();\n    }\n\n    protected String addForm(Map<String, Object> data) throws Exception {\n        String json = null;\n        String formId = (String)data.get(\"formId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex form = graph.addVertex(\"class:Form\", data);\n            createUser.addEdge(\"Create\", form);\n            // According to action in the list, populate validation schema in rule class\n            List<Map<String, Object>> actions = form.getProperty(\"action\");\n            for(Map<String, Object> action: actions) {\n                String ruleClass = Util.getCommandRuleId(action);\n                Vertex rule = graph.getVertexByKey(\"Rule.ruleClass\", ruleClass);\n                if(rule != null) {\n                    rule.setProperty(\"schema\", data.get(\"schema\"));\n                    Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n                    ConcurrentMap<String, Map<String, Object>> cache = (ConcurrentMap<String, Map<String, Object>>)ruleMap.get(\"cache\");\n                    if(cache == null) {\n                        cache.remove(ruleClass);\n                    }\n                }\n            }\n            graph.commit();\n            json = form.getRecord().toJSON();\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(formId);\n        }\n        return json;\n    }\n\n    protected void delForm(String formId) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex form = graph.getVertexByKey(\"Form.formId\", formId);\n            if(form != null) {\n                List<Map<String, Object>> actions = form.getProperty(\"action\");\n                for(Map<String, Object> action: actions) {\n                    String ruleClass = Util.getCommandRuleId(action);\n                    Vertex rule = graph.getVertexByKey(\"Rule.ruleClass\", ruleClass);\n                    if(rule != null) {\n                        rule.removeProperty(\"schema\");\n                        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n                        ConcurrentMap<String, Map<String, Object>> cache = (ConcurrentMap<String, Map<String, Object>>)ruleMap.get(\"cache\");\n                        if(cache == null) {\n                            cache.remove(ruleClass);\n                        }\n                    }\n                }\n                graph.removeVertex(form);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(formId);\n        }\n    }\n\n    protected String updForm(Map<String, Object> data) throws Exception {\n        String json = null;\n        String formId = (String)data.get(\"formId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex form = (OrientVertex)graph.getVertexByKey(\"Form.formId\", formId);\n            if(form != null) {\n                form.setProperty(\"action\", data.get(\"action\"));\n                form.setProperty(\"schema\", data.get(\"schema\"));\n                form.setProperty(\"form\", data.get(\"form\"));\n                form.setProperty(\"modelData\", data.get(\"modelData\"));\n                form.setProperty(\"updateDate\", data.get(\"updateDate\"));\n\n                Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n                updateUser.addEdge(\"Update\", form);\n\n                // According to action in the list, populate validation schema.\n                List<Map<String, Object>> actions = form.getProperty(\"action\");\n                for(Map<String, Object> action: actions) {\n                    String ruleClass = Util.getCommandRuleId(action);\n                    Vertex rule = graph.getVertexByKey(\"Rule.ruleClass\", ruleClass);\n                    if(rule != null) {\n                        rule.setProperty(\"schema\", data.get(\"schema\"));\n                        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n                        ConcurrentMap<String, Map<String, Object>> cache = (ConcurrentMap<String, Map<String, Object>>)ruleMap.get(\"cache\");\n                        if(cache == null) {\n                            cache.remove(ruleClass);\n                        }\n                    }\n                }\n            }\n            graph.commit();\n            json = form.getRecord().toJSON();\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(formId);\n        }\n        return json;\n    }\n\n    protected String impForm(Map<String, Object> data) throws Exception {\n        String json = null;\n        String formId = (String)data.get(\"formId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex form = (OrientVertex)graph.getVertexByKey(\"Form.formId\", formId);\n            if(form != null) {\n                graph.removeVertex(form);\n            }\n\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            form = graph.addVertex(\"class:Form\", data);\n            createUser.addEdge(\"Create\", form);\n            // According to action in the list, populate validation schema.\n            List<Map<String, Object>> actions = form.getProperty(\"action\");\n            for(Map<String, Object> action: actions) {\n                String ruleClass = Util.getCommandRuleId(action);\n                Vertex rule = graph.getVertexByKey(\"Rule.ruleClass\", ruleClass);\n                if(rule != null) {\n                    rule.setProperty(\"schema\", data.get(\"schema\"));\n                    Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n                    ConcurrentMap<String, Map<String, Object>> cache = (ConcurrentMap<String, Map<String, Object>>)ruleMap.get(\"cache\");\n                    if(cache == null) {\n                        cache.remove(ruleClass);\n                    }\n                }\n            }\n            graph.commit();\n            json = form.getRecord().toJSON();\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(formId);\n        }\n        return json;\n    }\n\n    protected String getAllForm(String host) {\n        String sql = \"SELECT FROM Form\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> forms = graph.getRawGraph().command(query).execute();\n            if(forms != null && forms.size() > 0) {\n                json = OJSONWriter.listToJSON(forms, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getFormMap(String host) throws Exception {\n        String sql = \"SELECT FROM Form\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Map<String, Map<String, Object>> formMap = new HashMap<String, Map<String, Object>>();\n            for (Vertex v : (Iterable<Vertex>) graph.command(\n                    new OCommandSQL(sql)).execute()) {\n                Map<String, Object> contentMap = new HashMap<String, Object>();\n                contentMap.put(\"action\", v.getProperty(\"action\"));\n                contentMap.put(\"schema\", v.getProperty(\"schema\"));\n                contentMap.put(\"form\", v.getProperty(\"form\"));\n                contentMap.put(\"modelData\", v.getProperty(\"modelData\"));\n                formMap.put(v.getProperty(\"formId\"), contentMap);\n            }\n            json = mapper.writeValueAsString(formMap);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.AbstractFormRule",
      "createDate": "2015-03-25T20:20:30.973"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.973",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:23",
    "@version": 1,
    "@class": "Event",
    "eventId": 10024,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/25/2014.\n */\npublic class AddFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addForm(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.AddFormEvRule",
      "createDate": "2015-03-25T20:20:30.993"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:30.993",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:24",
    "@version": 1,
    "@class": "Event",
    "eventId": 10025,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Add a new form on the server. only owner can add form without host naming space.\n *\n * AccessLevel R [owner, admin, formAdmin]\n */\npublic class AddFormRule extends AbstractFormRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String formId = (String)data.get(\"formId\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add form from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if(!formId.contains(host)) {\n                    // you are not allowed to add form as it is not owned by the host.\n                    error = \"form id doesn't contain host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getFormById(inputMap);\n                    if(json != null) {\n                        error = \"Form with the same id exists\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            String json = getFormById(inputMap);\n            if(json != null) {\n                error = \"Form with the same id exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n                // remove host from data as this is owner adding role\n                eventData.remove(\"host\");\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.AddFormRule",
      "createDate": "2015-03-25T20:20:31.020"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.020",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:25",
    "@version": 1,
    "@class": "Event",
    "eventId": 10026,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/26/2014.\n */\npublic class DelFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        String formId = (String)data.get(\"formId\");\n        delForm(formId);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.DelFormEvRule",
      "createDate": "2015-03-25T20:20:31.061"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.061",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:26",
    "@version": 1,
    "@class": "Event",
    "eventId": 10027,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 8/29/2014.\n *\n * owner can delete any form and admin or formAdmin can only delete forms belong to the host and name must\n * contain the host.\n *\n * AccessLevel R [owner, admin, formAdmin\n */\npublic class DelFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String formId = (String)data.get(\"formId\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            // admin or formAdmin\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only delete form for host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if(!formId.contains(host)) {\n                    // you are not allowed to delete form as it is not owned by the host.\n                    error = \"form id doesn't contain host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    String json = getFormById(inputMap);\n                    if(json == null) {\n                        error = \"Form with id \" + formId + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map<String, Object> form = mapper.readValue(json,\n                                new TypeReference<HashMap<String, Object>>() {\n                                });\n                        // check the version\n                        int storedVersion = (int)form.get(\"@version\");\n                        if (inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"formId\", form.get(\"formId\"));\n                        }\n                    }\n                }\n            }\n        } else {\n            // owner\n            int inputVersion = (int)data.get(\"@version\");\n            String json = getFormById(inputMap);\n            if(json == null) {\n                error = \"Form with id \" + formId + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map<String, Object> form = mapper.readValue(json,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                // check the version\n                int storedVersion = (int)form.get(\"@version\");\n                if (inputVersion != storedVersion) {\n                    inputMap.put(\"responseCode\", 400);\n                    error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"formId\", form.get(\"formId\"));\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.DelFormRule",
      "createDate": "2015-03-25T20:20:31.125"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.125",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:27",
    "@version": 1,
    "@class": "Event",
    "eventId": 10028,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 9/4/2014.\n *\n * Is there a way to verify that the memoryImage is in sync with db?\n * In that case, we don't need to reload from db every time this rule is executed.\n * What we can do is to load all forms in the beginning when server starts, and make\n * sure all the form updates are gone through these set of rules.\n *\n * AccessLevel R [user, admin, formAdmin]\n *\n */\npublic class GetAllFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String) user.get(\"host\");\n        String hostForms = getAllForm(host);\n        if(hostForms != null) {\n            inputMap.put(\"result\", hostForms);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No form can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.GetAllFormRule",
      "createDate": "2015-03-25T20:20:31.157"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.157",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:28",
    "@version": 1,
    "@class": "Event",
    "eventId": 10029,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.page.AbstractPageRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/02/15.\n *\n * This is the rule that called by form loader.\n * It get all the forms and return a map from id to the content.\n *\n * accessLevel is owner by default.\n */\npublic class GetFormMapRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)user.get(\"host\");\n\n        String forms = getFormMap(host);\n        if(forms != null) {\n            inputMap.put(\"result\", forms);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No page can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.GetFormMapRule",
      "createDate": "2015-03-25T20:20:31.177"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.177",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:29",
    "@version": 1,
    "@class": "Event",
    "eventId": 10030,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.util.Util;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * Created by steve on 8/25/2014.\n *\n * You don't need to check if the form is in db or not as the form should be cached\n * in memory image already while starting the server.\n *\n * AccessLevel A\n *\n */\npublic class GetFormRule extends AbstractFormRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(GetFormRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String formId = (String)data.get(\"formId\");\n        String json = getFormById(inputMap);\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Form with \" + formId + \" cannot be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.GetFormRule",
      "createDate": "2015-03-25T20:20:31.200"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.200",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:30",
    "@version": 1,
    "@class": "Event",
    "eventId": 10031,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 9/4/2014.\n * when importing form, it might be existing or new. need to handle two situations.\n *\n */\npublic class ImpFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute(Object... objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        impForm(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.ImpFormEvRule",
      "createDate": "2015-03-25T20:20:31.247"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.247",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:31",
    "@version": 1,
    "@class": "Event",
    "eventId": 10032,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 9/4/2014.\n *\n * Overwrite if the form exists in db.\n *\n * AccessLevel R [user, admin, formAdmin]\n *\n */\npublic class ImpFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        Map<String, Object> dataMap = mapper.readValue((String)data.get(\"content\"), new TypeReference<HashMap<String, Object>>() {});\n        String formId = (String)dataMap.get(\"formId\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only import form from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if(!formId.contains(host)) {\n                    // you are not allowed to add form as it is not owned by the host.\n                    error = \"form id doesn't contain host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    // Won't check if form exists or not here.\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", host);\n\n                    eventData.put(\"formId\", formId);\n                    eventData.put(\"action\", dataMap.get(\"action\"));\n                    eventData.put(\"schema\", dataMap.get(\"schema\"));\n                    eventData.put(\"form\", dataMap.get(\"form\"));\n                    if(dataMap.get(\"modelData\") != null) eventData.put(\"modelData\", dataMap.get(\"modelData\"));\n\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                }\n            }\n        } else {\n            // This is owner to import form, notice no host is passed in.\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n\n            eventData.put(\"formId\", formId);\n            eventData.put(\"action\", dataMap.get(\"action\"));\n            eventData.put(\"schema\", dataMap.get(\"schema\"));\n            eventData.put(\"form\", dataMap.get(\"form\"));\n            if(dataMap.get(\"modelData\") != null) eventData.put(\"modelData\", dataMap.get(\"modelData\"));\n\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.ImpFormRule",
      "createDate": "2015-03-25T20:20:31.270"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.270",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:32",
    "@version": 1,
    "@class": "Event",
    "eventId": 10033,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/26/2014.\n */\npublic class UpdFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updForm(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.UpdFormEvRule",
      "createDate": "2015-03-25T20:20:31.294"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.294",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:33",
    "@version": 1,
    "@class": "Event",
    "eventId": 10034,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 8/29/2014.\n *\n */\npublic class UpdFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String formId = (String)data.get(\"formId\");\n        String error = null;\n\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            // admin or formAdmin\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only update form from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if (!formId.contains(host)) {\n                    error = \"form id doesn't contain host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    String json = getFormById(inputMap);\n                    if(json == null) {\n                        error = \"Form with id \" + formId + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map<String, Object> form = mapper.readValue(json,\n                                new TypeReference<HashMap<String, Object>>() {\n                                });\n                        int storedVersion = (int)form.get(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            // no need to remove host from eventData as owner update won't touch id and host.\n                        }\n                    }\n                }\n            }\n        } else {\n            // owner\n            int inputVersion = (int)data.get(\"@version\");\n            String json = getFormById(inputMap);\n            if(json == null) {\n                error = \"Form with id \" + formId + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map<String, Object> form = mapper.readValue(json,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                int storedVersion = (int)form.get(\"@version\");\n                if(inputVersion != storedVersion) {\n                    inputMap.put(\"responseCode\", 400);\n                    error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                    eventData.put(\"updateDate\", new java.util.Date());\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    // no need to remove host from eventData as owner update won't touch id and host.\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.UpdFormRule",
      "createDate": "2015-03-25T20:20:31.319"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.319",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:34",
    "@version": 1,
    "@class": "Event",
    "eventId": 10035,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic abstract class AbstractHostRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(ServiceLocator.class);\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void addHost(Map<String, Object> data) throws Exception {\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"base\", data.get(\"base\"));\n        map.put(\"transferMinSize\", data.get(\"transferMinSize\"));\n        hostMap.put((String)data.get(\"id\"), map);\n        writeHostMap(hostMap);\n    }\n\n    protected void updHost(Map<String, Object> data) throws Exception {\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        Map<String, Object> map = (Map<String, Object>)hostMap.get(data.get(\"id\"));\n        map.put(\"base\", data.get(\"base\"));\n        map.put(\"transferMinSize\", data.get(\"transferMinSize\"));\n        writeHostMap(hostMap);\n    }\n\n    protected void delHost(Map<String, Object> data) throws Exception {\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        hostMap.remove(data.get(\"id\"));\n        writeHostMap(hostMap);\n    }\n\n    private void writeHostMap(Map<String, Object> hostMap) {\n        try {\n            mapper.enable(SerializationFeature.INDENT_OUTPUT);\n            mapper.writeValue((new File(System.getProperty(\"user.home\") + \"/virtualhost.json\")), hostMap);\n        } catch (IOException ioe) {\n            logger.error(\"Exception:\", ioe);\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.AbstractHostRule",
      "createDate": "2015-03-25T20:20:31.347"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.347",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:35",
    "@version": 1,
    "@class": "Event",
    "eventId": 10036,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class AddHostEvRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addHost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.AddHostEvRule",
      "createDate": "2015-03-25T20:20:31.367"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.367",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:36",
    "@version": 1,
    "@class": "Event",
    "eventId": 10037,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n *\n * This is only give you a way to update virtualhost.json in users directory, it won't\n * inject the new host into the virtualhosthandler. The server must be restarted in order\n * to load the newly added site.\n * TODO dynamically add a new host into virtualhosthandler without shutdonw server.\n */\npublic class AddHostRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n\n        // check if the host exists or not.\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        if(hostMap.containsKey(data.get(\"id\"))) {\n            // host exists\n            error = \"Id for the host exists\";\n            inputMap.put(\"responseCode\", 400);\n        } else {\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.put(\"id\", data.get(\"id\"));\n            eventData.put(\"base\", data.get(\"base\"));\n            eventData.put(\"transferMinSize\", data.get(\"transferMinSize\"));\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.AddHostRule",
      "createDate": "2015-03-25T20:20:31.385"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.385",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:37",
    "@version": 1,
    "@class": "Event",
    "eventId": 10038,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class DelHostEvRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delHost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.DelHostEvRule",
      "createDate": "2015-03-25T20:20:31.403"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.403",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:38",
    "@version": 1,
    "@class": "Event",
    "eventId": 10039,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class DelHostRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n\n        // check if the host exists or not.\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        if(hostMap.containsKey(data.get(\"id\"))) {\n            // host exists\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.put(\"id\", data.get(\"id\"));\n            eventData.put(\"updateDate\", new java.util.Date());\n            eventData.put(\"updateUserId\", user.get(\"userId\"));\n        } else {\n            error = \"Id for the host does not exist\";\n            inputMap.put(\"responseCode\", 400);\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.DelHostRule",
      "createDate": "2015-03-25T20:20:31.424"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.424",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:39",
    "@version": 1,
    "@class": "Event",
    "eventId": 10040,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class GetAllHostRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\")) {\n            // flatten the set to array with all the elements of the host.\n            List hosts = new ArrayList<Map<String, Object>>();\n            Map hostMap = ServiceLocator.getInstance().getHostMap();\n            Set<String> keys = hostMap.keySet();\n            for(String key : keys) {\n                Map valueMap = (Map<String, Object>)hostMap.get(key);\n                valueMap.put(\"id\", key);\n                hosts.add(valueMap);\n            }\n            inputMap.put(\"result\", mapper.writeValueAsString(hosts));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Permission denied\");\n            inputMap.put(\"responseCode\", 403);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.GetAllHostRule",
      "createDate": "2015-03-25T20:20:31.446"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.446",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:40",
    "@version": 1,
    "@class": "Event",
    "eventId": 10041,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.*;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n *\n * AccessLevel R [user]\n */\npublic class GetHostDropdownRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n        Set<String> keys = ServiceLocator.getInstance().getHostMap().keySet();\n        for(String key: keys) {\n            Map<String, String> map = new HashMap<String, String>();\n            map.put(\"label\", key);\n            map.put(\"value\", key);\n            list.add(map);\n        }\n        String hostDropdown = mapper.writeValueAsString(list);\n        if(hostDropdown != null) {\n            inputMap.put(\"result\", hostDropdown);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No host can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.GetHostDropdownRule",
      "createDate": "2015-03-25T20:20:31.468"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.468",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:41",
    "@version": 1,
    "@class": "Event",
    "eventId": 10042,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class UpdHostEvRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updHost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.UpdHostEvRule",
      "createDate": "2015-03-25T20:20:31.498"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.498",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:42",
    "@version": 1,
    "@class": "Event",
    "eventId": 10043,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class UpdHostRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        // check if the host exists or not.\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        if(hostMap.containsKey(data.get(\"id\"))) {\n            // host exists\n            // TODO update host into virtualhost.json here in the command or in event?\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.put(\"id\", data.get(\"id\"));\n            eventData.put(\"base\", data.get(\"base\"));\n            eventData.put(\"transferMinSize\", data.get(\"transferMinSize\"));\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n        } else {\n            error = \"Id for the host does not exist\";\n            inputMap.put(\"responseCode\", 400);\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.UpdHostRule",
      "createDate": "2015-03-25T20:20:31.532"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.532",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:43",
    "@version": 1,
    "@class": "Event",
    "eventId": 10044,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.log;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.db.AbstractDbRule;\n\nimport java.util.Map;\n\n/**\n * Created by admin on 2015-01-20.\n */\npublic class LogEventEvRule extends AbstractDbRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        // TODO Dispatch the event to all the internal subscribers.\n        // This will be called when replay the events and be careful regarding to the side effects.\n\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.log.LogEventEvRule",
      "createDate": "2015-03-25T20:20:31.549"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.549",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:44",
    "@version": 1,
    "@class": "Event",
    "eventId": 10045,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.log;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-20.\n *\n * This is a handler to log all the client side and server side exceptions. Also, it\n * can be used to instrument performance logging or any other events happening on\n * the client side. The data payload is a flexible structure and it is up to you\n * to define what and when to be logged.\n *\n * AccessLevel A\n *\n */\npublic class LogEventRule extends AbstractRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String userId = null;\n        if(payload != null) {\n            Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n            userId = (String)user.get(\"userId\");\n        }\n\n        // TODO send notifications for serious events or exceptions.\n        // Some events might trigger a pager\n        // Some events might trigger a email\n\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n        eventData.put(\"createDate\", new java.util.Date());\n        if(userId != null) eventData.put(\"createUserId\", userId);\n        eventData.put(\"ipAddress\", inputMap.get(\"ipAddress\"));\n\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.log.LogEventRule",
      "createDate": "2015-03-25T20:20:31.576"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.576",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:45",
    "@version": 1,
    "@class": "Event",
    "eventId": 10046,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 10/27/2014.\n * The menuMap.cache has three type of keys. host, label and @rid\n */\npublic abstract class AbstractMenuRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractMenuRule.class);\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected String getJsonByRid(String rid) {\n        String json = null;\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            json = (String)cache.get(\"rid\");\n        }\n        if(json == null) {\n            json = DbService.getJsonByRid(rid);\n            // put it into the blog cache.\n            if(json != null) {\n                if(cache == null) {\n                    cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                            .maximumWeightedCapacity(1000)\n                            .build();\n                    menuMap.put(\"cache\", cache);\n                }\n                cache.put(rid, json);\n            }\n        }\n        return json;\n    }\n\n    protected void delMenu(Map<String, Object> data) throws Exception {\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex menu = graph.getVertexByKey(\"Menu.host\", host);\n            if(menu != null) {\n                // cascade deleting all menuItems belong to the host only.\n                for (Vertex menuItem : graph.getVerticesOfClass(\"MenuItem\")) {\n                    if(host.equals(menuItem.getProperty(\"host\"))) {\n                        graph.removeVertex(menuItem);\n                    }\n                }\n                graph.removeVertex(menu);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        Map<String, Object> menuMap = ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(host);\n        }\n    }\n\n    protected void delMenuItem(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\",data.get(\"menuItemId\"));\n            if(menuItem != null) {\n                graph.removeVertex(menuItem);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        // no need to refresh cache as there is no reference to this menuItem anywhere.\n    }\n\n    protected String addMenu( Map<String, Object> data) throws Exception {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex menu = graph.addVertex(\"class:Menu\", \"host\", data.get(\"host\"), \"createDate\", data.get(\"createDate\"));\n            List<String> addMenuItems = (List<String>)data.get(\"addMenuItems\");\n            if(addMenuItems != null && addMenuItems.size() > 0) {\n                // find vertex for each menuItem id and create edge to it.\n                for(String menuItemId: addMenuItems) {\n                    Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                    menu.addEdge(\"Own\", menuItem);\n                }\n            }\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.get(\"createUserId\"));\n            user.addEdge(\"Create\", menu);\n            graph.commit();\n            json = menu.getRecord().toJSON(\"fetchPlan:menuItems:2\");\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            menuMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"host\"), json);\n        return json;\n    }\n\n    protected void addMenuItem(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            List<String> addMenuItems = (List<String>)data.remove(\"addMenuItems\");\n            OrientVertex menuItem = graph.addVertex(\"class:MenuItem\", data);\n            if(addMenuItems != null && addMenuItems.size() > 0) {\n                // find vertex for each menuItem id and create edge to it.\n                for(String menuItemId: addMenuItems) {\n                    Vertex childMenuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                    menuItem.addEdge(\"Own\", childMenuItem);\n                }\n            }\n            user.addEdge(\"Create\", menuItem);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected String getMenu(OrientGraph graph, String host) {\n        String json = null;\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            json = (String)cache.get(host);\n        }\n        if(json == null) {\n            Vertex menu = graph.getVertexByKey(\"Menu.host\", host);\n            if(menu != null) {\n                json = ((OrientVertex)menu).getRecord().toJSON(\"rid,fetchPlan:out_Own.in_Create:-2 out_Own:2\");\n            }\n            if(json != null) {\n                if(cache == null) {\n                    cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                            .maximumWeightedCapacity(1000)\n                            .build();\n                    menuMap.put(\"cache\", cache);\n                }\n                cache.put(host, json);\n            }\n        }\n        return json;\n    }\n\n    protected String getMenuItem(OrientGraph graph, String menuItemId) throws Exception {\n        String json = null;\n        Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n        if(menuItem != null) {\n            json = ((OrientVertex)menuItem).getRecord().toJSON();\n        }\n        return json;\n    }\n\n    protected String getAllMenu(OrientGraph graph, String host) {\n        String json = null;\n        String jsonMenu = null;\n        String jsonMenuItem = null;\n        String sqlMenu = \"select from Menu\";\n        if(host != null) {\n            sqlMenu += \" where host = ?\";\n        }\n        String sqlMenuItem = \"select from MenuItem\";\n        // assumption here is menuItems are not empty.\n        OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sqlMenuItem);\n        List<ODocument> menuItems = graph.getRawGraph().command(query).execute(host);\n        if(menuItems.size() > 0) {\n            jsonMenuItem = OJSONWriter.listToJSON(menuItems, null);\n            json = \"{\\\"menuItems\\\":\" + jsonMenuItem;\n        }\n\n        query = new OSQLSynchQuery<>(sqlMenu);\n        List<ODocument> menus = graph.getRawGraph().command(query).execute(host);\n        if(menus.size() > 0) {\n            jsonMenu = OJSONWriter.listToJSON(menus, null);\n            json += \", \\\"menus\\\":\" + jsonMenu + \"}\";\n        } else {\n            json += \"}\";\n        }\n        return json;\n    }\n\n    protected void updMenu(Map<String, Object> data) throws Exception {\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex menu = graph.getVertexByKey(\"Menu.host\", host);\n            if(menu != null) {\n                Set<String> addMenuItems = (Set)data.get(\"addMenuItems\");\n                if(addMenuItems != null) {\n                    for(String menuItemId: addMenuItems) {\n                        Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                        menu.addEdge(\"Own\", menuItem);\n                    }\n                }\n                Set<String> delMenuItems = (Set)data.get(\"delMenuItems\");\n                if(delMenuItems != null) {\n                    for(String menuItemId: delMenuItems) {\n                        Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                        for (Edge edge : (Iterable<Edge>) menu.getEdges(Direction.OUT, \"Own\")) {\n                            if(edge.getVertex(Direction.IN).equals(menuItem)) graph.removeEdge(edge);\n                        }\n                    }\n                }\n                menu.setProperty(\"updateDate\", data.get(\"updateDate\"));\n            }\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n            updateUser.addEdge(\"Update\", menu);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cache item in order to reload the menu.\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"host\"));\n        }\n    }\n\n    protected String getMenuItemMap(OrientGraph graph, String host) throws Exception {\n        String sql = \"SELECT FROM MenuItem\";\n        if(host != null) {\n            sql += \" WHERE host = ? OR host IS NULL\";\n        }\n        List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n        for (Vertex menuItem : (Iterable<Vertex>) graph.command(new OCommandSQL(sql)).execute()) {\n            Map<String, String> map = new HashMap<String, String>();\n            map.put(\"label\", (String)menuItem.getProperty(\"menuItemId\"));\n            map.put(\"value\", menuItem.getId().toString());\n            list.add(map);\n        }\n        return mapper.writeValueAsString(list);\n    }\n\n    protected void updMenuItem(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", (String)data.get(\"menuItemId\"));\n            if(menuItem != null) {\n                // handle addMenuItems and delMenuItems\n                Set<String> addMenuItems = (Set)data.get(\"addMenuItems\");\n                if(addMenuItems != null) {\n                    for(String menuItemId: addMenuItems) {\n                        Vertex vertex = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                        menuItem.addEdge(\"Own\", vertex);\n                    }\n                }\n                Set<String> delMenuItems = (Set)data.get(\"delMenuItems\");\n                if(delMenuItems != null) {\n                    for(String menuItemId: delMenuItems) {\n                        Vertex vertex = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                        for (Edge edge : (Iterable<Edge>) menuItem.getEdges(Direction.OUT, \"Own\")) {\n                            if(edge.getVertex(Direction.IN).equals(vertex)) graph.removeEdge(edge);\n                        }\n                    }\n                }\n                String path = (String)data.get(\"path\");\n                if(path != null && !path.equals(menuItem.getProperty(\"path\"))) {\n                    menuItem.setProperty(\"path\", path);\n                }\n                String tpl = (String)data.get(\"tpl\");\n                if(tpl != null && !tpl.equals(menuItem.getProperty(\"tpl\"))) {\n                    menuItem.setProperty(\"tpl\", tpl);\n                }\n                String ctrl = (String)data.get(\"ctrl\");\n                if(ctrl != null && !ctrl.equals(menuItem.getProperty(\"ctrl\"))) {\n                    menuItem.setProperty(\"ctrl\", ctrl);\n                }\n                Boolean left = (Boolean)data.get(\"left\");\n                if(left != null && !left.equals(menuItem.getProperty(\"left\"))) {\n                    menuItem.setProperty(\"left\", left);\n                }\n                List roles = (List)data.get(\"roles\");\n                if(roles != null) {\n                    menuItem.setProperty(\"roles\", roles);\n                } else {\n                    menuItem.setProperty(\"roles\", new ArrayList());\n                }\n                menuItem.setProperty(\"updateDate\", data.get(\"updateDate\"));\n            }\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n            updateUser.addEdge(\"Update\", menuItem);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AbstractMenuRule",
      "createDate": "2015-03-25T20:20:31.602"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.602",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:46",
    "@version": 1,
    "@class": "Event",
    "eventId": 10047,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class AddMenuEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addMenu(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AddMenuEvRule",
      "createDate": "2015-03-25T20:20:31.618"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.618",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:47",
    "@version": 1,
    "@class": "Event",
    "eventId": 10048,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class AddMenuItemEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addMenuItem(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AddMenuItemEvRule",
      "createDate": "2015-03-25T20:20:31.632"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.632",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:48",
    "@version": 1,
    "@class": "Event",
    "eventId": 10049,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n * AccessLevel R [owner, admin, menuAdmin]\n */\npublic class AddMenuItemRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"You can only add menuItem for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                String json = getMenuItem(graph, (String) data.get(\"menuItemId\"));\n                if(json != null) {\n                    error = \"MenuItem for the label exists\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    List<String> menuItems = (List)data.remove(\"menuItems\");\n                    // convert to menuItemIds from rids\n                    if(menuItems != null && menuItems.size() > 0) {\n                        List<String> addMenuItems = new ArrayList();\n                        for(String rid: menuItems) {\n                            Vertex menuItem = DbService.getVertexByRid(graph, rid);\n                            addMenuItems.add(menuItem.getProperty(\"menuItemId\"));\n                        }\n                        data.put(\"addMenuItems\", addMenuItems);\n                    }\n                    eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                    if(host == null) {\n                        eventData.remove(\"host\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AddMenuItemRule",
      "createDate": "2015-03-25T20:20:31.658"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.658",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:49",
    "@version": 1,
    "@class": "Event",
    "eventId": 10050,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n *\n * This is the REST API endpoint to add a menu for a host.\n *\n * AccessLevel R [owner]\n */\npublic class AddMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String json = getMenu(graph, (String)data.get(\"host\"));\n            if(json != null) {\n                error = \"Menu for the host exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"host\", host);\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n\n                // make sure all menuItems exist if there are any.\n                List<String> menuItems = (List<String>)data.get(\"menuItems\");\n                if(menuItems != null && menuItems.size() > 0) {\n                    List<String> addMenuItems = new ArrayList<String>();\n                    for(String menuItemRid: menuItems) {\n                        Vertex menuItem = DbService.getVertexByRid(graph, menuItemRid);\n                        if(menuItem == null) {\n                            error = \"MenuItem with @rid \" + menuItemRid + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                            break;\n                        } else {\n                            addMenuItems.add((String)menuItem.getProperty(\"menuItemId\"));\n                        }\n                    }\n                    eventData.put(\"addMenuItems\", addMenuItems);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AddMenuRule",
      "createDate": "2015-03-25T20:20:31.685"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.685",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:50",
    "@version": 1,
    "@class": "Event",
    "eventId": 10051,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class DelMenuEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delMenu(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.DelMenuEvRule",
      "createDate": "2015-03-25T20:20:31.720"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.720",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:51",
    "@version": 1,
    "@class": "Event",
    "eventId": 10052,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class DelMenuItemEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delMenuItem(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.DelMenuItemEvRule",
      "createDate": "2015-03-25T20:20:31.741"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.741",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:52",
    "@version": 1,
    "@class": "Event",
    "eventId": 10053,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class DelMenuItemRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only delete menuItem for host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex menuItem = DbService.getVertexByRid(graph, rid);\n                if(menuItem == null) {\n                    error = \"MenuItem with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    // find out if other menu or menuItem owns this menuItem\n                    if(DbService.hasEdgeToClass(graph, (OrientVertex)menuItem, \"Own\") || DbService.hasEdgeToClass(graph, (OrientVertex)menuItem, \"Own\")) {\n                        error = \"MenuItem is referenced by other entities\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"menuItemId\", menuItem.getProperty(\"menuItemId\"));  // unique key\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.DelMenuItemRule",
      "createDate": "2015-03-25T20:20:31.766"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.766",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:53",
    "@version": 1,
    "@class": "Event",
    "eventId": 10054,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n *\n * AccessLevel R [owner]\n *\n */\npublic class DelMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only delete menu for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex menu = DbService.getVertexByRid(graph, rid);\n                if(menu == null) {\n                    error = \"Menu with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", menu.getProperty(\"host\"));// unique key\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.DelMenuRule",
      "createDate": "2015-03-25T20:20:31.796"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.796",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:54",
    "@version": 1,
    "@class": "Event",
    "eventId": 10055,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 29/10/14.\n *\n * Get All menus and menuItems for menu admin interface.\n *\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class GetAllMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String) user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String menus = null;\n        try {\n            menus = getAllMenu(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(menus != null) {\n            inputMap.put(\"result\", menus);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No menu can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.GetAllMenuRule",
      "createDate": "2015-03-25T20:20:31.815"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.815",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:55",
    "@version": 1,
    "@class": "Event",
    "eventId": 10056,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 13/11/14.\n *\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class GetMenuItemMapRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String) user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String menuItems = null;\n        try {\n            menuItems = getMenuItemMap(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(menuItems != null) {\n            inputMap.put(\"result\", menuItems);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No menuItem can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.GetMenuItemMapRule",
      "createDate": "2015-03-25T20:20:31.833"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.833",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:56",
    "@version": 1,
    "@class": "Event",
    "eventId": 10057,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 23/09/14.\n *\n * AccessLevel A\n */\npublic class GetMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String host = (String) data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String json = null;\n        try {\n            json = getMenu(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Menu for host \" + host + \" cannot be found.\");\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.GetMenuRule",
      "createDate": "2015-03-25T20:20:31.853"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.853",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:57",
    "@version": 1,
    "@class": "Event",
    "eventId": 10058,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class UpdMenuEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updMenu(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuEvRule",
      "createDate": "2015-03-25T20:20:31.869"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.869",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:58",
    "@version": 1,
    "@class": "Event",
    "eventId": 10059,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class UpdMenuItemEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updMenuItem(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuItemEvRule",
      "createDate": "2015-03-25T20:20:31.915"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.915",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:59",
    "@version": 1,
    "@class": "Event",
    "eventId": 10060,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport io.undertow.server.HttpServerExchange;\n\nimport java.util.*;\n\n/**\n * Created by husteve on 10/29/2014.\n *\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class UpdMenuItemRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only update menuItem for host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex menuItem = DbService.getVertexByRid(graph, rid);\n                if(menuItem == null) {\n                    error = \"MenuItem with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    int storedVersion = menuItem.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        inputMap.put(\"responseCode\", 422);\n                        error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    } else {\n                        // need to make sure that all the menuItems exist and convert to id for event replay.\n                        // and build addMenuItems and delMenuItems sets to the map.\n                        Set<String> inputMenuItems = new HashSet<String>();\n                        List<String> menuItems = (List<String>)data.get(\"out_Own\");\n                        if(menuItems != null) {\n                            for(String menuItemRid: menuItems) {\n                                Vertex vertex = DbService.getVertexByRid(graph, menuItemRid);\n                                if(vertex != null) {\n                                    inputMenuItems.add(vertex.getProperty(\"menuItemId\"));\n                                }\n                            }\n                        }\n\n                        Set<String> storedMenuItems = new HashSet<String>();\n                        for (Vertex vertex : (Iterable<Vertex>) menuItem.getVertices(Direction.OUT, \"Own\")) {\n                            storedMenuItems.add(vertex.getProperty(\"menuItemId\"));\n                        }\n                        Set<String> addMenuItems = new HashSet<String>(inputMenuItems);\n                        Set<String> delMenuItems = new HashSet<String>(storedMenuItems);\n                        addMenuItems.removeAll(storedMenuItems);\n                        delMenuItems.removeAll(inputMenuItems);\n\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        if(data.get(\"host\") != null) eventData.put(\"host\", data.get(\"host\"));\n                        if(addMenuItems.size() > 0) eventData.put(\"addMenuItems\", addMenuItems);\n                        if(delMenuItems.size() > 0) eventData.put(\"delMenuItems\", delMenuItems);\n                        eventData.put(\"menuItemId\", menuItem.getProperty(\"menuItemId\"));\n                        eventData.put(\"path\", data.get(\"path\"));\n                        eventData.put(\"tpl\", data.get(\"tpl\"));\n                        eventData.put(\"ctrl\", data.get(\"ctrl\"));\n                        eventData.put(\"left\", data.get(\"left\"));\n                        eventData.put(\"roles\", data.get(\"roles\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuItemRule",
      "createDate": "2015-03-25T20:20:31.941"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.941",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:60",
    "@version": 1,
    "@class": "Event",
    "eventId": 10061,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.*;\n\n/**\n * Created by husteve on 10/29/2014.\n *\n *\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class UpdMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only update menu for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex menu = DbService.getVertexByRid(graph, rid);\n                if(menu == null) {\n                    error = \"Menu with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    int storedVersion = menu.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        inputMap.put(\"responseCode\", 422);\n                        error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    } else {\n                        // need to make sure that all the menuItems exist and convert to id for event replay.\n                        // and build addMenuItems and delMenuItems sets to the map.\n                        Set<String> inputMenuItems = new HashSet<String>();\n                        List<String> menuItems = (List<String>)data.get(\"out_Own\");\n                        if(menuItems != null) {\n                            for(String menuItemRid: menuItems) {\n                                Vertex menuItem = DbService.getVertexByRid(graph, menuItemRid);\n                                if(menuItem != null) {\n                                    inputMenuItems.add(menuItem.getProperty(\"menuItemId\"));\n                                }\n                            }\n                        }\n\n                        Set<String> storedMenuItems = new HashSet<String>();\n                        for (Vertex menuItem : (Iterable<Vertex>) menu.getVertices(Direction.OUT, \"Own\")) {\n                            storedMenuItems.add(menuItem.getProperty(\"menuItemId\"));\n                        }\n                        Set<String> addMenuItems = new HashSet<String>(inputMenuItems);\n                        Set<String> delMenuItems = new HashSet<String>(storedMenuItems);\n                        addMenuItems.removeAll(storedMenuItems);\n                        delMenuItems.removeAll(inputMenuItems);\n\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        if(data.get(\"host\") != null) eventData.put(\"host\", data.get(\"host\"));\n                        if(addMenuItems.size() > 0) eventData.put(\"addMenuItems\", addMenuItems);\n                        if(delMenuItems.size() > 0) eventData.put(\"delMenuItems\", delMenuItems);\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuRule",
      "createDate": "2015-03-25T20:20:31.958"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.958",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:61",
    "@version": 1,
    "@class": "Event",
    "eventId": 10062,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.hazelcast.core.ITopic;\nimport com.hazelcast.core.Message;\nimport com.hazelcast.core.MessageListener;\nimport com.hazelcast.util.executor.StripedRunnable;\nimport com.networknt.light.model.CacheObject;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport com.orientechnologies.orient.core.Orient;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic abstract class AbstractPageRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractPageRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    /*\n    static {\n        System.out.println(\"AbstractPageRule is called\");\n        ITopic<Map<String, Object>> page = ServiceLocator.getInstance().getHzInstance().getTopic( \"page\" );\n        page.addMessageListener(new PageMessageListenerImpl());\n    }\n\n    // As all the operations are in memory, use the same thread from the publisher.\n    private static class PageMessageListenerImpl implements MessageListener<Map<String, Object>> {\n        @Override\n        public void onMessage(final Message<Map<String, Object>> message) {\n            Map<String, Object> eventMap = message.getMessageObject();\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // simply remove the page from cache in order to reload in the next getPage rule.\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"pageId\"));\n            }\n        }\n    }\n    */\n\n    protected CacheObject getPageById(OrientGraph graph, String pageId) {\n        CacheObject co = null;\n        Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            pageMap.put(\"cache\", cache);\n        } else {\n            co = (CacheObject)cache.get(pageId);\n        }\n        if(co == null) {\n            OrientVertex page = (OrientVertex)graph.getVertexByKey(\"Page.pageId\", pageId);\n            if(page != null) {\n                String json = page.getRecord().toJSON();\n                co = new CacheObject(page.getProperty(\"@version\").toString(), json);\n                cache.put(pageId, co);\n            }\n        }\n        return co;\n    }\n\n    protected void addPage(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex page = graph.addVertex(\"class:Page\", data);\n            createUser.addEdge(\"Create\", page);\n            graph.commit();\n            String json = page.getRecord().toJSON();\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache == null) {\n                cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                        .maximumWeightedCapacity(1000)\n                        .build();\n                pageMap.put(\"cache\", cache);\n            }\n            cache.put(data.get(\"pageId\"), new CacheObject(page.getProperty(\"@version\").toString(), json));\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void delPage(String pageId) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex page = graph.getVertexByKey(\"Page.pageId\", pageId);\n            if(page != null) {\n                graph.removeVertex(page);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(pageId);\n        }\n    }\n\n    protected void updPage(Map<String, Object> data) {\n        String pageId = (String)data.get(\"pageId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex page = (OrientVertex)graph.getVertexByKey(\"Page.pageId\", pageId);\n            if(page != null) {\n                page.setProperty(\"content\", data.get(\"content\"));\n                page.setProperty(\"updateDate\", data.get(\"updateDate\"));\n                Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n                updateUser.addEdge(\"Update\", page);\n            }\n            graph.commit();\n            String json = page.getRecord().toJSON();\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache == null) {\n                cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                        .maximumWeightedCapacity(1000)\n                        .build();\n                pageMap.put(\"cache\", cache);\n            }\n            CacheObject co = (CacheObject)cache.get(pageId);\n            if(co != null) {\n                co.setEtag(page.getProperty(\"@version\").toString());\n                co.setData(json);\n            } else {\n                cache.put(pageId, new CacheObject(page.getProperty(\"@version\").toString(), json));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void impPage(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String pageId = (String)data.get(\"pageId\");\n        try {\n            graph.begin();\n            OrientVertex page = (OrientVertex)graph.getVertexByKey(\"Page.pageId\", pageId);\n            if(page != null) {\n                graph.removeVertex(page);\n            }\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            page = graph.addVertex(\"class:Page\", data);\n            createUser.addEdge(\"Create\", page);\n            graph.commit();\n            String json = page.getRecord().toJSON();\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache == null) {\n                cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                        .maximumWeightedCapacity(1000)\n                        .build();\n                pageMap.put(\"cache\", cache);\n            }\n            CacheObject co = (CacheObject)cache.get(pageId);\n            if(co != null) {\n                co.setEtag(page.getProperty(\"@version\").toString());\n                co.setData(json);\n            } else {\n                cache.put(pageId, new CacheObject(page.getProperty(\"@version\").toString(), json));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected String getAllPage(OrientGraph graph, String host) {\n        String json = null;\n        String sql = \"SELECT FROM Page\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n        List<ODocument> pages = graph.getRawGraph().command(query).execute();\n        json = OJSONWriter.listToJSON(pages, null);\n        return json;\n    }\n\n    protected String getPageMap(OrientGraph graph, String host) throws Exception {\n        String sql = \"SELECT FROM Page\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        Map<String, String> map = new HashMap<String, String>();\n        for (Vertex page : (Iterable<Vertex>) graph.command(new OCommandSQL(sql)).execute()) {\n            map.put(page.getProperty(\"pageId\"), page.getProperty(\"content\"));\n        }\n        return mapper.writeValueAsString(map);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.AbstractPageRule",
      "createDate": "2015-03-25T20:20:31.988"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:31.988",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:62",
    "@version": 1,
    "@class": "Event",
    "eventId": 10063,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.hazelcast.core.ITopic;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class AddPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addPage(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.AddPageEvRule",
      "createDate": "2015-03-25T20:20:32.012"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.012",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:63",
    "@version": 1,
    "@class": "Event",
    "eventId": 10064,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.model.CacheObject;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport io.undertow.server.HttpServerExchange;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n *\n */\npublic class AddPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String pageId = (String)data.get(\"pageId\");\n        String host = (String)data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null) {\n            if (!userHost.equals(host)) {\n                error = \"You can only add page from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            }\n        } else {\n            // remove host as this is the owner\n            data.remove(\"host\");\n        }\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            CacheObject co = getPageById(graph, pageId);\n            if(co != null) {\n                error = \"Page with the same id exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll(data);\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.AddPageRule",
      "createDate": "2015-03-25T20:20:32.043"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.043",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:64",
    "@version": 1,
    "@class": "Event",
    "eventId": 10065,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.hazelcast.core.ITopic;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class DelPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        //ITopic topic = ServiceLocator.getInstance().getHzInstance().getTopic(\"page\");\n        //topic.publish(eventMap);\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        String pageId = (String)data.get(\"pageId\");\n        delPage(pageId);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.DelPageEvRule",
      "createDate": "2015-03-25T20:20:32.066"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.066",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:65",
    "@version": 1,
    "@class": "Event",
    "eventId": 10066,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport io.undertow.server.HttpServerExchange;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n *\n */\npublic class DelPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            error = \"You can only delete page from host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex page = DbService.getVertexByRid(graph, rid);\n                if(page != null) {\n                    int inputVersion = (int)data.get(\"@version\");\n                    int storedVersion = page.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        inputMap.put(\"responseCode\", 400);\n                        error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"pageId\", page.getProperty(\"pageId\"));\n                    }\n                } else {\n                    error = \"Page with @rid \" + rid + \" doesn't exist\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.DelPageRule",
      "createDate": "2015-03-25T20:20:32.084"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.084",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:66",
    "@version": 1,
    "@class": "Event",
    "eventId": 10067,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by husteve on 10/24/2014.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n *\n */\npublic class GetAllPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String pages = null;\n        try {\n            pages = getAllPage(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(pages != null) {\n            inputMap.put(\"result\", pages);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No page can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.GetAllPageRule",
      "createDate": "2015-03-25T20:20:32.119"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.119",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:67",
    "@version": 1,
    "@class": "Event",
    "eventId": 10068,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/02/15.\n *\n * This is the rule that called by page:load plugin in maven-plugin repo.\n * It get all the page and return a map from id to content.\n *\n * accessLevel is owner by default.\n *\n */\npublic class GetPageMapRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String pages = null;\n        try {\n            pages = getPageMap(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(pages != null) {\n            inputMap.put(\"result\", pages);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No page can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.GetPageMapRule",
      "createDate": "2015-03-25T20:20:32.200"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.200",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:68",
    "@version": 1,
    "@class": "Event",
    "eventId": 10069,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.model.CacheObject;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport io.undertow.server.HttpServerExchange;\nimport io.undertow.util.Headers;\nimport io.undertow.util.HttpString;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 10/24/2014.\n *\n * AccessLevel A\n *\n */\npublic class GetPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n        String pageId = (String)data.get(\"pageId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        CacheObject co = null;\n        try {\n            co = getPageById(graph, pageId);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(co != null) {\n            if(!matchEtag(inputMap, co)) {\n                inputMap.put(\"result\", co.getData());\n            }\n            return true;\n        } else {\n            inputMap.put(\"responseCode\", 404);\n            inputMap.put(\"result\", \"Page with id \" + pageId + \" cannot be found.\");\n            return false;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.GetPageRule",
      "createDate": "2015-03-25T20:20:32.218"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.218",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:69",
    "@version": 1,
    "@class": "Event",
    "eventId": 10070,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.hazelcast.core.ITopic;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class ImpPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute(Object... objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        //ITopic topic = ServiceLocator.getInstance().getHzInstance().getTopic(\"page\");\n        //topic.publish(eventMap);\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        impPage(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.ImpPageEvRule",
      "createDate": "2015-03-25T20:20:32.235"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.235",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:70",
    "@version": 1,
    "@class": "Event",
    "eventId": 10071,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n */\npublic class ImpPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        eventData.put(\"host\", host);\n        eventData.put(\"pageId\", data.get(\"pageId\"));\n        eventData.put(\"content\", data.get(\"content\"));\n        eventData.put(\"createDate\", new java.util.Date());\n        eventData.put(\"createUserId\", user.get(\"userId\"));\n        if(host != null) {\n            if (!host.equals(data.get(\"host\"))) {\n                error = \"User can only import page from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            }\n        } else {\n            eventData.remove(\"host\");\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.ImpPageRule",
      "createDate": "2015-03-25T20:20:32.259"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.259",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:71",
    "@version": 1,
    "@class": "Event",
    "eventId": 10072,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.hazelcast.core.ITopic;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class UpdPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        //ITopic topic = ServiceLocator.getInstance().getHzInstance().getTopic(\"page\");\n        //topic.publish(eventMap);\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPage(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.UpdPageEvRule",
      "createDate": "2015-03-25T20:20:32.282"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.282",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:72",
    "@version": 1,
    "@class": "Event",
    "eventId": 10073,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n */\npublic class UpdPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            error = \"You can only update page from host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            if(rid != null) {\n                OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                Vertex page = null;\n                try {\n                    page = DbService.getVertexByRid(graph, rid);\n                    if(page != null) {\n                        int inputVersion = (int)data.get(\"@version\");\n                        int storedVersion = page.getProperty(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"pageId\", data.get(\"pageId\"));\n                            eventData.put(\"content\", data.get(\"content\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    } else {\n                        error = \"Page with @rid \" + rid + \" cannot be found.\";\n                        inputMap.put(\"responseCode\", 404);\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Exception:\", e);\n                    throw e;\n                } finally {\n                    graph.shutdown();\n                }\n            } else {\n                error = \"@rid is required\";\n                inputMap.put(\"responseCode\", 400);\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.UpdPageRule",
      "createDate": "2015-03-25T20:20:32.335"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.334",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:73",
    "@version": 1,
    "@class": "Event",
    "eventId": 10074,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/31/2014.\n */\npublic abstract class AbstractRoleRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractRoleRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected String getRoleById(String roleId) {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex role = (OrientVertex)graph.getVertexByKey(\"Role.roleId\", roleId);\n            if(role != null) {\n                json = role.getRecord().toJSON();\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected void addRole(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex role = graph.addVertex(\"class:Role\", data);\n            createUser.addEdge(\"Create\", role);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void updRole(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            Vertex role = graph.getVertexByKey(\"Role.roleId\", data.get(\"roleId\"));\n            if(role != null) {\n                String host = (String)data.get(\"host\");\n                if(host != null && host.length() > 0) {\n                    if(!host.equals(role.getProperty(\"host\"))) role.setProperty(\"host\", host);\n                } else {\n                    role.removeProperty(\"host\");\n                }\n                String description = (String)data.get(\"description\");\n                if(description != null && !description.equals(role.getProperty(\"description\"))) {\n                    role.setProperty(\"description\", description);\n                }\n                role.setProperty(\"updateDate\", data.get(\"updateDate\"));\n                updateUser.addEdge(\"Update\", role);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void delRole(String roleId) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex role = graph.getVertexByKey(\"Role.roleId\", roleId);\n            if(role != null) {\n                graph.removeVertex(role);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected String getRoles(OrientGraph graph, String host) {\n        String sql = \"SELECT FROM Role\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> roles = graph.getRawGraph().command(query).execute();\n            json = OJSONWriter.listToJSON(roles, null);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getRoleDropdown(String host) throws Exception {\n        String sql = \"SELECT FROM Role\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> roles = graph.getRawGraph().command(query).execute();\n            if(roles.size() > 0) {\n                List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n                for(ODocument doc: roles) {\n                    Map<String, String> map = new HashMap<String, String>();\n                    String roleId = doc.field(\"roleId\");\n                    map.put(\"label\", roleId);\n                    map.put(\"value\", roleId);\n                    list.add(map);\n                }\n                json = mapper.writeValueAsString(list);\n            }\n\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.AbstractRoleRule",
      "createDate": "2015-03-25T20:20:32.364"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.364",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:74",
    "@version": 1,
    "@class": "Event",
    "eventId": 10075,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class AddRoleEvRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addRole(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.AddRoleEvRule",
      "createDate": "2015-03-25T20:20:32.385"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.385",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:75",
    "@version": 1,
    "@class": "Event",
    "eventId": 10076,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * AccessLevel R [owner, admin]\n *\n */\npublic class AddRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add role from host: \" + host;\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String json = getRoleById((String)data.get(\"roleId\"));\n                if(json != null) {\n                    error = \"Id for the role exists\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                }\n            }\n        } else {\n            String json = getRoleById((String)data.get(\"roleId\"));\n            if(json != null) {\n                error = \"Id for the role exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n                // remove host from data as this is owner adding role\n                eventData.remove(\"host\");\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.AddRoleRule",
      "createDate": "2015-03-25T20:20:32.415"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.415",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:76",
    "@version": 1,
    "@class": "Event",
    "eventId": 10077,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class DelRoleEvRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        String roleId = (String)data.get(\"roleId\");\n        delRole(roleId);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.DelRoleEvRule",
      "createDate": "2015-03-25T20:20:32.458"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.458",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:77",
    "@version": 1,
    "@class": "Event",
    "eventId": 10078,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * AccessLevel R [owner, admin]\n *\n */\npublic class DelRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only delete role for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex role = DbService.getVertexByRid(graph, rid);\n                if(role == null) {\n                    error = \"Role with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"roleId\", role.getProperty(\"roleId\"));\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.DelRoleRule",
      "createDate": "2015-03-25T20:20:32.500"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.500",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:78",
    "@version": 1,
    "@class": "Event",
    "eventId": 10079,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/11/14.\n *\n * AccessLevel R [user]\n */\npublic class GetRoleDropdownRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String) user.get(\"host\");\n        String hostRoleDropdown = getRoleDropdown(host);\n        if(hostRoleDropdown != null) {\n            inputMap.put(\"result\", hostRoleDropdown);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No role can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.GetRoleDropdownRule",
      "createDate": "2015-03-25T20:20:32.543"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.543",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:79",
    "@version": 1,
    "@class": "Event",
    "eventId": 10080,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Created by husteve on 10/31/2014.\n *\n * AccessLevel R [owner, admin]\n */\npublic class GetRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String) user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String hostRoles = getRoles(graph, host);\n            if(hostRoles != null) {\n                inputMap.put(\"result\", hostRoles);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No role can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.GetRoleRule",
      "createDate": "2015-03-25T20:20:32.568"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.568",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:80",
    "@version": 1,
    "@class": "Event",
    "eventId": 10081,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/31/2014.\n */\npublic class UpdRoleEvRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updRole(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.UpdRoleEvRule",
      "createDate": "2015-03-25T20:20:32.606"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.606",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:81",
    "@version": 1,
    "@class": "Event",
    "eventId": 10082,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/31/2014.\n */\npublic class UpdRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only update role for host: \" + host;\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                try {\n                    Vertex role = DbService.getVertexByRid(graph, rid);\n                    if(role == null) {\n                        error = \"Role with @rid \" + rid + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        int inputVersion = (int)data.get(\"@version\");\n                        int storedVersion = role.getProperty(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"roleId\", data.get(\"roleId\"));\n                            eventData.put(\"description\", data.get(\"description\"));\n                            eventData.put(\"host\", data.get(\"host\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Exception:\", e);\n                    throw e;\n                } finally {\n                    graph.shutdown();\n                }\n            }\n        } else {\n            try {\n                Vertex role = DbService.getVertexByRid(graph, rid);\n                if(role == null) {\n                    error = \"Role with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    int storedVersion = role.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        inputMap.put(\"responseCode\", 400);\n                        error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"roleId\", data.get(\"roleId\"));\n                        eventData.put(\"description\", data.get(\"description\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        // this is the owner update the role. no host.\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.UpdRoleRule",
      "createDate": "2015-03-25T20:20:32.699"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.699",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:82",
    "@version": 1,
    "@class": "Event",
    "eventId": 10083,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic class AddRuleEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addRule(data);\n        // this is too notify readonly subsystem that the number of rules is changed.\n        // if will only send out event when isPublisher is true for the Rule. Change\n        // it from Rule Admin to enable it or disable it.\n        publishEvent(eventMap);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.AddRuleEvRule",
      "createDate": "2015-03-25T20:20:32.731"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.731",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:83",
    "@version": 1,
    "@class": "Event",
    "eventId": 10084,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n *\n * This is the rule that allow user to add brand new rule from rule admin interface. It will fail\n * if the rule exist in database. And normally, you only construct simple rules on the fly. Most of\n * the time, you should use impRuleRule instead.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n * current R [owner] until workflow is done\n *\n */\npublic class AddRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if(host != null && !ruleClass.contains(host)) {\n                    // you are not allowed to add rule as it is not belong to the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    // check if the rule exists or not\n                    Map<String, Object> ruleMap = getRuleByRuleClass(ruleClass);\n                    if(ruleMap != null) {\n                        error = \"ruleClass for the rule exists\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"host\", host);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            // check if the rule exists or not.\n            Map<String, Object> ruleMap = getRuleByRuleClass((String)data.get(\"ruleClass\"));\n            if(ruleMap != null) {\n                error = \"ruleClass for the rule exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                // This is owner to import rule, notice that no host is passed in.\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.AddRuleRule",
      "createDate": "2015-03-25T20:20:32.803"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.803",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:84",
    "@version": 1,
    "@class": "Event",
    "eventId": 10085,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport net.engio.mbassy.bus.MBassador;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 07/11/14.\n */\npublic class DelRuleEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delRule(data);\n        // this is too notify readonly subsystem that the number of rules is changed.\n        // if will only send out event when isPublisher is true for the Rule. Change\n        // it from Rule Admin to enable it or disable it.\n        publishEvent(eventMap);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.DelRuleEvRule",
      "createDate": "2015-03-25T20:20:32.855"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.855",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:85",
    "@version": 1,
    "@class": "Event",
    "eventId": 10086,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 07/11/14.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n * current R [owner] until workflow approval is done.\n *\n */\npublic class DelRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        int inputVersion = (int)data.get(\"@version\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only delete rule for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex rule = DbService.getVertexByRid(graph, rid);\n                if(rule == null) {\n                    error = \"Rule with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    // check if the ruleClass contains the host.\n                    if(host != null && !ruleClass.contains(host)) {\n                        // you are not allowed to delete access control to the rule as it is not belong to the host.\n                        error = \"ruleClass is not owned by the host: \" + host;\n                        inputMap.put(\"responseCode\", 403);\n                    } else {\n                        int storedVersion = rule.getProperty(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"ruleClass\", ruleClass);\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.DelRuleRule",
      "createDate": "2015-03-25T20:20:32.880"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.880",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:86",
    "@version": 1,
    "@class": "Event",
    "eventId": 10087,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 31/01/15.\n *\n * AccessLevel R [user]\n *\n */\npublic class GetRuleDropdownRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            inputMap.put(\"result\", \"Login is required\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        } else {\n            Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n            String host = (String) user.get(\"host\");\n            String hostRuleDropdown = getRuleDropdown(host);\n            if(hostRuleDropdown != null) {\n                inputMap.put(\"result\", hostRuleDropdown);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No rule can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.GetRuleDropdownRule",
      "createDate": "2015-03-25T20:20:32.917"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.917",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:87",
    "@version": 1,
    "@class": "Event",
    "eventId": 10088,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class GetRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\") || roles.contains(\"admin\") || roles.contains(\"ruleAdmin\")) {\n            String host = (String) user.get(\"host\");\n            String hostRules = getRules(host);\n            if(hostRules != null) {\n                inputMap.put(\"result\", hostRules);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No rule can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"Permission denied\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.GetRuleRule",
      "createDate": "2015-03-25T20:20:32.940"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.940",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:88",
    "@version": 1,
    "@class": "Event",
    "eventId": 10089,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 30/12/14.\n */\npublic class ImpRuleEvRule extends AbstractRuleRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(ImpRuleEvRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        impRule(data);\n        // this is too notify readonly subsystem that the number of rules is changed.\n        // if will only send out event when isPublisher is true for the Rule. Change\n        // it from Rule Admin to enable it or disable it.\n        publishEvent(eventMap);\n        return true;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.ImpRuleEvRule",
      "createDate": "2015-03-25T20:20:32.981"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:32.981",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:89",
    "@version": 1,
    "@class": "Event",
    "eventId": 10090,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/03/15.\n */\npublic class UpdCorsEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updCors(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdCorsEvRule",
      "createDate": "2015-03-25T20:20:33.011"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.011",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:90",
    "@version": 1,
    "@class": "Event",
    "eventId": 10091,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/03/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdCorsRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            eventData.put(\"enableCors\", data.get(\"enableCors\"));\n            String corsHosts = (String)data.get(\"corsHosts\");\n            if(corsHosts != null) {\n                eventData.put(\"corsHosts\", corsHosts);\n            }\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdCorsRule",
      "createDate": "2015-03-25T20:20:33.037"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.037",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:91",
    "@version": 1,
    "@class": "Event",
    "eventId": 10092,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/03/15.\n */\npublic class UpdEtagEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updEtag(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdEtagEvRule",
      "createDate": "2015-03-25T20:20:33.070"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.070",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:92",
    "@version": 1,
    "@class": "Event",
    "eventId": 10093,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/03/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdEtagRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            eventData.put(\"enableEtag\", data.get(\"enableEtag\"));\n            String cacheControl = (String)data.get(\"cacheControl\");\n            if(cacheControl != null) {\n                eventData.put(\"cacheControl\", cacheControl);\n            }\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdEtagRule",
      "createDate": "2015-03-25T20:20:33.101"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.101",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:93",
    "@version": 1,
    "@class": "Event",
    "eventId": 10094,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by hus5 on 3/10/2015.\n */\npublic class UpdPublisherEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPublisher(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdPublisherEvRule",
      "createDate": "2015-03-25T20:20:33.123"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.123",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:94",
    "@version": 1,
    "@class": "Event",
    "eventId": 10095,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 3/10/2015.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdPublisherRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            eventData.put(\"isPublisher\", data.get(\"isPublisher\"));\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdPublisherRule",
      "createDate": "2015-03-25T20:20:33.139"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.139",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:95",
    "@version": 1,
    "@class": "Event",
    "eventId": 10096,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic class UpdRuleEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updRule(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdRuleEvRule",
      "createDate": "2015-03-25T20:20:33.168"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.168",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:96",
    "@version": 1,
    "@class": "Event",
    "eventId": 10097,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n * current R [owner]\n */\npublic class UpdRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        int inputVersion = (int)data.get(\"@version\");\n        String rid = (String)data.get(\"@rid\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"You can only update rule for host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // make sure the ruleClass contains the host.\n                if(host != null && !ruleClass.contains(host)) {\n                    // you are not allowed to update rule as it is not owned by the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                }\n            }\n        }\n        if(error == null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex rule = DbService.getVertexByRid(graph, rid);\n                if(rule == null) {\n                    error = \"Rule with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    int storedVersion = rule.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", ruleClass);\n                        eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdRuleRule",
      "createDate": "2015-03-25T20:20:33.196"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.196",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:97",
    "@version": 1,
    "@class": "Event",
    "eventId": 10098,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 22/03/15.\n */\npublic class UpdSchemaEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updSchema(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdSchemaEvRule",
      "createDate": "2015-03-25T20:20:33.232"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.232",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:98",
    "@version": 1,
    "@class": "Event",
    "eventId": 10099,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 22/03/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdSchemaRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            String schema = (String)data.get(\"schema\");\n            if(schema != null) {\n                eventData.put(\"schema\", schema);\n            }\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdSchemaRule",
      "createDate": "2015-03-25T20:20:33.258"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.258",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:99",
    "@version": 1,
    "@class": "Event",
    "eventId": 10100,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 10/03/15.\n */\npublic class UpdSubscriberEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updSubscriber(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdSubscriberEvRule",
      "createDate": "2015-03-25T20:20:33.286"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.286",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:100",
    "@version": 1,
    "@class": "Event",
    "eventId": 10101,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 10/03/15.\n */\npublic class UpdSubscriberRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventMap);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            eventData.put(\"isSubscriber\", data.get(\"isSubscriber\"));\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdSubscriberRule",
      "createDate": "2015-03-25T20:20:33.313"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.313",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:101",
    "@version": 1,
    "@class": "Event",
    "eventId": 10102,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 16/02/15.\n */\npublic abstract class AbstractTransformRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractTransformRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void addTransformRequest(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            // transformData is a json string, convert it to map.\n            Object transformData = data.get(\"transformData\");\n            if(transformData != null) {\n                Map<String, Object> map = mapper.readValue((String)transformData,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                data.put(\"transformData\", map);\n            }\n            OrientVertex transform = graph.addVertex(\"class:TransformRequest\", data);\n            createUser.addEdge(\"Create\", transform);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected void addTransformResponse(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            Object transformData = data.get(\"transformData\");\n            if(transformData != null) {\n                Map<String, Object> map = mapper.readValue((String)transformData,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                data.put(\"transformData\", map);\n            }\n            OrientVertex transform = graph.addVertex(\"class:TransformResponse\", data);\n            createUser.addEdge(\"Create\", transform);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected void updTransformRequest(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OIndex<?> reqRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ReqRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"ruleClass\"), data.get(\"sequence\"));\n            OIdentifiable oid = (OIdentifiable) reqRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                transform.field(\"transformRule\", data.get(\"transformRule\"));\n                // transformData is a json string, convert it to map.\n                Object transformData = data.get(\"transformData\");\n                if(transformData != null) {\n                    Map<String, Object> map = mapper.readValue((String)transformData,\n                            new TypeReference<HashMap<String, Object>>() {\n                            });\n                    transform.field(\"transformData\", map);\n                }\n                transform.field(\"updateDate\", data.get(\"updateDate\"));\n                transform.field(\"updateUserId\", data.get(\"updateUserId\"));\n                transform.save();\n                graph.commit();\n            }\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected void updTransformResponse(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OIndex<?> resRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ResRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"ruleClass\"), data.get(\"sequence\"));\n            OIdentifiable oid = (OIdentifiable) resRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                transform.field(\"transformRule\", data.get(\"transformRule\"));\n                // transformData is a json string, convert it to map.\n                Object transformData = data.get(\"transformData\");\n                if(transformData != null) {\n                    Map<String, Object> map = mapper.readValue((String)transformData,\n                            new TypeReference<HashMap<String, Object>>() {\n                            });\n                    transform.field(\"transformData\", map);\n                }\n                transform.field(\"updateDate\", data.get(\"updateDate\"));\n                transform.field(\"updateUserId\", data.get(\"updateUserId\"));\n                transform.save();\n                graph.commit();\n            }\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected void delTransformRequest(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OIndex<?> reqRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ReqRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"ruleClass\"), data.get(\"sequence\"));\n            OIdentifiable oid = (OIdentifiable) reqRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                transform.delete();\n                transform.save();\n                graph.commit();\n            }\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected void delTransformResponse(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OIndex<?> resRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ResRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"ruleClass\"), data.get(\"sequence\"));\n            OIdentifiable oid = (OIdentifiable) resRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                transform.delete();\n                transform.save();\n                graph.commit();\n            }\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n    /*\n    public List<Map<String, Object>> getTransformRequest(String ruleClass) {\n        String sql = \"SELECT FROM TransformRequest WHERE ruleClass = '\" + ruleClass + \"' ORDER BY sequence\";\n        List<Map<String, Object>> transforms = null;\n\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            ruleMap.put(\"cache\", cache);\n        } else {\n            Map<String, Object> rule = (Map<String, Object>)cache.get(ruleClass);\n            if(rule != null) {\n                transforms = (List<Map<String, Object>>)rule.get(\"transformRequest\");\n            }\n        }\n        if(transforms == null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n                List<ODocument> docs = graph.getRawGraph().command(query).execute();\n                transforms = new ArrayList<Map<String, Object>> ();\n                if(docs != null) {\n                    for(ODocument doc: docs) {\n                        Map<String, Object> map = new HashMap<String, Object> ();\n                        map.put(\"sequence\", doc.field(\"sequence\"));\n                        map.put(\"transformRule\", doc.field(\"transformRule\"));\n                        map.put(\"transformData\", doc.field(\"transformData\"));\n                        map.put(\"createUserId\", doc.field(\"createUserId\"));\n                        transforms.add(map);\n                    }\n                }\n                // put an empty list into the cache if no transform rules available. This can avoid access db every time the cache is hit.\n                Map<String, Object> rule = (Map<String, Object>)cache.get(ruleClass);\n                if(rule != null) {\n                    rule.put(\"transformRequest\", transforms);\n                } else {\n                    rule = new HashMap<String, Object>();\n                    rule.put(\"transformRequest\", transforms);\n                    cache.put(ruleClass, rule);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        return transforms;\n    }\n\n    public List<Map<String, Object>> getTransformResponse(String ruleClass) {\n        String sql = \"SELECT FROM TransformResponse WHERE ruleClass = '\" + ruleClass + \"' ORDER BY sequence\";\n        List<Map<String, Object>> transforms = null;\n\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            ruleMap.put(\"cache\", cache);\n        } else {\n            Map<String, Object> rule = (Map<String, Object>)cache.get(ruleClass);\n            if(rule != null) {\n                transforms = (List<Map<String, Object>>)rule.get(\"transformResponse\");\n            }\n        }\n        if(transforms == null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n                List<ODocument> docs = graph.getRawGraph().command(query).execute();\n                transforms = new ArrayList<Map<String, Object>> ();\n                if(docs != null) {\n                    for(ODocument doc: docs) {\n                        Map<String, Object> map = new HashMap<String, Object> ();\n                        map.put(\"sequence\", doc.field(\"sequence\"));\n                        map.put(\"transformRule\", doc.field(\"transformRule\"));\n                        map.put(\"transformData\", doc.field(\"transformData\"));\n                        map.put(\"createUserId\", doc.field(\"createUserId\"));\n                        transforms.add(map);\n                    }\n                }\n                // put an empty list into the cache if no transform rules available. This can avoid access db every time the cache is hit.\n                Map<String, Object> rule = (Map<String, Object>)cache.get(ruleClass);\n                if(rule != null) {\n                    rule.put(\"transformResponse\", transforms);\n                } else {\n                    rule = new HashMap<String, Object>();\n                    rule.put(\"transformResponse\", transforms);\n                    cache.put(ruleClass, rule);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        return transforms;\n    }\n    */\n    protected String getTransformRequestBySeq(String ruleClass, Integer sequence) {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OIndex<?> reqRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ReqRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(ruleClass, sequence);\n            OIdentifiable oid = (OIdentifiable) reqRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                json = transform.toJSON();\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getTransformResponseBySeq(String ruleClass, Integer sequence) {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OIndex<?> resRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ResRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(ruleClass, sequence);\n            OIdentifiable oid = (OIdentifiable) resRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                json = transform.toJSON();\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.AbstractTransformRule",
      "createDate": "2015-03-25T20:20:33.348"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.348",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:102",
    "@version": 1,
    "@class": "Event",
    "eventId": 10103,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.access.AbstractAccessRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n */\npublic class AddTransformRequestEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addTransformRequest(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.AddTransformRequestEvRule",
      "createDate": "2015-03-25T20:20:33.368"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.368",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:103",
    "@version": 1,
    "@class": "Event",
    "eventId": 10104,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.role.AbstractRoleRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class AddTransformRequestRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin adding transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    // you are not allowed to update transform rule to the rule as it is not owned by the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformRequestBySeq(ruleClass, sequence);\n                    if(json != null) {\n                        error = \"Transform rule exists for the sequence\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                        eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                        eventData.put(\"transformData\", data.get(\"transformData\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformRequestBySeq(ruleClass, sequence);\n            if(json != null) {\n                error = \"Transform rule exists for the sequence\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n                eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                eventData.put(\"transformData\", data.get(\"transformData\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.AddTransformRequestRule",
      "createDate": "2015-03-25T20:20:33.383"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.383",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:104",
    "@version": 1,
    "@class": "Event",
    "eventId": 10105,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/02/15.\n */\npublic class AddTransformResponseEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addTransformResponse(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.AddTransformResponseEvRule",
      "createDate": "2015-03-25T20:20:33.412"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.412",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:105",
    "@version": 1,
    "@class": "Event",
    "eventId": 10106,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class AddTransformResponseRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin adding transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    // you are not allowed to update transform rule to the rule as it is not owned by the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformResponseBySeq(ruleClass, sequence);\n                    if(json != null) {\n                        error = \"Transform rule exists for the sequence\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                        eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                        eventData.put(\"transformData\", data.get(\"transformData\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformResponseBySeq(ruleClass, sequence);\n            if(json != null) {\n                error = \"Transform rule exists for the sequence\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n                eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                eventData.put(\"transformData\", data.get(\"transformData\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.AddTransformResponseRule",
      "createDate": "2015-03-25T20:20:33.434"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.434",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:106",
    "@version": 1,
    "@class": "Event",
    "eventId": 10107,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n *\n * This is a transform rule that support Beta testing on production. When you change the API that is backward\n * compatible, you can test it on your local and then deploy it on production for testing. For certain loyal users\n * or employees, you can give them a role called betaTester in their profile. This rule will be applied before\n * API end point is reached, so that the end point can be version 1 which has no betaTester role and version 2 which\n * has betaTester role. In normal case, it will route to rule class HelloWorld.class or HelloWorld1.class if the user\n * is betaTester. Once beta testing is done, you can route all traffic to HelloWorld1.class. Later on, you want to change\n * the rule again you can create HelloWorld2.class and route betaTester to it. This can goes on and on.\n *\n * Please note: Beta testing is only for backward compatible changes. If not, one should have two versions of clients\n * to connect to two different API class in different packages.\n *\n * When set up this rule, you should have two entries in transformData beta and production to point to the right\n * class name of the rules.\n *\n * AccessLevel N as it is internal.\n *\n */\npublic class BetaTestRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(BetaTestRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> transformData = (Map<String, Object>)inputMap.remove(\"transformData\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload != null) {\n            Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n            List roles = (List) user.get(\"roles\");\n            if (roles.contains(\"betaTester\")) {\n                inputMap.put(\"name\", transformData.get(\"beta\"));\n            } else {\n                inputMap.put(\"name\", transformData.get(\"production\"));\n            }\n        } else {\n            inputMap.put(\"name\", transformData.get(\"production\"));\n        }\n        return true;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.BetaTestRule",
      "createDate": "2015-03-25T20:20:33.470"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.470",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:107",
    "@version": 1,
    "@class": "Event",
    "eventId": 10108,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n */\npublic class DelTransformRequestEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delTransformRequest(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.DelTransformRequestEvRule",
      "createDate": "2015-03-25T20:20:33.493"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.493",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:108",
    "@version": 1,
    "@class": "Event",
    "eventId": 10109,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n */\npublic class DelTransformRequestRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin deleting transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only delete transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformRequestBySeq(ruleClass, sequence);\n                    if(json == null) {\n                        error = \"Transform rule does not exist\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformRequestBySeq(ruleClass, sequence);\n            if(json == null) {\n                error = \"Transform rule does not exist\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.DelTransformRequestRule",
      "createDate": "2015-03-25T20:20:33.514"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.514",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:109",
    "@version": 1,
    "@class": "Event",
    "eventId": 10110,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/02/15.\n */\npublic class DelTransformResponseEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delTransformResponse(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.DelTransformResponseEvRule",
      "createDate": "2015-03-25T20:20:33.533"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.533",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:110",
    "@version": 1,
    "@class": "Event",
    "eventId": 10111,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n */\npublic class DelTransformResponseRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin deleting transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only delete transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformResponseBySeq(ruleClass, sequence);\n                    if(json == null) {\n                        error = \"Transform rule does not exist\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformResponseBySeq(ruleClass, sequence);\n            if(json == null) {\n                error = \"Transform rule does not exist\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.DelTransformResponseRule",
      "createDate": "2015-03-25T20:20:33.554"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.554",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:111",
    "@version": 1,
    "@class": "Event",
    "eventId": 10112,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n *\n * Get all request transform rules for a ruleClass\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class GetTransformRequestRule extends AbstractTransformRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(GetTransformRequestRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Map ruleMap = AbstractRule.getRuleByRuleClass(ruleClass);\n        if(ruleMap != null) {\n            List<Map<String, Object>> reqTransforms = (List) ruleMap.get(\"reqTransforms\");\n            if(reqTransforms != null && reqTransforms.size() > 0) {\n                inputMap.put(\"result\", mapper.writeValueAsString(reqTransforms));\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No transform can be found for ruleClass\" + ruleClass);\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"No rule can be found for ruleClass\" + ruleClass);\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.GetTransformRequestRule",
      "createDate": "2015-03-25T20:20:33.583"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.583",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:112",
    "@version": 1,
    "@class": "Event",
    "eventId": 10113,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 21/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class GetTransformResponseRule extends AbstractTransformRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(GetTransformResponseRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Map ruleMap = AbstractRule.getRuleByRuleClass(ruleClass);\n        if(ruleMap != null) {\n            List<Map<String, Object>> resTransforms = (List) ruleMap.get(\"resTransforms\");\n            if(resTransforms != null && resTransforms.size() > 0) {\n                inputMap.put(\"result\", mapper.writeValueAsString(resTransforms));\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No transform can be found for ruleClass\" + ruleClass);\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"No rule can be found for ruleClass\" + ruleClass);\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.GetTransformResponseRule",
      "createDate": "2015-03-25T20:20:33.636"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.636",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:113",
    "@version": 1,
    "@class": "Event",
    "eventId": 10114,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n */\npublic class UpdTransformRequestEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updTransformRequest(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.UpdTransformRequestEvRule",
      "createDate": "2015-03-25T20:20:33.662"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.662",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:114",
    "@version": 1,
    "@class": "Event",
    "eventId": 10115,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdTransformRequestRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin adding transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only update transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    // you are not allowed to update transform rule to the rule as it is not owned by the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformRequestBySeq(ruleClass, sequence);\n                    if(json == null) {\n                        error = \"Transform rule does not exist\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                        eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                        eventData.put(\"transformData\", data.get(\"transformData\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformRequestBySeq(ruleClass, sequence);\n            if(json == null) {\n                error = \"Transform rule doesnot exist\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n                eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                eventData.put(\"transformData\", data.get(\"transformData\"));\n                eventData.put(\"updateDate\", new java.util.Date());\n                eventData.put(\"updateUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.UpdTransformRequestRule",
      "createDate": "2015-03-25T20:20:33.695"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.695",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:115",
    "@version": 1,
    "@class": "Event",
    "eventId": 10116,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/02/15.\n */\npublic class UpdTransformResponseEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updTransformResponse(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.UpdTransformResponseEvRule",
      "createDate": "2015-03-25T20:20:33.721"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.721",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:116",
    "@version": 1,
    "@class": "Event",
    "eventId": 10117,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdTransformResponseRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin adding transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only update transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    // you are not allowed to update transform rule to the rule as it is not owned by the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformResponseBySeq(ruleClass, sequence);\n                    if(json == null) {\n                        error = \"Transform rule does not exist\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                        eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                        eventData.put(\"transformData\", data.get(\"transformData\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformResponseBySeq(ruleClass, sequence);\n            if(json == null) {\n                error = \"Transform rule doesnot exist\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n                eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                eventData.put(\"transformData\", data.get(\"transformData\"));\n                eventData.put(\"updateDate\", new java.util.Date());\n                eventData.put(\"updateUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.UpdTransformResponseRule",
      "createDate": "2015-03-25T20:20:33.746"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.746",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:117",
    "@version": 1,
    "@class": "Event",
    "eventId": 10118,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 8/29/2014.\n */\npublic class DelUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delUser(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DelUserEvRule",
      "createDate": "2015-03-25T20:20:33.763"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.763",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:118",
    "@version": 1,
    "@class": "Event",
    "eventId": 10119,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 8/29/2014.\n *\n * AccessLevel R [owner, admin, userAdmin]\n */\npublic class DelUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String userId = (String)data.get(\"userId\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"You can only delete user from host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            if(rid == null && userId == null) {\n                error = \"rid or userId is required\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                Vertex deleteUser = null;\n                try {\n                    if(rid != null) {\n                        deleteUser = DbService.getVertexByRid(graph, rid);\n                        if(deleteUser == null) {\n                            error = \"User with rid \" + rid + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                        }\n                    } else {\n                        deleteUser = getUserByUserId(graph, userId);\n                        if(deleteUser == null) {\n                            error = \"User with userId \" + userId + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                        }\n                    }\n                    if(deleteUser != null) {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"userId\", deleteUser.getProperty(\"userId\").toString());\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Exception:\", e);\n                    throw e;\n                } finally {\n                    graph.shutdown();\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DelUserRule",
      "createDate": "2015-03-25T20:20:33.778"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.778",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:119",
    "@version": 1,
    "@class": "Event",
    "eventId": 10120,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class DownUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        downVoteUser(data);\n        // TODO refresh hot user list and code user list\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DownUserEvRule",
      "createDate": "2015-03-25T20:20:33.798"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.798",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:120",
    "@version": 1,
    "@class": "Event",
    "eventId": 10121,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * Vote down a user\n *\n * AccessLevel R [user]\n *\n */\npublic class DownUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Map<String,Object> userMap = (Map<String, Object>)payload.get(\"user\");\n            String voteUserId = (String)userMap.get(\"userId\");\n            String userRid = (String)data.get(\"@rid\");\n            OrientVertex user = (OrientVertex)DbService.getVertexByRid(graph, userRid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", voteUserId);\n            if(user == null || voteUser == null) {\n                error = \"User or vote user cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if this VoteUserId has down voted user before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(user, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(user)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have down vote the user already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"userId\", user.getProperty(\"userId\"));\n                    eventData.put(\"voteUserId\", voteUserId);\n                    eventData.put(\"updateDate\", new java.util.Date());\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DownUserRule",
      "createDate": "2015-03-25T20:20:33.820"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.820",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:121",
    "@version": 1,
    "@class": "Event",
    "eventId": 10122,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Created by steve on 26/10/14.\n *\n * Get all users in a list for user admin page. pagination is supported in db level\n *\n * AccessLevel R [owner, admin, userAdmin]\n *\n */\npublic class GetAllUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                inputMap.put(\"result\", \"You can only get all users from host: \" + host);\n                inputMap.put(\"responseCode\", 403);\n                return false;\n            }\n        } else {\n            // retrieve everything as this is the owner\n            data.remove(\"host\"); // removed the host added by RestHandler.\n        }\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            long total = getTotalNumberUserFromDb(graph, data);\n            if(total > 0) {\n                String json = getUserFromDb(graph, data);\n                List<Map<String, Object>> users\n                        = mapper.readValue(json, new TypeReference<List<HashMap<String, Object>>>() {});\n                Map<String, Object> result = new HashMap<String, Object>();\n                result.put(\"total\", total);\n                result.put(\"users\", users);\n                inputMap.put(\"result\", mapper.writeValueAsString(result));\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No user can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.GetAllUserRule",
      "createDate": "2015-03-25T20:20:33.847"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.847",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:122",
    "@version": 1,
    "@class": "Event",
    "eventId": 10123,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/28/2014.\n *\n * Get a single user profile\n *\n * AccessLevel R [user]\n *\n */\npublic class GetUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String email = (String) data.get(\"email\");\n        String userId = (String) data.get(\"userId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            if(rid != null) {\n                OrientVertex user = (OrientVertex)DbService.getVertexByRid(graph, rid);\n                if(user != null) {\n                    inputMap.put(\"result\", user.getRecord().toJSON());\n                    return true;\n                } else {\n                    inputMap.put(\"result\", \"User with rid \" + rid + \" cannot be found.\");\n                    inputMap.put(\"responseCode\", 404);\n                    return false;\n                }\n            } else if(userId != null) {\n                OrientVertex user = (OrientVertex)getUserByUserId(graph, userId);\n                if(user != null) {\n                    inputMap.put(\"result\", user.getRecord().toJSON());\n                    return true;\n                } else {\n                    inputMap.put(\"result\", \"User with userId \" + userId + \" cannot be found.\");\n                    inputMap.put(\"responseCode\", 404);\n                    return false;\n                }\n            } else if(email != null) {\n                OrientVertex user = (OrientVertex)getUserByEmail(graph, email);\n                if(user != null) {\n                    inputMap.put(\"result\", user.getRecord().toJSON());\n                    return true;\n                } else {\n                    inputMap.put(\"result\", \"User with email \" + email + \" cannot be found.\");\n                    inputMap.put(\"responseCode\", 404);\n                    return false;\n                }\n            } else {\n                inputMap.put(\"result\", \"@rid or userId or email is required.\");\n                inputMap.put(\"responseCode\", 400);\n                return false;\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.GetUserRule",
      "createDate": "2015-03-25T20:20:33.884"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.884",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:123",
    "@version": 1,
    "@class": "Event",
    "eventId": 10124,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class LockUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updLockByUserId(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.LockUserEvRule",
      "createDate": "2015-03-25T20:20:33.907"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.907",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:124",
    "@version": 1,
    "@class": "Event",
    "eventId": 10125,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * lock a user\n *\n * AccessLevel R [owner, admin, userAdmin]\n *\n */\npublic class LockUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only lock user from host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex lockUser = null;\n                if(rid != null) {\n                    lockUser = DbService.getVertexByRid(graph, rid);\n                    if(lockUser != null) {\n                        if(lockUser.getProperty(\"locked\") != null && (Boolean)lockUser.getProperty(\"locked\")) {\n                            error = \"User with @rid \" + rid + \" has been locked already\";\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"userId\", lockUser.getProperty(\"userId\"));\n                            eventData.put(\"locked\", true);\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    } else {\n                        error = \"User with @rid \" + rid + \" cannot be found.\";\n                        inputMap.put(\"responseCode\", 404);\n                    }\n                } else {\n                    error = \"@rid is required\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.LockUserRule",
      "createDate": "2015-03-25T20:20:33.943"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.943",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:125",
    "@version": 1,
    "@class": "Event",
    "eventId": 10126,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 9/24/2014.\n */\npublic class LogOutUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        logOut(data);\n        // TODO update global online user count\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.LogOutUserEvRule",
      "createDate": "2015-03-25T20:20:33.978"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:33.978",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:126",
    "@version": 1,
    "@class": "Event",
    "eventId": 10127,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 9/24/2014.\n *\n * log out a user.\n *\n * AccessLevel R [user]\n *\n */\npublic class LogOutUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        // The assumption is that user should have a token when he/she click logout.\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)user.get(\"@rid\");\n        // check if the rid exists or not. if exists, then create event.\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex vertex = DbService.getVertexByRid(graph, rid);\n            if(vertex != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"userId\", vertex.getProperty(\"userId\"));\n                eventData.put(\"host\", data.get(\"host\"));\n                eventData.put(\"refreshToken\", data.get(\"refreshToken\"));\n                eventData.put(\"logOutDate\", new java.util.Date());\n            } else {\n                error = \"User with @rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.LogOutUserRule",
      "createDate": "2015-03-25T20:20:34.015"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:34.015",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:127",
    "@version": 1,
    "@class": "Event",
    "eventId": 10128,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by steve on 19/09/14.\n *\n * get an access token with a refresh token\n *\n * AccessLevel R [user]\n */\npublic class RefreshTokenRule extends AbstractUserRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n\n        String refreshToken = (String)data.get(\"refreshToken\");\n        String userId = (String)data.get(\"userId\");\n        String clientId = (String)data.get(\"clientId\");\n        if(refreshToken == null || userId == null || clientId == null) {\n            inputMap.put(\"responseCode\", 401);\n            error = \"Refresh token or userId or clientId is missing\";\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex user = getUserByUserId(graph, userId);\n                if(user != null) {\n                    Vertex credential = user.getProperty(\"credential\");\n                    if (checkRefreshToken(credential, clientId, refreshToken)) {\n                        String jwt = generateToken(user, clientId);\n                        if (jwt != null) {\n                            Map<String, String> tokens = new HashMap<String, String>();\n                            tokens.put(\"accessToken\", jwt);\n                            inputMap.put(\"result\", mapper.writeValueAsString(tokens));\n                        }\n                    } else {\n                        error = \"Invalid refresh token\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                } else {\n                    error = \"The userId \" + userId + \" has not been registered\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.RefreshTokenRule",
      "createDate": "2015-03-25T20:20:34.037"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:34.037",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:128",
    "@version": 1,
    "@class": "Event",
    "eventId": 10129,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 20/01/15.\n */\npublic class RevokeRefreshTokenEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        revokeRefreshToken(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.RevokeRefreshTokenEvRule",
      "createDate": "2015-03-25T20:20:34.111"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:34.111",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:129",
    "@version": 1,
    "@class": "Event",
    "eventId": 10130,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 20/01/15.\n *\n * revoke refresh token if user's device is lost or forget to log out on public computer.\n *\n * user role can only revoke refresh token belongs to the current user.\n *\n * AccessLevel R [owner, admin, userAdmin, user]\n *\n */\npublic class RevokeRefreshTokenRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String password = (String)data.get(\"password\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> userMap = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)userMap.get(\"@rid\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex user = DbService.getVertexByRid(graph, rid);\n            if(user != null) {\n                // check password again\n                if(checkPassword(graph, user, password)) {\n                    // check if there are refresh tokens for the user\n                    Vertex credential = user.getProperty(\"credential\");\n                    if(credential != null) {\n                        Map clientRefreshTokens = credential.getProperty(\"clientRefreshTokens\");\n                        if(clientRefreshTokens != null) {\n                            // generate the event to remove it.\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"userId\", user.getProperty(\"userId\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                        }\n                    }\n                } else {\n                    error = \"Invalid password\";\n                    inputMap.put(\"responseCode\", 401);\n                }\n            } else {\n                error = \"User with rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.RevokeRefreshTokenRule",
      "createDate": "2015-03-25T20:20:34.179"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:34.179",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:130",
    "@version": 1,
    "@class": "Event",
    "eventId": 10131,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/28/2014.\n */\npublic class SignUpUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addUser(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.SignUpUserEvRule",
      "createDate": "2015-03-25T20:20:34.201"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:34.201",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:131",
    "@version": 1,
    "@class": "Event",
    "eventId": 10132,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 8/29/2014.\n * need to check both email and displayName uniqueness.\n *\n * AccessLevel A\n *\n */\npublic class SignUpUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String email = (String) data.get(\"email\");\n        String userId = (String) data.get(\"userId\");\n        String error = null;\n\n        // need to make sure that email and userId are unique.\n        // skip the cache and go to db directly?\n        if(isUserInDbByEmail(email)) {\n            error = \"The email address \" + email + \" has been signed up. Please login or recover your password.\";\n            inputMap.put(\"responseCode\", 400);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n\n            if(isUserInDbByUserId(userId)) {\n                error = \"The userId \" + userId + \" has been used by another user.\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                // check if password and password_confirm are the same.\n                String password = (String) data.get(\"password\");\n                String passwordConfirm = (String)data.remove(\"passwordConfirm\");\n                // after schema validation in the backend password and password_confirm should not be empty.\n                if(!password.equals(passwordConfirm)) {\n                    error = \"password and password confirm are not the same\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll(data);\n                    // replace the password with the hashed password.\n                    password = HashUtil.generateStorngPasswordHash(password);\n                    eventData.put(\"password\", password);\n                    // set default values here.\n                    eventData.put(\"karma\", 0);\n                    List<String> roles = new ArrayList<String>();\n                    roles.add(\"user\"); // default role for sign up users, more roles can be added later by admin\n                    eventData.put(\"roles\", roles);\n                    eventData.put(\"createDate\", new java.util.Date());\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.SignUpUserRule",
      "createDate": "2015-03-25T20:20:34.219"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:34.219",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:132",
    "@version": 1,
    "@class": "Event",
    "eventId": 10133,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class UnlockUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updLockByUserId(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UnlockUserEvRule",
      "createDate": "2015-03-25T20:20:34.235"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:34.235",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:133",
    "@version": 1,
    "@class": "Event",
    "eventId": 10134,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * Unlock a locked user\n *\n * AccessLevel R [owner, admin, userAdmin]\n *\n */\npublic class UnlockUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only unlock user from host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex lockUser = null;\n                if(rid != null) {\n                    lockUser = DbService.getVertexByRid(graph, rid);\n                    if(lockUser != null) {\n                        if(lockUser.getProperty(\"locked\") != null && !(Boolean)lockUser.getProperty(\"locked\")) {\n                            error = \"User with @rid \" + rid + \" is not locked\";\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"userId\", lockUser.getProperty(\"userId\"));\n                            eventData.put(\"locked\", false);\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    } else {\n                        error = \"User with @rid \" + rid + \" cannot be found.\";\n                        inputMap.put(\"responseCode\", 404);\n                    }\n                } else {\n                    error = \"@rid is required\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UnlockUserRule",
      "createDate": "2015-03-25T20:20:34.255"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:34.255",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:134",
    "@version": 1,
    "@class": "Event",
    "eventId": 10135,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 8/28/2014.\n */\npublic class UpdPasswordEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPassword(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdPasswordEvRule",
      "createDate": "2015-03-25T20:20:34.282"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:34.282",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:135",
    "@version": 1,
    "@class": "Event",
    "eventId": 10136,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/29/2014.\n *\n * Logged in user update its own password\n *\n * AccessLevel R [user]\n *\n */\npublic class UpdPasswordRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)user.get(\"@rid\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex updateUser = DbService.getVertexByRid(graph, rid);\n            if(updateUser != null) {\n                String password = (String) data.get(\"password\");\n                String newPassword = (String)data.get(\"newPassword\");\n                String passwordConfirm = (String)data.get(\"passwordConfirm\");\n\n                // check if the password match\n                boolean match = checkPassword(graph, updateUser, password);\n                if(match) {\n                    if(newPassword.equals(passwordConfirm)) {\n                        newPassword = HashUtil.generateStorngPasswordHash(newPassword);\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"userId\", updateUser.getProperty(\"userId\"));\n                        eventData.put(\"password\", newPassword);\n                        eventData.put(\"updateDate\", new java.util.Date());\n                    } else {\n                        error = \"New password and password confirm are not the same.\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                } else {\n                    error = \"The old password is incorrect.\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } else {\n                error = \"User with rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdPasswordRule",
      "createDate": "2015-03-25T20:20:34.312"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:34.312",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:136",
    "@version": 1,
    "@class": "Event",
    "eventId": 10137,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/28/2014.\n */\npublic class UpdProfileEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updUser(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdProfileEvRule",
      "createDate": "2015-03-25T20:20:34.331"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:34.331",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:137",
    "@version": 1,
    "@class": "Event",
    "eventId": 10138,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 8/29/2014.\n *\n * Logged in user updates its profile\n *\n * AccessLevel R [user]\n *\n */\npublic class UpdProfileRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)user.get(\"@rid\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex updateUser = DbService.getVertexByRid(graph, rid);\n            if(updateUser != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll(data);\n                eventData.put(\"updateDate\", new java.util.Date());\n            } else {\n                error = \"User with rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdProfileRule",
      "createDate": "2015-03-25T20:20:34.366"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:34.366",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:138",
    "@version": 1,
    "@class": "Event",
    "eventId": 10139,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class UpdRoleEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updRole(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdRoleEvRule",
      "createDate": "2015-03-25T20:20:34.395"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:34.395",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:139",
    "@version": 1,
    "@class": "Event",
    "eventId": 10140,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n *\n * Update role for a user.\n *\n * AccessLevel R [owner, admin, userAdmin]\n *\n */\npublic class UpdRoleRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String userHost = (String) user.get(\"host\");\n        if (userHost != null) {\n            // this is admin role to update user role\n            if(!userHost.equals(data.get(\"host\"))) {\n                error = \"admin can only update user role from host: \" + userHost;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // TODO make sure all the newly added roles belongs to the host\n            }\n        } else {\n            // this is owner update user role\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.put(\"userId\", data.get(\"userId\"));\n            eventData.put(\"roles\", data.get(\"roles\"));\n            eventData.put(\"updateUserId\", user.get(\"userId\"));\n            eventData.put(\"updateDate\", new java.util.Date());\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdRoleRule",
      "createDate": "2015-03-25T20:20:34.410"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:34.410",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:140",
    "@version": 1,
    "@class": "Event",
    "eventId": 10141,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class UpUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upVoteUser(data);\n        // TODO refresh hot user list and cold user list\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpUserEvRule",
      "createDate": "2015-03-25T20:20:34.426"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:34.426",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:141",
    "@version": 1,
    "@class": "Event",
    "eventId": 10142,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * Vote up a user\n *\n * AccessLevel R [user]\n */\npublic class UpUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n\n        Map<String,Object> userMap = (Map<String, Object>)payload.get(\"user\");\n        String voteUserId = (String)userMap.get(\"userId\");\n        String userRid = (String)data.get(\"@rid\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex user = (OrientVertex)DbService.getVertexByRid(graph, userRid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", voteUserId);\n            if(user == null || voteUser == null) {\n                error = \"User or vote user cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if this VoteUserId has down voted user before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(user, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(user)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have up vote the user already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"userId\", user.getProperty(\"userId\"));\n                    eventData.put(\"voteUserId\", voteUserId);\n                    eventData.put(\"updateDate\", new java.util.Date());\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpUserRule",
      "createDate": "2015-03-25T20:20:34.443"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-03-25T20:20:34.443",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:143",
    "@version": 1,
    "@class": "Event",
    "eventId": 10144,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.access.upd_d",
      "schema": {
        "type": "object",
        "title": "Update Access Control",
        "required": [
          "accessLevel"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "accessLevel": {
            "title": "Access Level",
            "type": "string",
            "format": "uiselect",
            "items": [
              {
                "value": "A",
                "label": "Authorized to anyone"
              },
              {
                "value": "N",
                "label": "Not Accessible"
              },
              {
                "value": "C",
                "label": "Client Based"
              },
              {
                "value": "R",
                "label": "Role Based"
              },
              {
                "value": "U",
                "label": "User Based"
              },
              {
                "value": "CR",
                "label": "Client and Role Based"
              },
              {
                "value": "CU",
                "label": "Client and User Based"
              },
              {
                "value": "RU",
                "label": "Role and User Based"
              },
              {
                "value": "CRU",
                "label": "Client, Role and User Based"
              }
            ]
          },
          "clients": {
            "title": "Clients",
            "type": "array",
            "format": "strapselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "client",
                  "name": "getClientDropdown"
                }
              }
            ]
          },
          "roles": {
            "title": "Roles",
            "type": "array",
            "format": "strapselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "role",
                  "name": "getRoleDropdown"
                }
              }
            ]
          },
          "users": {
            "title": "Users [Separate by comma if multiple]",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "ruleClass",
        "accessLevel",
        "clients",
        "roles",
        {
          "key": "users",
          "type": "textarea"
        }
      ],
      "action": [
        {
          "category": "access",
          "name": "updAccess",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-access-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:00.495"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.495",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:144",
    "@version": 1,
    "@class": "Event",
    "eventId": 10145,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.class.feed",
      "schema": {
        "type": "object",
        "required": [
          "environment",
          "messageNumber",
          "hppInd",
          "centreCode"
        ],
        "title": "class",
        "properties": {
          "environment": {
            "type": "string",
            "title": "Environment",
            "enum": [
              "LOCAL",
              "IDT5N",
              "SIT1N",
              "SIT2N",
              "SIT3N",
              "UAT1N",
              "UAT2N"
            ]
          },
          "requestId": {
            "type": "number",
            "title": "Request Id",
            "maxLength": 10
          },
          "messageNumber": {
            "type": "string",
            "title": "Message Number",
            "enum": [
              "E0500",
              "E0450",
              "E0220",
              "E0130",
              "E0110",
              "E0014",
              "E0012",
              "E0010",
              "A0120",
              "A0090"
            ]
          },
          "loanNumber": {
            "type": "string",
            "title": "Loan Number",
            "maxLength": 10
          },
          "pid": {
            "type": "string",
            "title": "PID",
            "enum": [
              "263",
              "701",
              "702",
              "703",
              "704",
              "705",
              "706",
              "798",
              "799",
              "233",
              "237",
              "262",
              "265",
              "232",
              "257",
              "248",
              "238",
              "900",
              "910",
              "999",
              "259",
              "131",
              "600",
              "601",
              "602",
              "603",
              "697",
              "698",
              "699",
              "141",
              "142",
              "152",
              "232",
              "257",
              "800",
              "899"
            ]
          },
          "hppInd": {
            "type": "string",
            "title": "HPP Indicator",
            "enum": [
              "0",
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8"
            ]
          },
          "loanCategroy": {
            "title": "Loan Category",
            "type": "string",
            "enum": [
              "CMHC",
              "COL1",
              "COL2",
              "COL3",
              "ANEW",
              "ANUT",
              "AUSE",
              "AUUT",
              "MCYC",
              "MOHO",
              "TCCN",
              "TCCU",
              "GPIN",
              "GPIV"
            ],
            "default": "CHMC"
          },
          "debtConsolidation": {
            "title": "Debt Consolidation",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "N"
          },
          "incomeVerification": {
            "title": "Income Verification",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "N"
          },
          "liabilityType": {
            "title": "Liability Type",
            "type": "string",
            "enum": [
              "701",
              "700",
              "602",
              "603",
              "601",
              "600",
              "302",
              "301",
              "300",
              "BSC",
              "CLN",
              "PLC",
              "MTG",
              "REN",
              "DC0"
            ]
          },
          "plcPurposeCode": {
            "title": "Plc PurposeCode",
            "type": "string",
            "enum": [
              "000",
              "001",
              "002",
              "003",
              "004",
              "005",
              "006",
              "009"
            ]
          },
          "fullLiabilityIndicator": {
            "title": "Full Liability Indicator",
            "type": "string",
            "enum": [
              "1",
              "4"
            ]
          },
          "solicitorName": {
            "title": "Solicitor Name",
            "type": "string",
            "maxLength": 25
          },
          "propertyProvCode": {
            "title": "Property Prov Code",
            "type": "string",
            "enum": [
              "QC",
              "NS",
              "NU",
              "MB",
              "BC",
              "PE",
              "NT",
              "YT",
              "ON",
              "SK",
              "AB",
              "NB"
            ],
            "default": "ON"
          },
          "centreCode": {
            "title": "Centre Code",
            "type": "string",
            "enum": [
              "TO",
              "VA",
              "CA",
              "TB",
              "REBO",
              "Bank@Work",
              "WP",
              "HL",
              "Training",
              "MT",
              "RISK"
            ],
            "default": "TO"
          },
          "processingDate": {
            "title": "Processing Date",
            "type": "string",
            "format": "date"
          },
          "reportDate": {
            "title": "Report Date",
            "type": "string",
            "format": "date"
          },
          "customerName": {
            "title": "Customer Name",
            "type": "string",
            "maxLength": 250,
            "default": "New Injector"
          },
          "postNumber": {
            "title": "Post Number",
            "type": "string",
            "maxLength": 3,
            "default": "123"
          },
          "transit": {
            "title": "Transit",
            "type": "string",
            "maxLength": 5,
            "default": "00001"
          },
          "cid": {
            "title": "CID",
            "type": "string",
            "maxLength": 3,
            "default": "100"
          },
          "fundsDisbursed": {
            "title": "Funds Disbursed",
            "type": "number",
            "default": 1000
          },
          "relationship": {
            "title": "Relationship",
            "type": "string",
            "enum": [
              "1",
              "2",
              "3",
              "4",
              "5"
            ],
            "default": "1"
          },
          "marketingSourceCode": {
            "title": "Marketing Source Code",
            "type": "string",
            "enum": [
              "DWPV",
              "PBCY",
              "BFIN",
              "BFCE",
              "BDLG",
              "OFFN",
              "BLAK",
              "EQLH",
              "OFFB",
              "NEW2",
              "FCBC",
              "JJ99",
              "AHBL",
              "CASE",
              "NRES",
              "BTOB",
              "GENL",
              "ABL1",
              "RP22",
              "RP99",
              "EQL1"
            ],
            "default": "RP99"
          },
          "provinceCode": {
            "title": "Province Code",
            "type": "string",
            "enum": [
              "QC",
              "NS",
              "NU",
              "MB",
              "BC",
              "PE",
              "NT",
              "YT",
              "ON",
              "SK",
              "AB",
              "NB"
            ],
            "default": "ON"
          },
          "newConstructionInd": {
            "title": "New Construction Ind",
            "type": "string",
            "enum": [
              "Y",
              "N"
            ],
            "default": "N"
          },
          "processTypeCd": {
            "title": "Process Type",
            "type": "string"
          },
          "processSubtypeCd": {
            "title": "Process Sub Type",
            "type": "string"
          },
          "tags": {
            "title": "Tags[Maximum 5 tags separated by ,]",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        {
          "type": "help",
          "helpvalue": "<h4>Class Feed Example</h4>"
        },
        "environment",
        {
          "type": "help",
          "helpvalue": "<h4>The following fields are for injection rules</h4>"
        },
        "messageNumber",
        "hppInd",
        {
          "type": "conditional",
          "condition": "modelData.hppInd==='0'",
          "items": [
            {
              "type": "conditional",
              "condition": "modelData.messageNumber==='E0012' || modelData.messageNumber === 'E0014'",
              "items": [
                "pid"
              ]
            },
            {
              "type": "conditional",
              "condition": "modelData.messageNumber==='E0010'",
              "items": [
                "pid",
                {
                  "key": "debtConsolidation",
                  "type": "radiobuttons"
                },
                "loanCategroy"
              ]
            }
          ]
        },
        {
          "type": "conditional",
          "condition": "modelData.hppInd !== '0'",
          "items": [
            {
              "type": "conditional",
              "condition": "modelData.messageNumber==='E0012'",
              "items": [
                "plcPurposeCode",
                "fullLiabilityIndicator",
                "solicitorName",
                "propertyProvCode"
              ]
            },
            {
              "type": "conditional",
              "condition": "modelData.messageNumber === 'E0014'",
              "items": [
                "plcPurposeCode",
                "solicitorName",
                "propertyProvCode"
              ]
            }
          ]
        },
        {
          "type": "help",
          "helpvalue": "<h4>The following fields are for epi mappings</h4>"
        },
        "loanNumber",
        "customerName",
        "postNumber",
        "transit",
        "cid",
        "fundsDisbursed",
        "relationship",
        "marketingSourceCode",
        {
          "key": "incomeVerification",
          "type": "radios",
          "titleMap": {
            "Y": "Income Verification is requried.",
            "N": "Income Verification is not required."
          }
        },
        "centreCode",
        "provinceCode",
        "newConstructionInd",
        {
          "type": "help",
          "helpvalue": "<h4>The following fields are for feed storage and retrieval only</h4>"
        },
        "processTypeCd",
        "processSubtypeCd",
        {
          "key": "tags",
          "type": "textarea"
        }
      ],
      "action": [
        {
          "host": "injector",
          "app": "main",
          "category": "feed",
          "name": "injClassFeed",
          "readOnly": false,
          "title": "Inject",
          "success": "/"
        },
        {
          "host": "injector",
          "app": "main",
          "category": "feed",
          "name": "updFeedMeta",
          "readOnly": false,
          "title": "Update Meta",
          "success": "/"
        }
      ],
      "createDate": "2015-03-25T20:22:00.523"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.523",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:145",
    "@version": 1,
    "@class": "Event",
    "eventId": 10146,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.common.command",
      "schema": {
        "type": "object",
        "title": "Command",
        "required": [
          "name",
          "data"
        ],
        "properties": {
          "host": {
            "title": "Host",
            "type": "string",
            "enum": [
              "www.networknt.com",
              "injector"
            ]
          },
          "app": {
            "title": "App",
            "type": "string",
            "enum": [
              "main",
              "forum",
              "blog",
              "shopping"
            ]
          },
          "category": {
            "title": "Category",
            "type": "string",
            "enum": [
              "user",
              "form"
            ]
          },
          "readOnly": {
            "title": "ReadOnly",
            "type": "boolean",
            "default": false
          },
          "name": {
            "title": "Name",
            "type": "string",
            "enum": [
              "getForm",
              "addForm",
              "delForm",
              "updForm",
              "getFormList"
            ]
          },
          "data": {
            "title": "Data",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "host",
        "app",
        "category",
        "readOnly",
        "name",
        {
          "key": "data",
          "type": "textarea"
        },
        {
          "type": "submit",
          "style": "btn-info",
          "title": "Submit"
        }
      ],
      "action": [
        {
          "category": "common",
          "name": "command",
          "readOnly": false,
          "title": "Submit"
        }
      ],
      "createDate": "2015-03-25T20:22:00.544"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.544",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:146",
    "@version": 1,
    "@class": "Event",
    "eventId": 10147,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.config.update",
      "schema": {
        "type": "object",
        "required": [
          "host",
          "app"
        ],
        "title": "Configuration",
        "properties": {
          "host": {
            "type": "string",
            "title": "Host",
            "enum": [
              "injector",
              "www.networknt.com",
              "www.edibleforestgarden.ca"
            ]
          },
          "app": {
            "type": "string",
            "title": "Application",
            "enum": [
              "main",
              "blog"
            ]
          },
          "blogCacheSize": {
            "type": "number",
            "title": "Blog Cache Size (number of blogs cached for the entire server. max 9999)",
            "maxLength": 4
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "host",
        "app",
        "blogCacheSize"
      ],
      "action": [
        {
          "category": "config",
          "name": "updConfig",
          "readOnly": false,
          "title": "Update"
        }
      ],
      "createDate": "2015-03-25T20:22:00.560"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.560",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:147",
    "@version": 1,
    "@class": "Event",
    "eventId": 10148,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.db.downloadEvent",
      "schema": {
        "type": "object",
        "title": "Download Events",
        "required": [
          "createDateFrom"
        ],
        "properties": {
          "createDateFrom": {
            "title": "Event From Date",
            "type": "object",
            "format": "datetimepicker"
          },
          "createDateTo": {
            "title": "Event To Date",
            "type": "object",
            "format": "datetimepicker"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        {
          "key": "createDateFrom",
          "options": {
            "autoclose": 1
          }
        },
        {
          "key": "createDateTo",
          "options": {
            "autoclose": 1
          }
        }
      ],
      "action": [
        {
          "category": "db",
          "name": "downloadEvent",
          "readOnly": true,
          "title": "Download Events"
        }
      ],
      "createDate": "2015-03-25T20:22:00.573"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.573",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:148",
    "@version": 1,
    "@class": "Event",
    "eventId": 10149,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.db.execQueryCommand",
      "schema": {
        "type": "object",
        "title": "Execute Command",
        "required": [
          "script"
        ],
        "properties": {
          "script": {
            "title": "Script",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        {
          "key": "script",
          "type": "ace",
          "style": {
            "height": "500px"
          },
          "aceOptions": {
            "theme": "eclipse",
            "mode": "sql"
          },
          "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
        }
      ],
      "action": [
        {
          "category": "db",
          "name": "execQueryCmd",
          "readOnly": true,
          "title": "Execute",
          "success": "/page/com-networknt-light-v-db-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:00.595"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.595",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:149",
    "@version": 1,
    "@class": "Event",
    "eventId": 10150,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.db.execSchemaCommand",
      "schema": {
        "type": "object",
        "title": "Execute Command",
        "required": [
          "script"
        ],
        "properties": {
          "script": {
            "title": "Script",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        {
          "key": "script",
          "type": "ace",
          "style": {
            "height": "500px"
          },
          "aceOptions": {
            "theme": "eclipse",
            "mode": "sql"
          },
          "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
        }
      ],
      "action": [
        {
          "category": "db",
          "name": "execSchemaCmd",
          "readOnly": false,
          "title": "Execute",
          "success": "/page/com-networknt-light-v-db-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:00.617"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.617",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:150",
    "@version": 1,
    "@class": "Event",
    "eventId": 10151,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.db.execUpdateCommand",
      "schema": {
        "type": "object",
        "title": "Execute Command",
        "required": [
          "script"
        ],
        "properties": {
          "script": {
            "title": "Script",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        {
          "key": "script",
          "type": "ace",
          "style": {
            "height": "500px"
          },
          "aceOptions": {
            "theme": "eclipse",
            "mode": "sql"
          },
          "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
        }
      ],
      "action": [
        {
          "category": "db",
          "name": "execUpdateCmd",
          "readOnly": false,
          "title": "Execute",
          "success": "/page/com-networknt-light-v-db-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:00.639"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.639",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:151",
    "@version": 1,
    "@class": "Event",
    "eventId": 10152,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.db.exportDb",
      "schema": {
        "type": "object",
        "title": "Export",
        "required": [
          "path"
        ],
        "properties": {
          "path": {
            "title": "Path for export file",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "path"
      ],
      "action": [
        {
          "category": "db",
          "name": "expDb",
          "readOnly": true,
          "title": "Export",
          "success": "/page/com-networknt-light-v-db-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:00.653"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.653",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:152",
    "@version": 1,
    "@class": "Event",
    "eventId": 10153,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.db.replayEvent",
      "schema": {
        "type": "object",
        "title": "Upload Event File",
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "title": "Event Content",
            "type": "string",
            "format": "file-reader"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "content"
      ],
      "action": [
        {
          "category": "db",
          "name": "replayEvent",
          "readOnly": true,
          "title": "Replay Event",
          "success": "/page/com-networknt-light-v-db-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:00.678"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.678",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:153",
    "@version": 1,
    "@class": "Event",
    "eventId": 10154,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.demo.strapselect_d",
      "schema": {
        "type": "object",
        "title": "Demo Select",
        "required": [
          "strapSingleSelectStatic",
          "strapMultipleSelectStatic",
          "strapSingleSelectDynamic",
          "strapMultipleSelectDynamic",
          "strapSingleSelectPopulated",
          "strapMultipleSelectPopulated"
        ],
        "properties": {
          "strapSingleSelectStatic": {
            "title": "Strap Single Select Static",
            "type": "string",
            "format": "strapselect",
            "items": [
              {
                "value": "value1",
                "label": "label1"
              },
              {
                "value": "value2",
                "label": "label2"
              },
              {
                "value": "value3",
                "label": "label3"
              }
            ]
          },
          "strapMultipleSelectStatic": {
            "title": "Strap Multiple Select Static",
            "type": "array",
            "format": "strapselect",
            "items": [
              {
                "value": "value1",
                "label": "label1"
              },
              {
                "value": "value2",
                "label": "label2"
              },
              {
                "value": "value3",
                "label": "long very very long label3"
              }
            ]
          },
          "strapSingleSelectDynamic": {
            "title": "Strap Single Select Dynamic",
            "type": "string",
            "format": "strapselectdynamic"
          },
          "strapMultipleSelectDynamic": {
            "title": "Strap Multiple Select Dynamic",
            "type": "array",
            "format": "strapselectdynamic"
          },
          "strapSingleSelectPopulated": {
            "title": "Strap Single Select Populated",
            "type": "string",
            "format": "strapselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "client",
                  "name": "getClientDropdown"
                }
              }
            ]
          },
          "strapMultipleSelectPopulated": {
            "title": "Strap Multiple Select Populated",
            "type": "array",
            "format": "strapselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "client",
                  "name": "getClientDropdown"
                }
              }
            ]
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        {
          "key": "strapSingleSelectStatic"
        },
        {
          "key": "strapMultipleSelectStatic"
        },
        {
          "key": "strapSingleSelectDynamic",
          "options": {
            "category": "demo",
            "name": "getDropdown"
          }
        },
        {
          "key": "strapMultipleSelectDynamic",
          "options": {
            "category": "demo",
            "name": "getDropdown"
          }
        },
        {
          "key": "strapSingleSelectPopulated"
        },
        {
          "key": "strapMultipleSelectPopulated"
        }
      ],
      "action": [
        {
          "category": "demo",
          "name": "selectDemo",
          "readOnly": false,
          "title": "Submit"
        }
      ],
      "createDate": "2015-03-25T20:22:00.713"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.713",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:154",
    "@version": 1,
    "@class": "Event",
    "eventId": 10155,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.demo.uiselect_d",
      "schema": {
        "type": "object",
        "title": "Demo UiSelect",
        "required": [
          "uiSingleSelectStatic",
          "uiMultipleSelectStatic",
          "uiSingleSelectDynamic",
          "uiMultipleSelectDynamic"
        ],
        "properties": {
          "uiSingleSelectStatic": {
            "title": "Ui Single Select Static",
            "type": "string",
            "format": "uiselect",
            "description": "Only single item is allowd",
            "items": [
              {
                "value": "value1",
                "label": "label1"
              },
              {
                "value": "value2",
                "label": "label2"
              },
              {
                "value": "value3",
                "label": "label3"
              }
            ]
          },
          "uiMultipleSelectStatic": {
            "title": "Ui Multiple Select Static",
            "type": "array",
            "format": "uiselect",
            "items": [
              {
                "value": "value1",
                "label": "label1"
              },
              {
                "value": "value2",
                "label": "label2"
              },
              {
                "value": "value3",
                "label": "long very very long label3"
              }
            ]
          },
          "uiSingleSelectDynamic": {
            "title": "Ui Single Select Populated",
            "type": "string",
            "format": "uiselect",
            "items": [
              "@",
              {
                "category": "forum",
                "name": "getForumDropdown"
              }
            ]
          },
          "uiMultipleSelectDynamic": {
            "title": "Ui Multiple Select Populated",
            "type": "array",
            "format": "uiselect",
            "items": [
              "@",
              {
                "category": "role",
                "name": "getRoleDropdown"
              }
            ]
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        {
          "key": "uiSingleSelectStatic",
          "options": {
            "uiClass": "short"
          }
        },
        {
          "key": "uiMultipleSelectStatic"
        },
        {
          "key": "uiSingleSelectDynamic",
          "options": {
            "category": "forum",
            "name": "getForumDropdown"
          }
        },
        {
          "key": "uiMultipleSelectDynamic",
          "options": {
            "category": "forum",
            "name": "getForumDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "demo",
          "name": "uiSelectDemo",
          "readOnly": false,
          "title": "Submit"
        }
      ],
      "createDate": "2015-03-25T20:22:00.750"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.750",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:155",
    "@version": 1,
    "@class": "Event",
    "eventId": 10156,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.feeds",
      "schema": {
        "type": "object",
        "required": [
          "environment",
          "feeds"
        ],
        "title": "Feeds",
        "properties": {
          "environment": {
            "type": "string",
            "title": "Environment",
            "enum": [
              "LOCAL",
              "IDT5N",
              "SIT1N",
              "SIT2N",
              "SIT3N",
              "UAT1N",
              "UAT2N"
            ]
          },
          "feeds": {
            "type": "string",
            "title": "Feeds"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "environment",
        {
          "key": "feeds",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "json"
          }
        }
      ],
      "action": [
        {
          "host": "injector",
          "app": "main",
          "category": "feed",
          "name": "injAllFeed",
          "readOnly": false,
          "title": "Inject"
        }
      ],
      "createDate": "2015-03-25T20:22:00.779"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.779",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:156",
    "@version": 1,
    "@class": "Event",
    "eventId": 10157,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.form.import",
      "schema": {
        "type": "object",
        "title": "Import Form File",
        "required": [
          "content"
        ],
        "properties": {
          "content": {
            "title": "Form Content",
            "type": "string",
            "format": "file-reader"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "content"
      ],
      "action": [
        {
          "category": "form",
          "name": "impForm",
          "readOnly": false,
          "title": "Import Form",
          "success": "/page/com-networknt-light-v-form-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:00.802"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.802",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:157",
    "@version": 1,
    "@class": "Event",
    "eventId": 10158,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.forum.add",
      "schema": {
        "type": "object",
        "title": "Forum",
        "required": [
          "forumId",
          "desc"
        ],
        "properties": {
          "forumId": {
            "title": "Forum Id",
            "type": "string"
          },
          "desc": {
            "title": "Description",
            "type": "string"
          },
          "in_Own": {
            "title": "Parent",
            "type": "array",
            "maxItems": 1,
            "format": "strapselectdynamic"
          },
          "out_Own": {
            "title": "Children",
            "type": "array",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "forumId",
        "desc",
        {
          "key": "in_Own",
          "options": {
            "category": "forum",
            "name": "getForumDropdown"
          }
        },
        {
          "key": "out_Own",
          "options": {
            "category": "forum",
            "name": "getForumDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "forum",
          "name": "addForum",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-forum-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:00.833"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.833",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:158",
    "@version": 1,
    "@class": "Event",
    "eventId": 10159,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.forum.post.add",
      "schema": {
        "type": "object",
        "title": "Post",
        "required": [
          "title",
          "content"
        ],
        "properties": {
          "title": {
            "title": "Title [Mandatory, 12 to 90 characters]",
            "type": "string"
          },
          "content": {
            "title": "Content [MarkDown Syntax, 24 to 20480 characters. Drag right bottom to enlarge]",
            "type": "string"
          },
          "tags": {
            "title": "Tags [Maximum 5 tags]",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        {
          "type": "fieldset",
          "title": "Post",
          "items": [
            {
              "type": "tabs",
              "tabs": [
                {
                  "title": "Edit Content",
                  "items": [
                    {
                      "key": "title",
                      "onChange": "updSubjectLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "key": "content",
                      "type": "ace",
                      "style": {
                        "height": "500px"
                      },
                      "aceOptions": {
                        "theme": "eclipse",
                        "mode": "markdown"
                      },
                      "onChange": "updContentLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "key": "tags",
                      "type": "textarea",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    }
                  ]
                },
                {
                  "title": "Preview",
                  "items": [
                    {
                      "type": "help",
                      "helpvalue": "<br><h4>Content</h4><br>"
                    },
                    {
                      "key": "content",
                      "type": "marked"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "action": [
        {
          "category": "forum",
          "name": "addPost",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-forum-post"
        }
      ],
      "createDate": "2015-03-25T20:22:00.847"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.847",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:159",
    "@version": 1,
    "@class": "Event",
    "eventId": 10160,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.forum.post.update",
      "schema": {
        "type": "object",
        "title": "Post",
        "required": [
          "title",
          "content"
        ],
        "properties": {
          "id": {
            "title": "ID",
            "type": "string",
            "readonly": "true"
          },
          "@rid": {
            "title": "RID",
            "type": "string",
            "readonly": "true"
          },
          "title": {
            "title": "Title [Mandatory, 12 to 90 characters]",
            "type": "string"
          },
          "content": {
            "title": "Content [MarkDown Syntax, 24 to 20480 characters. Drag right bottom to enlarge]",
            "type": "string"
          },
          "tags": {
            "title": "Tags [Maximum 5 tags]",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        {
          "type": "fieldset",
          "title": "Post",
          "items": [
            {
              "type": "tabs",
              "tabs": [
                {
                  "title": "Edit Content",
                  "items": [
                    {
                      "title": "ID",
                      "readonly": true,
                      "schema": {
                        "title": "ID",
                        "type": "string",
                        "readonly": "true"
                      },
                      "ngModelOptions": {
                        "updateOnDefault": true
                      },
                      "key": [
                        "id"
                      ],
                      "type": "text"
                    },
                    {
                      "title": "RID",
                      "readonly": true,
                      "schema": {
                        "title": "id",
                        "type": "string"
                      },
                      "ngModelOptions": {
                        "updateOnDefault": true
                      },
                      "key": [
                        "@rid"
                      ],
                      "type": "text"
                    },
                    {
                      "title": "Title [Mandatory, 12 to 90 characters]",
                      "required": true,
                      "schema": {
                        "title": "Title [Mandatory, 12 to 90 characters]",
                        "type": "string"
                      },
                      "ngModelOptions": {
                        "updateOnDefault": true
                      },
                      "key": [
                        "title"
                      ],
                      "type": "text",
                      "onChange": "updSubjectLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "title": "Content [MarkDown Syntax, 24 to 20480 characters. Drag right bottom to enlarge]",
                      "required": true,
                      "schema": {
                        "title": "Content [MarkDown Syntax, 24 to 20480 characters. Drag right bottom to enlarge]",
                        "type": "string"
                      },
                      "ngModelOptions": {},
                      "key": [
                        "content"
                      ],
                      "type": "ace",
                      "style": {
                        "height": "500px"
                      },
                      "aceOptions": {
                        "theme": "eclipse",
                        "mode": "markdown"
                      },
                      "onChange": "updContentLength(modelValue)",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    },
                    {
                      "title": "Tags [Maximum 5 tags]",
                      "schema": {
                        "title": "Tags [Maximum 5 tags]",
                        "type": "string"
                      },
                      "ngModelOptions": {
                        "updateOnDefault": true
                      },
                      "key": [
                        "tags"
                      ],
                      "type": "textarea",
                      "feedback": "{'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-star': !hasSuccess() }"
                    }
                  ]
                },
                {
                  "title": "Preview",
                  "items": [
                    {
                      "type": "help",
                      "helpvalue": "<br><h4>Content</h4><br>"
                    },
                    {
                      "title": "Content [MarkDown Syntax, 24 to 20480 characters. Drag right bottom to enlarge]",
                      "required": true,
                      "schema": {
                        "title": "Content [MarkDown Syntax, 24 to 20480 characters. Drag right bottom to enlarge]",
                        "type": "string"
                      },
                      "ngModelOptions": {},
                      "key": [
                        "content"
                      ],
                      "type": "marked"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "action": [
        {
          "category": "forum",
          "name": "updPost",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-forum-home"
        }
      ],
      "createDate": "2015-03-25T20:22:00.870"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.870",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:160",
    "@version": 1,
    "@class": "Event",
    "eventId": 10161,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.forum.update",
      "schema": {
        "type": "object",
        "title": "Forum",
        "required": [
          "forumId",
          "desc"
        ],
        "properties": {
          "forumId": {
            "title": "Forum Id",
            "type": "string"
          },
          "desc": {
            "title": "Description",
            "type": "string"
          },
          "in_Own": {
            "title": "Parent",
            "type": "array",
            "maxItems": 1,
            "format": "strapselectdynamic"
          },
          "out_Own": {
            "title": "Children",
            "type": "array",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "forumId",
        "desc",
        {
          "key": "in_Own",
          "options": {
            "category": "forum",
            "name": "getForumDropdown"
          }
        },
        {
          "key": "out_Own",
          "options": {
            "category": "forum",
            "name": "getForumDropdown"
          }
        }
      ],
      "action": [
        {
          "category": "forum",
          "name": "updForum",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-forum-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:00.892"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.892",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:161",
    "@version": 1,
    "@class": "Event",
    "eventId": 10162,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.host.add",
      "schema": {
        "type": "object",
        "title": "Host",
        "required": [
          "id",
          "base",
          "transferMinSize"
        ],
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "base": {
            "title": "Base",
            "type": "string"
          },
          "transferMinSize": {
            "title": "Transfer Min Size",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "id",
        "base",
        "transferMinSize"
      ],
      "action": [
        {
          "category": "host",
          "name": "addHost",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-host-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:00.904"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.904",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:162",
    "@version": 1,
    "@class": "Event",
    "eventId": 10163,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.host.update",
      "schema": {
        "type": "object",
        "title": "Host",
        "required": [
          "base",
          "transferMinSize"
        ],
        "properties": {
          "base": {
            "title": "Base",
            "type": "string"
          },
          "transferMinSize": {
            "title": "Transfer Min Size",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "base",
        "transferMinSize"
      ],
      "action": [
        {
          "category": "host",
          "name": "updHost",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-host-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:00.924"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.924",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:163",
    "@version": 1,
    "@class": "Event",
    "eventId": 10164,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.menu.addMenu",
      "schema": {
        "type": "object",
        "title": "Menu",
        "required": [
          "host"
        ],
        "properties": {
          "host": {
            "title": "Host that the menu is added to",
            "type": "string"
          },
          "out_Own": {
            "type": "array",
            "title": "Menu Items",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "host",
        {
          "key": "out_Own",
          "options": {
            "category": "menu",
            "name": "getMenuItemMap"
          }
        }
      ],
      "action": [
        {
          "category": "menu",
          "name": "addMenu",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-menu-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:00.939"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.939",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:164",
    "@version": 1,
    "@class": "Event",
    "eventId": 10165,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.menu.addMenuItem",
      "schema": {
        "type": "object",
        "title": "Menu Item",
        "required": [
          "menuItemId",
          "label"
        ],
        "properties": {
          "menuItemId": {
            "title": "Menu Item Id",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "type": "string"
          },
          "host": {
            "title": "Host",
            "type": "string"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "tpl": {
            "title": "Template",
            "type": "string"
          },
          "ctrl": {
            "title": "Controller",
            "type": "string"
          },
          "left": {
            "title": "Position Left",
            "type": "boolean"
          },
          "roles": {
            "title": "Roles",
            "type": "array",
            "format": "strapselectdynamic"
          },
          "out_Own": {
            "type": "array",
            "title": "Menu Items",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "menuItemId",
        "label",
        "host",
        "path",
        "tpl",
        "ctrl",
        "left",
        {
          "key": "roles",
          "options": {
            "category": "role",
            "name": "getRoleDropdown"
          }
        },
        {
          "key": "out_Own",
          "options": {
            "category": "menu",
            "name": "getMenuItemMap"
          }
        }
      ],
      "action": [
        {
          "category": "menu",
          "name": "addMenuItem",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-menu-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:00.957"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.957",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:165",
    "@version": 1,
    "@class": "Event",
    "eventId": 10166,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.menu.updateMenu",
      "schema": {
        "type": "object",
        "title": "Menu",
        "required": [
          "host"
        ],
        "properties": {
          "host": {
            "title": "Host that the menu is added to",
            "type": "string"
          },
          "out_Own": {
            "type": "array",
            "title": "Menu Items",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "host",
        {
          "key": "out_Own",
          "options": {
            "category": "menu",
            "name": "getMenuItemMap"
          }
        }
      ],
      "action": [
        {
          "category": "menu",
          "name": "updMenu",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-menu-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:00.970"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.970",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:166",
    "@version": 1,
    "@class": "Event",
    "eventId": 10167,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.menu.updateMenuItem",
      "schema": {
        "type": "object",
        "title": "Menu Item",
        "required": [
          "label"
        ],
        "properties": {
          "label": {
            "title": "Label",
            "type": "string"
          },
          "host": {
            "title": "Host",
            "type": "string"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "tpl": {
            "title": "Template",
            "type": "string"
          },
          "ctrl": {
            "title": "Controller",
            "type": "string"
          },
          "left": {
            "title": "Position Left",
            "type": "boolean"
          },
          "roles": {
            "title": "Roles",
            "type": "array",
            "format": "strapselectdynamic"
          },
          "out_Own": {
            "type": "array",
            "title": "Menu Items",
            "format": "strapselectdynamic"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "label",
        "host",
        "path",
        "tpl",
        "ctrl",
        "left",
        {
          "key": "roles",
          "options": {
            "category": "role",
            "name": "getRoleDropdown"
          }
        },
        {
          "key": "out_Own",
          "options": {
            "category": "menu",
            "name": "getMenuItemMap"
          }
        }
      ],
      "action": [
        {
          "category": "menu",
          "name": "updMenuItem",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-menu-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:00.986"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:00.986",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:167",
    "@version": 1,
    "@class": "Event",
    "eventId": 10168,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.page.add",
      "schema": {
        "type": "object",
        "title": "Page",
        "required": [
          "pageId",
          "content"
        ],
        "properties": {
          "pageId": {
            "title": "Page Id",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "pageId",
        {
          "key": "content",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "html"
          }
        }
      ],
      "action": [
        {
          "category": "page",
          "name": "addPage",
          "readOnly": false,
          "title": "Submit"
        }
      ],
      "createDate": "2015-03-25T20:22:01.006"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.006",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:168",
    "@version": 1,
    "@class": "Event",
    "eventId": 10169,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.page.import",
      "schema": {
        "type": "object",
        "title": "Import Page File",
        "required": [
          "pageId",
          "content"
        ],
        "properties": {
          "pageId": {
            "title": "Page Id",
            "type": "string"
          },
          "content": {
            "title": "Page Content",
            "type": "string",
            "format": "file-reader"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "pageId",
        "content"
      ],
      "action": [
        {
          "category": "page",
          "name": "impPage",
          "readOnly": false,
          "title": "Import Page",
          "success": "/page/com-networknt-light-v-page-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:01.026"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.026",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:169",
    "@version": 1,
    "@class": "Event",
    "eventId": 10170,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.page.update",
      "schema": {
        "type": "object",
        "title": "Page",
        "required": [
          "pageId",
          "content"
        ],
        "properties": {
          "pageId": {
            "title": "Page Id",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "pageId",
        {
          "key": "content",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "html"
          }
        }
      ],
      "action": [
        {
          "category": "page",
          "name": "updPage",
          "readOnly": false,
          "title": "Submit"
        }
      ],
      "createDate": "2015-03-25T20:22:01.039"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.039",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:170",
    "@version": 1,
    "@class": "Event",
    "eventId": 10171,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.role.add",
      "schema": {
        "type": "object",
        "title": "Role",
        "required": [
          "roleId",
          "desc"
        ],
        "properties": {
          "roleId": {
            "title": "Role Id",
            "type": "string"
          },
          "desc": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "roleId",
        "desc"
      ],
      "action": [
        {
          "category": "role",
          "name": "addRole",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-role-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:01.066"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.066",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:171",
    "@version": 1,
    "@class": "Event",
    "eventId": 10172,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.role.update",
      "schema": {
        "type": "object",
        "title": "Role",
        "required": [
          "desc"
        ],
        "properties": {
          "desc": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "desc"
      ],
      "action": [
        {
          "category": "role",
          "name": "updRole",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-role-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:01.080"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.080",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:172",
    "@version": 1,
    "@class": "Event",
    "eventId": 10173,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.rule.add",
      "schema": {
        "type": "object",
        "title": "Rule",
        "required": [
          "ruleClass",
          "sourceCode"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string"
          },
          "sourceCode": {
            "title": "Source Code",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "ruleClass",
        {
          "key": "sourceCode",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "java"
          }
        }
      ],
      "action": [
        {
          "category": "rule",
          "name": "addRule",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-rule-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:01.099"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.099",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:173",
    "@version": 1,
    "@class": "Event",
    "eventId": 10174,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.rule.cors.update",
      "schema": {
        "type": "object",
        "title": "Cors Update",
        "required": [
          "ruleClass",
          "enableCors"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "enableCors": {
            "title": "Enable CORS?",
            "type": "boolean"
          },
          "corsHosts": {
            "title": "Allowed Hosts",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "ruleClass",
        "enableCors",
        "corsHosts"
      ],
      "action": [
        {
          "category": "rule",
          "name": "updCors",
          "readOnly": false,
          "title": "Update",
          "success": "/page/com-networknt-light-v-rule-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:01.112"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.112",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:174",
    "@version": 1,
    "@class": "Event",
    "eventId": 10175,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.rule.etag.update",
      "schema": {
        "type": "object",
        "title": "Etag Flag Update",
        "required": [
          "ruleClass",
          "enableEtag"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "enableEtag": {
            "title": "Enable Etag?",
            "type": "boolean"
          },
          "cacheControl": {
            "title": "Cache Control Header",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "ruleClass",
        "enableEtag",
        "cacheControl"
      ],
      "action": [
        {
          "category": "rule",
          "name": "updEtag",
          "readOnly": false,
          "title": "Update",
          "success": "/page/com-networknt-light-v-rule-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:01.134"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.134",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:175",
    "@version": 1,
    "@class": "Event",
    "eventId": 10176,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.rule.import",
      "schema": {
        "type": "object",
        "title": "Import Rule File",
        "required": [
          "ruleClass",
          "sourceCode"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string"
          },
          "sourceCode": {
            "title": "Rule Source Code",
            "type": "string",
            "format": "file-reader"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "ruleClass",
        "sourceCode"
      ],
      "action": [
        {
          "category": "rule",
          "name": "impRule",
          "readOnly": false,
          "title": "Import Rule",
          "success": "/page/com-networknt-light-v-rule-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:01.151"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.151",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:176",
    "@version": 1,
    "@class": "Event",
    "eventId": 10177,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.rule.publisher.update",
      "schema": {
        "type": "object",
        "title": "Publisher Update",
        "required": [
          "ruleClass",
          "isPublisher"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "isPublisher": {
            "title": "Publish Event?",
            "type": "boolean"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "ruleClass",
        "isPublisher"
      ],
      "action": [
        {
          "category": "rule",
          "name": "updPublisher",
          "readOnly": false,
          "title": "Update",
          "success": "/page/com-networknt-light-v-rule-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:01.168"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.168",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:177",
    "@version": 1,
    "@class": "Event",
    "eventId": 10178,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.rule.schema.update",
      "schema": {
        "type": "object",
        "title": "Validation Schema Update",
        "required": [
          "ruleClass"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "schema": {
            "title": "Validation Schema",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "ruleClass",
        {
          "key": "schema",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "json"
          }
        }
      ],
      "action": [
        {
          "category": "rule",
          "name": "updSchema",
          "readOnly": false,
          "title": "Update",
          "success": "/page/com-networknt-light-v-rule-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:01.184"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.184",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:178",
    "@version": 1,
    "@class": "Event",
    "eventId": 10179,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.rule.subscriber.update",
      "schema": {
        "type": "object",
        "title": "Subscriber Update",
        "required": [
          "ruleClass",
          "isSubscriber"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "isPublisher": {
            "title": "Subscribe Event?",
            "type": "boolean"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "ruleClass",
        "isSubscriber"
      ],
      "action": [
        {
          "category": "rule",
          "name": "updSubscriber",
          "readOnly": false,
          "title": "Update",
          "success": "/page/com-networknt-light-v-rule-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:01.203"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.203",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:179",
    "@version": 1,
    "@class": "Event",
    "eventId": 10180,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.rule.update",
      "schema": {
        "type": "object",
        "title": "Rule",
        "required": [
          "sourceCode"
        ],
        "properties": {
          "sourceCode": {
            "title": "Source Code",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        {
          "key": "sourceCode",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "java"
          }
        }
      ],
      "action": [
        {
          "category": "rule",
          "name": "updRule",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-rule-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:01.219"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.219",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:180",
    "@version": 1,
    "@class": "Event",
    "eventId": 10181,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.transform.request.add_d",
      "schema": {
        "type": "object",
        "title": "Add Request Transform Rule",
        "required": [
          "ruleClass",
          "sequence",
          "transformRule"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "sequence": {
            "title": "Sequence",
            "type": "number"
          },
          "transformRule": {
            "title": "Transform Rule",
            "type": "string",
            "format": "uiselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "rule",
                  "name": "getRuleDropdown"
                }
              }
            ]
          },
          "transformData": {
            "title": "Transform Data",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "ruleClass",
        "sequence",
        "transformRule",
        {
          "key": "transformData",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "json"
          }
        }
      ],
      "action": [
        {
          "category": "transform",
          "name": "addTransformRequest",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-rule-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:01.236"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.236",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:181",
    "@version": 1,
    "@class": "Event",
    "eventId": 10182,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.transform.request.update_d",
      "schema": {
        "type": "object",
        "title": "Update Request Transform Rule",
        "required": [
          "ruleClass",
          "sequence",
          "transformRule"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "sequence": {
            "title": "Sequence",
            "type": "number",
            "readonly": true
          },
          "transformRule": {
            "title": "Transform Rule",
            "type": "string",
            "format": "uiselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "rule",
                  "name": "getRuleDropdown"
                }
              }
            ]
          },
          "transformData": {
            "title": "Transform Data",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "ruleClass",
        "sequence",
        "transformRule",
        {
          "key": "transformData",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "json"
          }
        }
      ],
      "action": [
        {
          "category": "transform",
          "name": "updTransformRequest",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-rule-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:01.256"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.256",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:182",
    "@version": 1,
    "@class": "Event",
    "eventId": 10183,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.transform.response.add_d",
      "schema": {
        "type": "object",
        "title": "Add Response Transform Rule",
        "required": [
          "ruleClass",
          "sequence",
          "transformRule"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "sequence": {
            "title": "Sequence",
            "type": "number"
          },
          "transformRule": {
            "title": "Transform Rule",
            "type": "string",
            "format": "uiselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "rule",
                  "name": "getRuleDropdown"
                }
              }
            ]
          },
          "transformData": {
            "title": "Transform Data",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "ruleClass",
        "sequence",
        "transformRule",
        {
          "key": "transformData",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "json"
          }
        }
      ],
      "action": [
        {
          "category": "transform",
          "name": "addTransformResponse",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-rule-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:01.268"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.268",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:183",
    "@version": 1,
    "@class": "Event",
    "eventId": 10184,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.transform.response.update_d",
      "schema": {
        "type": "object",
        "title": "Update Response Transform Rule",
        "required": [
          "ruleClass",
          "sequence",
          "transformRule"
        ],
        "properties": {
          "ruleClass": {
            "title": "Rule Class",
            "type": "string",
            "readonly": true
          },
          "sequence": {
            "title": "Sequence",
            "type": "number",
            "readonly": true
          },
          "transformRule": {
            "title": "Transform Rule",
            "type": "string",
            "format": "uiselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "rule",
                  "name": "getRuleDropdown"
                }
              }
            ]
          },
          "transformData": {
            "title": "Transform Data",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "ruleClass",
        "sequence",
        "transformRule",
        {
          "key": "transformData",
          "type": "ace",
          "aceOptions": {
            "theme": "eclipse",
            "mode": "json"
          }
        }
      ],
      "action": [
        {
          "category": "transform",
          "name": "updTransformResponse",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-rule-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:01.282"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.282",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:184",
    "@version": 1,
    "@class": "Event",
    "eventId": 10185,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.user.change.password",
      "schema": {
        "type": "object",
        "required": [
          "password",
          "password_confirm"
        ],
        "title": "Change Password",
        "properties": {
          "password": {
            "title": "Password",
            "type": "string"
          },
          "passwordConfirm": {
            "title": "Password Confirmation",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        {
          "key": "password",
          "type": "password"
        },
        {
          "key": "passwordConfirm",
          "type": "password"
        }
      ],
      "action": [
        {
          "category": "user",
          "name": "updPassword",
          "readOnly": false,
          "title": "Change Password"
        }
      ],
      "createDate": "2015-03-25T20:22:01.302"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.302",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:185",
    "@version": 1,
    "@class": "Event",
    "eventId": 10186,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.user.profile",
      "schema": {
        "type": "object",
        "required": [
          "email",
          "password",
          "password_confirm"
        ],
        "title": "Sign Up",
        "properties": {
          "userId": {
            "title": "User Id",
            "type": "string",
            "description": "User Id can be used to log in."
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email can be used to log in."
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "passwordConfirm": {
            "title": "Password Confirmation",
            "type": "string"
          },
          "firstName": {
            "title": "First Name",
            "type": "string"
          },
          "lastName": {
            "title": "Last Name",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "userId",
        {
          "key": "email",
          "type": "email"
        },
        {
          "key": "password",
          "type": "password"
        },
        {
          "key": "passwordConfirm",
          "type": "password"
        },
        "firstName",
        "lastName"
      ],
      "action": [
        {
          "category": "user",
          "name": "lockUser",
          "readOnly": false,
          "title": "Lock User"
        },
        {
          "category": "user",
          "name": "unlockUser",
          "readOnly": false,
          "title": "Unlock User"
        },
        {
          "category": "user",
          "name": "delUser",
          "readOnly": false,
          "title": "Delete User"
        },
        {
          "category": "user",
          "name": "upUser",
          "readOnly": false,
          "title": "Up Vote User"
        },
        {
          "category": "user",
          "name": "downUser",
          "readOnly": false,
          "title": "Down Vote User"
        }
      ],
      "createDate": "2015-03-25T20:22:01.321"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.321",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:186",
    "@version": 1,
    "@class": "Event",
    "eventId": 10187,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.user.role.update_d",
      "schema": {
        "type": "object",
        "title": "Update Role",
        "properties": {
          "roles": {
            "title": "Roles",
            "type": "array",
            "format": "uiselect",
            "items": [
              {
                "label": "dynamic",
                "value": {
                  "category": "role",
                  "name": "getRoleDropdown"
                }
              }
            ]
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "roles"
      ],
      "action": [
        {
          "category": "user",
          "name": "updRole",
          "readOnly": false,
          "title": "Submit",
          "success": "/page/com-networknt-light-v-user-admin-home"
        }
      ],
      "createDate": "2015-03-25T20:22:01.352"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.352",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:187",
    "@version": 1,
    "@class": "Event",
    "eventId": 10188,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.user.signin",
      "schema": {
        "type": "object",
        "title": "Sign In",
        "required": [
          "userIdEmail",
          "password"
        ],
        "properties": {
          "userIdEmail": {
            "title": "UserId or Email",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "rememberMe": {
            "title": "Remember me",
            "type": "boolean",
            "default": false
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "userIdEmail",
        {
          "key": "password",
          "type": "password"
        },
        "rememberMe"
      ],
      "action": [
        {
          "category": "user",
          "name": "signInUser",
          "readOnly": false,
          "title": "Sign In",
          "success": "/page/com-networknt-light-v-user-home"
        }
      ],
      "createDate": "2015-03-25T20:22:01.365"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.365",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:188",
    "@version": 1,
    "@class": "Event",
    "eventId": 10189,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.user.signup",
      "schema": {
        "type": "object",
        "required": [
          "userId",
          "email",
          "password",
          "passwordConfirm"
        ],
        "title": "Sign Up",
        "properties": {
          "userId": {
            "title": "User Id",
            "type": "string",
            "description": "User Id can be used to log in."
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email can be used to log in."
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "passwordConfirm": {
            "title": "Password Confirmation",
            "type": "string"
          },
          "firstName": {
            "title": "First Name",
            "type": "string"
          },
          "lastName": {
            "title": "Last Name",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "userId",
        {
          "key": "email",
          "type": "email"
        },
        {
          "key": "password",
          "type": "password"
        },
        {
          "key": "passwordConfirm",
          "type": "password"
        },
        "firstName",
        "lastName"
      ],
      "action": [
        {
          "category": "user",
          "name": "signUpUser",
          "readOnly": false,
          "title": "Register"
        }
      ],
      "createDate": "2015-03-25T20:22:01.382"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.382",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:189",
    "@version": 1,
    "@class": "Event",
    "eventId": 10190,
    "createUserId": "stevehu",
    "data": {
      "formId": "com.networknt.light.user.update.profile",
      "schema": {
        "type": "object",
        "title": "Update Profile",
        "properties": {
          "firstName": {
            "title": "First Name",
            "type": "string"
          },
          "lastName": {
            "title": "Last Name",
            "type": "string"
          }
        }
      },
      "createUserId": "stevehu",
      "form": [
        "firstName",
        "lastName"
      ],
      "action": [
        {
          "category": "user",
          "name": "updProfile",
          "readOnly": false,
          "title": "Update"
        }
      ],
      "createDate": "2015-03-25T20:22:01.399"
    },
    "name": "impForm",
    "category": "form",
    "createDate": "2015-03-25T20:22:01.399",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:191",
    "@version": 1,
    "@class": "Event",
    "eventId": 10192,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-access-admin-home",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.AccessAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\r\n\r\n        $scope.getAccess = {\r\n            category : 'access',\r\n            name : 'getAllAccess',\r\n            readOnly: true\r\n        };\r\n\r\n        $scope.delAccess = {\r\n            category : 'access',\r\n            name : 'delAccess',\r\n            readOnly: false\r\n        };\r\n\r\n        $scope.accesses = [];\r\n\r\n        $scope.headers = [\r\n            {\r\n                title: 'Delete',\r\n                value: 'delete'\r\n            },\r\n            {\r\n                title: 'Rule Class',\r\n                value: 'ruleClass'\r\n            },\r\n            {\r\n                title: 'Access Level',\r\n                value: 'accessLevel'\r\n            },\r\n            {\r\n                title: 'Clients',\r\n                value: 'clients'\r\n            },\r\n            {\r\n                title: 'Roles',\r\n                value: 'roles'\r\n            },\r\n            {\r\n                title: 'Users',\r\n                value: 'users'\r\n            },\r\n            {\r\n                title: 'Create User Id',\r\n                value: 'createUserId'\r\n            },\r\n            {\r\n                title: 'Create Date',\r\n                value: 'createDate'\r\n            },\r\n            {\r\n                title: 'Update User Id',\r\n                value: 'updateUserId'\r\n            },\r\n            {\r\n                title: 'Update Date',\r\n                value: 'updateDate'\r\n            }\r\n        ];\r\n        $scope.sort = {\r\n            sortDir : 'desc',\r\n            sortedBy : 'createDate'\r\n        };\r\n        $scope.filter = {};\r\n\r\n        $scope.onSort = function (sortedBy, sortDir) {\r\n            $scope.sort.sortDir = sortDir;\r\n            $scope.sort.sortedBy = sortedBy;\r\n        };\r\n\r\n        $scope.delete = function(access) {\r\n            $scope.delAccess.data = access;\r\n            $http.post('api/rs', $scope.delAccess)\r\n                    .success(function (data, status, headers, config) {\r\n                        $scope.accesses.splice($scope.accesses.indexOf(access), 1);\r\n                        toaster.pop('success', status, data, 3000);\r\n                    })\r\n        };\r\n\r\n\r\n        $scope.update = function(access) {\r\n            modelDataService.setModelData(access);\r\n            $location.path(\"/form/com.networknt.light.access.upd_d\");\r\n        };\r\n\r\n        $scope.fetchResult = function () {\r\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify($scope.getAccess))}})\r\n                    .success(function (data, status, headers, config) {\r\n                        $scope.accesses = data;\r\n                    })\r\n        };\r\n        $scope.fetchResult();\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.AccessAdminHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <tabset>\r\n                <tab heading=\"Access\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th ng-repeat=\"header in headers\">\r\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td><input ng-model=\"filter.ruleClass\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.accessLevel\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.clients\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.roles\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.users\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"access in accesses | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td><a href ng-click=\"delete(access)\">Delete</a></td>\r\n                            <td><a href ng-click=\"update(access)\">{{access.ruleClass}}</a></td>\r\n                            <td>{{access.accessLevel}}</td>\r\n                            <td>{{access.clients}}</td>\r\n                            <td>{{access.roles}}</td>\r\n                            <td>{{access.users}}</td>\r\n                            <td>{{access.createUserId}}</td>\r\n                            <td>{{access.createDate}}</td>\r\n                            <td>{{access.updateUserId}}</td>\r\n                            <td>{{access.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:54.660"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:54.660",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:192",
    "@version": 1,
    "@class": "Event",
    "eventId": 10193,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-blog-admin-home",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.BlogAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\r\n        $scope.getBlog = {\r\n            category : 'blog',\r\n            name : 'getBlog',\r\n            readOnly: true\r\n        };\r\n\r\n        $scope.delBlog = {\r\n            category : 'blog',\r\n            name : 'delBlog',\r\n            readOnly: false\r\n        };\r\n\r\n        $scope.blogs = [];\r\n\r\n        $scope.headers = [\r\n            {\r\n                title: 'Delete',\r\n                value: 'delete'\r\n            },\r\n            {\r\n                title: 'Id',\r\n                value: 'id'\r\n            },\r\n            {\r\n                title: 'Desc',\r\n                value: 'desc'\r\n            },\r\n            {\r\n                title: 'Create User Id',\r\n                value: 'createUserId'\r\n            },\r\n            {\r\n                title: 'Create Date',\r\n                value: 'createDate'\r\n            },\r\n            {\r\n                title: 'Update User Id',\r\n                value: 'updateUserId'\r\n            },\r\n            {\r\n                title: 'Update Date',\r\n                value: 'updateDate'\r\n            }\r\n        ];\r\n\r\n        $scope.sort = {\r\n            sortDir : 'desc',\r\n            sortedBy : 'updateDate'\r\n        };\r\n\r\n        $scope.filter = {};\r\n\r\n        $scope.onSort = function (sortedBy, sortDir) {\r\n            $scope.sort.sortDir = sortDir;\r\n            $scope.sort.sortedBy = sortedBy;\r\n        };\r\n\r\n\r\n        $scope.delete = function(blog) {\r\n            $scope.delBlog.data = blog;\r\n            $http.post('api/rs', $scope.delBlog)\r\n                    .success(function (data, status, headers, config) {\r\n                        $scope.blogs.splice($scope.blogs.indexOf(blog), 1);\r\n                        toaster.pop('success', status, data, 3000);\r\n                    })\r\n        };\r\n\r\n        $scope.add = function() {\r\n            $location.path(\"/form/com.networknt.light.blog.add\");\r\n        };\r\n\r\n        $scope.update = function(blog) {\r\n            modelDataService.setModelData(blog);\r\n            $location.path(\"/form/com.networknt.light.blog.update\");\r\n        };\r\n\r\n        //The function that is responsible of fetching the result from the server\r\n        $scope.fetchResult = function () {\r\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify($scope.getBlog))}})\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.blogs = result;\r\n                        //console.log($scope.blogs);\r\n                    })\r\n        };\r\n\r\n        $scope.fetchResult();\r\n\r\n    }]);\r\n</script>\r\n\r\n<div class=\"container\" ng-controller=\"com.networknt.light.BlogAdminHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\r\n            </div>\r\n            <tabset>\r\n                <tab heading=\"Recent\">\r\n                    <h4>Blog</h4>\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th ng-repeat=\"header in headers\">\r\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td><input ng-model=\"filter.id\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.desc\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"blog in blogs | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td><a href ng-click=\"delete(blog)\">Delete</a></td>\r\n                            <td><a href ng-click=\"update(blog)\">{{blog.id}}</a></td>\r\n                            <td>{{blog.desc}}</td>\r\n                            <td>{{blog.createUserId}}</td>\r\n                            <td>{{blog.createDate}}</td>\r\n                            <td>{{blog.updateUserId}}</td>\r\n                            <td>{{blog.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:54.709"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:54.709",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:193",
    "@version": 1,
    "@class": "Event",
    "eventId": 10194,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-blog-home",
      "content": "<script type='text/javascript'>\r\n    (function(angular) {\r\n        'use strict';\r\n        angular.module('lightApp').controller('com.networknt.light.BlogHomeCtrl', ['$scope', '$http', '$location', '$filter', 'authService', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, authService, toaster, modelDataService) {\r\n\r\n            $scope.getBlog = {\r\n                category : 'blog',\r\n                name : 'getBlogTree',\r\n                readOnly: true\r\n            };\r\n\r\n            //The function that is responsible of fetching the result from the server\r\n            $scope.fetchResult = function () {\r\n                $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify($scope.getBlog))}})\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.blogs = result;\r\n                    })\r\n            };\r\n\r\n            $scope.fetchResult();\r\n\r\n            $scope.toggle = function(scope) {\r\n                scope.toggle();\r\n            };\r\n\r\n            var getRootNodesScope = function() {\r\n                return angular.element(document.getElementById(\"tree-root\")).scope();\r\n            };\r\n\r\n            $scope.collapseAll = function() {\r\n                var scope = getRootNodesScope();\r\n                scope.collapseAll();\r\n            };\r\n\r\n            $scope.expandAll = function() {\r\n                var scope = getRootNodesScope();\r\n                scope.expandAll();\r\n            };\r\n\r\n            $scope.treeFilter = $filter('uiTreeFilter');\r\n\r\n            $scope.supportedFields = ['id', 'desc'];\r\n\r\n            $scope.gotoBlog = function(id) {\r\n                modelDataService.setModelData(id);\r\n                $location.path(\"/page/com-networknt-light-v-blog-post\");\r\n            }\r\n        }]);\r\n    })(window.angular);\r\n</script>\r\n<div class=\"container\" data-ng-controller=\"com.networknt.light.BlogHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\r\n            <h4 class=\"page-header\">Blog</h4>\r\n            <div>\r\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\">Collapse all</a>\r\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"expandAll()\">Expand all</a>\r\n                <input ng-model=\"pattern\" placeholder=\"Type a part of any blog\"/>\r\n            </div>\r\n            <!-- Nested node template -->\r\n            <script type=\"text/ng-template\" id=\"nodes_renderer.html\">\r\n                <div ui-tree-handle class=\"tree-node tree-node-content\">\r\n                    <a class=\"btn btn-success btn-xs\" ng-if=\"node.children && node.children.length > 0\" data-nodrag ng-click=\"toggle(this)\"><span class=\"glyphicon\" ng-class=\"{'glyphicon glyphicon-plus': collapsed, 'glyphicon glyphicon-minus': !collapsed}\"></span></a>\r\n                    <!--{{node.id | highlight:pattern | trust}}-->\r\n                    <a href ng-click=\"gotoBlog(node.id)\" ng-bind-html=\"node.id | highlight:pattern | trust\"></a>\r\n                    <small ng-bind-html=\"node.desc | highlight:pattern | trust\"></small>\r\n                </div>\r\n                <ol ui-tree-nodes=\"\" ng-model=\"node.children\" ng-class=\"{hidden: collapsed}\">\r\n                    <li ng-repeat=\"node in node.children\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\r\n                </ol>\r\n            </script>\r\n            <div ui-tree data-drag-enabled=false id=\"tree-root\">\r\n                <ol ui-tree-nodes ng-model=\"blogs\">\r\n                    <li ng-repeat=\"node in blogs\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:54.738"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:54.738",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:194",
    "@version": 1,
    "@class": "Event",
    "eventId": 10195,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-blog-post-view",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.BlogPostViewCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\r\n        $scope.getComment = {\r\n            category : 'comment',\r\n            name: 'getCommentTree',\r\n            readOnly: true\r\n        }\r\n\r\n        $scope.addComment = {\r\n            category : 'comment',\r\n            name: 'addComment',\r\n            readOnly: false\r\n        }\r\n\r\n        $scope.getComment.data = modelDataService.getModelData();\r\n        $scope.addComment.data = modelDataService.getModelData();\r\n\r\n        $scope.comments = [];\r\n\r\n        $scope.fetchResult = function () {\r\n            $http.post('api/rs', $scope.getComment)\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.comments = result;\r\n                        console.log($scope.comments);\r\n                    })\r\n        };\r\n        $scope.fetchResult();\r\n\r\n        $scope.aceOption = {\r\n            useWrapMode : true,\r\n            showGutter: false,\r\n            theme:'eclipse',\r\n            mode: 'markdown'\r\n        };\r\n\r\n        $scope.submit = function () {\r\n            $http.post('api/rs', $scope.addComment)\r\n                    .success(function (data, status, headers, config) {\r\n                        toaster.pop('success', status, data);\r\n                        $scope.fetchResult();\r\n                    })\r\n        }\r\n\r\n        $scope.toggle = function(scope) {\r\n            scope.toggle();\r\n        };\r\n\r\n        var getRootNodesScope = function() {\r\n            return angular.element(document.getElementById(\"tree-root\")).scope();\r\n        };\r\n\r\n        $scope.collapseAll = function() {\r\n            var scope = getRootNodesScope();\r\n            scope.collapseAll();\r\n        };\r\n\r\n        $scope.expandAll = function() {\r\n            var scope = getRootNodesScope();\r\n            scope.expandAll();\r\n        };\r\n\r\n        $scope.treeFilter = $filter('uiTreeFilter');\r\n\r\n        $scope.supportedFields = ['content'];\r\n\r\n        $scope.toggledForm = false;\r\n        $scope.btnText = 'add comment';\r\n\r\n        $scope.toggleForm = function() {\r\n            $scope.toggledForm = !$scope.toggledForm;\r\n            $scope.btnText = ($scope.toggledForm) ? 'add comment' : 'close';\r\n        };\r\n\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.BlogPostViewCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-12 col-md-12\">\r\n            <div>\r\n                <div>{{getComment.data.title}}</div>\r\n                <div>{{getComment.data.createUserId}} {{getComment.data.createDate}}</div>\r\n                <div marked=\"getComment.data.content\"></div>\r\n            </div>\r\n            <div ui-ace=\"aceOption\" ng-model=\"addComment.data.comment\"></div>\r\n            <button class=\"pure-button pure-button-small success-bg\" ng-click=\"submit()\">Submit</button>\r\n\r\n            <div>\r\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\">Collapse all</a>\r\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"expandAll()\">Expand all</a>\r\n                <input ng-model=\"pattern\" placeholder=\"Type a part of any comment\"/>\r\n            </div>\r\n            <!-- Nested node template -->\r\n            <script type=\"text/ng-template\" id=\"nodes_renderer.html\">\r\n                <div ui-tree-handle class=\"tree-node tree-node-content\">\r\n                    <a class=\"btn btn-success btn-xs\" ng-if=\"node.children && node.children.length > 0\" data-nodrag ng-click=\"toggle(this)\"><span class=\"glyphicon\" ng-class=\"{'glyphicon glyphicon-plus': collapsed, 'glyphicon glyphicon-minus': !collapsed}\"></span></a>\r\n                    <a href=\"http://www.reddit.com/user/JhnnyTsunami\" class=\"author may-blank id-t2_95r8a\"><span ng-bind-html=\"node.createUserId | highlight:pattern | trust\"></span></a>&#32;<span>{{node.createDate}}</span>\r\n                    <div ng-bind-html=\"node.content | highlight:pattern | trust\"></div>\r\n                    <!--\r\n                    <div class=\"panel-body\">\r\n                        <form name=\"form\" ng-submit=\"action(node)\" class=\"form-inline\" ng-hide=\"toggledForm\">\r\n                            <div class=\"form-group\">\r\n                                <textarea ng-model=\"child.text\" value=\"your comment..\" class=\"form-control\" rows=\"1\" ng-minlength=\"5\" required></textarea>\r\n                            </div>\r\n                            <button ng-disabled=\"form.$invalid\" type=\"submit\" class=\"btn btn-primary\">Submit</button>\r\n                        </form>\r\n                        <span class=\"label pull-right pointer\" ng-click=\"toggleForm()\"\r\n                        ng-class=\"{'label-success': toggledForm, 'label-warning': !toggledForm}\">{{ btnText }}</span>\r\n                    </div>\r\n                    -->\r\n                </div>\r\n                <ol ui-tree-nodes=\"\" ng-model=\"node.children\" ng-class=\"{hidden: collapsed}\">\r\n                    <li ng-repeat=\"node in node.children\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\r\n                </ol>\r\n            </script>\r\n            <div ui-tree id=\"tree-root\">\r\n                <ol ui-tree-nodes ng-model=\"comments\">\r\n                    <li ng-repeat=\"node in comments\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:54.760"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:54.760",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:195",
    "@version": 1,
    "@class": "Event",
    "eventId": 10196,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-blog-post",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.BlogPostCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\r\n        $scope.getBlogPost = {\r\n            category : 'blog',\r\n            name: 'getBlogPost',\r\n            readOnly: true,\r\n            data: {}\r\n        }\r\n\r\n        $scope.posts = [];\r\n\r\n        $scope.fetchResult = function () {\r\n            $scope.getBlogPost.data.id = modelDataService.getModelData();\r\n            modelDataService.setModelData(null); // reset the modelDataService variable.\r\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify($scope.getBlogPost))}})\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.posts = result;\r\n                        console.log($scope.posts);\r\n                    })\r\n        };\r\n        $scope.fetchResult();\r\n\r\n        $scope.post = function() {\r\n            $location.path(\"/form/com.networknt.light.blog.post.add/\" + $scope.getBlogPost.data.id);\r\n        };\r\n\r\n        $scope.view = function(post) {\r\n            modelDataService.setModelData(post);\r\n            $location.path(\"/page/com-networknt-light-v-blog-post-view\");\r\n        };\r\n\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.BlogPostCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-12 col-md-12\">\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"post()\"><i class=\"glyphicon glyphicon-edit\"></i>Post</button>\r\n            </div>\r\n            <tabset>\r\n                <tab heading=\"Recent\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td><a href ng-click=\"view(post)\">{{post.title}}</a></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>{{post.createUser}} {{post.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n                <tab heading=\"Bookmark\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td>\r\n                                <div><a href ng-click=\"view(post)\">{{post.title}}</a></div>\r\n                                <div>{{post.createUser}} {{post.createDate}}</div>\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:54.775"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:54.775",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:196",
    "@version": 1,
    "@class": "Event",
    "eventId": 10197,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-challenges",
      "content": "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <h1>Web application development challenges</h1>\r\n            <p>\r\n            Today?s software engineering approach has some challenges and OCA Framework is designed to address these.\r\n\r\n            <h2>Productivity</h2>\r\n            <p>\r\n            Light Framework supports and encourages Agile Development. Agile software development is a software development methods in which requirements and solutions evolve through collaboration between self-organizing, cross-functional teams. It promotes adaptive planning, evolutionary development, early delivery, continuous improvement and encourages rapid and flexible response to change. A group of people take responsibility for the entire life cycle of the software development and work with other teams for integration. This makes each team more productive as decisions happen locally without management overhead. Teams have their own mission ? to produce reusable web component, view or application. Component team needs to be aligned with view team and view team needs to be aligned with application team. In this sense they are loosely coupled but tightly aligned to the same mission.\r\n            <p>\r\n            The framework itself provides so many reusable common components, views and applications that are ready to be used or customized. So most of the applications can be assembled from existing pieces from OCA store and only certain customizations are needed. Of cause, you may need to build your domain specific modules but the existing ones can give you examples to follow. The framework also encourages brands and developer to publish their modules. The more brands using your brand?s experience, the more brand value you have. The more developers are using your modules the more support and customization revenue you will have as developers.\r\n            <p>\r\n            By using the framework, large projects can be break down to more manageable pieces and integration happens continuously to allow components, views and applications grow gradually. This makes the development teams scalable and reduces the risks for large projects.\r\n\r\n            <h2>Quality Assurance</h2>\r\n            <p>\r\n            Different teams manage components, views and applications independently and reusability is the main goal in design. All pieces have unit tests and end-to-end tests in order to promote and give confidence for the end users. Also, each team have a sample application so end users can play with the module.\r\n            <p>\r\n            Front end AngularJS is known as testable Javascript framework and backend does not have any container so rules can be tested as POJO. You don?t need to start a server to test your backend code.\r\n            <p>\r\n            Agile encourages QA and DEV teams are working together in one team. The developers are writing the unit test cases and the testers are writing e2e test cases.\r\n            <p>\r\n            If your organization won?t allow it, then a DIT exist report will be produced by the development team to assist QA team for testing.\r\n            <p>\r\n            The report contains some information generated by the tools and some information written by the developers.\r\n            <p>\r\n            <ul>Version number</ul>\r\n            <ul>Scope of the change</ul>\r\n            <ul>Unit test cases (generated)</ul>\r\n            <ul>e2e test cases (generated)</ul>\r\n            <ul>Complexity and coverage (generated)</ul>\r\n            <ul>What need to be tested as it cannot be tested in dev environment</ul>\r\n            <ul>Dependencies( related to the scope of testing) what modules are depending on the changed module that need to be regression tested</ul>\r\n            <p>\r\n\r\n            <h2>Release Management</h2>\r\n            <p>\r\n            The OCA framework is based on event sourcing and deployment just means to generate events file from development environment and replay the events on DIT, SIT, UAT, PAT and PROD.\r\n            <p>\r\n\r\n            Traditionally, release a new version of product is very costly and risky so some organizations might limit the number of releases to 3 or 4 times per year. Each release will involve so many teams and last so long for testing and many changes will be packed into the same batch. An army consists of DBAs, System Administrators and Deployment Engineers will be work together during deployment time and they follow the document step by step to get the job done. This impacts the productivity and makes fixing defects, adding new features so slow and could not meet business need in this dynamically changing world.\r\n            <p>\r\n\r\n            In OCA framework, we want the benefits of agile development and continuous integration all the way to production. We encourage more deployments with high velocity and short cycles that lead to financial success. This conflicts with the traditional approach - fewer deployments with big thoroughly test batch deployment that lead to financial success.\r\n            <p>\r\n\r\n            Above two approaches have the same goal but it seems conflicting each other. How come they can lead to the same goal for financial success? To understand that, we need to understand how risk is calculated.\r\n            <p>\r\n\r\n            ALE (Annual Loss Expectancy) = Single Loss Expectancy * Exposure Rate * Annualized Frequency\r\n            <p>\r\n\r\n            In our software release world, we can understand it as\r\n            <p>\r\n\r\n            Loss = Single lost of error * Percentage of deployment error * Number of deployments\r\n            <p>\r\n\r\n            For example, if one error occurs in 100 deployments, each error will cost $5000 and there are 4 deployments per year, then the ALE would be 0.0150004 = 200\r\n            <p>\r\n\r\n            The traditional approach is to reduce the number of deployments to reduce the lost.\r\n            <p>\r\n\r\n            And our approach is to increase the number of deployments and reduce the single lost of error and percentage of deployment error. If this can be done, we can avoid financial losses due to downtime, bugs, noncompliance and loss of reputation.\r\n            <p>\r\n\r\n            Let?s look at the source of errors and try to lower the percentage of occurrence\r\n            <p>\r\n            <h3>Defects in code</h3>\r\n            This can be addressed by unit test cases and e2e test cases. If we have enough coverage, then we can change the code with confidence.\r\n            <p>\r\n\r\n            <h3>Errors in assembly or packaging</h3>\r\n            Fast tests in continuous integration and delivery Fail slow tests and violation of architecture and coding standards. Clean build everything from Git repository Deploy the same way everywhere using events Manage dependencies and versions with graph database Manage Git branch and trunk through database to map to different release and environment. Basically, make everything automatic.\r\n            <p>\r\n\r\n            <h3>Errors executing changes</h3>\r\n            Make deployment the same process everywhere by just replay serial events which include database updates, business rules updates, rule data updates, template updates, apps and experience updates etc. Basically, we don?t need a army for deployment, it is one click at the right time and place.\r\n\r\n            <p>\r\n            Now, let?s look at the cost of error and see if we can reduce it.\r\n            <p>\r\n\r\n            Zero down time deployment. Database migrations and schema-less (database change won?t break previous version of code) Versioned identifiers for assets Protocol versioning Endpoint versioning Decoupled architecture Separate data and logic and they can be deployed independently. Configurable default version for every component Let end-user to choose if they want to use the updated version Employees try out the new version before making it default version User can downgrade version if they don?t like the new one. Basically user owns experience.\r\n            <p>\r\n\r\n            In order to archive the above, we have the make our deployment unit the smallest possible. Within the framework, we have component, view and app and each of them can be versioned and deployed independently. Further, they can be break up to even smaller piece to be deployed independently.\r\n            <p>\r\n\r\n            For example: a component can have the following part that can be deployed independently and versioned independently.\r\n            <p>\r\n\r\n            AngularJS code (front end)\r\n            <p>\r\n            Template (front end)\r\n            <p>\r\n            Rules (back end)\r\n            <p>\r\n            Rules Data (back end)\r\n            <p>\r\n            Reference and configuration (back end)\r\n            <p>\r\n\r\n            For example, only template get a new version 1.0.2 deployed on the server and other pieces are still in version 1.0.1 and we have an component version 1.0.2. One site can user version 1.0.1 and another site can user 1.0.2 and this allows site to customize the template for their channel as well.\r\n            <p>\r\n\r\n            <p>\r\n            Even further, we can set the template 1.0.1 as default so all the customer will have the default template but we ask our employee to try 1.0.2 version for a while before make it as default.\r\n            <p>\r\n\r\n            <p>\r\n            Although each piece can be deployed independently, they are loaded dynamically at the view level as part of angular routing. When Angular bootstraps, providers will be saved and they will be used to lazy load and register controllers, directives, filters, services, factories and providers etc. When angular requires a page, an page id and page version will be passed to the server. (no version means default version will be used) The server will check the dependencies of the page and assembly all piece together (java script code and templates) and send to the angular as response. This is for the first time, the next time the same version is required, it just response back the page cached. The cached will only be updated once any piece of the page is changed through event.\r\n            <p>\r\n\r\n            During the assembly phase, the configuration data and be combined with logic and the final page is pre-processed. For example, the dynamic dropdown list will be generated at this phase for a form component.\r\n            <p>\r\n\r\n            Breaking up the component to this level is no mandatory and it makes sense to have simple component packaged together and give it only one version. You only need to break it up if you component is so complicated and have too many moving part that is configurable and customizable.\r\n            <p>\r\n\r\n            <h2>Production Configuration</h2>\r\n            <p>\r\n\r\n            To make the application configurable on production, we need to separate the logic and data. The framework has three levels of configurations that can be performed on production and they have different level of risk associated with them.\r\n            <p>\r\n\r\n            The first level is reference data configuration. Most applications have reference data like dropdowns, translations etc. These will be saved into a set of schemas or tables and can be changed through table maintenance app. The reference data is cached but will be refreshed after midnight. This is the lowest risk change on production as it will only impact the UI look and feel most of the time and can be rolled back if negative impact occurred. Of cause, certain level of validation has to be done and approve process must be in place.\r\n            <p>\r\n\r\n            The second level is rules data configuration\r\n            <p>\r\n\r\n            All requests are handled by Light Rule Engine rules and rules are designed to be two part, Data and logic. This level is address the rule data change and it is at low risk as it won?t impact rule logic and the rule logic can be written to validate the data for the rules. For example, the system admin has the right to give promotion to discount one product for 10 percent off. The 10 percent is the data. And the rule might have validation between 1 to 99 or 1 to 55. This piece of data is more important then reference data as it is impact application logic but it is isolated from the rules. It can be changed easily without breaking the application.\r\n            <p>\r\n\r\n            The third level is rule logic configuration\r\n            <p>\r\n\r\n            The rules are just POJOs and can be updated and deployed though application interface. This change is bigger and risk is still manageable as you only need to regression to all the component/view/app that depends on the rule. Rules are working independently and it fails it only impact one area of the app and it can be easily rolled back.\r\n            <p>\r\n\r\n            <h2>Security</h2>\r\n            <p>\r\n\r\n            Api security or resource security is done by JWT token. When user is trying to access to protected resources, it will check if the access token is in the http request header. If it don?t exist, it will redirect the user to login page. The access token will be short lived up to 30 minutes and a 401 response along with token_expired will be sent back to client for refresh token if the user checked remember me when logging in or login page will be shown up.\r\n            <p>\r\n\r\n            Access token contains roles and userId so that the resource serve can grant access based on role-based authorization or based on user-based authorization.\r\n            <p>\r\n\r\n            Visibility control will be put into place based on the role of the users. For example, certain menu won?t be shown up unless you login as an admin role or certain web component shows only partial of data the user role is just anonymous.\r\n            <p>\r\n\r\n            OCA framework server provides another layer of security for the back-end legacy system for Angular application is not talking to back-end API directly. Also, this layer will do the validation before calling to back-end API so that a lot of invalid requests will be filtered out.\r\n            <p>\r\n\r\n            <h2>Performance</h2>\r\n\r\n            <h2>Monitoring</h2>\r\n            <p>\r\n\r\n            Traceability is more important with Angular application as it is running on the end users? browser. The server doesn?t have the state of the user session and only angular application knows. In this case, event sourcing is utilized to log all the events happening on the browser side. Every user action will generate an event and it is sent to the server along with JWT token that is identifier for the user. The server is logging events into event store.\r\n            <p>\r\n\r\n            Un-caught runtime exception in Angular will logged as an event and it will be easily reproduced given a serial events leading to it for the same user in event store.\r\n            <p>\r\n\r\n            Server error response will be logged on server side as it is known who sent the request. For example, 404 error response is sent to the client and support team need to reproduce it.\r\n            <p>\r\n\r\n            Server side exception is logged with stack trace and it can be reproduced along with events leading to it.\r\n            <p>\r\n\r\n            Security violation will be logged when system identify that the request is not sent from our AngularJS app but some raw request with missing data or wrong parameters.\r\n            <p>\r\n\r\n            System statistic can be viewed from admin page with information like how many users are online, how many requests are served within a period of time etc.\r\n            <p>\r\n\r\n            Health check is an application that will check certain area of the application based on the configuration data in order to make sure the over all system is healthy. For example, it will check the connectivity with legacy system etc. It is normally called once new release is deployed and when system is behaved strangely.\r\n            <p>\r\n\r\n            User behaviour analysis is an app that analyzes user online behaviour and it can be very valuable to drive sales. If customer goes to a bank branch to save a check and the sale person knows the customer was browsing life insurance product yesterday with his mobile phone.\r\n            <p>\r\n\r\n            Module update notification will monitor if there are any security updates from the framework and notify system admin to take action.\r\n            <p>\r\n\r\n            <h2>Legacy Coexistence</h2>\r\n            <p>\r\n\r\n            The framework can work with legacy web application together and this might be the requirement for some organization that invested big effort on a large system and they cannot convert everything into OCA framework in one step. They can switch part of the site to OCA and leave the rest still running on the legacy server. When user logs in, one request will be sent to the legacy server to create the session and another request will be sent to the framework Authentication/Authorization server to get access token. OCA modules will use the JWT access token to take to OCA server and the existing pages will still talk to legacy server using session.\r\n            <p>\r\n\r\n            Above assumes that OCA application and legacy application have only routing relationship. If OCA component will be embedded into legacy page, then thinks will be more complicated. We need to manage the communication with the legacy components, manage css conflicts etc. It is doable but not encouraged as there might be more work then just convert apps page by page.\r\n            <p>\r\n\r\n            <h2>OCA Server</h2>\r\n            <p>\r\n\r\n            The most important role of the OCA sever is to add another layer of security before our legacy system API. Otherwise, our legacy systems will be exposed to outside world and subject to attacks. The OCA Server will validate all the requests from browser and make sure only valid request goes to resource server and it is designed to identify attacks or misuse.\r\n            <p>\r\n\r\n            The OCA server supports integration with legacy system. Instead changing the legacy systems to provide REST API, we leave legacy system along and our OCA server will be acted as a proxy to the existing legacy API. There are two benefits:\r\n            <ul>Avoid updating legacy system that is costly or adding another layer just for REST API purpose. Our OCA server will call the existing API directly regardless the service types, Remote Session Bean, EMB, Web Services, .Net etc.</ul>\r\n            <ul>When OCA apps and experiences communicate with their own API, the interface will be relatively stable and any legacy API change will be done on the rules running on the server.</ul>\r\n            <p>\r\n            The OCA server provides references, configurations for our OCA apps and experiences. This allows us to develop data driven components with customization in mind. For example, we can have a form component that renders different forms given different form schemas and form configurations. Another example would be account summary, number of columns and column headers can all be customized.\r\n            <p>\r\n            The OCA server also serves as a distributed cache layer for legacy system and data is cached in the final consumption json format. It is Domain Driven Design with command/event sourcing along with CQRS and can be clustered with Distributed cache like coherence or Hazelcast. Possible to have all the cached data in memory to serve query part of the app and support decision making for UI commands depending on the nature of the application and infrastructure.\r\n            <p>\r\n            The server is responsible for logging, monitoring, auditing and user behaviour analysis. As apps and experiences are running on browser, you don?t know if end users get exceptions or not. Given we are using event sourcing, all the user actions on the browser will be in our event store. Uncaught Exceptions on UI will be logged as an event, Error response on the server will be logged as an event, service side exception will be logged as an event and all the events are associated with the user as JWT token is passing alone. From the event store, it is very easy to reproduce front end exception and back end exception as all the sequence and data are available and simply replay will reproduce. Monitoring meaning we will have a filter rule for events so that certain events will trigger notifications to administrators such as UI exception and server exception. For enterprise system, auditing is very important so that all the updates to the system are traceable. Our event store will serve the audit well and beyond. The information in event store are valuable for understanding customer behaviours, detect attacks etc.\r\n            <p>\r\n            The OCA server stack would be Undertow, OrientDB, Hazelcast and Light Rule Engine.\r\n\r\n            <h2>Future proof</h2>\r\n            <p>\r\n\r\n            AngularJS 1.X vs AngularJS 2.X and ES5 vs ES6 The change between AngularJS 2.x and 1.x are huge and there is no clear path for migration at the moment. In order to protect our investment, we should write our code in 2.x style if possible so the migration won?t be so painful. Also, Javascript language is in a transition between ES5 and ES6 and today we can leverage some of the ES6 features and using transpiler like Traceur and 6to5. Both of them have grunt and gulp tasks ready to be used.\r\n            <p>\r\n\r\n            Background and Attribution Some of the challenges faced by the OMNI-Channel Architecture group are not unique to TD. Other organizations have used a similar software engineering approach as OCA to deal with these issues. Recently, Spotify consultant Henrik Kniberg assembled two videos (here and here) describing the music site's engineering culture which is uncannily similar to that of our own. Michael T. Nygard's video presentation \"Dispand the Deployment Army\" and lecture deck make a quantifiable call-to-arms to simplify and cut the costs of software deployments. A few years back, Google employee Steve Yegge wrote a scathing missive within Google that leaked out, lambasting his employer for not embracing the company-as-a-platform model so well monetized by his former employer Amazon. It gives a cursory overview of Amazon's foret into that market and references others entrenched in being platform-first companies. What follows is a breakdown and explanation of the OMNI-Channel Architecture influenced by the tone and principles defined in Kniberg's videos, Nygard's presentation and Yegge's rant.\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:54.799"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:54.799",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:197",
    "@version": 1,
    "@class": "Event",
    "eventId": 10198,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-db-admin-home",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.DbAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\r\n\r\n        $scope.execCommand = {\r\n            category : 'db',\r\n            name : 'execCommand',\r\n            readOnly: false,\r\n            data: {}\r\n        };\r\n\r\n        $scope.exportDb = {\r\n            category : 'db',\r\n            name : 'exportDb',\r\n            readOnly: true,\r\n            data: {}\r\n        };\r\n        $scope.replayEvent = {\r\n            category : 'db',\r\n            name : 'replayEvent',\r\n            readOnly: false,\r\n            data: {}\r\n        };\r\n\r\n        $scope.downloadEvent = {\r\n            category : 'db',\r\n            name : 'downloadEvent',\r\n            readOnly: true,\r\n            data: {}\r\n        };\r\n\r\n        $scope.exportDb = function() {\r\n            console.log(\"go to exportDb form\");\r\n            $location.path('/form/com.networknt.light.db.exportDb');\r\n        };\r\n\r\n        $scope.execSchemaCommand = function() {\r\n            $location.path('/form/com.networknt.light.db.execSchemaCommand');\r\n        };\r\n\r\n        $scope.execUpdateCommand = function() {\r\n            $location.path('/form/com.networknt.light.db.execUpdateCommand');\r\n        };\r\n\r\n        $scope.execQueryCommand = function() {\r\n            $location.path('/page/com-networknt-light-v-db-query-command');\r\n        };\r\n\r\n        $scope.replayEvent = function() {\r\n            $location.path('/form/com.networknt.light.db.replayEvent');\r\n        };\r\n\r\n        $scope.downloadEvent = function() {\r\n            $location.path('/page/com-networknt-light-v-db-event-download');\r\n        };\r\n\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.DbAdminHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <tabset>\r\n                <tab heading=\"Event\">\r\n                    <h1>Event</h1>\r\n                    <p><a ng-click=\"exportDb()\" href=\"\">Export Database</a></p>\r\n                    <p><a ng-click=\"execSchemaCommand()\" href=\"\">Exec Schema Commands</a></p>\r\n                    <p><a ng-click=\"execUpdateCommand()\" href=\"\">Exec Update Commands</a></p>\r\n                    <p><a ng-click=\"execQueryCommand()\" href=\"\">Exec Query Commands</a></p>\r\n                    <p><a ng-click=\"downloadEvent()\" href=\"\">Download Events</a></p>\r\n                    <p><a ng-click=\"replayEvent()\" href=\"\">Replay Events</a></p>\r\n                </tab>\r\n                <tab heading=\"Database Statistic\">\r\n                    <table class=\"table table-striped\">\r\n                    </table>\r\n                </tab>\r\n                <tab heading=\"Bookmark\">\r\n                    <table class=\"table table-striped\">\r\n                    </table>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:54.813"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:54.813",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:198",
    "@version": 1,
    "@class": "Event",
    "eventId": 10199,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-db-event-download",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.DbEventDownloadCtrl', ['$scope', '$routeParams', '$http', '$location', 'toaster', 'modelDataService', function($scope, $routeParams, $http, $location, toaster, modelDataService) {\r\n        var getForm = {\r\n            category : 'form',\r\n            name : 'getForm',\r\n            readOnly: true,\r\n            data : {\r\n                formId : 'com.networknt.light.db.downloadEvent'\r\n            }\r\n        };\r\n\r\n        $scope.content = '';\r\n\r\n        $scope.saveTextAsFile = function ()\r\n        {\r\n            var textToWrite = document.getElementById(\"inputTextToSave\").value;\r\n            var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});\r\n            var fileNameToSaveAs = document.getElementById(\"inputFileNameToSaveAs\").value;\r\n\r\n            var downloadLink = document.createElement(\"a\");\r\n            downloadLink.download = fileNameToSaveAs;\r\n            downloadLink.innerHTML = \"Download File\";\r\n            if (window.webkitURL != null)\r\n            {\r\n                // Chrome allows the link to be clicked\r\n                // without actually adding it to the DOM.\r\n                downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);\r\n            }\r\n            else\r\n            {\r\n                // Firefox requires the link to be added to the DOM\r\n                // before it can be clicked.\r\n                downloadLink.href = window.URL.createObjectURL(textFileAsBlob);\r\n                downloadLink.onclick = destroyClickedElement;\r\n                downloadLink.style.display = \"none\";\r\n                document.body.appendChild(downloadLink);\r\n            }\r\n\r\n            downloadLink.click();\r\n        }\r\n\r\n        function destroyClickedElement(event)\r\n        {\r\n            document.body.removeChild(event.target);\r\n        }\r\n\r\n\r\n        $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify(getForm))}})\r\n                .success(function(result, status, headers, config) {\r\n                    $scope.schema = result.schema;\r\n                    console.log('schema = ', $scope.schema);\r\n                    $scope.form = result.form;\r\n                    console.log('form = ', $scope.form);\r\n                    $scope.action = result.action;\r\n                    console.log('action = ', $scope.action);\r\n                    $scope.schemaJson = JSON.stringify($scope.schema, undefined, 2);\r\n                    $scope.formJson = JSON.stringify($scope.form, undefined, 2);\r\n                    $scope.modelData = result.model || modelDataService.getModelData() || {};\r\n                    modelDataService.setModelData(null); // reset the modelDataService variable.\r\n                    $scope.decorator = 'bootstrap-decorator';\r\n                })\r\n\r\n        $scope.setButtonIndex = function(index) {\r\n            $scope.buttonIndex = index;\r\n        };\r\n\r\n        $scope.submitForm = function(form, model) {\r\n            // First we broadcast an event so all fields validate themselves\r\n            $scope.$broadcast('schemaFormValidate');\r\n            // Then we check if the form is valid\r\n            if (form.$valid) {\r\n                $scope.action[$scope.buttonIndex].data = $scope.modelData;\r\n                $scope.action[$scope.buttonIndex].data.parentId = $routeParams.parentId;\r\n                $http.post('/api/rs', $scope.action[$scope.buttonIndex])\r\n                        .success(function (data, status, headers, config) {\r\n                            $scope.content = JSON.stringify(data, undefined, 2);\r\n                        })\r\n            }\r\n        };\r\n\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.DbEventDownloadCtrl\">\r\n    <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\r\n        <form name=\"ngform\" ng-submit=\"submitForm(ngform, modelData)\">\r\n            <div sf-model=\"modelData\" sf-form=\"form\" sf-schema=\"schema\">\r\n            </div>\r\n\r\n            <div ng-repeat=\"act in action\">\r\n                <input type=\"submit\" ng-click=\"setButtonIndex($index)\" class=\"btn btn-primary pull-right\" value=\"{{act.title}}\">\r\n            </div>\r\n        </form>\r\n    </div>\r\n    <div class=\"col-md-12\">\r\n        <table>\r\n            <tr><td>Events to Save:</td></tr>\r\n            <tr>\r\n                <td colspan=\"3\">\r\n                    <textarea id=\"inputTextToSave\" ng-model=\"content\" style=\"height:256px\"></textarea>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td>Filename to Save As:</td>\r\n                <td><input id=\"inputFileNameToSaveAs\"/></td>\r\n                <td><button ng-click=\"saveTextAsFile()\">Save Text to File</button></td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:54.837"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:54.837",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:199",
    "@version": 1,
    "@class": "Event",
    "eventId": 10200,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-db-query-command",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.DbQueryCommandCtrl', ['$scope', '$routeParams', '$http', '$location', 'toaster', 'modelDataService', function($scope, $routeParams, $http, $location, toaster, modelDataService) {\r\n        var getForm = {\r\n            category : 'form',\r\n            name : 'getForm',\r\n            readOnly: true,\r\n            data : {\r\n                formId : 'com.networknt.light.db.execQueryCommand'\r\n            }\r\n        };\r\n\r\n        $scope.content = '';\r\n\r\n        $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify(getForm))}})\r\n                .success(function(result, status, headers, config) {\r\n                    $scope.schema = result.schema;\r\n                    console.log('schema = ', $scope.schema);\r\n                    $scope.form = result.form;\r\n                    console.log('form = ', $scope.form);\r\n                    $scope.action = result.action;\r\n                    console.log('action = ', $scope.action);\r\n                    $scope.schemaJson = JSON.stringify($scope.schema, undefined, 2);\r\n                    $scope.formJson = JSON.stringify($scope.form, undefined, 2);\r\n                    $scope.modelData = result.model || modelDataService.getModelData() || {};\r\n                    modelDataService.setModelData(null); // reset the modelDataService variable.\r\n                    $scope.decorator = 'bootstrap-decorator';\r\n                })\r\n\r\n        $scope.setButtonIndex = function(index) {\r\n            $scope.buttonIndex = index;\r\n        };\r\n\r\n        $scope.submitForm = function(form, model) {\r\n            // First we broadcast an event so all fields validate themselves\r\n            $scope.$broadcast('schemaFormValidate');\r\n            // Then we check if the form is valid\r\n            if (form.$valid) {\r\n                $scope.action[$scope.buttonIndex].data = $scope.modelData;\r\n                $scope.action[$scope.buttonIndex].data.parentId = $routeParams.parentId;\r\n                $http.post('/api/rs', $scope.action[$scope.buttonIndex])\r\n                        .success(function (data, status, headers, config) {\r\n                            $scope.content = JSON.stringify(data, undefined, 2);\r\n                        })\r\n            }\r\n        };\r\n\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.DbQueryCommandCtrl\">\r\n    <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\r\n        <form name=\"ngform\" ng-submit=\"submitForm(ngform, modelData)\">\r\n            <div sf-model=\"modelData\" sf-form=\"form\" sf-schema=\"schema\">\r\n            </div>\r\n\r\n            <div ng-repeat=\"act in action\">\r\n                <input type=\"submit\" ng-click=\"setButtonIndex($index)\" class=\"btn btn-primary pull-right\" value=\"{{act.title}}\">\r\n            </div>\r\n        </form>\r\n    </div>\r\n    <div class=\"col-md-12\">\r\n        <table>\r\n            <tr><td>Query Result:</td></tr>\r\n            <tr>\r\n                <td colspan=\"12\">\r\n                    <textarea id=\"queryResult\" ng-model=\"content\" style=\"height:256px\"></textarea>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:54.855"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:54.855",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:200",
    "@version": 1,
    "@class": "Event",
    "eventId": 10201,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-dev-linux",
      "content": "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <h1>Development Environment Linux</h1>\r\n            <p>\r\n                I personally use Linux as my dev environment and I would recommend you do so; however, Mac and Windows are perfectly OK.\r\n                The following steps are for Ubuntu Linux and some of the commands might be different on other Linux distributions, Mac and Windows. My production is CentOS 6.5 32bit and the installation guide for single node is <a href=\"/page/com-networknt-light-v-production-single\">here</a>. For cluster with load balancer, the installation guide is <a href=\"/page/com-networknt-light-v-production-cluster\">here</a>.\r\n\r\n                I also recommend Google Chrome as your browser for Front End AngularJS testing and debugging.\r\n            </p>\r\n            <p>\r\n                On Linux, the dev environment will mimic production environment so it is easier to deploy your site to Linux based production. Also, you can learn a lot about security once your site is public.\r\n            </p>\r\n            <p>\r\n                1. Create a user for development: (If you have a user already on the Linux box other than root, please use it) The following assumes that you logged in as root.\r\n                <pre>\r\n            #adduser steve\r\n\r\n            #visudo\r\n            This is to edit /etc/sudoers to add steve to the last line so that he can use sudo command\r\n            Never use vi to edit the above file!\r\n\r\n            Add steve right after\r\n            root ALL=(ALL)   ALL\r\n            with\r\n            steve ALL=(ALL)   ALL\r\n\r\n            vi /etc/ssh/sshd_config\r\n\r\n            change the following line\r\n            #PermitRootLogin  yes\r\n            to\r\n            PermitRootLogin no\r\n\r\n            change the following line\r\n            #UserDNS yes\r\n            to\r\n            UserDNS  no\r\n\r\n            Log out from root and log in with steve. From this moment on, please use sudo command instead of logging in as root.\r\n                </pre>\r\n            </p>\r\n            <p>\r\n                2. Install JDK8, maven, node.js and npm with sudo and then using npm to install Grunt, Gulp, Bower and other modules.\r\n\r\n                \r\n\r\n            </p>\r\n            <p>\r\n                3. Create dev folder and check out the source code.\r\n                <pre>\r\n            log in to the user you just created.\r\n            $mkdir networknt\r\n            $cd networknt\r\n\r\n            Check out Json Token which is forked from Google and fixed some of the issues.\r\n            $git clone https://github.com/networknt/jsontoken.git\r\n            Check out light rule engine which is a Java based rule engine used in the back end\r\n            $git clone https://github.com/networknt/rule-engine.git\r\n            Check out the light framework and other projects\r\n            $git clone https://github.com/networknt/light.git\r\n\r\n            $cd jsontoken\r\n            $mvn clean install\r\n            $cd ..\r\n            $cd rule-engine\r\n            $mvn clean install\r\n            $cd rule-loader\r\n            $mvn clean install\r\n            $cd ~\r\n            $cd light\r\n            $mvn clean install -DskipTests\r\n\r\n            Now you have all the Java code built already.\r\n\r\n                </pre>\r\n            </p>\r\n            <p>\r\n                4. Open the source code with your IDE. I am using JetBrains Idea but other IDE like Eclipse will work. From Idea, you can just select File/Open... and then choose ~/networknt/light folder to open. It will import the pom.xml file under the light folder. You might need to select JDK for java projects if Idea couldn't find the JDK.\r\n            </p>\r\n            <p>\r\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\r\n                <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\r\n                <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a socail commerce site to demo the features of the framework</ul>\r\n                <ul>example folder is a template site that can be copied to start your own web site.</ul>\r\n                Let's create three users for each site and if you are building a new site, create one extra user for it.\r\n                <pre>\r\n            sudo adduser networknt\r\n            sudo adduser edibleforestgarden\r\n            sudo adduser example\r\n                </pre>\r\n            Within each user's home directory, create web subdirectory and grant access to the development user. steve in my case. If you run grunt build from these projects in light folder, you website will be compiled and copied to these web folders and the server will serve the content from these folders for each site. This is like running in production mode.\r\n            copy server.json and virtualhost.json under networknt/light/server/src/main/resources folder to your home directory and update them accordingly.\r\n            Add the following line into /etc/hosts in order to test locally using domain names.\r\n                <pre>\r\n            127.0.0.1\twww.edibleforestgarden.ca www.networknt.com example\r\n                </pre>\r\n            </p>\r\n\r\n            <p>\r\n                6. Start server from IDE in debug mode. From your IDE, right click server/src/main/java/com/networknt/light/server/LightServer and select Debug. The first time the server is started it will create the database and replay the event in resources/initdb.json. It will take several minutes until the debug info is stopped. At this time, you can start Grunt webserver to monitor all your changes in the local directory.\r\n                <pre>\r\n        cd ~/networknt/light/networknt\r\n        npm install\r\n        bower install\r\n        grunt serve\r\n                </pre>\r\n                assuming that Chrome is your default browser, it will be started now and point to localhost:9000 with www.networknt.com site content. I am in a process to move everything from Grunt to Gulp but it is not been done yet.\r\n\r\n            </p>\r\n            <p>\r\n                For individual component/view/application development, you can go the the folder and run the following commands to start another webserver using gulp\r\n        <pre>\r\n        cd ~/networknt/light/view/com-networknt-light-v-example\r\n        npm install\r\n        bower install\r\n        gulp webserver\r\n        </pre>\r\n               Now another server is up listening localhost:8001 using gulp webserver. You can switch to other folders to do the same.\r\n\r\n            </p>\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:54.874"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:54.874",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:201",
    "@version": 1,
    "@class": "Event",
    "eventId": 10202,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-dev-mac",
      "content": "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <h1>Development Environment Mac OS X</h1>\r\n            <p>\r\n                I have set up my development environment on a Mac Book Pro and here is the steps. I am using Google Chrome as my default browser for testing and debugging.\r\n            </p>\r\n            <p>\r\n                The set up is very similar with Linux and Windows 7\r\n            </p>\r\n            <p>\r\n                1. Create a user for development: (If you have a user already please use it. this user needs to have sudo access though. )\r\n            </p>\r\n            <p>\r\n                2. Install JDK8, maven, node.js and npm with sudo and then using npm to install Grunt, Gulp, Bower and other modules.\r\n            </p>\r\n            <p>\r\n                3. Create dev folder and check out the source code.\r\n                <pre>\r\n            log in to the user you just created. Open a terminal and you should be in your home directory c:\\Users\\steve\r\n            $mkdir networknt\r\n            $cd networknt\r\n\r\n            Check out Json Token which is forked from Google and fixed some of the issues.\r\n            $git clone https://github.com/networknt/jsontoken.git\r\n            Check out light rule engine which is a Java based rule engine used in the back end\r\n            $git clone https://github.com/networknt/rule-engine.git\r\n            Check out the light framework and other projects\r\n            $git clone https://github.com/networknt/light.git\r\n\r\n            $cd jsontoken\r\n            $mvn clean install\r\n            $cd ..\r\n            $cd rule-engine\r\n            $mvn clean install\r\n            $cd rule-loader\r\n            $mvn clean install\r\n            $cd ~\r\n            $cd light\r\n            $mvn clean install -DskipTests\r\n\r\n            Now you have all the Java code built already.\r\n\r\n                </pre>\r\n            </p>\r\n            <p>\r\n                4. Open the source code with your IDE. I am using JetBrains Idea but other IDE like Eclipse will work. From Idea, you can just select File/Open... and then choose ~/networknt/light folder to open. It will import the pom.xml file under the light folder. You might need to select JDK for java projects if Idea couldn't find the JDK.\r\n            </p>\r\n            <p>\r\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\r\n            <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\r\n            <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a socail commerce site to demo the features of the framework</ul>\r\n            <ul>example folder is a template site that can be copied to start your own web site.</ul>\r\n            Let's create three users for each site and if you are building a new site, create one extra user for it.\r\n                <pre>\r\n            create user networknt and home directory c:\\Users\\networknt\r\n            create user edibleforestgarden and home directory c:\\Users\\edibleforestgarden\r\n            create user example and home directory c:\\Users\\example\r\n                </pre>\r\n            Within each user's home directory, create web subdirectory and grant access to the development user. steve in my case. If you run grunt build from these projects in light folder, you website will be compiled and copied to these web folders and the server will serve the content from these folders for each site. This is like running in production mode.\r\n            Copy server.json and virtualhost.json under server resource folder to user home directory and update them accordingly.\r\n            Add the following line into /etc/hosts in order to test locally using domain names.\r\n                <pre>\r\n            127.0.0.1\twww.edibleforestgarden.ca www.networknt.com example\r\n                </pre>\r\n            </p>\r\n\r\n            <p>\r\n                6. Start server from IDE in debug mode. From your IDE, right click server/src/main/java/com/networknt/light/server/LightServer and select Debug. The first time the server is started it will create the database and replay the event in resources/initdb.json. It will take several minutes until the debug info is stopped. At this time, you can start Grunt webserver to monitor all your changes in the local directory.\r\n                <pre>\r\n        cd ~/networknt/light/networknt\r\n        npm install\r\n        bower install\r\n        grunt serve\r\n                </pre>\r\n            assuming that Chrome is your default browser, it will be started now and point to localhost:9000 with www.networknt.com site content. You can login with stevehu/123456 to check the admin features. I am in a process to move everything from Grunt to Gulp but it is not been done yet.\r\n\r\n            </p>\r\n            <p>\r\n                For individual component/view/application development, you can go the the folder and run the following commands to start another webserver using gulp\r\n        <pre>\r\n        cd ~/networknt/light/view/com-networknt-light-v-example\r\n        npm install\r\n        bower install\r\n        gulp webserver\r\n        </pre>\r\n            Now another server is up listening localhost:8001 using gulp webserver. You can switch to other folders to do the same.\r\n\r\n            </p>\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:54.894"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:54.894",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:202",
    "@version": 1,
    "@class": "Event",
    "eventId": 10203,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-dev-windows7",
      "content": "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <h1>Development Environment Windows 7</h1>\r\n            <p>\r\n                I have set up my development environment on a Windows 7 desktop and here is the steps. I am using Google Chrome as my default browser for testing and debugging.\r\n            </p>\r\n            <p>\r\n                The set up is very similar with Linux and Mac\r\n            </p>\r\n            <p>\r\n                1. Create a user for development: (If you have a user already please use it. this user needs to have admin access though. )\r\n            </p>\r\n            <p>\r\n                2. Install JDK8, maven, node.js and npm with sudo and then using npm to install Grunt, Gulp, Bower and other modules.\r\n            </p>\r\n            <p>\r\n                3. Create dev folder and check out the source code.\r\n                <pre>\r\n            log in to the user you just created. Open a terminal window Command Prompt and you should be in your home directory c:\\Users\\steve\r\n            $mkdir networknt\r\n            $cd networknt\r\n\r\n            Check out Json Token which is forked from Google and fixed some of the issues.\r\n            $git clone https://github.com/networknt/jsontoken.git\r\n            Check out light rule engine which is a Java based rule engine used in the back end\r\n            $git clone https://github.com/networknt/rule-engine.git\r\n            Check out the light framework and other projects\r\n            $git clone https://github.com/networknt/light.git\r\n\r\n            $cd jsontoken\r\n            $mvn clean install\r\n            $cd ..\r\n            $cd rule-engine\r\n            $mvn clean install\r\n            $cd rule-loader\r\n            $mvn clean install\r\n            $cd ~\r\n            $cd light\r\n            $mvn clean install -DskipTests\r\n\r\n            Now you have all the Java code built already.\r\n\r\n                </pre>\r\n            </p>\r\n            <p>\r\n                4. Open the source code with your IDE. I am using JetBrains Idea but other IDE like Eclipse will work. From Idea, you can just select File/Open... and then choose ~/networknt/light folder to open. It will import the pom.xml file under the light folder. You might need to select JDK for java projects if Idea couldn't find the JDK.\r\n            </p>\r\n            <p>\r\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\r\n            <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\r\n            <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a socail commerce site to demo the features of the framework</ul>\r\n            <ul>example folder is a template site that can be copied to start your own web site.</ul>\r\n            Let's create three users for each site and if you are building a new site, create one extra user for it.\r\n                <pre>\r\n            create user networknt and home directory c:\\Users\\networknt\r\n            create user edibleforestgarden and home directory c:\\Users\\edibleforestgarden\r\n            create user example and home directory c:\\Users\\example\r\n                </pre>\r\n            Within each user's home directory, create web subdirectory and grant access to the development user. steve in my case. If you run grunt build from these projects in light folder, you website will be compiled and copied to these web folders and the server will serve the content from these folders for each site. This is like running in production mode.\r\n            Copy server.json and virtualhost.json under server resource folder to user home directory and update them accordingly.\r\n            Add the following line into Windows/System32/drivers/etc/hosts in order to test locally using domain names.\r\n                <pre>\r\n            127.0.0.1\twww.edibleforestgarden.ca www.networknt.com example\r\n                </pre>\r\n            </p>\r\n\r\n            <p>\r\n                6. Start server from IDE in debug mode. From your IDE, right click server/src/main/java/com/networknt/light/server/LightServer and select Debug. The first time the server is started it will create the database and replay the event in resources/initdb.json. It will take several minutes until the debug info is stopped. At this time, you can start Grunt webserver to monitor all your changes in the local directory.\r\n                <pre>\r\n        cd ~/networknt/light/networknt\r\n        npm install\r\n        bower install\r\n        grunt serve\r\n                </pre>\r\n            assuming that Chrome is your default browser, it will be started now and point to localhost:9000 with www.networknt.com site content. You can login with stevehu/123456 to check the admin features. I am in a process to move everything from Grunt to Gulp but it is not been done yet.\r\n\r\n            </p>\r\n            <p>\r\n                For individual component/view/application development, you can go the the folder and run the following commands to start another webserver using gulp\r\n        <pre>\r\n        cd ~/networknt/light/view/com-networknt-light-v-example\r\n        npm install\r\n        bower install\r\n        gulp webserver\r\n        </pre>\r\n            Now another server is up listening localhost:8001 using gulp webserver. You can switch to other folders to do the same.\r\n\r\n            </p>\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:54.911"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:54.911",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:203",
    "@version": 1,
    "@class": "Event",
    "eventId": 10204,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-first-application",
      "content": "<!DOCTYPE html>\r\n<html>\r\n<head lang=\"en\">\r\n    <meta charset=\"UTF-8\">\r\n    <title></title>\r\n</head>\r\n<body>\r\n\r\n</body>\r\n</html>",
      "createDate": "2015-03-25T20:22:54.928"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:54.928",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:204",
    "@version": 1,
    "@class": "Event",
    "eventId": 10205,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-first-component",
      "content": "<!DOCTYPE html>\r\n<html>\r\n<head lang=\"en\">\r\n    <meta charset=\"UTF-8\">\r\n    <title></title>\r\n</head>\r\n<body>\r\n\r\n</body>\r\n</html>",
      "createDate": "2015-03-25T20:22:54.943"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:54.943",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:205",
    "@version": 1,
    "@class": "Event",
    "eventId": 10206,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-first-view",
      "content": "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <h1>Develop your first view</h1>\r\n            <p>\r\n                Once you have installed development environment following above steps, you should have the following folders in your working directory and java projects in each folder have been built using maven.\r\n\r\n            <ul>light</ul>\r\n            <ul>jsontoken</ul>\r\n            <ul>rule-engine</ul>\r\n\r\n            If you are a full stack developer, you can start the server from your ide in debug mode so that you can monitor the interaction between the browser and the server. Open/import maven project in light folder and start the server in debug mode at server/src/main/java/com/networknt/light/server/LightServer.java\r\n            <p>\r\n            If you are just a front end develop, you can go to light/server/target and run\r\n        <pre>\r\n            java -jar light-server.jar\r\n        </pre>\r\n\r\n            The server provides the REST API endpoints and of cause supply the static and javascript content; however, in order to speed up the front end development, you can use gulp webserver as a proxy to the Light Server and provide live load on your browser if files are updated.\r\n            <p>\r\n            To start the proxy web server, go to view folder under light\r\n        <pre>\r\n            cd view\r\n            npm install\r\n            bower install\r\n            gulp webserver\r\n        </pre>\r\n            A browser will be started automatically at this point. I am using Google Chrome as my default browser and you can use your preferred browser. Let update a static page for example this tutorial.\r\n\r\n            <p>\r\n            Click the first \"Learn more\" button on the home page and click create your first view link, you will see this page on your browser. Open view/src/com-networknt-light-v-first-view.html in your editor and update something and save, you will see your browser refreshed automatically to reflect your changes.\r\n            <p>\r\n            Page/view is a deployment unit in Light Framework and it should be deployed on the server database on official test environment and production. But for development, we want productivity so everything should be working locally with local server support. Here is Angular route for page in app.js under script.\r\n        <pre>\r\n      .when('/page/:id', {\r\n        templateUrl: 'views/page.html',\r\n        controller: 'pageCtrl'\r\n      })\r\n        </pre>\r\n            As you can see, the url has /page and then a page id which is the filename you are editing on the file system without .html extension. Let's take a look at page.html template in views folder.\r\n        <pre>\r\n        &lt;div dynamic='html'&gt;&lt;/div&gt;\r\n        </pre>\r\n        It is a dynamic directive to render html and javascript. The following is the controller for the page.\r\n            <pre>\r\n'use strict';\r\n\r\n/**\r\n * This is a generic page controller. It handles pages without special handling.\r\n * Pages are always loaded from file system first from /src folder, if it cannot be found then they are\r\n * loaded from the database by REST API calls. This is the dev environment and production is always loaded\r\n * from REST API.\r\n */\r\nangular.module('lightApp').controller('pageCtrl', ['$scope', '$routeParams', '$http', 'toaster', 'modelDataService', function($scope, $routeParams, $http, toaster, modelDataService) {\r\n\r\n    console.log('id =', $routeParams.id);\r\n    console.log('file =', '/' + $routeParams.id + '.html');\r\n\r\n    var getPage = {\r\n        category : 'page',\r\n        name : 'getPage',\r\n        readOnly: true,\r\n        data : {\r\n            id : $routeParams.id\r\n        }\r\n    };\r\n\r\n\r\n    $scope.html = '';\r\n    $http.get('/src/' + $routeParams.id + '.html').success (function(data){\r\n        $scope.html = data;\r\n    }).error(function() {\r\n        console.log(\"Could not load file from src folder, try REST API...\");\r\n        $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify(getPage))}})\r\n            .success(function (result, status, headers, config) {\r\n                $scope.html = result.content;\r\n            })\r\n    })\r\n\r\n}]);\r\n            </pre>\r\n\r\n            As you can see it look for the id + .html under src folder and it cannot find the file then ask the server REST API to get the page content. And this is the dynamic directive.\r\n            <pre>\r\ndirective('dynamic', function ($compile) {\r\n    return {\r\n        restrict: 'A',\r\n        replace: true,\r\n        link: function (scope, ele, attrs) {\r\n            scope.$watch(attrs.dynamic, function(html) {\r\n                ele.html(html);\r\n                $compile(ele.contents())(scope);\r\n            });\r\n        }\r\n    };\r\n});\r\n            </pre>\r\n\r\n            At this point you have a page updated and tested locally. Now you can import the page to your local server and capture the event in a file so that it can be deployed on other testing and production environment.\r\n            <li>\r\n                1. Go to Admin menu and click Page Admin. (login with stevehu/123456 to see the admin menu by default)\r\n            </li>\r\n            <li>\r\n                2. All pages in database will be listed here and you can update them by click the id link or delete page by click delete link before the Page Id. There are two buttons on the up right corner to import a page or add a new page. Let's use import as it will overwrite the database version from imported version.\r\n            </li>\r\n            <li>\r\n                3. Click Import button and enter id as the filename you edited without the .html and click choose file button to pick the file from src folder.\r\n            </li>\r\n            <li>\r\n                4. Click Import Page button to get page imported into local server database.\r\n            </li>\r\n            <li>\r\n                5. Click Db Admin from Admin menu and click Download Events link.\r\n            </li>\r\n            <li>\r\n                6. Select from date/time and to date/time for the import page event and click Download Events\r\n            </li>\r\n            <li>\r\n                7. An event or a list of events will be shown up in the text area on the page and you can save it into a file locally. If there are multiple events, remove the rest but only leave the last one in the json array.\r\n            </li>\r\n            <li>\r\n                8. Now you have an event file and it can be replayed on other environment. Login to another server with owner userId and password and click Admin/Db Admin and click link Replay Events. Pick up the event file you just saved and click Replay Event button to get the page deployed to another environment.\r\n            </li>\r\n\r\n            Now you know how to update existing page and generate event file and replay it on another environment for deployment. What about brand new page? And how to refer the newly added page from other page or menu?\r\n\r\n            Here is the html that has another page as a href link.\r\n            <pre>\r\n\r\n                &lt;a href=\"/page/com-networknt-light-v-first-view\"&gt;Create your first view&lt;/a&gt;\r\n            </pre>\r\n\r\n            To link a page to a menu item, go to Admin/Menu Admin and click Menu Items tab and you can update an existing menu item or create a new one and link it to a parent menu. You need to have a label and path will be the page URL like\r\n            <pre>\r\n                /page/com-networknt-light-v-news-admin-home\r\n            </pre>\r\n\r\n            Now you know how to update a static page, create a new static page and link it from another page or menu.How about dynamic Angular page? Can I have controllers, filters and directives in my page? The answer is YES. Let's take a look at one dynamic page.\r\n\r\n            <pre>\r\n&lt;script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.ForumPostCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\r\n        $scope.getForumPost = {\r\n            category : 'forum',\r\n            name: 'getForumPost',\r\n            readOnly: true,\r\n            data: {}\r\n        }\r\n\r\n        $scope.posts = [];\r\n        $scope.forums = [];\r\n\r\n        $scope.fetchResult = function () {\r\n            $scope.getForumPost.data.id = modelDataService.getModelData();\r\n            modelDataService.setModelData(null); // reset the modelDataService variable.\r\n            $http.post('api/rs', $scope.getForumPost)\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.posts = result;\r\n                        console.log($scope.posts);\r\n                    })\r\n        };\r\n        $scope.fetchResult();\r\n\r\n        $scope.post = function() {\r\n            $location.path(\"/form/com.networknt.light.forum.post.add/\" + $scope.getForumPost.data.id);\r\n        };\r\n\r\n        $scope.view = function(post) {\r\n            modelDataService.setModelData(post);\r\n            $location.path(\"/page/com-networknt-light-v-forum-post-view\");\r\n        };\r\n\r\n    }]);\r\n&lt;/script&gt;\r\n&lt;div class=\"container\" ng-controller=\"com.networknt.light.ForumPostCtrl\"&gt;\r\n    &lt;div class=\"row\"&gt;\r\n        &lt;div class=\"col-xs-12 col-sm-12 col-md-12\"&gt;\r\n            &lt;div class=\"pull-right\"&gt;\r\n                &lt;button class=\"btn btn-info\" ng-click=\"post()\"&gt;&lt;i class=\"glyphicon glyphicon-edit\"&gt;&lt;/i&gt;Post&lt;/button&gt;\r\n                &lt;/div&gt;\r\n            &lt;tabset&gt;\r\n                &lt;tab heading=\"Recent\"&gt;\r\n                    &lt;table class=\"table table-striped\"&gt;\r\n                        &lt;thead&gt;\r\n                        &lt;tr&gt;\r\n                        &lt;/tr&gt;\r\n                        &lt;/thead&gt;\r\n                        &lt;tbody&gt;\r\n                        &lt;tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\"&gt;\r\n                            &lt;td&gt;&lt;a href ng-click=\"view(post)\"&gt;{{post.title}}&lt;/a&gt;&lt;/td&gt;\r\n                &lt;/tr&gt;\r\n                        &lt;tr&gt;\r\n                            &lt;td&gt;{{post.createUser}} {{post.updateDate}}&lt;/td&gt;\r\n                &lt;/tr&gt;\r\n                        &lt;/tbody&gt;\r\n                    &lt;/table&gt;\r\n                &lt;/tab&gt;\r\n                &lt;tab heading=\"Bookmark\"&gt;\r\n                    &lt;table class=\"table table-striped\"&gt;\r\n                        &lt;thead&gt;\r\n                        &lt;tr&gt;\r\n                        &lt;/tr&gt;\r\n                        &lt;/thead&gt;\r\n                        &lt;tbody&gt;\r\n                        &lt;tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\"&gt;\r\n                            &lt;td&gt;\r\n                                &lt;div&gt;&lt;a href ng-click=\"view(post)\"&gt;{{post.title}}&lt;/a&gt;&lt;/div&gt;\r\n        &lt;div&gt;{{post.createUser}} {{post.createDate}}&lt;/div&gt;\r\n    &lt;/td&gt;\r\n    &lt;/tr&gt;\r\n    &lt;/tbody&gt;\r\n    &lt;/table&gt;\r\n    &lt;/tab&gt;\r\n    &lt;/tabset&gt;\r\n    &lt;/div&gt;\r\n    &lt;/div&gt;\r\n    &lt;/div&gt; &lt;!-- /container --&gt;\r\n\r\n            </pre>\r\n\r\n            As you can see there is a controller in the page. Someone who is Angular developer might ask how come you can register your controller when the page is loaded dynamically? Is angular supposed to register all the controller at bootstrap time? Here is the trick to register controller once the page is loaded.\r\n            I saved the Angular providers in variables and use them to register during runtime dynamically.\r\n\r\n            <pre>\r\nconfig(['$routeProvider', '$locationProvider', '$controllerProvider', '$compileProvider', '$filterProvider', '$provide', function ($routeProvider, $locationProvider, $controllerProvider, $compileProvider, $filterProvider, $provide) {\r\n\r\n    // Notice that the registration methods on the\r\n    // module are now being overridden by their provider equivalents\r\n    lightApp.controller = $controllerProvider.register;\r\n    lightApp.directive  = $compileProvider.directive;\r\n    lightApp.filter     = $filterProvider.register;\r\n    lightApp.factory    = $provide.factory;\r\n    lightApp.service    = $provide.service;\r\n\r\n            </pre>\r\n            Now you know how to update, create static and dynamic views or pages in Light Framework and know how to deploy them to another environment. I also record a video to show you the steps described above and you can view it at\r\n\r\n            <a href=\"http://youtu.be/fLCjboWLXgY\">http://youtu.be/fLCjboWLXgY</a>\r\n            <p>\r\n            Happy designing.\r\n\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:54.962"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:54.962",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:206",
    "@version": 1,
    "@class": "Event",
    "eventId": 10207,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-form-admin-add",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.FormAdminAddCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\r\n        $scope.addFormPost = {\r\n            category : 'form',\r\n            name : 'addForm',\r\n            readOnly: false,\r\n            data: {}\r\n        };\r\n\r\n        $scope.schema = {};\r\n        $scope.form = [];\r\n        $scope.action = [];\r\n        $scope.modelData = {};\r\n        $scope.schemaJson = JSON.stringify($scope.schema, undefined, 2);\r\n        $scope.formJson = JSON.stringify($scope.form, undefined, 2);\r\n        $scope.actionJson = JSON.stringify($scope.action, undefined, 2);\r\n        $scope.decorator = 'bootstrap-decorator';\r\n\r\n        $scope.itParsesSchema = true;\r\n        $scope.itParsesForm = true;\r\n        $scope.itParsesAction = true;\r\n\r\n        $scope.$watch('schemaJson',function(val,old){\r\n            if (val && val !== old) {\r\n                try {\r\n                    $scope.schema = JSON.parse($scope.schemaJson);\r\n                    $scope.itParsesSchema = true;\r\n                } catch (e){\r\n                    $scope.itParsesSchema = false;\r\n                }\r\n            }\r\n        });\r\n\r\n        $scope.$watch('formJson',function(val,old){\r\n            if (val && val !== old) {\r\n                try {\r\n                    $scope.form = JSON.parse($scope.formJson);\r\n                    $scope.itParsesForm = true;\r\n                } catch (e){\r\n                    $scope.itParsesForm = false;\r\n                }\r\n            }\r\n        });\r\n\r\n        $scope.$watch('actionJson',function(val,old){\r\n            if (val && val !== old) {\r\n                try {\r\n                    $scope.action = JSON.parse($scope.actionJson);\r\n                    $scope.itParsesAction = true;\r\n                } catch (e){\r\n                    $scope.itParsesAction = false;\r\n                }\r\n            }\r\n        });\r\n\r\n        $scope.pretty = function(){\r\n            return JSON.stringify($scope.modelData,undefined,2,2);\r\n        };\r\n\r\n        $scope.submitForm = function(form, model) {\r\n            // First we broadcast an event so all fields validate themselves\r\n            //console.log(model);\r\n            $scope.$broadcast('schemaFormValidate');\r\n            // Then we check if the form is valid\r\n            if (form.$valid) {\r\n                // TODO submit the form based on the action defined.\r\n\r\n\r\n            }\r\n        };\r\n\r\n        $scope.submitSchema = function() {\r\n            console.log('submitSchema is called');\r\n            $scope.addFormPost.data.formId = $scope.formId;\r\n            $scope.addFormPost.data.schema = $scope.schema;\r\n            $scope.addFormPost.data.form = $scope.form;\r\n            $scope.addFormPost.data.action = $scope.action;\r\n            $http.post('api/rs', $scope.addFormPost)\r\n                    .success(function(data, status, headers, config) {\r\n                        toaster.pop('success', status, data, 3000);\r\n                        $location.path(\"/page/com-networknt-light-v-form-admin-home\");\r\n                    })\r\n\r\n        };\r\n\r\n        $scope.saveModel = function() {\r\n            console.log('saveModel is called');\r\n            console.log($scope.modelData);\r\n            $scope.addFormPost.data.modelData = $scope.modelData;\r\n            $http.post('api/rs', $scope.addFormPost)\r\n                    .success(function(data, status, headers, config) {\r\n                        toaster.pop('success', status, data, 3000);\r\n                        $location.path(\"/page/com-networknt-light-v-form-admin-home\");\r\n                    })\r\n        };\r\n\r\n    }]);\r\n</script>\r\n<style type=\"text/css\">\r\n\r\n    body,html {\r\n        min-height: 1400px;\r\n    }\r\n\r\n    .alert .form-group {\r\n        margin-bottom: 0px;\r\n    }\r\n\r\n    .red {\r\n        border: 1px solid red;\r\n        background: #fee;\r\n    }\r\n\r\n    .ace_editor { font-size: 20px !important;}\r\n    .form {  height: 400px;  }\r\n    .action { height: 200px; }\r\n    .schema {  height: 800px;  }\r\n</style>\r\n<div class=\"col-md-12\" ng-app=\"lightApp\" ng-controller=\"com.networknt.light.FormAdminAddCtrl\">\r\n    <h1>Schema Form Admin</h1>\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-4\">\r\n            <h3>The Generated Form</h3>\r\n            <form name=\"ngform\" ng-submit=\"submitForm(ngform, modelData)\">\r\n                <div sf-model=\"modelData\" sf-form=\"form\" sf-schema=\"schema\"></div>\r\n                <div ng-repeat=\"act in action\">\r\n                    <input type=\"submit\" ng-click=\"setButtonIndex($index)\" class=\"btn btn-primary pull-right\" value=\"{{act.title}}\">\r\n                </div>\r\n            </form>\r\n\r\n            <h3>Model</h3>\r\n            <pre ng-cloak>{{pretty()}}</pre>\r\n            <div class=\"col-xs-3 col-md-3\"><input type=\"submit\" value=\"Save Model\" ng-click=\"saveModel()\" class=\"btn btn-primary btn-block\"></div>\r\n        </div>\r\n        <div class=\"col-sm-8\">\r\n            <h3>Form Id</h3>\r\n            <div><input type=\"text\" ng-model=\"formId\"></div>\r\n            <h3>Form</h3>\r\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesForm}\" ng-model=\"formJson\" class=\"form-control form\"></div>\r\n            <h3>Action</h3>\r\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesAction}\" ng-model=\"actionJson\" class=\"form-control action\"></div>\r\n            <h3>Schema</h3>\r\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesSchema}\" ng-model=\"schemaJson\" class=\"form-control schema\"></div>\r\n            <div class=\"col-xs-2 col-md-2\"><input type=\"submit\" value=\"Save Schema\" ng-click=\"submitSchema()\" class=\"btn btn-primary btn-block\"></div>\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:54.980"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:54.980",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:207",
    "@version": 1,
    "@class": "Event",
    "eventId": 10208,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-form-admin-home",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.FormAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\r\n        $scope.getAllForm = {\r\n            category : 'form',\r\n            name : 'getAllForm',\r\n            readOnly: true\r\n        };\r\n        $scope.delForm = {\r\n            category : 'form',\r\n            name : 'delForm',\r\n            readOnly: false\r\n        };\r\n        $scope.forms = [];\r\n\r\n        $scope.headers = [\r\n            {\r\n                title: 'Delete',\r\n                value: 'delete'\r\n            },\r\n            {\r\n                title: 'Form Id',\r\n                value: 'formId'\r\n            },\r\n            {\r\n                title: 'Host',\r\n                value: 'host'\r\n            },\r\n            {\r\n                title: 'Create User Id',\r\n                value: 'createUserId'\r\n            },\r\n            {\r\n                title: 'Create Date',\r\n                value: 'createDate'\r\n            },\r\n            {\r\n                title: 'Update User Id',\r\n                value: 'updateUserId'\r\n            },\r\n            {\r\n                title: 'Update Date',\r\n                value: 'updateDate'\r\n            }\r\n        ];\r\n        $scope.sort = {\r\n            sortDir : 'desc',\r\n            sortedBy : 'createDate'\r\n        };\r\n        $scope.filter = {};\r\n\r\n        $scope.onSort = function (sortedBy, sortDir) {\r\n            $scope.sort.sortDir = sortDir;\r\n            $scope.sort.sortedBy = sortedBy;\r\n        };\r\n\r\n        $scope.delete = function(form) {\r\n            $scope.delForm.data = form;\r\n            $http.post('api/rs', $scope.delForm)\r\n                    .success(function (data, status, headers, config) {\r\n                        $scope.forms.splice($scope.forms.indexOf(form), 1);\r\n                        toaster.pop('success', status, data, 3000);\r\n                    })\r\n        };\r\n\r\n\r\n        $scope.update = function(form) {\r\n            modelDataService.setModelData(form);\r\n            $location.path(\"/page/com-networknt-light-v-form-admin-update\");\r\n        };\r\n\r\n        $scope.add = function() {\r\n            $location.path(\"/page/com-networknt-light-v-form-admin-add\");\r\n        };\r\n\r\n        $scope.import = function() {\r\n            $location.path(\"/form/com.networknt.light.form.import\");\r\n        };\r\n\r\n        $scope.fetchResult = function () {\r\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify($scope.getAllForm))}})\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.forms = result;\r\n                        console.log($scope.forms);\r\n                    })\r\n        };\r\n        $scope.fetchResult();\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.FormAdminHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\r\n            </div>\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"import()\"><i class=\"glyphicon glyphicon-edit\"></i>Import</button>\r\n            </div>\r\n            <tabset>\r\n                <tab heading=\"Forms\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th ng-repeat=\"header in headers\">\r\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td><input ng-model=\"filter.formId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.host\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"form in forms | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td><a href ng-click=\"delete(form)\">Delete</a></td>\r\n                            <td><a href ng-click=\"update(form)\">{{form.formId}}</a></td>\r\n                            <td>{{form.host}}</td>\r\n                            <td>{{form.createUserId}}</td>\r\n                            <td>{{form.createDate}}</td>\r\n                            <td>{{form.updateUserId}}</td>\r\n                            <td>{{form.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.004"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.004",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:208",
    "@version": 1,
    "@class": "Event",
    "eventId": 10209,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-form-admin-update",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.FormAdminUpdateCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\r\n        $scope.updFormPost = {\r\n            category : 'form',\r\n            name : 'updForm',\r\n            readOnly: false\r\n        };\r\n\r\n        $scope.data = modelDataService.getModelData() || {};\r\n        modelDataService.setModelData(null); // reset the modelDataService variable.\r\n        //console.log($scope.data);\r\n        //console.log($scope.data.id);\r\n        $scope.updFormPost.data = $scope.data;\r\n        $scope.schema = $scope.data.schema;\r\n        //console.log($scope.schema);\r\n        $scope.form = $scope.data.form;\r\n        //console.log($scope.form);\r\n        $scope.action = $scope.data.action;\r\n        //console.log($scope.action);\r\n        $scope.schemaJson = JSON.stringify($scope.schema, undefined, 2);\r\n        $scope.formJson = JSON.stringify($scope.form, undefined, 2);\r\n        $scope.actionJson = JSON.stringify($scope.action, undefined, 2);\r\n        $scope.modelData = $scope.data.modelData || {};\r\n        $scope.decorator = 'bootstrap-decorator';\r\n\r\n        $scope.itParsesSchema = true;\r\n        $scope.itParsesForm = true;\r\n        $scope.itParsesAction = true;\r\n\r\n        $scope.$watch('schemaJson',function(val,old){\r\n            if (val && val !== old) {\r\n                try {\r\n                    $scope.schema = JSON.parse($scope.schemaJson);\r\n                    $scope.itParsesSchema = true;\r\n                } catch (e){\r\n                    $scope.itParsesSchema = false;\r\n                }\r\n            }\r\n        });\r\n\r\n        $scope.$watch('formJson',function(val,old){\r\n            if (val && val !== old) {\r\n                try {\r\n                    $scope.form = JSON.parse($scope.formJson);\r\n                    $scope.itParsesForm = true;\r\n                } catch (e){\r\n                    $scope.itParsesForm = false;\r\n                }\r\n            }\r\n        });\r\n\r\n        $scope.$watch('actionJson',function(val,old){\r\n            if (val && val !== old) {\r\n                try {\r\n                    $scope.action = JSON.parse($scope.actionJson);\r\n                    $scope.itParsesAction = true;\r\n                } catch (e){\r\n                    $scope.itParsesAction = false;\r\n                }\r\n            }\r\n        });\r\n\r\n        $scope.pretty = function(){\r\n            return JSON.stringify($scope.modelData,undefined,2,2);\r\n        };\r\n\r\n        $scope.submitForm = function(form, model) {\r\n            // First we broadcast an event so all fields validate themselves\r\n            //console.log(model);\r\n            $scope.$broadcast('schemaFormValidate');\r\n            // Then we check if the form is valid\r\n            if (form.$valid) {\r\n                // TODO submit the form based on the action defined.\r\n\r\n\r\n            }\r\n        };\r\n\r\n        $scope.submitSchema = function() {\r\n            console.log('submitSchema is called');\r\n            $scope.updFormPost.data.schema = $scope.schema;\r\n            console.log($scope.schema);\r\n            $scope.updFormPost.data.form = $scope.form;\r\n            console.log($scope.form);\r\n            $scope.updFormPost.data.action = $scope.action;\r\n            console.log($scope.action);\r\n            $http.post('api/rs', $scope.updFormPost)\r\n                    .success(function(data, status, headers, config) {\r\n                        toaster.pop('success', status, data, 3000);\r\n                        $location.path(\"/page/com-networknt-light-v-form-admin-home\");\r\n                    })\r\n\r\n        };\r\n\r\n        $scope.saveModel = function() {\r\n            console.log('saveModel is called');\r\n            console.log($scope.modelData);\r\n            $scope.updFormPost.data.modelData = $scope.modelData;\r\n            $http.post('api/rs', $scope.updFormPost)\r\n                    .success(function(data, status, headers, config) {\r\n                        toaster.pop('success', status, data, 3000);\r\n                        $location.path(\"/page/com-networknt-light-v-form-admin-home\");\r\n                    })\r\n        };\r\n\r\n    }]);\r\n</script>\r\n<style type=\"text/css\">\r\n\r\n    body,html {\r\n        min-height: 1400px;\r\n    }\r\n\r\n    .alert .form-group {\r\n        margin-bottom: 0px;\r\n    }\r\n\r\n    .red {\r\n        border: 1px solid red;\r\n        background: #fee;\r\n    }\r\n\r\n    .ace_editor { font-size: 20px !important;}\r\n    .form {  height: 400px;  }\r\n    .action { height: 200px; }\r\n    .schema {  height: 800px;  }\r\n</style>\r\n<div class=\"col-md-12\" ng-app=\"lightApp\" ng-controller=\"com.networknt.light.FormAdminUpdateCtrl\">\r\n    <h1>Schema Form Admin</h1>\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-4\">\r\n            <h3>The Generated Form</h3>\r\n            <form name=\"ngform\" ng-submit=\"submitForm(ngform, modelData)\">\r\n                <div sf-model=\"modelData\" sf-form=\"form\" sf-schema=\"schema\"></div>\r\n                <div ng-repeat=\"act in action\">\r\n                    <input type=\"submit\" ng-click=\"setButtonIndex($index)\" class=\"btn btn-primary pull-right\" value=\"{{act.title}}\">\r\n                </div>\r\n            </form>\r\n\r\n            <h3>Model</h3>\r\n            <pre ng-cloak>{{pretty()}}</pre>\r\n            <div class=\"col-xs-3 col-md-3\"><input type=\"submit\" value=\"Save Model\" ng-click=\"saveModel()\" class=\"btn btn-primary btn-block\"></div>\r\n        </div>\r\n        <div class=\"col-sm-8\">\r\n            <h3>Selected Form: {{data.formId}}</h3>\r\n            <h3>Form</h3>\r\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesForm}\" ng-model=\"formJson\" class=\"form-control form\"></div>\r\n            <h3>Action</h3>\r\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesAction}\" ng-model=\"actionJson\" class=\"form-control action\"></div>\r\n            <h3>Schema</h3>\r\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesSchema}\" ng-model=\"schemaJson\" class=\"form-control schema\"></div>\r\n            <div class=\"col-xs-2 col-md-2\"><input type=\"submit\" value=\"Save Schema\" ng-click=\"submitSchema()\" class=\"btn btn-primary btn-block\"></div>\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:55.040"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.040",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:209",
    "@version": 1,
    "@class": "Event",
    "eventId": 10210,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-forum-admin-home",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.ForumAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\r\n        $scope.getForum = {\r\n            category : 'forum',\r\n            name : 'getForum',\r\n            readOnly: true\r\n        };\r\n        $scope.delForum = {\r\n            category : 'forum',\r\n            name : 'delForum',\r\n            readOnly: false\r\n        };\r\n\r\n        $scope.forums = [];\r\n        $scope.headers = [\r\n            {\r\n                title: 'Delete',\r\n                value: 'delete'\r\n            },\r\n            {\r\n                title: 'Forum Id',\r\n                value: 'forumId'\r\n            },\r\n            {\r\n                title: 'Desc',\r\n                value: 'desc'\r\n            },\r\n            {\r\n                title: 'Create User Id',\r\n                value: 'createUserId'\r\n            },\r\n            {\r\n                title: 'Create Date',\r\n                value: 'createDate'\r\n            },\r\n            {\r\n                title: 'Update User Id',\r\n                value: 'updateUserId'\r\n            },\r\n            {\r\n                title: 'Update Date',\r\n                value: 'updateDate'\r\n            }\r\n        ];\r\n        $scope.sort = {\r\n            sortDir : 'desc',\r\n            sortedBy : 'updateDate'\r\n        };\r\n        $scope.filter = {};\r\n\r\n        $scope.onSort = function (sortedBy, sortDir) {\r\n            $scope.sort.sortDir = sortDir;\r\n            $scope.sort.sortedBy = sortedBy;\r\n        };\r\n\r\n        $scope.delete = function(forum) {\r\n            $scope.delForum.data = forum;\r\n            $http.post('api/rs', $scope.delForum)\r\n                    .success(function (data, status, headers, config) {\r\n                        $scope.forums.splice($scope.forums.indexOf(forum), 1);\r\n                        toaster.pop('success', status, data, 3000);\r\n                    })\r\n        };\r\n\r\n        $scope.update = function(forum) {\r\n            modelDataService.setModelData(forum);\r\n            $location.path(\"/form/com.networknt.light.forum.update\");\r\n        };\r\n\r\n        $scope.add = function() {\r\n            $location.path(\"/form/com.networknt.light.forum.add\");\r\n        };\r\n\r\n        $scope.fetchResult = function () {\r\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify($scope.getForum))}})\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.forums = result;\r\n                        console.log($scope.forums);\r\n                    })\r\n        };\r\n        $scope.fetchResult();\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.ForumAdminHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\r\n            </div>\r\n            <tabset>\r\n                <tab heading=\"Recent\">\r\n                    <h4>Forums</h4>\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th ng-repeat=\"header in headers\">\r\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td><input ng-model=\"filter.forumId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.desc\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"forum in forums | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td><a href ng-click=\"delete(forum)\">Delete</a></td>\r\n                            <td><a href ng-click=\"update(forum)\">{{forum.forumId}}</a></td>\r\n                            <td>{{forum.desc}}</td>\r\n                            <td>{{forum.createUserId}}</td>\r\n                            <td>{{forum.createDate}}</td>\r\n                            <td>{{forum.updateUserId}}</td>\r\n                            <td>{{forum.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <pagination total-items=\"page.totalItems\" items-per-page=\"getForum.data.pageSize\" ng-model=\"getForum.data.pageNo\" max-size=\"page.maxSize\" class=\"pagination-sm\" boundary-links=\"true\" rotate=\"false\" num-pages=\"page.numPages\" ng-change=\"pageChanged()\"></pagination>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.057"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.057",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:210",
    "@version": 1,
    "@class": "Event",
    "eventId": 10211,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-forum-home",
      "content": "<script type='text/javascript'>\r\n\r\n    'use strict';\r\n\r\n    angular.module('lightApp').controller('com.networknt.light.c.ForumCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\r\n        $scope.getForum = {\r\n            category: 'forum',\r\n            name: 'getForumTree',\r\n            readOnly: true\r\n        };\r\n\r\n        $scope.fetchResult = function () {\r\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getForum))}})\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.forums = result;\r\n                        console.log($scope.forums);\r\n                    })\r\n        };\r\n        $scope.fetchResult();\r\n\r\n        $scope.toggle = function (scope) {\r\n            scope.toggle();\r\n        };\r\n\r\n        var getRootNodesScope = function () {\r\n            return angular.element(document.getElementById(\"tree-root\")).scope();\r\n        };\r\n\r\n        $scope.collapseAll = function () {\r\n            var scope = getRootNodesScope();\r\n            scope.collapseAll();\r\n        };\r\n\r\n        $scope.expandAll = function () {\r\n            var scope = getRootNodesScope();\r\n            scope.expandAll();\r\n        };\r\n\r\n        $scope.treeFilter = $filter('uiTreeFilter');\r\n\r\n        $scope.supportedFields = ['forumId', 'desc'];\r\n\r\n        $scope.gotoForum = function (forumId) {\r\n            modelDataService.setModelData(forumId);\r\n            $location.path(\"/page/com-networknt-light-v-forum-post\");\r\n        }\r\n\r\n    }]);\r\n</script>\r\n<div class=\"container\" data-ng-controller=\"com.networknt.light.c.ForumCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\r\n            <h4 class=\"page-header\">Forum</h4>\r\n            <div>\r\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\">Collapse all</a>\r\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"expandAll()\">Expand all</a>\r\n                <input ng-model=\"pattern\" placeholder=\"Type a part of any forum\"/>\r\n            </div>\r\n            <!-- Nested node template -->\r\n            <script type=\"text/ng-template\" id=\"nodes_renderer.html\">\r\n                <div ui-tree-handle class=\"tree-node tree-node-content\">\r\n                    <a class=\"btn btn-success btn-xs\" ng-if=\"node.out_Own && node.out_Own.length > 0\" data-nodrag\r\n                       ng-click=\"toggle(this)\"><span class=\"glyphicon\"\r\n                                                     ng-class=\"{'glyphicon glyphicon-plus': collapsed, 'glyphicon glyphicon-minus': !collapsed}\"></span></a>\r\n                    <!--{{node.id | highlight:pattern | trust}}-->\r\n                    <a href ng-click=\"gotoForum(node.forumId)\" ng-bind-html=\"node.forumId | highlight:pattern | trust\"></a>\r\n                    <small ng-bind-html=\"node.desc | highlight:pattern | trust\"></small>\r\n                </div>\r\n                <ol ui-tree-nodes=\"\" ng-model=\"node.out_Own\" ng-class=\"{hidden: collapsed}\">\r\n                    <li ng-repeat=\"node in node.out_Own\" ui-tree-node ng-include=\"'nodes_renderer.html'\"\r\n                        ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\r\n                </ol>\r\n            </script>\r\n            <div ui-tree data-drag-enabled=false id=\"tree-root\">\r\n                <ol ui-tree-nodes ng-model=\"forums\">\r\n                    <li ng-repeat=\"node in forums\" ui-tree-node ng-include=\"'nodes_renderer.html'\"\r\n                        ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:55.080"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.080",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:211",
    "@version": 1,
    "@class": "Event",
    "eventId": 10212,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-forum-home_v2",
      "content": "<script type='text/javascript'>\r\n    'use strict';\r\n\r\n    angular.module('lightApp').controller('com.networknt.light.c.ForumCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\r\n    $scope.getForum = {\r\n        category : 'forum',\r\n        name : 'getForumTree',\r\n        readOnly: true\r\n    };\r\n\r\n    $scope.fetchResult = function () {\r\n        $http.post('api/rs', $scope.getForum)\r\n            .success(function (result, status, headers, config) {\r\n                $scope.forums = result;\r\n                console.log($scope.forums);\r\n            })\r\n    };\r\n    $scope.fetchResult();\r\n\r\n    $scope.toggle = function(scope) {\r\n        scope.toggle();\r\n    };\r\n\r\n    var getRootNodesScope = function() {\r\n        return angular.element(document.getElementById(\"tree-root\")).scope();\r\n    };\r\n\r\n    $scope.collapseAll = function() {\r\n        var scope = getRootNodesScope();\r\n        scope.collapseAll();\r\n    };\r\n\r\n    $scope.expandAll = function() {\r\n        var scope = getRootNodesScope();\r\n        scope.expandAll();\r\n    };\r\n\r\n    $scope.treeFilter = $filter('uiTreeFilter');\r\n\r\n    $scope.supportedFields = ['id', 'desc'];\r\n\r\n    $scope.goToForum = function(id) {\r\n        modelDataService.setModelData({\r\n            forumId: id\r\n            });\r\n        $location.path(\"/page/com-networknt-light-v-forum-post\");\r\n    };\r\n\r\n    }]);\r\n</script>\r\n<div class=\"container\" data-ng-controller=\"com.networknt.light.c.ForumCtrl\">\r\n    <div class=\"jumbotron\">\r\n        <h2>Forums</h2>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-12 col-md-12\">\r\n            <div style=\"padding:15px\">\r\n                <span class=\"glyphicon glyphicon-search\" style=\"padding-right:10px\"></span><input ng-model=\"pattern\" placeholder=\"Search\"/>\r\n                <!--<a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\">Collapse all</a>-->\r\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\"><span class=\"glyphicon glyphicon-resize-small\"></span></a>\r\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"expandAll()\"><span class=\"glyphicon glyphicon-resize-full\"></span></a>\r\n            </div>\r\n            <!-- Nested node template -->\r\n            <script type=\"text/ng-template\" id=\"nodes_renderer.html\">\r\n                <div ui-tree-handle class=\"tree-node tree-node-content\">\r\n                    <a class=\"btn btn-xs\" ng-if=\"node.children && node.children.length > 0\" data-nodrag ng-click=\"toggle(this)\"><span class=\"glyphicon\" ng-class=\"{'glyphicon glyphicon-plus': collapsed, 'glyphicon glyphicon-minus': !collapsed}\"></span></a>\r\n                    <!--{{node.id | highlight:pattern | trust}}-->\r\n                    <a href ng-click=\"goToForum(node.id)\" ng-bind-html=\"node.id | highlight:pattern | trust\"></a>\r\n                    <small ng-bind-html=\"node.desc | highlight:pattern | trust\"></small>\r\n                </div>\r\n                <ol ui-tree-nodes=\"\" ng-model=\"node.children\" ng-class=\"{hidden: collapsed}\">\r\n                    <li ng-repeat=\"node in node.children\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\r\n                </ol>\r\n            </script>\r\n            <div ui-tree data-drag-enabled=\"false\" id=\"tree-root\">\r\n                <ol ui-tree-nodes ng-model=\"forums\">\r\n                    <li ng-repeat=\"node in forums\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:55.102"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.102",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:212",
    "@version": 1,
    "@class": "Event",
    "eventId": 10213,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-forum-post-view",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.ForumPostViewCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\r\n        $scope.getComment = {\r\n            category: 'comment',\r\n            name: 'getCommentTree',\r\n            readOnly: true\r\n        }\r\n\r\n        $scope.addComment = {\r\n            category: 'comment',\r\n            name: 'addComment',\r\n            readOnly: false\r\n        }\r\n\r\n        $scope.getComment.data = modelDataService.getModelData();\r\n        $scope.addComment.data = modelDataService.getModelData();\r\n\r\n        $scope.comments = [];\r\n\r\n        $scope.fetchResult = function () {\r\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getComment))}})\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.comments = result;\r\n                        console.log($scope.comments);\r\n                    })\r\n        };\r\n        $scope.fetchResult();\r\n\r\n        $scope.aceOption = {\r\n            useWrapMode: true,\r\n            showGutter: false,\r\n            theme: 'eclipse',\r\n            mode: 'markdown'\r\n        };\r\n\r\n        $scope.submit = function () {\r\n            $http.post('api/rs', $scope.addComment)\r\n                    .success(function (data, status, headers, config) {\r\n                        toaster.pop('success', status, data);\r\n                        $scope.fetchResult();\r\n                    })\r\n        }\r\n\r\n        $scope.toggle = function (scope) {\r\n            scope.toggle();\r\n        };\r\n\r\n        var getRootNodesScope = function () {\r\n            return angular.element(document.getElementById(\"tree-root\")).scope();\r\n        };\r\n\r\n        $scope.collapseAll = function () {\r\n            var scope = getRootNodesScope();\r\n            scope.collapseAll();\r\n        };\r\n\r\n        $scope.expandAll = function () {\r\n            var scope = getRootNodesScope();\r\n            scope.expandAll();\r\n        };\r\n\r\n        $scope.treeFilter = $filter('uiTreeFilter');\r\n\r\n        $scope.supportedFields = ['content'];\r\n\r\n        $scope.toggledForm = false;\r\n        $scope.btnText = 'add comment';\r\n\r\n        $scope.toggleForm = function () {\r\n            $scope.toggledForm = !$scope.toggledForm;\r\n            $scope.btnText = ($scope.toggledForm) ? 'add comment' : 'close';\r\n        };\r\n\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.ForumPostViewCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-12 col-md-12\">\r\n            <div>\r\n                <div>{{getComment.data.title}}</div>\r\n                <div>{{getComment.data.createUserId}} {{getComment.data.createDate}}</div>\r\n                <div marked=\"getComment.data.content\"></div>\r\n            </div>\r\n            <div ui-ace=\"aceOption\" ng-model=\"addComment.data.comment\"></div>\r\n            <button class=\"pure-button pure-button-small success-bg\" ng-click=\"submit()\">Submit</button>\r\n\r\n            <div>\r\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\">Collapse all</a>\r\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"expandAll()\">Expand all</a>\r\n                <input ng-model=\"pattern\" placeholder=\"Type a part of any comment\"/>\r\n            </div>\r\n            <!-- Nested node template -->\r\n            <script type=\"text/ng-template\" id=\"nodes_renderer.html\">\r\n                <div ui-tree-handle class=\"tree-node tree-node-content\">\r\n                    <a class=\"btn btn-success btn-xs\" ng-if=\"node.out_Own && node.out_Own.length > 0\" data-nodrag\r\n                       ng-click=\"toggle(this)\"><span class=\"glyphicon\"\r\n                                                     ng-class=\"{'glyphicon glyphicon-plus': collapsed, 'glyphicon glyphicon-minus': !collapsed}\"></span></a>\r\n                    <a href=\"http://www.reddit.com/user/JhnnyTsunami\" class=\"author may-blank id-t2_95r8a\"><span\r\n                            ng-bind-html=\"node.createUserId | highlight:pattern | trust\"></span></a>&#32;<span>{{node.createDate}}</span>\r\n\r\n                    <div ng-bind-html=\"node.comment | highlight:pattern | trust\"></div>\r\n                    <!--\r\n                    <div class=\"panel-body\">\r\n                        <form name=\"form\" ng-submit=\"action(node)\" class=\"form-inline\" ng-hide=\"toggledForm\">\r\n                            <div class=\"form-group\">\r\n                                <textarea ng-model=\"child.text\" value=\"your comment..\" class=\"form-control\" rows=\"1\" ng-minlength=\"5\" required></textarea>\r\n                            </div>\r\n                            <button ng-disabled=\"form.$invalid\" type=\"submit\" class=\"btn btn-primary\">Submit</button>\r\n                        </form>\r\n                        <span class=\"label pull-right pointer\" ng-click=\"toggleForm()\"\r\n                        ng-class=\"{'label-success': toggledForm, 'label-warning': !toggledForm}\">{{ btnText }}</span>\r\n                    </div>\r\n                    -->\r\n                </div>\r\n                <ol ui-tree-nodes=\"\" ng-model=\"node.out_Own\" ng-class=\"{hidden: collapsed}\">\r\n                    <li ng-repeat=\"node in node.out_Own\" ui-tree-node ng-include=\"'nodes_renderer.html'\"\r\n                        ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\r\n                </ol>\r\n            </script>\r\n            <div ui-tree id=\"tree-root\">\r\n                <ol ui-tree-nodes ng-model=\"out_Own\">\r\n                    <li ng-repeat=\"node in out_Own\" ui-tree-node ng-include=\"'nodes_renderer.html'\"\r\n                        ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.136"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.136",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:213",
    "@version": 1,
    "@class": "Event",
    "eventId": 10214,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-forum-post-view_v2",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.ForumPostViewCtrl', ['$scope', '$http', '$location', 'authService', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, authService, $filter, toaster, modelDataService) {\r\n\r\n        $scope.postData = modelDataService.getModelData().post;\r\n        $scope.comments = [];\r\n\r\n        $scope.getComments = {\r\n            category: 'comment',\r\n            name: 'getComment',\r\n            readOnly: true,\r\n            data: {}\r\n        };\r\n\r\n        $scope.addComment = {\r\n            category: 'comment',\r\n            name: 'addComment',\r\n            readOnly: false,\r\n            data: {}\r\n        };\r\n\r\n        $scope.displayAddCommentRow = false;\r\n        $scope.displaySubmitCommentButton = false;\r\n        $scope.addCommentText = 'Reply';\r\n        $scope.addCommentClass = 'btn btn-info';\r\n        $scope.addCommentGlyph = 'glyphicon glyphicon-plus';\r\n\r\n        $scope.toggleComment = function() {\r\n            $scope.displayAddCommentRow = !$scope.displayAddCommentRow;\r\n            if ($scope.addCommentText == 'Reply') {\r\n                $scope.addCommentText = 'Cancel';\r\n                $scope.addCommentClass = 'btn btn-danger';\r\n                $scope.addCommentGlyph = '';\r\n            } else {\r\n                $scope.addCommentText = 'Reply';\r\n                $scope.addCommentClass = 'btn btn-info';\r\n                $scope.addCommentGlyph = 'glyphicon glyphicon-plus';\r\n            }\r\n        };\r\n\r\n        $scope.getCurrentUserId = function () {\r\n            return authService.authentication.currentUser.userId;\r\n        };\r\n\r\n        $scope.fetchComments = function () {\r\n            $scope.getComments.data[\"host\"] = $scope.postData.host;\r\n            $scope.getComments.data[\"@rid\"] = $scope.postData[\"@rid\"];\r\n            $http.post('api/rs', $scope.getComments)\r\n                .success(function (result, status, headers, config) {\r\n                    $scope.comments = result.comments;\r\n                })\r\n                .error(function (result, status, headers, config) {\r\n                    // error fetching comments, set comments to empty list.\r\n                    $scope.comments = [];\r\n                });\r\n        };\r\n\r\n        $scope.fetchComments();\r\n\r\n        $scope.submitComment = function () {\r\n            var commentContent = document.getElementById(\"newUserComment\").value;\r\n            console.log(\"adding comment\", commentContent);\r\n            if (commentContent != null && commentContent.length > 0) {\r\n                $scope.addComment.data[\"host\"] = $scope.postData.host;\r\n                $scope.addComment.data[\"@rid\"] = $scope.postData[\"@rid\"];\r\n                $scope.addComment.data.comment = commentContent;\r\n                $http.post('api/rs', $scope.addComment)\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.fetchComments();\r\n                        document.getElementById(\"newUserComment\").value = \"\";\r\n                        $scope.toggleComment();\r\n                    })\r\n                    .error(function (result, status, headers, config) {\r\n                        // TODO: think of what to do here...\r\n                        console.log(\"submitComment error, result:\", result);\r\n                    });\r\n            }\r\n        };\r\n\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.ForumPostViewCtrl\">\r\n    <h2>{{postData.title}}</h2>\r\n    <p>By: {{postData.createUserId}}. Published on: {{postData.createDate}}</p>\r\n    <pre>{{postData.content}}</pre>\r\n\r\n    <br />\r\n    <label>Replies:</label>\r\n    <table class=\"table table-striped table-bordered table-hover\">\r\n        <tbody>\r\n            <tr ng-repeat=\"comment in comments\" style=\"height:100px;\">\r\n                <td width=\"1%\">\r\n                    <label>{{comment.createUserId}}:</label>\r\n                </td>\r\n                <td style=\"position:relative;\">\r\n                    <comment>{{comment.content}}</comment>\r\n                    <span style=\"position:absolute;right:10px;bottom:10px;\">\r\n                        <span class=\"glyphicon glyphicon-share-alt\" style=\"color:rgb(91,192,222); float:right; width:20px;\"></span>\r\n                        <span class=\"glyphicon glyphicon-thumbs-down\" style=\"color:red; float:right; width:20px;\"></span>\r\n                        <span class=\"glyphicon glyphicon-thumbs-up\" style=\"color:green; float:right; width:20px;\"></span>\r\n                    </span>\r\n                </td>\r\n            </tr>\r\n            <!--\r\n            <tr style=\"height:100px;\">\r\n                <td width=\"1%\" >\r\n                    <label>Nicholas:</label>\r\n                </td>\r\n                <td style=\"position:relative;\">\r\n                    <comment>Great post.</comment>\r\n                    <span style=\"position:absolute;right:10px;bottom:10px;\">\r\n                        <span class=\"glyphicon glyphicon-share-alt\" style=\"color:rgb(91,192,222); float:right; width:20px;\"></span>\r\n                        <span class=\"glyphicon glyphicon-thumbs-down\" style=\"color:red; float:right; width:20px;\"></span>\r\n                        <span class=\"glyphicon glyphicon-thumbs-up\" style=\"color:green; float:right; width:20px;\"></span>\r\n                    </span>\r\n                </td>\r\n            </tr>\r\n            <tr style=\"height:20px\">\r\n            </tr>\r\n            <tr style=\"height:100px;\">\r\n                <td width=\"1%\">\r\n                    <label>stevehu:</label>\r\n                </td>\r\n                <td style=\"position:relative;\">\r\n                    <comment>Thank you!</comment>\r\n                    <span style=\"position:absolute;right:10px;bottom:10px;\">\r\n                        <span class=\"glyphicon glyphicon-share-alt\" style=\"color:rgb(91,192,222); float:right; width:20px;\"></span>\r\n                        <span class=\"glyphicon glyphicon-thumbs-down\" style=\"color:red; float:right; width:20px;\"></span>\r\n                        <span class=\"glyphicon glyphicon-thumbs-up\" style=\"color:green; float:right; width:20px;\"></span>\r\n                    </span>\r\n                </td>\r\n            </tr>\r\n            <tr style=\"height:20px\">\r\n            </tr>-->\r\n            <!-- The rest of the current post content... -->\r\n            <!-- Then at the end -->\r\n            <tr style=\"height:100px;\" ng-show=\"displayAddCommentRow\">\r\n                <td width=\"1%\">\r\n                    <label>{{getCurrentUserId()}}:</label>\r\n                </td>\r\n                <td style=\"position:relative;\">\r\n                    <comment><textarea id=\"newUserComment\" type=\"text\" spellcheck=\"true\" style=\"width:100%;\"/></comment>\r\n                    <span style=\"position:absolute;right:10px;bottom:10px;\">\r\n                        <span class=\"glyphicon glyphicon-share-alt\" style=\"color:rgb(91,192,222); float:right; width:20px;\"></span>\r\n                        <span class=\"glyphicon glyphicon-thumbs-down\" style=\"color:red; float:right; width:20px;\"></span>\r\n                        <span class=\"glyphicon glyphicon-thumbs-up\" style=\"color:green; float:right; width:20px;\"></span>\r\n                    </span>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n    <div class=\"pull-right\">\r\n        <button ng-class=\"addCommentClass\" ng-click=\"toggleComment()\" style=\"float:right;\">\r\n            <span ng-class=\"addCommentGlyph\" style=\"padding-right:5px;\"></span>\r\n            {{addCommentText}}\r\n        </button>\r\n        <button class=\"btn btn-success\" ng-click=\"submitComment()\" style=\"float:right;\" ng-show=\"displayAddCommentRow\">\r\n            Submit\r\n        </button>\r\n    </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.160"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.160",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:214",
    "@version": 1,
    "@class": "Event",
    "eventId": 10215,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-forum-post",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.ForumPostCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\r\n        $scope.getForumPost = {\r\n            category: 'forum',\r\n            name: 'getForumPost',\r\n            readOnly: true,\r\n            data: {}\r\n        }\r\n\r\n        $scope.posts = [];\r\n        $scope.forums = [];\r\n\r\n        $scope.fetchResult = function () {\r\n            $scope.getForumPost.data.forumId = modelDataService.getModelData();\r\n            modelDataService.setModelData(null); // reset the modelDataService variable.\r\n            $http.post('api/rs', $scope.getForumPost)\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.posts = result;\r\n                        console.log($scope.posts);\r\n                    })\r\n        };\r\n        $scope.fetchResult();\r\n\r\n        $scope.post = function () {\r\n            $location.path(\"/form/com.networknt.light.forum.post.add/\" + $scope.getForumPost.data.forumId);\r\n        };\r\n\r\n        $scope.view = function (post) {\r\n            modelDataService.setModelData(post);\r\n            $location.path(\"/page/com-networknt-light-v-forum-post-view\");\r\n        };\r\n\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.ForumPostCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-12 col-md-12\">\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"post()\"><i class=\"glyphicon glyphicon-edit\"></i>Post</button>\r\n            </div>\r\n            <tabset>\r\n                <tab heading=\"Recent\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td><a href ng-click=\"view(post)\">{{post.title}}</a></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>{{post.createUser}} {{post.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n                <tab heading=\"Bookmark\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td>\r\n                                <div><a href ng-click=\"view(post)\">{{post.title}}</a></div>\r\n                                <div>{{post.createUser}} {{post.createDate}}</div>\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.170"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.170",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:215",
    "@version": 1,
    "@class": "Event",
    "eventId": 10216,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-forum-post_v2",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.ForumPostCtrl', ['$scope', '$http', '$location', 'authService', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, authService, $filter, toaster, modelDataService) {\r\n        $scope.getForumPost = {\r\n            category : 'forum',\r\n            name: 'getForumPost',\r\n            readOnly: true,\r\n            data: {}\r\n        };\r\n\r\n        $scope.delPost = {\r\n            category: 'post',\r\n            name: 'delPost',\r\n            readOnly: false,\r\n            data: {}\r\n        };\r\n\r\n        $scope.posts = [];\r\n        $scope.forums = [];\r\n        $scope.fetchForumsDisplayClass = \"info\";\r\n        $scope.fetchForumsStateText = \"Getting forums...\";\r\n\r\n        $scope.fetchResult = function () {\r\n            var modelData = modelDataService.getModelData();\r\n            // Check if the id is null before setting it.\r\n            // Otherwise it will be overwritten with null.\r\n            console.log('modelData', modelDataService.getModelData());\r\n            if ($scope.getForumPost.data.id == null) {\r\n                if (modelData != null && modelData.forumId == null) {\r\n                    $scope.getForumPost.data.id = modelData;\r\n                } else {\r\n                    $scope.getForumPost.data.id = modelDataService.getModelData().forumId;\r\n                }\r\n            }\r\n            console.log('posting with:', $scope.getForumPost);\r\n            $http.post('api/rs', $scope.getForumPost)\r\n                .success(function (result, status, headers, config) {\r\n                    console.log(\"received success\", result);\r\n                    $scope.posts = result;\r\n                })\r\n                .error(function (result, status, headers, config) {\r\n                    console.log(\"received error\", result);\r\n                    $scope.posts = [];\r\n                    if (status == 404) {\r\n                        $scope.fetchForumsStateText = \"No posts can be found in this forum... Be the first!\";\r\n                        $scope.fetchForumsDisplayClass = \"success\";\r\n                    } else {\r\n                        $scope.fetchForumsStateText = \"There was an error retrieving forum posts, please contact a moderator\";\r\n                        $scope.fetchForumsDisplayClass = \"danger\";\r\n                    }\r\n\r\n                });\r\n        };\r\n        $scope.fetchResult();\r\n\r\n        $scope.post = function() {\r\n            var modelData = modelDataService.getModelData();\r\n            modelDataService.setModelData(null); // reset the modelDataService variable.\r\n            $location.path(\"/form/com.networknt.light.forum.post.add/\" + $scope.getForumPost.data.id);\r\n        };\r\n\r\n        $scope.view = function(post) {\r\n            modelDataService.setModelData({\r\n                forumId: $scope.getForumPost.data.id,\r\n                post: post\r\n            });\r\n            $location.path(\"/page/com-networknt-light-v-forum-post-view\");\r\n        };\r\n\r\n        $scope.edit = function (post) {\r\n            console.log(\"editing following post\");\r\n            console.log(post);\r\n        };\r\n\r\n        $scope.del = function (post) {\r\n            $scope.delPost.data = post;\r\n            $http.post('api/rs', $scope.delPost)\r\n                .success(function (result, status, headers, config) {\r\n                    $scope.fetchResult();\r\n                });\r\n        };\r\n\r\n        $scope.quickView = function (post) {\r\n            console.log(\"Quickview the following post\", post);\r\n        };\r\n\r\n        $scope.canCurrentUserEdit = function (post) {\r\n            var currentUser = authService.authentication.currentUser;\r\n            var currentUserRoles = currentUser.roles;\r\n\r\n            for (var i = 0; i < currentUserRoles.length; i++) {\r\n                if (currentUserRoles == \"owner\"\r\n                    || currentUserRoles == \"forumAdmin\"\r\n                    || currentUser.userId == post.createUserId) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        $scope.canCurrentUserDelete = function (post) {\r\n            var currentUser = authService.authentication.currentUser;\r\n            var currentUserRoles = currentUser.roles;\r\n\r\n            for (var i = 0; i < currentUserRoles.length; i++) {\r\n                if (currentUserRoles[i] == \"owner\"\r\n                    || currentUserRoles[i] == \"forumAdmin\"\r\n                    || currentUser.userId == post.createUserId) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.ForumPostCtrl\">\r\n    <div class=\"jumbotron\" ng-if=\"getForumPost.data.id != null\">\r\n        <h2>{{getForumPost.data.id}}</h2>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-12 col-md-12\">\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"post()\"><span class=\"glyphicon glyphicon-plus\" style=\"padding-right:5px\"></span>Post</button>\r\n            </div>\r\n            <tabset>\r\n                <tab heading=\"Posts\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                            <tr><th>Post</th><th>By</th><th>On</th><th>Actions</th></tr>\r\n                        </thead>\r\n                        <tbody id=\"postsBody\">\r\n                        <tr ng-if=\"posts.length == 0\">\r\n                            <td colspan=\"4\" ng-class=\"fetchForumsDisplayClass\"><span class=\"glyphicon glyphicon-warning-sign\" style=\"padding-right:5px;\"></span>{{fetchForumsStateText}}</td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td><a href ng-click=\"view(post)\">{{post.title}}</a></td>\r\n                            <td>{{post.createUserId}}</td>\r\n                            <td>{{post.createDate}}</td>\r\n                            <td>\r\n                                <a href ng-click=\"quickView(post)\" style=\"padding-right:5px; padding-left:5px;\"><span class=\"glyphicon glyphicon-eye-open\"></span></a>\r\n                                <a href ng-show=\"canCurrentUserEdit(post)\" ng-click=\"edit(post)\" style=\"padding-right:5px; padding-left:5px;\"><span class=\"glyphicon glyphicon-pencil\"></span></a>\r\n                                <a href ng-show=\"canCurrentUserDelete(post)\" ng-click=\"del(post)\" style=\"padding-right:5px; padding-left:5px;\"><span class=\"glyphicon glyphicon-remove\"></span></a>\r\n                            </td>\r\n                            <td ng-show=\"\">\r\n                                {{post.content}}\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.214"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.214",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:216",
    "@version": 1,
    "@class": "Event",
    "eventId": 10217,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-get-started",
      "content": "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <h1>Get started</h1>\r\n            <p>\r\n            <h2><a href=\"/page/com-networknt-light-v-dev-linux\">Check out and set up development environment on Linux</a></h2>\r\n            </p>\r\n            <p>\r\n            <h2><a href=\"/page/com-networknt-light-v-dev-windows7\">Check out and set up development environment on Windows 7</a></h2>\r\n            </p>\r\n            <p>\r\n            <h2><a href=\"/page/com-networknt-light-v-dev-mac\">Check out and set up development environment on MAC OS X</a></h2>\r\n            </p>\r\n            <p>\r\n            <h2><a href=\"/page/com-networknt-light-v-first-component\">Create your first component</a></h2>Component is the smallest development and deployment unit in the framework. It can be used to construct view/page which can be part of an application.\r\n            </p>\r\n            <p>\r\n            <h2><a href=\"/page/com-networknt-light-v-first-view\">Create your first view</a></h2>View is an smallest downloadable unit from the server and it has dependencies with other views through routing.\r\n            </p>\r\n            <p>\r\n            <h2><a href=\"/page/com-networknt-light-v-first-application\">Create your first application</a></h2>Application consists of multiple views and manages routing between views.\r\n            </p>\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:55.231"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.231",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:217",
    "@version": 1,
    "@class": "Event",
    "eventId": 10218,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-host-admin-home",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.HostAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\r\n        $scope.getAllHost = {\r\n            category : 'host',\r\n            name : 'getAllHost',\r\n            readOnly: true\r\n        };\r\n        $scope.delHost = {\r\n            category : 'host',\r\n            name : 'delHost',\r\n            readOnly: false\r\n        };\r\n        $scope.hosts = [];\r\n\r\n        $scope.headers = [\r\n            {\r\n                title: 'Delete',\r\n                value: 'delete'\r\n            },\r\n            {\r\n                title: 'Id',\r\n                value: 'id'\r\n            },\r\n            {\r\n                title: 'Base',\r\n                value: 'base'\r\n            },\r\n            {\r\n                title: 'TransferMinSize',\r\n                value: 'transferMinSize'\r\n            },\r\n            {\r\n                title: 'Create UserId',\r\n                value: 'createUserId'\r\n            },\r\n            {\r\n                title: 'Create Date',\r\n                value: 'createDate'\r\n            },\r\n            {\r\n                title: 'Update UserId',\r\n                value: 'updateUserId'\r\n            },\r\n            {\r\n                title: 'Update Date',\r\n                value: 'updateDate'\r\n            },\r\n        ];\r\n\r\n        $scope.sort = {\r\n            sortDir : 'desc',\r\n            sortedBy : 'createDate'\r\n        };\r\n        $scope.filter = {};\r\n\r\n        $scope.onSort = function (sortedBy, sortDir) {\r\n            $scope.sort.sortDir = sortDir;\r\n            $scope.sort.sortedBy = sortedBy;\r\n        };\r\n\r\n        $scope.delete = function(host) {\r\n            $scope.delHost.data = host;\r\n            $http.post('api/rs', $scope.delHost)\r\n                    .success(function (data, status, headers, config) {\r\n                        $scope.hosts.splice($scope.hosts.indexOf(host), 1);\r\n                        toaster.pop('success', status, data, 3000);\r\n                    })\r\n        };\r\n\r\n\r\n        $scope.update = function(host) {\r\n            modelDataService.setModelData(host);\r\n            $location.path(\"/form/com.networknt.light.host.update\");\r\n        };\r\n\r\n        $scope.add = function() {\r\n            $location.path(\"/form/com.networknt.light.host.add\");\r\n        };\r\n\r\n        $scope.fetchResult = function () {\r\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getAllHost))}})\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.hosts = result;\r\n                        console.log($scope.hosts);\r\n                    })\r\n        };\r\n        $scope.fetchResult();\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.HostAdminHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\r\n            </div>\r\n            <tabset>\r\n                <tab heading=\"Hosts\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th ng-repeat=\"header in headers\">\r\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td><input ng-model=\"filter.id\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.base\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.transferMinSize\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"host in hosts | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td><a href ng-click=\"delete(host)\">Delete</a></td>\r\n                            <td><a href ng-click=\"update(host)\">{{host.id}}</a></td>\r\n                            <td>{{host.base}}</td>\r\n                            <td>{{host.transferMinSize}}</td>\r\n                            <td>{{host.createUserId}}</td>\r\n                            <td>{{host.createDate}}</td>\r\n                            <td>{{host.updateUserId}}</td>\r\n                            <td>{{host.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.248"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.248",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:218",
    "@version": 1,
    "@class": "Event",
    "eventId": 10219,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-java-php",
      "content": "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <h1>Why Java could not compete with PHP</h1>\r\n            <p>\r\n            Java is a superior language to build websites but according to w3ctechs.com PHP is used by 82% of all the websites for server-side programming language and Java is used by less than 4% of the websites.\r\n            <p>\r\n            What?s wrong with Java?\r\n            <p>\r\n            When Java was out, big players like IBM, BEA Oracle etc. saw a great opportunity to make money as it is a great language for web programming.  But how can you make big money around a programming language? The answer is to build servers on top of it and make it complicated so big corporations will pay big bucks for it. That is why we have JEE specs, JSRs, Weblogic, Websphere and other servers.\r\n            <p>\r\n            Large packages are deployed on these servers that are run so slow and used too much memory. Development and Debugging within a container was a nightmare for developers and they usually paid well to compensating the pain.\r\n            <p>\r\n            Because of resource usage is too high, you could not find public hosting company to support Java with a reasonable price tag. You want to build a website in Java, you have to pay big bucks for hosting even you might just use a Servlet container.\r\n            <p>\r\n            For a long time, Java was used within enterprises and big corporations as only they can afford million-dollar application servers and well paid enterprise level developers. I myself have been riding the train since beginning as a JEE consultant?\r\n            <p>\r\n            In 2003, Rod Johnson released Spring Framework and it allows IoC and POJO for development without EJBs. The productivity increment is huge and a lot of developers jumped onto it and thrown J2EE EJBs out of windows. The application venders saw this and in JEE5, they provide some features to make developer more productive and less painful. Unfortunately, today?s Spring Framework is so bloated like JEE containers.\r\n            <p>\r\n            During this period of time, PHP was flying. It use less memory and resource and was well supported by hosting companies. Some CMS platform built on PHP like WordPress, Drupal etc. drove a lot of open source developers into PHP. Although PHP is the most popular language these days, it has its shortcomings. It is slow and hard to make it scalable.\r\n            <p>\r\n            In 2009, Ryan Dahl introduced Node.js that supports asynchronous, non-blocking and event-driven I/O.  This increase the response rate dramatically as the server threads are well utilized and the throughput of a single server can be comparable to a cluster of servers. Node.js is a very good design but it has its limitations. Based on my limited knowledge, it is hard to scale and hard to integrate with existing legacy systems.\r\n            <p>\r\n            In 2014, a new player Undertow came in town and it is Java based non-blocking web server.  From techempower.com test, it serves over 1 million requests per second on a single $8000 dell server using the same test case Google claimed to serve 1 million requests with a cluster. It is lightweight with the core coming under 1Mb and a simple embedded server uses less than 4Mb of heap space. With todays single page application build on Javascript frameworks like AngularJS, you only need HTTP and optional Web Socket for your server to serve resources. And this sever can be an embedded Undertow with less than 100 lines of code.\r\n            <p>\r\n            The Undertow opens the door for Java developer?s productivity and cheap web hosting for Java. Given above reasons, I have built a platform called Light Framework that utilizes AngularJS, Undertow, OrientDB, Hazelcast and Light Rule Engine.\r\n            <p>\r\n            It is domain driven design with command/event sourcing and CQRS. When Angularjs app talks to resource server, it always send a command with either GET or POST and the server will translate it into an event to saved into event store for tracing, logging, auditing and user behaviour analysis. From the command, the REST handler of Undertow will translate it into a package and Java class just by concatenation of the common fields in the command json object. Then the Light Rule Engine looks up the rule class instance in a hash map to handle the command. All rules are POJO and implement a common interface. They can be unit tested and hot deployed to production server on a class basis.\r\n            <p>\r\n            For more detail, take a look at\r\n            <a href=\"http://www.github.com/networknt\" target=\"_blank\">www.github.com/networknt</a>  or <a href=\"http://www.networknt.com\" target=\"_blank\">www.networknt.com</a>\r\n            <p>\r\n\r\n            References:\r\n            <p>\r\n            <a href=\"http://blog.websitesframeworks.com/2013/03/programming-language-statistics-in-server-side-161/\" target=\"_blank\">Server-side programming language statistics</a>\r\n            <p>\r\n            <a href=\"http://w3techs.com/technologies/details/pl-php/all/all\" target=\"_blank\">Usage statistics and market share of PHP for websites</a>\r\n            <p>\r\n            <a href=\"https://www.techempower.com/blog/2014/03/04/one-million-http-rps-without-load-balancing-is-easy/\" target=\"_blank\">One million HTTP RPS without load balancing is easy</a>\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:55.264"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.264",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:219",
    "@version": 1,
    "@class": "Event",
    "eventId": 10220,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-menu-admin-home",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.MenuAdminHomeCtrl', ['$scope', '$http', '$location', 'modelDataService', 'toaster', function ($scope, $http, $location, modelDataService, toaster) {\r\n        $scope.getAllMenu = {\r\n            category : 'menu',\r\n            name : 'getAllMenu',\r\n            readOnly: true\r\n        };\r\n\r\n        $scope.delMenu = {\r\n            category : 'menu',\r\n            name : 'delMenu',\r\n            readOnly: false\r\n        };\r\n\r\n        $scope.delMenuItem = {\r\n            category : 'menu',\r\n            name : 'delMenuItem',\r\n            readOnly: false\r\n        };\r\n\r\n        $scope.menus = [];\r\n        $scope.menuItems = [];\r\n\r\n        $scope.menuHeaders = [\r\n            {\r\n                title: 'Delete',\r\n                value: 'delete'\r\n            },\r\n            {\r\n                title: 'Host',\r\n                value: 'host'\r\n            },\r\n            {\r\n                title: 'Create User Id',\r\n                value: 'createUserId'\r\n            },\r\n            {\r\n                title: 'Create Date',\r\n                value: 'createDate'\r\n            },\r\n            {\r\n                title: 'Update User Id',\r\n                value: 'updateUserId'\r\n            },\r\n            {\r\n                title: 'Update Date',\r\n                value: 'updateDate'\r\n            }\r\n        ];\r\n        $scope.menuItemHeaders = [\r\n            {\r\n                title: 'Delete',\r\n                value: 'delete'\r\n            },\r\n            {\r\n                title: 'MenuItem Id',\r\n                value: 'menuItemId'\r\n            },\r\n            {\r\n                title: 'Label',\r\n                value: 'label'\r\n            },\r\n            {\r\n                title: 'Host',\r\n                value: 'host'\r\n            },\r\n            {\r\n                title: 'Path',\r\n                value: 'path'\r\n            },\r\n            {\r\n                title: 'Click',\r\n                value: 'click'\r\n            },\r\n            {\r\n                title: 'Template',\r\n                value: 'tpl'\r\n            },\r\n            {\r\n                title: 'Controller',\r\n                value: 'ctrl'\r\n            },\r\n            {\r\n                title: 'Position Left',\r\n                value: 'left'\r\n            },\r\n            {\r\n                title: 'Roles',\r\n                value: 'roles'\r\n            },\r\n            {\r\n                title: 'Create User Id',\r\n                value: 'createUserId'\r\n            },\r\n            {\r\n                title: 'Create Date',\r\n                value: 'createDate'\r\n            },\r\n            {\r\n                title: 'Update User Id',\r\n                value: 'updateUserId'\r\n            },\r\n            {\r\n                title: 'Update Date',\r\n                value: 'updateDate'\r\n            }\r\n        ];\r\n\r\n        $scope.sort = {\r\n            sortDir : 'desc',\r\n            sortedBy : 'updateDate'\r\n        };\r\n        $scope.menuFilter = {};\r\n        $scope.menuItemFilter = {};\r\n\r\n        //call back function that we passed to our custom directive sortBy, will be called when clicking on any field to sort\r\n        $scope.onSort = function (sortedBy, sortDir) {\r\n            $scope.sort.sortDir = sortDir;\r\n            $scope.sort.sortedBy = sortedBy;\r\n        };\r\n\r\n        $scope.addMenu = function () {\r\n            $location.path(\"/form/com.networknt.light.menu.addMenu\");\r\n        }\r\n\r\n        $scope.addMenuItem = function () {\r\n            $location.path(\"/form/com.networknt.light.menu.addMenuItem\");\r\n        }\r\n\r\n        $scope.deleteMenu = function(menu) {\r\n            $scope.delMenu.data = menu;\r\n            $http.post('api/rs', $scope.delMenu)\r\n                    .success(function (data, status, headers, config) {\r\n                        $scope.menus.splice($scope.menus.indexOf(menu), 1);\r\n                        $scope.fetchResult(); // when delete a host, all the menuItems belong to the host will be deleted.\r\n                        toaster.pop('success', status, data, 3000);\r\n                    })\r\n        };\r\n\r\n        $scope.deleteMenuItem = function(menuItem) {\r\n            $scope.delMenuItem.data = menuItem;\r\n            $http.post('api/rs', $scope.delMenuItem)\r\n                    .success(function (data, status, headers, config) {\r\n                        $scope.menuItems.splice($scope.menuItems.indexOf(menuItem), 1);\r\n                        toaster.pop('success', status, data, 3000);\r\n                    })\r\n        };\r\n\r\n        $scope.updateMenu = function(menu) {\r\n            console.log(\"menu to be passed\", menu);\r\n            modelDataService.setModelData(menu);\r\n            $location.path(\"/form/com.networknt.light.menu.updateMenu\");\r\n        };\r\n\r\n        $scope.updateMenuItem = function(menuItem) {\r\n            modelDataService.setModelData(menuItem);\r\n            $location.path(\"/form/com.networknt.light.menu.updateMenuItem\");\r\n        };\r\n\r\n        //The function that is responsible of fetching the result from the server and setting the grid to the new result\r\n        $scope.fetchResult = function () {\r\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getAllMenu))}})\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.menus = result.menus;\r\n                        $scope.menuItems = result.menuItems;\r\n                        //console.log('menus', $scope.menus);\r\n                        //console.log('menuItems', $scope.menuItems);\r\n                    })\r\n        };\r\n        $scope.fetchResult();\r\n\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.MenuAdminHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"addMenu()\"><i class=\"glyphicon glyphicon-edit\"></i>Add Menu</button>\r\n            </div>\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"addMenuItem()\"><i class=\"glyphicon glyphicon-edit\"></i>Add Menu Item</button>\r\n            </div>\r\n            <tabset>\r\n                <tab heading=\"Host Menu\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th ng-repeat=\"header in menuHeaders\">\r\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuFilter.host\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuFilter.createUserId\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuFilter.createDate\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuFilter.updateUserId\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuFilter.updateDate\" type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"menu in menus | filter: menuFilter | orderBy: sort.sortedBy\">\r\n                            <td><a href ng-click=\"deleteMenu(menu)\">Delete</a></td>\r\n                            <td><a href ng-click=\"updateMenu(menu)\">{{menu.host}}</a></td>\r\n                            <td>{{menu.createUserId}}</td>\r\n                            <td>{{menu.createDate}}</td>\r\n                            <td>{{menu.updateUserId}}</td>\r\n                            <td>{{menu.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n                <tab heading=\"Menu Items\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th ng-repeat=\"header in menuItemHeaders\">\r\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.menuItemId\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.label\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.host\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.path\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.click\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.tpl\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.ctrl\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.left\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.roles\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.createUserId\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.createDate\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.updateUserId\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.updateDate\" type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"menuItem in menuItems | filter: menuItemFilter | orderBy: sort.sortedBy\">\r\n                            <td><a href ng-click=\"deleteMenuItem(menuItem)\">Delete</a></td>\r\n                            <td><a href ng-click=\"updateMenuItem(menuItem)\">{{menuItem.menuItemId}}</a></td>\r\n                            <td>{{menuItem.label}}</td>\r\n                            <td>{{menuItem.host}}</td>\r\n                            <td>{{menuItem.path}}</td>\r\n                            <td>{{menuItem.click}}</td>\r\n                            <td>{{menuItem.tpl}}</td>\r\n                            <td>{{menuItem.ctrl}}</td>\r\n                            <td>{{menuItem.left}}</td>\r\n                            <td>{{menuItem.roles}}</td>\r\n                            <td>{{menuItem.createUserId}}</td>\r\n                            <td>{{menuItem.createDate}}</td>\r\n                            <td>{{menuItem.updateUserId}}</td>\r\n                            <td>{{menuItem.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:55.282"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.282",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:220",
    "@version": 1,
    "@class": "Event",
    "eventId": 10221,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-news-admin-home",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.NewsAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\r\n        $scope.getNews = {\r\n            category : 'news',\r\n            name : 'getNews',\r\n            readOnly: true\r\n        };\r\n\r\n        $scope.delNews = {\r\n            category : 'news',\r\n            name : 'delNews',\r\n            readOnly: false\r\n        };\r\n\r\n        $scope.news = [];\r\n\r\n        $scope.headers = [\r\n            {\r\n                title: 'Delete',\r\n                value: 'delete'\r\n            },\r\n            {\r\n                title: 'Id',\r\n                value: 'id'\r\n            },\r\n            {\r\n                title: 'Desc',\r\n                value: 'desc'\r\n            },\r\n            {\r\n                title: 'Create User Id',\r\n                value: 'createUserId'\r\n            },\r\n            {\r\n                title: 'Create Date',\r\n                value: 'createDate'\r\n            },\r\n            {\r\n                title: 'Update User Id',\r\n                value: 'updateUserId'\r\n            },\r\n            {\r\n                title: 'Update Date',\r\n                value: 'updateDate'\r\n            }\r\n        ];\r\n\r\n        $scope.sort = {\r\n            sortDir : 'desc',\r\n            sortedBy : 'updateDate'\r\n        };\r\n\r\n        $scope.filter = {};\r\n\r\n        $scope.onSort = function (sortedBy, sortDir) {\r\n            $scope.sort.sortDir = sortDir;\r\n            $scope.sort.sortedBy = sortedBy;\r\n        };\r\n\r\n\r\n        $scope.delete = function(news) {\r\n            $scope.delNews.data = news;\r\n            $http.post('api/rs', $scope.delNews)\r\n                    .success(function (data, status, headers, config) {\r\n                        $scope.news.splice($scope.news.indexOf(news), 1);\r\n                        toaster.pop('success', status, data, 3000);\r\n                    })\r\n        };\r\n\r\n        $scope.add = function() {\r\n            $location.path(\"/form/com.networknt.light.news.add\");\r\n        };\r\n\r\n        $scope.update = function(news) {\r\n            modelDataService.setModelData(news);\r\n            $location.path(\"/form/com.networknt.light.news.update\");\r\n        };\r\n\r\n        //The function that is responsible of fetching the result from the server\r\n        $scope.fetchResult = function () {\r\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getNews))}})\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.news = result;\r\n                    })\r\n        };\r\n\r\n        $scope.fetchResult();\r\n\r\n    }]);\r\n</script>\r\n\r\n<div class=\"container\" ng-controller=\"com.networknt.light.NewsAdminHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\r\n            </div>\r\n            <tabset>\r\n                <tab heading=\"Recent\">\r\n                    <h4>News</h4>\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th ng-repeat=\"header in headers\">\r\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td><input ng-model=\"filter.id\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.desc\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"new in news | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td><a href ng-click=\"delete(new)\">Delete</a></td>\r\n                            <td><a href ng-click=\"update(new)\">{{new.id}}</a></td>\r\n                            <td>{{new.desc}}</td>\r\n                            <td>{{new.createUserId}}</td>\r\n                            <td>{{new.createDate}}</td>\r\n                            <td>{{new.updateUserId}}</td>\r\n                            <td>{{new.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.297"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.297",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:221",
    "@version": 1,
    "@class": "Event",
    "eventId": 10222,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-news-home",
      "content": "<script type='text/javascript'>\r\n    (function(angular) {\r\n        'use strict';\r\n        angular.module('lightApp').controller('com.networknt.light.NewsHomeCtrl', ['$scope', '$http', '$location', '$filter', 'authService', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, authService, toaster, modelDataService) {\r\n\r\n            $scope.getNews = {\r\n                category : 'news',\r\n                name : 'getNewsTree',\r\n                readOnly: true\r\n            };\r\n\r\n            //The function that is responsible of fetching the result from the server\r\n            $scope.fetchResult = function () {\r\n                $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getNews))}})\r\n                        .success(function (result, status, headers, config) {\r\n                            $scope.news = result;\r\n                        })\r\n            };\r\n\r\n            $scope.fetchResult();\r\n\r\n            $scope.toggle = function(scope) {\r\n                scope.toggle();\r\n            };\r\n\r\n            var getRootNodesScope = function() {\r\n                return angular.element(document.getElementById(\"tree-root\")).scope();\r\n            };\r\n\r\n            $scope.collapseAll = function() {\r\n                var scope = getRootNodesScope();\r\n                scope.collapseAll();\r\n            };\r\n\r\n            $scope.expandAll = function() {\r\n                var scope = getRootNodesScope();\r\n                scope.expandAll();\r\n            };\r\n\r\n            $scope.treeFilter = $filter('uiTreeFilter');\r\n\r\n            $scope.supportedFields = ['id', 'desc'];\r\n\r\n            $scope.gotoNews = function(id) {\r\n                modelDataService.setModelData(id);\r\n                $location.path(\"/page/com-networknt-light-v-news-post\");\r\n            }\r\n        }]);\r\n    })(window.angular);\r\n</script>\r\n<div class=\"container\" data-ng-controller=\"com.networknt.light.NewsHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\r\n            <h4 class=\"page-header\">News</h4>\r\n            <div>\r\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\">Collapse all</a>\r\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"expandAll()\">Expand all</a>\r\n                <input ng-model=\"pattern\" placeholder=\"Type a part of any news\"/>\r\n            </div>\r\n            <!-- Nested node template -->\r\n            <script type=\"text/ng-template\" id=\"nodes_renderer.html\">\r\n                <div ui-tree-handle class=\"tree-node tree-node-content\">\r\n                    <a class=\"btn btn-success btn-xs\" ng-if=\"node.children && node.children.length > 0\" data-nodrag ng-click=\"toggle(this)\"><span class=\"glyphicon\" ng-class=\"{'glyphicon glyphicon-plus': collapsed, 'glyphicon glyphicon-minus': !collapsed}\"></span></a>\r\n                    <!--{{node.id | highlight:pattern | trust}}-->\r\n                    <a href ng-click=\"gotoNews(node.id)\" ng-bind-html=\"node.id | highlight:pattern | trust\"></a>\r\n                    <small ng-bind-html=\"node.desc | highlight:pattern | trust\"></small>\r\n                </div>\r\n                <ol ui-tree-nodes=\"\" ng-model=\"node.children\" ng-class=\"{hidden: collapsed}\">\r\n                    <li ng-repeat=\"node in node.children\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\r\n                </ol>\r\n            </script>\r\n            <div ui-tree data-drag-enabled=false id=\"tree-root\">\r\n                <ol ui-tree-nodes ng-model=\"news\">\r\n                    <li ng-repeat=\"node in news\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.310"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.310",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:222",
    "@version": 1,
    "@class": "Event",
    "eventId": 10223,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-news-post",
      "content": "<!DOCTYPE html>\r\n<html>\r\n<head lang=\"en\">\r\n    <meta charset=\"UTF-8\">\r\n    <title></title>\r\n</head>\r\n<body>\r\n\r\n</body>\r\n</html>",
      "createDate": "2015-03-25T20:22:55.323"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.323",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:223",
    "@version": 1,
    "@class": "Event",
    "eventId": 10224,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-omnichannel",
      "content": "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <h1>Omnichannel and Omnichannel Experience</h1>\r\n            <p>\r\n                Omnichannel is a still new and the idea is still developing. People talking about it online at different levels but majorities are limited within a single brand. Omnichannel is about true continuity of your experience. But the key is that it extends beyond a single brand?s universe. Being omniscient is perceiving and understanding all things. Not all things at Best Buy. Not all things at Target. Not all things at Citi. Omni is perceiving all things. And the best way for a customer to perceive everything is to allow them to own their data and experience, then give them the ability to use it to guide creation and context of every future experience.\r\n            </p>\r\n            <p>\r\n                Omni comes from the word Omnis which can mean all or universal. This is in comparison to other concepts out there, like ?multichannel?, from the Latin word Multus, meaning multiple or many and from crosschannel, derived from the Latin word Crux, meaning to go across. The way that many are explaining omnichannel today is: ?cross channel being done well?. Examples are often that the mobile app should match the responsive design of the website which should thematically reflect the look and feel inside the store. We?d argue that doing cross channel well with the user in mind, is not worthy (nor useful) enough to deserve a new concept. Instead, we hold the belief that Omnichannel is something new and notable, even revolutionary, not just a marginal evolution of existing thinking.\r\n            </p>\r\n            <p>\r\n                Think about it. Today our life is continuous, but our customer experience is anything but that. We learn and have memory of all the good and bad things in life. We strive to limit or eliminate the negative ones and increase the good. These patterns that we strive to replicate are our preferences. The ability to have a continuous experience across brands, across format and across devices that is completely customized ? that is the promise of a new way of thinking and marketing that has been long unnoticed.\r\n            </p>\r\n            <p>\r\n                I am shopping at Amazon.com, Newegg.com and other online retailers. I like Amazon's catelog to do research and Newegg's checkout process. Would I be a happy customer of both if Amazon can provide me the Newegg checkout experience and Newegg can provide me Amazon catelog experience? I have a checking account at bank A, a saving account at bank B and an investment account at bank C. Can I use Bank A online transfter experience on Bank B and Bank C websites?\r\n            </p>\r\n            <p>\r\n                But wait, are you suggesting that Amazon helps people buy computers from Newegg? That would be counter to everything retailers try to do. When brands think customer experience they need to think omni. Its not about your customers or their customers, its about all customers. The brands who can best interpret omnichannel data and understand all customers are the winners. There will be a new dimension of customer decision. As a final decision is being made to purchase, price, relationship, service and continuity will all be considered.\r\n            </p>\r\n            <p>\r\n                With the rise of NFC and personal device use in store, brands need to awake to the idea that the days of closed data and 75% off for loyalty points from only shopping at their brand are changing quickly. If a brand wants to start thinking omnichannel, then they need to be open and involved in making the customer?s experience continuous and universal. Have doubts? Look at the role of social media and customer relationship. Remember those brands who have refused to evolve and engage and have a dialogue? Many of them aren?t with us today.\r\n            </p>\r\n            <p>\r\n                As much as the social media revolution has meant the two-way exchange in dialogue and interaction, omnichannel is the realization of social business. If the first phase in the evolution of the customer relationship was messaging and media, the future is product research, selection and payment. With personal preference data that can be used universally on devices, brand can either jump at the opportunities made real by omnichannel or wait until their brand is the only one not integrated and playing nicely to allow consumers to be continuous.\r\n            </p>\r\n            <p>\r\n                If you?re thinking that matching the colors and content across devices is omnichannel, we would encourage you to reconsider. If you are ready to lead in the next phase of social business and get the most out of the promise that our new identity as customers is truly omniscient, then let?s connect. This way of thinking is the future promise on which we started Omnichannel Application Framework.\r\n            </p>\r\n            <p>\r\n                There are a few key features in the framework that allowed this idea to be made reality:\r\n                <ul>\r\n                    In exploring and discovering products in your brand domain that data should be transferable for me to collect and use universally.\r\n                </ul>\r\n                <ul>\r\n                    In exchange for this data, the customer will give you access to other data they have collected that will far outweigh the value of the limited data in your brand universe.\r\n                </ul>\r\n                <ul>\r\n                    All experiences offline and online should allow an individual to identify themselves and present a brand with the opportunity to access my preferences.\r\n                </ul>\r\n            </p>\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:55.345"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.345",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:224",
    "@version": 1,
    "@class": "Event",
    "eventId": 10225,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-page-admin-home",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.PageAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\r\n        $scope.getAllPage = {\r\n            category : 'page',\r\n            name : 'getAllPage',\r\n            readOnly: true\r\n        };\r\n        $scope.delPage = {\r\n            category : 'page',\r\n            name : 'delPage',\r\n            readOnly: false,\r\n            data: {}\r\n        };\r\n        $scope.pages = [];\r\n        $scope.headers = [\r\n            {\r\n                title: 'Delete',\r\n                value: 'delete'\r\n            },\r\n            {\r\n                title: 'Page Id',\r\n                value: 'pageId'\r\n            },\r\n            {\r\n                title: 'Host',\r\n                value: 'host'\r\n            },\r\n            {\r\n                title: 'Create User Id',\r\n                value: 'createUserId'\r\n            },\r\n            {\r\n                title: 'Create Date',\r\n                value: 'createDate'\r\n            },\r\n            {\r\n                title: 'Update User Id',\r\n                value: 'updateUserId'\r\n            },\r\n            {\r\n                title: 'Update Date',\r\n                value: 'updateDate'\r\n            }\r\n        ];\r\n        $scope.sort = {\r\n            sortDir : 'desc',\r\n            sortedBy : 'updateDate'\r\n        };\r\n        $scope.filter = {};\r\n\r\n        //call back function that we passed to our custom directive sortBy, will be called when clicking on any field to sort\r\n        $scope.onSort = function (sortedBy, sortDir) {\r\n            $scope.sort.sortDir = sortDir;\r\n            $scope.sort.sortedBy = sortedBy;\r\n        };\r\n\r\n        $scope.delete = function(page) {\r\n            $scope.delPage.data = page;\r\n            $http.post('api/rs', $scope.delPage)\r\n                    .success(function (data, status, headers, config) {\r\n                        $scope.pages.splice($scope.pages.indexOf(page), 1);\r\n                        toaster.pop('success', status, data, 3000);\r\n                    })\r\n        };\r\n\r\n\r\n        $scope.update = function(page) {\r\n            modelDataService.setModelData(page);\r\n            $location.path(\"/form/com.networknt.light.page.update\");\r\n        };\r\n\r\n        $scope.add = function() {\r\n            $location.path(\"/form/com.networknt.light.page.add\");\r\n        };\r\n\r\n        $scope.import = function() {\r\n            $location.path(\"/form/com.networknt.light.page.import\");\r\n        };\r\n\r\n        //The function that is responsible of fetching the result from the server and setting the grid to the new result\r\n        $scope.fetchResult = function () {\r\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getAllPage))}})\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.pages = result;\r\n                        //console.log($scope.pages);\r\n                    })\r\n        };\r\n        $scope.fetchResult();\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.PageAdminHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\r\n            </div>\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"import()\"><i class=\"glyphicon glyphicon-edit\"></i>Import</button>\r\n            </div>\r\n            <tabset>\r\n                <tab heading=\"Recent\">\r\n                    <h1>Pages</h1>\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th ng-repeat=\"header in headers\">\r\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.pageId\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.host\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createUserId\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createDate\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateUserId\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateDate\" type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"page in pages | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td><a href ng-click=\"delete(page)\">Delete</a></td>\r\n                            <td><a href ng-click=\"update(page)\">{{page.pageId}}</a></td>\r\n                            <td>{{page.host}}</td>\r\n                            <td>{{page.createUserId}}</td>\r\n                            <td>{{page.createDate}}</td>\r\n                            <td>{{page.updateUserId}}</td>\r\n                            <td>{{page.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n                <tab heading=\"Updated\">\r\n                    <div>This is tab updated</div>\r\n                </tab>\r\n                <tab heading=\"MyPage\" ng-if=\"global.isLogin\">\r\n                    <div>This is tab MyPage</div>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.361"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.361",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:225",
    "@version": 1,
    "@class": "Event",
    "eventId": 10226,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-product-admin-home",
      "content": "<!DOCTYPE html>\r\n<html>\r\n<head lang=\"en\">\r\n    <meta charset=\"UTF-8\">\r\n    <title></title>\r\n</head>\r\n<body>\r\n\r\n</body>\r\n</html>",
      "createDate": "2015-03-25T20:22:55.370"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.370",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:226",
    "@version": 1,
    "@class": "Event",
    "eventId": 10227,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-production_cluster",
      "content": "<!DOCTYPE html>\r\n<html>\r\n<head lang=\"en\">\r\n    <meta charset=\"UTF-8\">\r\n    <title></title>\r\n</head>\r\n<body>\r\n\r\n</body>\r\n</html>",
      "createDate": "2015-03-25T20:22:55.381"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.381",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:227",
    "@version": 1,
    "@class": "Event",
    "eventId": 10228,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-production_single",
      "content": "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <h1>Production Environment Setup</h1>\r\n            <p>\r\n                I personally use CentOS 6.5 32bit Linux as my production environment and I would recommend it to you; however, other Linux distributions, Mac and Windows are perfectly OK.\r\n                The following steps are for CentOS 6.5 32bit Linux and the setup is single node that hosts three sites. For cluster and load balance setup, please read <a href=\"/page/production_cluster\">here</a>\r\n            </p>\r\n            <p>\r\n                On Linux, the production environment is very similar with development environment.\r\n            </p>\r\n            <p>\r\n                1. Create a working user for production other than root: (If you have a user already on the Linux box, please use it) The following assumes that you logged in as root.\r\n                <pre>\r\n            #adduser steve\r\n            #passwd steve\r\n\r\n            #visudo\r\n            This is to edit /etc/sudoers to add steve to the last line so that he can use sudo command\r\n            Never use vi to edit the above file!\r\n\r\n            Add steve right after\r\n            root ALL=(ALL)   ALL\r\n            with\r\n            steve ALL=(ALL)   ALL\r\n\r\n            vi /etc/ssh/sshd_config\r\n\r\n            change the following line\r\n            #PermitRootLogin  yes\r\n            to\r\n            PermitRootLogin no\r\n\r\n            change the following line\r\n            #UserDNS yes\r\n            to\r\n            UserDNS  no\r\n\r\n            Log out from root and log in with steve. From this moment on, please use sudo command instead of logging in as root.\r\n                </pre>\r\n            </p>\r\n            <p>\r\n                2. Install JDK8, maven, node.js and npm with sudo and then using npm to install Grunt, Gulp, Bower and other modules.\r\n            </p>\r\n            <p>\r\n                3. Create dev folder and check out the source code.\r\n                <pre>\r\n            log in to the user you just created.\r\n            $mkdir networknt\r\n            $cd networknt\r\n\r\n            Check out Json Token which is forked from Google and fixed some of the issues.\r\n            $git clone https://github.com/networknt/jsontoken.git\r\n            Check out light rule engine which is a Java based rule engine used in the back end\r\n            $git clone https://github.com/networknt/rule-engine.git\r\n            Check out the light framework and other projects\r\n            $git clone https://github.com/networknt/light.git\r\n\r\n            $cd jsontoken\r\n            $mvn clean install\r\n            $cd ..\r\n            $cd rule-engine\r\n            $mvn clean install\r\n            $cd rule-loader\r\n            $mvn clean install\r\n            $cd ~\r\n            $cd light\r\n            $mvn clean install -DskipTests\r\n\r\n            Now you have all the Java code built already.\r\n\r\n                </pre>\r\n            </p>\r\n            <p>\r\n                4. Open the source code with your IDE. I am using JetBrains Idea but other IDE like Eclipse will work. From Idea, you can just select File/Open... and then choose ~/networknt/light folder to open. It will import the pom.xml file under the light folder.\r\n            </p>\r\n            <p>\r\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\r\n            <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\r\n            <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a socail commerce site to demo the features of the framework</ul>\r\n            <ul>example folder is a template site that can be copied to start your own web site.</ul>\r\n            OK. Let's create three users for each site and if you are building a new site, create one extra user for it.\r\n\r\n            </p>\r\n            <p>\r\n                If you?re thinking that matching the colors and content across devices is omnichannel, we would encourage you to reconsider. If you are ready to lead in the next phase of social business and get the most out of the promise that our new identity as customers is truly omniscient, then let?s connect. This way of thinking is the future promise on which we started Omnichannel Application Framework.\r\n            </p>\r\n            <p>\r\n                There are a few key features in the framework that allowed this idea to be made reality:\r\n            <ul>\r\n                In exploring and discovering products in your brand domain that data should be transferable for me to collect and use universally.\r\n            </ul>\r\n            <ul>\r\n                In exchange for this data, the customer will give you access to other data they have collected that will far outweigh the value of the limited data in your brand universe.\r\n            </ul>\r\n            <ul>\r\n                All experiences offline and online should allow an individual to identify themselves and present a brand with the opportunity to access my preferences.\r\n            </ul>\r\n            </p>\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:55.397"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.397",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:228",
    "@version": 1,
    "@class": "Event",
    "eventId": 10229,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-proxy-admin-home",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.ProxyAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\r\n\r\n        $scope.getProxy = {\r\n            category : 'proxy',\r\n            name : 'getAllProxy',\r\n            readOnly: true\r\n        };\r\n\r\n        $scope.delProxy = {\r\n            category : 'proxy',\r\n            name : 'delProxy',\r\n            readOnly: false\r\n        };\r\n\r\n        $scope.proxies = [];\r\n\r\n        $scope.headers = [\r\n            {\r\n                title: 'Delete',\r\n                value: 'delete'\r\n            },\r\n            {\r\n                title: 'Rule Class',\r\n                value: 'ruleClass'\r\n            },\r\n            {\r\n                title: 'Hosts',\r\n                value: 'hosts'\r\n            },\r\n            {\r\n                title: 'Create User Id',\r\n                value: 'createUserId'\r\n            },\r\n            {\r\n                title: 'Create Date',\r\n                value: 'createDate'\r\n            },\r\n            {\r\n                title: 'Update User Id',\r\n                value: 'updateUserId'\r\n            },\r\n            {\r\n                title: 'Update Date',\r\n                value: 'updateDate'\r\n            }\r\n        ];\r\n        $scope.sort = {\r\n            sortDir : 'desc',\r\n            sortedBy : 'createDate'\r\n        };\r\n        $scope.filter = {};\r\n\r\n        $scope.onSort = function (sortedBy, sortDir) {\r\n            $scope.sort.sortDir = sortDir;\r\n            $scope.sort.sortedBy = sortedBy;\r\n        };\r\n\r\n        $scope.delete = function(proxy) {\r\n            $scope.delProxy.data = proxy;\r\n            $http.post('api/rs', $scope.delProxy)\r\n                    .success(function (data, status, headers, config) {\r\n                        $scope.proxies.splice($scope.proxies.indexOf(proxy), 1);\r\n                        toaster.pop('success', status, data, 3000);\r\n                    })\r\n        };\r\n\r\n\r\n        $scope.update = function(proxy) {\r\n            modelDataService.setModelData(proxy);\r\n            $location.path(\"/form/com.networknt.light.proxy.upd_d\");\r\n        };\r\n\r\n        $scope.add = function() {\r\n            $location.path(\"/form/com.networknt.light.proxy.add_d\");\r\n        };\r\n\r\n        $scope.fetchResult = function () {\r\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getProxy))}})\r\n                    .success(function (data, status, headers, config) {\r\n                        $scope.proxies = data;\r\n                    })\r\n        };\r\n        $scope.fetchResult();\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.ProxyAdminHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\r\n            </div>\r\n            <tabset>\r\n                <tab heading=\"Proxy\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th ng-repeat=\"header in headers\">\r\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td><input ng-model=\"filter.ruleClass\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.hosts\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"proxy in proxies | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td><a href ng-click=\"delete(proxy)\">Delete</a></td>\r\n                            <td><a href ng-click=\"update(proxy)\">{{proxy.ruleClass}}</a></td>\r\n                            <td>{{proxy.hosts}}</td>\r\n                            <td>{{proxy.createUserId}}</td>\r\n                            <td>{{proxy.createDate}}</td>\r\n                            <td>{{proxy.updateUserId}}</td>\r\n                            <td>{{proxy.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.414"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.414",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:229",
    "@version": 1,
    "@class": "Event",
    "eventId": 10230,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-role-admin-home",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.RoleAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\r\n        $scope.getRole = {\r\n            category : 'role',\r\n            name : 'getRole',\r\n            readOnly: true\r\n        };\r\n        $scope.delRole = {\r\n            category : 'role',\r\n            name : 'delRole',\r\n            readOnly: false\r\n        };\r\n        $scope.roles = [];\r\n        $scope.hosts = [];\r\n\r\n        $scope.headers = [\r\n            {\r\n                title: 'Delete',\r\n                value: 'delete'\r\n            },\r\n            {\r\n                title: 'RoleId',\r\n                value: 'roleId'\r\n            },\r\n            {\r\n                title: 'Host',\r\n                value: 'host'\r\n            },\r\n            {\r\n                title: \"Description\",\r\n                value: \"desc\"\r\n            },\r\n            {\r\n                title: 'Create User Id',\r\n                value: 'createUserId'\r\n            },\r\n            {\r\n                title: 'Create Date',\r\n                value: 'createDate'\r\n            },\r\n            {\r\n                title: 'Update User Id',\r\n                value: 'updateUserId'\r\n            },\r\n            {\r\n                title: 'Update Date',\r\n                value: 'updateDate'\r\n            }\r\n        ];\r\n        $scope.sort = {\r\n            sortDir : 'desc',\r\n            sortedBy : 'createDate'\r\n        };\r\n        $scope.filter = {};\r\n\r\n        $scope.onSort = function (sortedBy, sortDir) {\r\n            $scope.sort.sortDir = sortDir;\r\n            $scope.sort.sortedBy = sortedBy;\r\n        };\r\n\r\n        $scope.delete = function(role) {\r\n            $scope.delRole.data = role;\r\n            $http.post('api/rs', $scope.delRole)\r\n                    .success(function (data, status, headers, config) {\r\n                        $scope.roles.splice($scope.roles.indexOf(role), 1);\r\n                        toaster.pop('success', status, data, 3000);\r\n                    })\r\n        };\r\n\r\n\r\n        $scope.update = function(role) {\r\n            modelDataService.setModelData(role);\r\n            $location.path(\"/form/com.networknt.light.role.update\");\r\n        };\r\n\r\n        $scope.add = function() {\r\n            $location.path(\"/form/com.networknt.light.role.add\");\r\n        };\r\n\r\n        $scope.fetchResult = function () {\r\n            $http.post('api/rs', $scope.getRole)\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.roles = result.roles;\r\n                        $scope.hosts = result.hosts;\r\n                        //console.log($scope.roles);\r\n                    })\r\n        };\r\n        $scope.fetchResult();\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.RoleAdminHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\r\n            </div>\r\n            <tabset>\r\n                <tab heading=\"Roles\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th ng-repeat=\"header in headers\">\r\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td><input ng-model=\"filter.roleId\" type=\"text\" /></td>\r\n                            <td>\r\n                                <select ng-model=\"filter.host\" ng-options=\"host for host in hosts\" >\r\n                                    <option value=\"\"> </option>\r\n                                </select>\r\n                            </td>\r\n                            <td><input ng-model=\"filter.desc\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"role in roles | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td><a href ng-click=\"delete(role)\">Delete</a></td>\r\n                            <td><a href ng-click=\"update(role)\">{{role.roleId}}</a></td>\r\n                            <td>{{role.host}}</td>\r\n                            <td>{{role.desc}}</td>\r\n                            <td>{{role.createUserId}}</td>\r\n                            <td>{{role.createDate}}</td>\r\n                            <td>{{role.updateUserId}}</td>\r\n                            <td>{{role.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.428"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.428",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:230",
    "@version": 1,
    "@class": "Event",
    "eventId": 10231,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-rule-admin-home",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.RuleAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\r\n        console.log('local rule admin page is reached');\r\n        $scope.getRule = {\r\n            category : 'rule',\r\n            name : 'getRule',\r\n            readOnly: true\r\n        };\r\n        $scope.delRule = {\r\n            category : 'rule',\r\n            name : 'delRule',\r\n            readOnly: false\r\n        };\r\n        $scope.rules = [];\r\n\r\n        $scope.headers = [\r\n            {\r\n                title: 'Delete',\r\n                value: 'delete'\r\n            },\r\n            {\r\n                title: 'Rule Class',\r\n                value: 'ruleClass'\r\n            },\r\n            {\r\n                title: 'Host',\r\n                value: 'host'\r\n            },\r\n            {\r\n                title: 'Create User Id',\r\n                value: 'createUserId'\r\n            },\r\n            {\r\n                title: 'Create Date',\r\n                value: 'createDate'\r\n            },\r\n            {\r\n                title: 'Update User Id',\r\n                value: 'updateUserId'\r\n            },\r\n            {\r\n                title: 'Update Date',\r\n                value: 'updateDate'\r\n            }\r\n        ];\r\n        $scope.sort = {\r\n            sortDir : 'desc',\r\n            sortedBy : 'createDate'\r\n        };\r\n        $scope.filter = {};\r\n\r\n        $scope.onSort = function (sortedBy, sortDir) {\r\n            $scope.sort.sortDir = sortDir;\r\n            $scope.sort.sortedBy = sortedBy;\r\n        };\r\n\r\n        $scope.delete = function(rule) {\r\n            $scope.delRule.data = rule;\r\n            $http.post('api/rs', $scope.delRule)\r\n                    .success(function (data, status, headers, config) {\r\n                        $scope.rules.splice($scope.rules.indexOf(rule), 1);\r\n                        toaster.pop('success', status, data, 3000);\r\n                    })\r\n        };\r\n\r\n\r\n        $scope.update = function(rule) {\r\n            modelDataService.setModelData(rule);\r\n            //$location.path(\"/form/com.networknt.light.rule.update\");\r\n            $location.path(\"/page/com-networknt-light-v-rule-home\");\r\n        };\r\n\r\n        $scope.add = function() {\r\n            $location.path(\"/form/com.networknt.light.rule.add\");\r\n        };\r\n\r\n        $scope.import = function() {\r\n            $location.path(\"/form/com.networknt.light.rule.import\");\r\n        };\r\n\r\n        $scope.fetchResult = function () {\r\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getRule))}})\r\n                    .success(function (data, status, headers, config) {\r\n                        $scope.rules = data;\r\n                        //console.log($scope.rules);\r\n                    })\r\n        };\r\n        $scope.fetchResult();\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.RuleAdminHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\r\n            </div>\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"import()\"><i class=\"glyphicon glyphicon-edit\"></i>Import</button>\r\n            </div>\r\n            <tabset>\r\n                <tab heading=\"Rules\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th ng-repeat=\"header in headers\">\r\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td><input ng-model=\"filter.ruleClass\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.host\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"rule in rules | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td><a href ng-click=\"delete(rule)\">Delete</a></td>\r\n                            <td><a href ng-click=\"update(rule)\">{{rule.ruleClass}}</a></td>\r\n                            <td>{{rule.host}}</td>\r\n                            <td>{{rule.createUserId}}</td>\r\n                            <td>{{rule.createDate}}</td>\r\n                            <td>{{rule.updateUserId}}</td>\r\n                            <td>{{rule.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.442"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.442",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:231",
    "@version": 1,
    "@class": "Event",
    "eventId": 10232,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-rule-home",
      "content": "<!--\r\n  ~ Copyright 2015 Network New Technologies Inc.\r\n  ~\r\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  ~ you may not use this file except in compliance with the License.\r\n  ~ You may obtain a copy of the License at\r\n  ~\r\n  ~     http://www.apache.org/licenses/LICENSE-2.0\r\n  ~\r\n  ~ Unless required by applicable law or agreed to in writing, software\r\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  ~ See the License for the specific language governing permissions and\r\n  ~ limitations under the License.\r\n  -->\r\n<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <tabset>\r\n                <tab heading=\"Rule Admin\">\r\n                    <p>\r\n                        <a href=\"/form/com.networknt.light.rule.update\">Rule Source Code Update</a>\r\n                    </p>\r\n                    <p>\r\n                        <a href=\"/page/com-networknt-light-v-rule-transform-request\">Transform Request Rules</a>\r\n                    </p>\r\n                    <p>\r\n                        <a href=\"/page/com-networknt-light-v-rule-transform-response\">Transform Response Rules</a>\r\n                    </p>\r\n                    <p>\r\n                        <a href=\"/form/com.networknt.light.rule.publisher.update\">Update Rule Publisher</a>\r\n                    </p>\r\n                    <p>\r\n                        <a href=\"/form/com.networknt.light.rule.subscriber.update\">Update Rule Subscriber</a>\r\n                    </p>\r\n                    <p>\r\n                        <a href=\"/form/com.networknt.light.rule.cors.update\">Update CORS Flag</a>\r\n                    </p>\r\n                    <p>\r\n                        <a href=\"/form/com.networknt.light.rule.etag.update\">Update Deep ETag Flag</a>\r\n                    </p>\r\n                    <p>\r\n                        <a href=\"/form/com.networknt.light.rule.schema.update\">Update Validation Schema</a>\r\n                    </p>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.455"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.455",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:232",
    "@version": 1,
    "@class": "Event",
    "eventId": 10233,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-rule-transform-request",
      "content": "<!--\r\n  ~ Copyright 2015 Network New Technologies Inc.\r\n  ~\r\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  ~ you may not use this file except in compliance with the License.\r\n  ~ You may obtain a copy of the License at\r\n  ~\r\n  ~     http://www.apache.org/licenses/LICENSE-2.0\r\n  ~\r\n  ~ Unless required by applicable law or agreed to in writing, software\r\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  ~ See the License for the specific language governing permissions and\r\n  ~ limitations under the License.\r\n  -->\r\n<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.TransformRequestAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\r\n        $scope.getTransformRequest = {\r\n            category : 'transform',\r\n            name : 'getTransformRequest',\r\n            readOnly: true,\r\n            data: {}\r\n        };\r\n\r\n        $scope.delTransformRequest = {\r\n            category : 'transform',\r\n            name : 'delTransformRequest',\r\n            readOnly: false\r\n        };\r\n\r\n        $scope.transforms = [];\r\n\r\n        $scope.headers = [\r\n            {\r\n                title: 'Delete',\r\n                value: 'delete'\r\n            },\r\n            {\r\n                title: \"Sequence\",\r\n                value: \"sequence\"\r\n            },\r\n            {\r\n                title: \"Transform Rule\",\r\n                value: \"transformRule\"\r\n            },\r\n            {\r\n                title: \"Transform Data\",\r\n                value: \"transformData\"\r\n            },\r\n            {\r\n                title: 'Create User Id',\r\n                value: 'createUserId'\r\n            },\r\n            {\r\n                title: 'Create Date',\r\n                value: 'createDate'\r\n            },\r\n            {\r\n                title: 'Update User Id',\r\n                value: 'updateUserId'\r\n            },\r\n            {\r\n                title: 'Update Date',\r\n                value: 'updateDate'\r\n            }\r\n        ];\r\n        $scope.sort = {\r\n            sortDir : 'desc',\r\n            sortedBy : 'createDate'\r\n        };\r\n        $scope.filter = {};\r\n\r\n        $scope.onSort = function (sortedBy, sortDir) {\r\n            $scope.sort.sortDir = sortDir;\r\n            $scope.sort.sortedBy = sortedBy;\r\n        };\r\n\r\n        $scope.delete = function(transform) {\r\n            $scope.delTransformRequest.data = transform;\r\n            $http.post('api/rs', $scope.delTransformRequest)\r\n                    .success(function (data, status, headers, config) {\r\n                        $scope.transforms.splice($scope.transforms.indexOf(transform), 1);\r\n                        toaster.pop('success', status, data, 3000);\r\n                    })\r\n        };\r\n\r\n\r\n        $scope.update = function(transform) {\r\n            transform.ruleClass = $scope.getTransformRequest.data.ruleClass;\r\n            // convert transformData from map to string in order to display in the text area.\r\n            transform.transformData = JSON.stringify(transform.transformData, undefined, 2);\r\n            modelDataService.setModelData(transform);\r\n            $location.path(\"/form/com.networknt.light.transform.request.update_d\");\r\n        };\r\n\r\n        $scope.add = function() {\r\n            $location.path(\"/form/com.networknt.light.transform.request.add_d\");\r\n        };\r\n\r\n        $scope.fetchResult = function () {\r\n            $scope.getTransformRequest.data.ruleClass = modelDataService.getModelData().ruleClass;\r\n            console.log(\"ruleClass\", $scope.getTransformRequest.data.ruleClass);\r\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getTransformRequest))}})\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.transforms = result;\r\n                    })\r\n        };\r\n        $scope.fetchResult();\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.TransformRequestAdminHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\r\n            </div>\r\n            <tabset>\r\n                <tab heading={{getTransformRequest.data.ruleClass}}>\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th ng-repeat=\"header in headers\">\r\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td><input ng-model=\"filter.sequence\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.transformRule\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.transformData\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"transform in transforms | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td><a href ng-click=\"delete(transform)\">Delete</a></td>\r\n                            <td><a href ng-click=\"update(transform)\">{{transform.sequence}}</a></td>\r\n                            <td>{{transform.transformRule}}</td>\r\n                            <td>{{transform.transformData}}</td>\r\n                            <td>{{transform.createUserId}}</td>\r\n                            <td>{{transform.createDate}}</td>\r\n                            <td>{{transform.updateUserId}}</td>\r\n                            <td>{{transform.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.473"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.473",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:233",
    "@version": 1,
    "@class": "Event",
    "eventId": 10234,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-rule-transform-response",
      "content": "<!--\r\n  ~ Copyright 2015 Network New Technologies Inc.\r\n  ~\r\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  ~ you may not use this file except in compliance with the License.\r\n  ~ You may obtain a copy of the License at\r\n  ~\r\n  ~     http://www.apache.org/licenses/LICENSE-2.0\r\n  ~\r\n  ~ Unless required by applicable law or agreed to in writing, software\r\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  ~ See the License for the specific language governing permissions and\r\n  ~ limitations under the License.\r\n  -->\r\n<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.TransformResponseAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\r\n        $scope.getTransformResponse = {\r\n            category : 'transform',\r\n            name : 'getTransformResponse',\r\n            readOnly: true,\r\n            data: {}\r\n        };\r\n\r\n        $scope.delTransformResponse = {\r\n            category : 'transform',\r\n            name : 'delTransformResponse',\r\n            readOnly: false\r\n        };\r\n\r\n        $scope.transforms = [];\r\n\r\n        $scope.headers = [\r\n            {\r\n                title: 'Delete',\r\n                value: 'delete'\r\n            },\r\n            {\r\n                title: \"Sequence\",\r\n                value: \"sequence\"\r\n            },\r\n            {\r\n                title: \"Transform Rule\",\r\n                value: \"transformRule\"\r\n            },\r\n            {\r\n                title: \"Transform Data\",\r\n                value: \"transformData\"\r\n            },\r\n            {\r\n                title: 'Create User Id',\r\n                value: 'createUserId'\r\n            },\r\n            {\r\n                title: 'Create Date',\r\n                value: 'createDate'\r\n            },\r\n            {\r\n                title: 'Update User Id',\r\n                value: 'updateUserId'\r\n            },\r\n            {\r\n                title: 'Update Date',\r\n                value: 'updateDate'\r\n            }\r\n        ];\r\n        $scope.sort = {\r\n            sortDir : 'desc',\r\n            sortedBy : 'createDate'\r\n        };\r\n        $scope.filter = {};\r\n\r\n        $scope.onSort = function (sortedBy, sortDir) {\r\n            $scope.sort.sortDir = sortDir;\r\n            $scope.sort.sortedBy = sortedBy;\r\n        };\r\n\r\n        $scope.delete = function(transform) {\r\n            $scope.delTransformResponse.data = transform;\r\n            $http.post('api/rs', $scope.delTransformResponse)\r\n                    .success(function (data, status, headers, config) {\r\n                        $scope.transforms.splice($scope.transforms.indexOf(transform), 1);\r\n                        toaster.pop('success', status, data, 3000);\r\n                    })\r\n        };\r\n\r\n\r\n        $scope.update = function(transform) {\r\n            transform.ruleClass = $scope.getTransformResponse.data.ruleClass;\r\n            // convert transformData from map to string in order to display in the text area.\r\n            transform.transformData = JSON.stringify(transform.transformData, undefined, 2);\r\n            modelDataService.setModelData(transform);\r\n            $location.path(\"/form/com.networknt.light.transform.response.update_d\");\r\n        };\r\n\r\n        $scope.add = function() {\r\n            $location.path(\"/form/com.networknt.light.transform.response.add_d\");\r\n        };\r\n\r\n        $scope.fetchResult = function () {\r\n            $scope.getTransformResponse.data.ruleClass = modelDataService.getModelData().ruleClass;\r\n            console.log(\"ruleClass\", $scope.getTransformResponse.data.ruleClass);\r\n            $http.post('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getTransformResponse))}})\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.transforms = result;\r\n                    })\r\n        };\r\n        $scope.fetchResult();\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.TransformResponseAdminHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <div class=\"pull-right\">\r\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\r\n            </div>\r\n            <tabset>\r\n                <tab heading={{getTransformResponse.data.ruleClass}}>\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th ng-repeat=\"header in headers\">\r\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td><input ng-model=\"filter.sequence\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.transformRule\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.transformData\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\r\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"transform in transforms | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td><a href ng-click=\"delete(transform)\">Delete</a></td>\r\n                            <td><a href ng-click=\"update(transform)\">{{transform.sequence}}</a></td>\r\n                            <td>{{transform.transformRule}}</td>\r\n                            <td>{{transform.transformData}}</td>\r\n                            <td>{{transform.createUserId}}</td>\r\n                            <td>{{transform.createDate}}</td>\r\n                            <td>{{transform.updateUserId}}</td>\r\n                            <td>{{transform.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.489"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.489",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:234",
    "@version": 1,
    "@class": "Event",
    "eventId": 10235,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-stacks",
      "content": "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <h1>Technology Stacks</h1>\r\n            <p>\r\n            <h2><a href=\"/page/com-networknt-light-v-why-angularjs\">Why to choose AngularJS</a></h2>\r\n            </p>\r\n            <p>\r\n            <h2><a href=\"/page/com-networknt-light-v-why-bootstrap\">Why to choose Twitter Bootstrap</a></h2>\r\n            </p>\r\n            <p>\r\n            <h2><a href=\"/page/com-networknt-light-v-why-undertow\">Why to choose Undertow</a></h2>\r\n            </p>\r\n            <p>\r\n            <h2><a href=\"/page/com-networknt-light-v-why-orientdb\">Why to choose OrientDB</a></h2>\r\n            </p>\r\n            <p>\r\n            <h2><a href=\"/page/com-networknt-light-v-why-hazelcast\">Why to choose Hazelcast</a></h2>\r\n            </p>\r\n            <p>\r\n            <h2><a href=\"/page/com-networknt-light-v-why-light-ruleengine\">Why to choose Light Rule Engine</a></h2>\r\n            </p>\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:55.504"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.504",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:235",
    "@version": 1,
    "@class": "Event",
    "eventId": 10236,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-test-command-get",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.TestCommandCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\r\n        var getTest = {\r\n            category : 'test',\r\n            name : 'getTest',\r\n            readOnly: true,\r\n            data : {\r\n                pageSize : 10,\r\n                pageNo : 1,\r\n                sortDir : 'desc',\r\n                sortedBy : 'createDate'\r\n            }\r\n        };\r\n\r\n        $scope.data = '';\r\n\r\n        $scope.fetchResult = function () {\r\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify(getTest))}})\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.data = result;\r\n                        console.log($scope.data);\r\n                    })\r\n        };\r\n        //$scope.fetchResult();\r\n\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.TestCommandCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\r\n            <button class=\"btn btn-info\" ng-click=\"fetchResult()\"><i class=\"glyphicon glyphicon-edit\"></i>Fetch</button>\r\n            {{data}}\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:55.517"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.517",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:236",
    "@version": 1,
    "@class": "Event",
    "eventId": 10237,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-test-hello-world",
      "content": "<!--\r\n  ~ Copyright 2015 Network New Technologies Inc.\r\n  ~\r\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  ~ you may not use this file except in compliance with the License.\r\n  ~ You may obtain a copy of the License at\r\n  ~\r\n  ~     http://www.apache.org/licenses/LICENSE-2.0\r\n  ~\r\n  ~ Unless required by applicable law or agreed to in writing, software\r\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  ~ See the License for the specific language governing permissions and\r\n  ~ limitations under the License.\r\n  -->\r\n<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.HelloWorldCtrl', ['$scope', '$http', '$location', '$filter', 'transformService', 'modelDataService', function ($scope, $http, $location, $filter, transformService, modelDataService) {\r\n        var getHelloWorld = {\r\n            host: 'example',\r\n            app: 'main',\r\n            category : 'perf',\r\n            name : 'helloWorld',\r\n            readOnly: true,\r\n            data : {\r\n                pageSize : 10,\r\n                pageNo : 1,\r\n                sortDir : 'desc',\r\n                sortedBy : 'createDate'\r\n            }\r\n        };\r\n\r\n        $scope.data = '';\r\n\r\n        $scope.fetchResult = function () {\r\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify(getHelloWorld))}})\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.data = result;\r\n                        console.log($scope.data);\r\n                    })\r\n        };\r\n        //$scope.fetchResult();\r\n\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.HelloWorldCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\r\n            <button class=\"btn btn-info\" ng-click=\"fetchResult()\"><i class=\"glyphicon glyphicon-edit\"></i>Fetch</button>\r\n            {{data}}\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:55.531"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.531",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:237",
    "@version": 1,
    "@class": "Event",
    "eventId": 10238,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-user-admin-home",
      "content": "<script type='text/javascript'>\r\n    (function(angular) {\r\n        'use strict';\r\n        angular.module('lightApp').controller('com.networknt.light.UserAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\r\n            $scope.getAllUser = {\r\n                category : 'user',\r\n                name : 'getAllUser',\r\n                readOnly: true,\r\n                data : {\r\n                    pageSize : 10,\r\n                    pageNo : 1,\r\n                    sortDir : 'desc',\r\n                    sortedBy : 'createDate'\r\n                }\r\n            };\r\n            $scope.delUser = {\r\n                category : 'user',\r\n                name : 'delUser',\r\n                readOnly: false\r\n            };\r\n            $scope.lockUser = {\r\n                category : 'user',\r\n                name : 'lockUser',\r\n                readOnly: false\r\n            };\r\n            $scope.unlockUser = {\r\n                category : 'user',\r\n                name : 'unlockUser',\r\n                readOnly: false\r\n            };\r\n\r\n            $scope.page = { maxSize: 10, totalItems: 0, numPages: 0 };\r\n            $scope.users = [];\r\n            $scope.roles = [];\r\n            $scope.hosts = [];\r\n\r\n            $scope.headers = [\r\n                {\r\n                    title: 'Delete',\r\n                    value: 'delete'\r\n                },\r\n                {\r\n                    title: 'Locked',\r\n                    value: 'locked'\r\n                },\r\n                {\r\n                    title: 'User Id',\r\n                    value: 'userId'\r\n                },\r\n                {\r\n                    title: 'Host',\r\n                    value: 'host'\r\n                },\r\n                {\r\n                    title: 'Roles',\r\n                    value: 'roles'\r\n                },\r\n                {\r\n                    title: 'Email',\r\n                    value: 'email'\r\n                },\r\n                {\r\n                    title: 'First Name',\r\n                    value: 'firstName'\r\n                },\r\n                {\r\n                    title: 'Last Name',\r\n                    value: 'lastName'\r\n                },\r\n                {\r\n                    title: 'Up Users',\r\n                    value: 'upUsers'\r\n                },\r\n                {\r\n                    title: 'Down Users',\r\n                    value: 'downUsers'\r\n                },\r\n                {\r\n                    title: 'Karma',\r\n                    value: 'karma'\r\n                },\r\n                {\r\n                    title: 'Create Date',\r\n                    value: 'createDate'\r\n                },\r\n                {\r\n                    title: 'Update Date',\r\n                    value: 'updateDate'\r\n                },\r\n                {\r\n                    title: 'Log in Date',\r\n                    value: 'logInDate'\r\n                },\r\n                {\r\n                    title: 'Log out Date',\r\n                    value: 'logOutDate'\r\n                }\r\n            ];\r\n\r\n            $scope.fetchResult = function () {\r\n                $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getAllUser))}})\r\n                        .success(function (result, status, headers, config) {\r\n                            $scope.users = result.users;\r\n                            $scope.roles = result.roles;\r\n                            $scope.hosts = result.hosts;\r\n                            $scope.page.totalItems = result.total;\r\n                            //console.log($scope.users);\r\n                            console.log($scope.roles);\r\n                            console.log($scope.hosts);\r\n                            //console.log($scope.page.totalItems);\r\n                            $scope.page.numPages = Math.ceil($scope.page.totalItems / $scope.getAllUser.data.pageSize);\r\n                            //console.log($scope.page.numPages);\r\n                        })\r\n            };\r\n\r\n            $scope.onUserSort = function (sortedBy, sortDir) {\r\n                $scope.getAllUser.data.sortDir = sortDir;\r\n                $scope.getAllUser.data.sortedBy = sortedBy;\r\n                $scope.getAllUser.data.pageNo = 1;\r\n                $scope.fetchResult();\r\n            };\r\n\r\n            //Will be called when filtering the grid, will reset the page number to one\r\n            $scope.filterResult = function () {\r\n                $scope.getAllUser.data.pageNo = 1;\r\n                $scope.fetchResult();\r\n            };\r\n\r\n            $scope.pageChanged = function() {\r\n                $scope.fetchResult();\r\n            };\r\n\r\n            $scope.lock = function(user) {\r\n                $scope.lockUser.data = user;\r\n                $http.post('api/rs', $scope.lockUser)\r\n                        .success(function (data, status, headers, config) {\r\n                            user.locked = true;\r\n                            toaster.pop('success', status, data, 3000);\r\n                        })\r\n            };\r\n\r\n            $scope.unlock = function(user) {\r\n                $scope.unlockUser.data = user;\r\n                $http.post('api/rs', $scope.unlockUser)\r\n                        .success(function (data, status, headers, config) {\r\n                            user.locked = false;\r\n                            toaster.pop('success', status, data, 3000);\r\n                        })\r\n            };\r\n\r\n            $scope.delete = function(user) {\r\n                $scope.delUser.data = user;\r\n                $http.post('api/rs', $scope.delUser)\r\n                        .success(function (data, status, headers, config) {\r\n                            $scope.users.splice($scope.users.indexOf(user), 1);\r\n                            toaster.pop('success', status, data, 3000);\r\n                        })\r\n            };\r\n\r\n            $scope.update = function(user) {\r\n                modelDataService.setModelData(user);\r\n                $location.path(\"/page/com-networknt-light-v-user-admin-update\");\r\n            };\r\n\r\n            $scope.pageChanged();\r\n        }]);\r\n    })(window.angular);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.UserAdminHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <tabset>\r\n                <tab heading=\"Users\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th ng-repeat=\"header in headers\">\r\n                                <sort-by onsort=\"onUserSort\" sortdir=\"getAllUser.data.sortDir\" sortedby=\"getAllUser.data.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.locked\" type=\"checkbox\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.userId\" type=\"text\" /></td>\r\n                            <td>\r\n                                <select ng-change=\"filterResult()\" ng-model=\"getAllUser.data.host\" ng-options=\"host for host in hosts\" >\r\n                                    <option value=\"\"></option>\r\n                                </select>\r\n                            </td>\r\n                            <td>\r\n                                <select ng-change=\"filterResult()\" ng-model=\"getAllUser.data.roles\" ng-options=\"role for role in roles\" >\r\n                                    <option value=\"\"></option>\r\n                                </select>\r\n                            </td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.email\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.firstName\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.lastName\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.upUsers\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.downUsers\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.karma\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.createDate\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.updateDate\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.logInDate\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.logOutDate\" type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"user in users\">\r\n                            <td><a href ng-click=\"delete(user)\">Delete</a></td>\r\n                            <td><a href ng-click=\"lock(user)\">{{user.locked}}</a></td>\r\n                            <td><a href ng-click=\"update(user)\">{{user.userId}}</a></td>\r\n                            <td>{{user.host}}</td>\r\n                            <td>{{user.roles}}</td>\r\n                            <td>{{user.email}}</td>\r\n                            <td>{{user.firstName}}</td>\r\n                            <td>{{user.lastName}}</td>\r\n                            <td>{{user.upUsers}}</td>\r\n                            <td>{{user.downUsers}}</td>\r\n                            <td>{{user.karma}}</td>\r\n                            <td>{{user.createDate}}</td>\r\n                            <td>{{user.updateDate}}</td>\r\n                            <td>{{user.logInDate}}</td>\r\n                            <td>{{page.logOutDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <pagination total-items=\"page.totalItems\" items-per-page=\"getAllUser.data.pageSize\" ng-model=\"getAllUser.data.pageNo\" max-size=\"page.maxSize\" class=\"pagination-sm\" boundary-links=\"true\" rotate=\"false\" num-pages=\"page.numPages\" ng-change=\"pageChanged()\"></pagination>\r\n                    <table>\r\n                        <tr>\r\n                            <td>Page: {{getAllUser.data.pageNo}} / {{page.numPages}}</td>\r\n                            <td>&nbsp;</td>\r\n                            <td>Page Size:</td>\r\n                            <td><input type=\"number\" min=\"1\" max=\"200\" ng-change=\"filterResult()\" ng-model=\"getAllUser.data.pageSize\"></td>\r\n                        </tr>\r\n                    </table>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.571"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.571",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:238",
    "@version": 1,
    "@class": "Event",
    "eventId": 10239,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-user-admin-update",
      "content": "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <h1>User Update</h1>\r\n            <p>\r\n            <h2><a href=\"/form/com.networknt.light.user.role.update_d\">Update User Role</a></h2>\r\n            </p>\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:55.585"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.585",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:239",
    "@version": 1,
    "@class": "Event",
    "eventId": 10240,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-user-home",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.UserHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\r\n        $scope.getAllPage = {\r\n            category : 'page',\r\n            name : 'getAllPage',\r\n            readOnly: true\r\n        };\r\n        $scope.delPage = {\r\n            category : 'page',\r\n            name : 'delPage',\r\n            readOnly: false,\r\n            data: {}\r\n        };\r\n        $scope.pages = [];\r\n        $scope.headers = [\r\n            {\r\n                title: 'Check All',\r\n                value: 'checkAll'\r\n            },\r\n            {\r\n                title: 'Id',\r\n                value: 'id'\r\n            },\r\n            {\r\n                title: 'Host',\r\n                value: 'host'\r\n            },\r\n            {\r\n                title: 'Create User Id',\r\n                value: 'createUserId'\r\n            },\r\n            {\r\n                title: 'Create Date',\r\n                value: 'createDate'\r\n            },\r\n            {\r\n                title: 'Update User Id',\r\n                value: 'updateUserId'\r\n            },\r\n            {\r\n                title: 'Update Date',\r\n                value: 'updateDate'\r\n            }\r\n        ];\r\n        $scope.sort = {\r\n            sortDir : 'desc',\r\n            sortedBy : 'updateDate'\r\n        };\r\n        $scope.filter = {};\r\n        $scope.selectedAll = false;\r\n\r\n        $scope.checkAll = function () {\r\n            $scope.selectedAll = !$scope.selectedAll;\r\n            angular.forEach($scope.pages, function(page) {\r\n                page.selected = $scope.selectedAll;\r\n            })\r\n        };\r\n\r\n        $scope.delete = function() {\r\n            var ids = '';\r\n            var selected = false;\r\n            angular.forEach($scope.pages, function(page) {\r\n                if(page.selected) {\r\n                    selected = true;\r\n                    $scope.delPage.data = page;\r\n                    $http.post('api/rs', $scope.delPage)\r\n                            .success(function (result, status, headers, config) {\r\n                                ids = ids + page.id + ' ';\r\n\r\n                            }).error(function (data, status, headers, config) {\r\n                                toaster.pop('error', 'data', data, 3000);\r\n                            }\r\n                    );\r\n                }\r\n            });\r\n            if(selected) {\r\n                $scope.fetchResult();\r\n                toaster.pop('success', 'data', ids, 3000);\r\n            } else {\r\n                toaster.pop('error', 'data', \"Nothing is selected to delete!\", 3000);\r\n            }\r\n        };\r\n\r\n        //call back function that we passed to our custom directive sortBy, will be called when clicking on any field to sort\r\n        $scope.onSort = function (sortedBy, sortDir) {\r\n            $scope.sort.sortDir = sortDir;\r\n            $scope.sort.sortedBy = sortedBy;\r\n        };\r\n\r\n        $scope.update = function(index) {\r\n            console.log(index);\r\n            if(angular.isDefined(index)) {\r\n                var page = $scope.pages[index];\r\n                modelDataService.setModelData(page);\r\n                $location.path(\"/form/com.networknt.light.page.update\");\r\n            }\r\n        };\r\n\r\n        $scope.updateProfile = function() {\r\n            $location.path(\"/form/com.networknt.light.user.update.profile\");\r\n        };\r\n\r\n        $scope.changePassword = function() {\r\n            $location.path(\"/form/com.networknt.light.user.change.password\");\r\n        };\r\n\r\n        //The function that is responsible of fetching the result from the server and setting the grid to the new result\r\n        $scope.fetchResult = function () {\r\n            $http.post('api/rs', $scope.getAllPage)\r\n                    .success(function (result, status, headers, config) {\r\n                        $scope.pages = result;\r\n                        console.log($scope.pages);\r\n                    }).error(function (data, status, headers, config) {\r\n                        toaster.pop('error', status, data, 5000);\r\n                    }\r\n            );\r\n        };\r\n        $scope.fetchResult();\r\n    }]);\r\n</script>\r\n<div class=\"container\" ng-controller=\"com.networknt.light.UserHomeCtrl\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <tabset>\r\n                <tab heading=\"Profile\">\r\n                    <h1>Profile</h1>\r\n                    <a ng-click=\"updateProfile()\" href=\"#\">Update Profile</a>\r\n                    <a ng-click=\"changePassword()\" href=\"#\">Change Password</a>\r\n                </tab>\r\n                <tab heading=\"Event History\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th ng-repeat=\"header in headers\">\r\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td><input ng-model=\"selectedAll\" ng-click=\"checkAll()\" type=\"checkbox\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.id\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.host\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createUserId\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createDate\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateUserId\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateDate\" type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"page in pages | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td><input type=\"checkbox\" ng-model=\"page.selected\" /></td>\r\n                            <td><a href ng-click=\"update($index)\">{{page.id}}</a></td>\r\n                            <td>{{page.host}}</td>\r\n                            <td>{{page.createUserId}}</td>\r\n                            <td>{{page.createDate}}</td>\r\n                            <td>{{page.updateUserId}}</td>\r\n                            <td>{{page.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n                <tab heading=\"Bookmark\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th ng-repeat=\"header in headers\">\r\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\r\n                            </th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td><input ng-model=\"selectedAll\" ng-click=\"checkAll()\" type=\"checkbox\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.id\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.host\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createUserId\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createDate\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateUserId\" type=\"text\" /></td>\r\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateDate\" type=\"text\" /></td>\r\n                        </tr>\r\n                        <tr ng-repeat=\"page in pages | filter: filter | orderBy: sort.sortedBy\">\r\n                            <td><input type=\"checkbox\" ng-model=\"page.selected\" /></td>\r\n                            <td><a href ng-click=\"update($index)\">{{page.id}}</a></td>\r\n                            <td>{{page.host}}</td>\r\n                            <td>{{page.createUserId}}</td>\r\n                            <td>{{page.createDate}}</td>\r\n                            <td>{{page.updateUserId}}</td>\r\n                            <td>{{page.updateDate}}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </tab>\r\n            </tabset>\r\n        </div>\r\n    </div>\r\n</div> <!-- /container -->",
      "createDate": "2015-03-25T20:22:55.600"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.600",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:240",
    "@version": 1,
    "@class": "Event",
    "eventId": 10241,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-user-logout",
      "content": "<script type='text/javascript'>\r\n    angular.module('lightApp').controller('com.networknt.light.UserLogoutCtrl', ['$scope', '$http', '$location', 'toaster', 'authService', function ($scope, $http, $location, toaster, authService) {\r\n        var logOutUser = {\r\n            category : 'user',\r\n            name : 'logOutUser',\r\n            readOnly: false,\r\n            data: {\r\n                refreshToken : authService.getRefreshToken()\r\n            }\r\n        };\r\n        console.log(\"logOutUser\", logOutUser);\r\n        $http.post('api/rs', logOutUser)\r\n                .success(function (result, status, headers, config) {\r\n                    // call logOut function\r\n                    authService.logOut();\r\n                    // move to main location\r\n                    $location.path(\"/\");\r\n                })\r\n    }]);\r\n</script>\r\n<div ng-controller=\"com.networknt.light.UserLogoutCtrl\"></div>",
      "createDate": "2015-03-25T20:22:55.611"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.611",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:241",
    "@version": 1,
    "@class": "Event",
    "eventId": 10242,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-user-public-profile",
      "content": "<div>This is public user profile that you can see the general user info and up vote and down vote user if you like</div>",
      "createDate": "2015-03-25T20:22:55.621"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.621",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:242",
    "@version": 1,
    "@class": "Event",
    "eventId": 10243,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-why-undertow",
      "content": "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <h1>Why Undertow</h1>\r\n            <p>\r\n            <h2><a href=\"/page/com-networknt-light-v-java-php\">Why Java could not compete with PHP</a></h2>\r\n            </p>\r\n            <p>\r\n            <h2><a href=\"/page/com-networknt-light-v-undertow-fit\">How Undertow fits in the framework</a></h2>\r\n            </p>\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2015-03-25T20:22:55.632"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2015-03-25T20:22:55.632",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:28",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T15:47:48.389",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.access.DelAccessRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T15:47:48.389",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:29",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T15:50:09.588",
      "accessLevel": "A",
      "updateUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.GetAccessRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T15:50:09.588",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:30",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T15:51:40.484",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.access.GetAllAccessRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T15:51:40.484",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:31",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T15:52:55.221",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.access.UpdAccessRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T15:52:55.221",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:3",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T18:51:34.810",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "user"
      ],
      "ruleClass": "com.networknt.light.rule.db.DownloadEventRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T18:51:34.810",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:15",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T20:51:15.661",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "formAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.form.AddFormRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T20:51:15.661",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:16",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T20:51:34.547",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "formAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.form.DelFormRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T20:51:34.546",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:17",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T20:51:50.520",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "formAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.form.ImpFormRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T20:51:50.520",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:18",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T20:52:16.011",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "formAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.form.GetAllFormRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T20:52:16.011",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:19",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T20:52:33.304",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "formAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.form.UpdFormRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T20:52:33.304",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:20",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:08:20.093",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "user"
      ],
      "ruleClass": "com.networknt.light.rule.host.GetHostDropdownRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:08:20.093",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:21",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:25:03.720",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "menuAdmin",
        "admin",
        "owner"
      ],
      "ruleClass": "com.networknt.light.rule.menu.AddMenuItemRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:25:03.720",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:22",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:25:18.736",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "menuAdmin",
        "admin",
        "owner"
      ],
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuItemRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:25:18.736",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:23",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:25:36.978",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "menuAdmin",
        "admin",
        "owner"
      ],
      "ruleClass": "com.networknt.light.rule.menu.GetMenuItemMapRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:25:36.978",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:24",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:25:58.730",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "menuAdmin",
        "admin",
        "owner"
      ],
      "ruleClass": "com.networknt.light.rule.menu.GetAllMenuRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:25:58.730",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:25",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:26:18.282",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "menuAdmin",
        "admin",
        "owner"
      ],
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:26:18.282",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:26",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:26:32.661",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "menuAdmin",
        "admin",
        "owner"
      ],
      "ruleClass": "com.networknt.light.rule.menu.DelMenuItemRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:26:32.661",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:27",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:36:03.063",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "pageAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.page.GetAllPageRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:36:03.063",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:28",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:36:18.678",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "pageAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.page.AddPageRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:36:18.678",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:29",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:36:35.553",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "pageAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.page.UpdPageRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:36:35.553",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:30",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:36:53.971",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "pageAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.page.ImpPageRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:36:53.971",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:31",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:37:11.567",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "pageAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.page.DelPageRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:37:11.567",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:32",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:43:28.750",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner"
      ],
      "ruleClass": "com.networknt.light.rule.role.UpdRoleRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:43:28.750",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:33",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:43:40.278",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner"
      ],
      "ruleClass": "com.networknt.light.rule.role.DelRoleRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:43:40.278",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:34",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:43:51.157",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner"
      ],
      "ruleClass": "com.networknt.light.rule.role.GetRoleRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:43:51.157",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:35",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:44:06.709",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner"
      ],
      "ruleClass": "com.networknt.light.rule.role.AddRoleRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:44:06.709",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:36",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:53:25.868",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "user"
      ],
      "ruleClass": "com.networknt.light.rule.rule.GetRuleDropdownRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:53:25.868",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:37",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T21:53:45.949",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.rule.GetRuleRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T21:53:45.949",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:40",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:16:32.088",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "userAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.user.DelUserRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T23:16:32.088",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:41",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:16:57.409",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "user"
      ],
      "ruleClass": "com.networknt.light.rule.user.DownUserRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T23:16:57.409",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:42",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:17:23.916",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "userAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.user.GetAllUserRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T23:17:23.916",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:43",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:17:46.763",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "user"
      ],
      "ruleClass": "com.networknt.light.rule.user.GetUserRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T23:17:46.763",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:44",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:18:12.279",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "userAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.user.LockUserRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T23:18:12.279",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:45",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:18:42.869",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "user"
      ],
      "ruleClass": "com.networknt.light.rule.user.LogOutUserRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T23:18:42.869",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:46",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:19:13.636",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "user",
        "admin",
        "owner",
        "userAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.user.RevokeRefreshTokenRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T23:19:13.636",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:47",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:19:41.952",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "userAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.user.UnlockUserRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T23:19:41.952",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:48",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:20:30.173",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "user"
      ],
      "ruleClass": "com.networknt.light.rule.user.UpdPasswordRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T23:20:30.173",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:49",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:20:48.576",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "user"
      ],
      "ruleClass": "com.networknt.light.rule.user.UpdProfileRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T23:20:48.576",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:50",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:21:19.124",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "userAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.user.UpdRoleRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T23:21:19.124",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:51",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-15T23:21:40.961",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "user"
      ],
      "ruleClass": "com.networknt.light.rule.user.UpUserRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-15T23:21:40.961",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:249",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:20:09.504",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.transform.GetTransformRequestRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-23T02:20:09.504",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:250",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:20:25.455",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.transform.AddTransformResponseRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-23T02:20:25.455",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:251",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:20:40.725",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.transform.GetTransformResponseRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-23T02:20:40.725",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:252",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:20:57.216",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.transform.DelTransformRequestRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-23T02:20:57.216",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:253",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:21:13.527",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.transform.UpdTransformResponseRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-23T02:21:13.527",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:254",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:21:29.434",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.transform.AddTransformRequestRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-23T02:21:29.434",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:255",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:21:42.942",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.transform.UpdTransformRequestRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-23T02:21:42.942",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:256",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:21:58.450",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "admin",
        "owner",
        "ruleAdmin"
      ],
      "ruleClass": "com.networknt.light.rule.transform.DelTransformResponseRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-23T02:21:58.450",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#15:257",
    "@version": 1,
    "@class": "Event",
    "ipAddress": "127.0.0.1",
    "category": "access",
    "name": "updAccess",
    "data": {
      "updateDate": "2015-02-23T02:22:20.734",
      "accessLevel": "N",
      "updateUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.BetaTestRule"
    },
    "createUserId": "stevehu",
    "createDate": "2015-02-23T02:22:20.734",
    "@fieldTypes": "createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:32",
    "@version": 1,
    "@class": "Event",
    "eventId": 10033,
    "createUserId": "stevehu",
    "data": {
      "updateDate": "2015-03-24T01:59:23.304",
      "accessLevel": "R",
      "updateUserId": "stevehu",
      "roles": [
        "user"
      ],
      "ruleClass": "com.networknt.light.rule.role.GetRoleDropdownRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-03-24T01:59:23.304",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:23",
    "@version": 1,
    "@class": "Event",
    "eventId": 10024,
    "createUserId": "stevehu",
    "data": {
      "updateDate": "2015-03-24T01:51:38.458",
      "accessLevel": "A",
      "updateUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.client.GetClientDropdownRule"
    },
    "name": "updAccess",
    "category": "access",
    "createDate": "2015-03-24T01:51:38.458",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:107",
    "@version": 1,
    "@class": "Event",
    "eventId": 10108,
    "createUserId": "stevehu",
    "data": {
      "enableCors": true,
      "updateDate": "2015-03-27T02:24:59.056",
      "updateUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.RefreshTokenRule"
    },
    "name": "updCors",
    "category": "rule",
    "createDate": "2015-03-27T02:24:59.056",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:123",
    "@version": 1,
    "@class": "Event",
    "eventId": 10124,
    "createUserId": "stevehu",
    "data": {
      "enableCors": true,
      "updateDate": "2015-03-20T01:17:23.407",
      "updateUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.GetMenuRule"
    },
    "name": "updCors",
    "category": "rule",
    "createDate": "2015-03-20T01:17:23.406",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:127",
    "@version": 1,
    "@class": "Event",
    "eventId": 10128,
    "createUserId": "stevehu",
    "data": {
      "enableCors": true,
      "updateDate": "2015-03-20T01:27:11.135",
      "updateUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.GetFormRule"
    },
    "name": "updCors",
    "category": "rule",
    "createDate": "2015-03-20T01:27:11.134",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:128",
    "@version": 1,
    "@class": "Event",
    "eventId": 10129,
    "createUserId": "stevehu",
    "data": {
      "enableCors": true,
      "updateDate": "2015-03-20T01:27:25.345",
      "updateUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.GetPageRule"
    },
    "name": "updCors",
    "category": "rule",
    "createDate": "2015-03-20T01:27:25.345",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:50",
    "@version": 1,
    "@class": "Event",
    "eventId": 10051,
    "createUserId": "stevehu",
    "data": {
      "enableCors": true,
      "updateDate": "2015-03-24T01:00:01.879",
      "updateUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.client.GetClientDropdownRule"
    },
    "name": "updCors",
    "category": "rule",
    "createDate": "2015-03-24T01:00:01.879",
    "ipAddress": "198.16.252.9",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:51",
    "@version": 1,
    "@class": "Event",
    "eventId": 10052,
    "createUserId": "stevehu",
    "data": {
      "enableCors": true,
      "updateDate": "2015-03-24T01:00:21.578",
      "updateUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.GetRoleDropdownRule"
    },
    "name": "updCors",
    "category": "rule",
    "createDate": "2015-03-24T01:00:21.576",
    "ipAddress": "198.16.252.9",
    "@fieldTypes": "eventId=l,createDate=t"
  }
]