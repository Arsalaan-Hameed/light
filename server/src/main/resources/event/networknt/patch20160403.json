[
  {
    "@type": "d",
    "@rid": "#18:1",
    "@version": 1,
    "@class": "Event",
    "eventId": 10002,
    "createUserId": "stevehu",
    "data": {
      "host": "www.edibleforestgarden.ca",
      "description": "google login",
      "createUserId": "stevehu",
      "configId": "google",
      "properties": {
        "client_id": "314433823054-8fkjke45eqdeqqfce4p32c4q91sd7375.apps.googleusercontent.com"
      },
      "createDate": "2016-03-31T02:07:17.363"
    },
    "name": "addHostConfig",
    "category": "config",
    "createDate": "2016-03-31T02:07:17.363",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:3",
    "@version": 1,
    "@class": "Event",
    "eventId": 10004,
    "createUserId": "stevehu",
    "data": {
      "host": "www.edibleforestgarden.ca",
      "description": "facebook login",
      "createUserId": "stevehu",
      "configId": "facebook",
      "properties": {
        "appId": "1157784440901192"
      },
      "createDate": "2016-03-31T02:17:38.462"
    },
    "name": "addHostConfig",
    "category": "config",
    "createDate": "2016-03-31T02:17:38.462",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:5",
    "@version": 1,
    "@class": "Event",
    "eventId": 10006,
    "createUserId": "stevehu",
    "data": {
      "summary": "demo.networknt.com is alive on a free hosting service on April 2, 2016. It is a bit slow but functioning. ",
      "createUserId": "stevehu",
      "host": "www.networknt.com",
      "entityId": "wOdhRau4SzKGDphrpLRNaA",
      "title": "DEMO.NETWORKNT.COM IS LAUNCHED",
      "content": "This site is to demo some of the functionalities of www.networknt.com powered by Light Framework. There are two pre-created users:\\n\\nstevehu/123456  with owner role\\n\\ntest/123456 with user role\\n\\nOf course, you can login from Google or Facebook. You cannot register on the demo site as email server is not hooked due to security reason. \\n\\nTo try the shopping cart, the following payment methods are available and you won\\'t be charged.\\nCredit card number: 4111111111111\\n\\nPaypal sandbox:: bt_buyer_us@paypal.com\\n",
      "parentId": "All",
      "tags": [
        "Light Framework"
      ],
      "createDate": "2016-04-02T12:40:50.874"
    },
    "name": "addPost",
    "category": "news",
    "createDate": "2016-04-02T12:40:50.858",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:7",
    "@version": 1,
    "@class": "Event",
    "eventId": 10008,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/03/15.\n *\n * only the comment content can be updated\n *\n * Access Level [owner, admin, forumAdmin, newsAdmin, blogAdmin, user]\n *\n * now only owner and admin can update\n *\n */\npublic class UpdCommentRule extends AbstractCommentRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(UpdCommentRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String entityRid = (String)data.get(\"entityRid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            // check if the comment exists\n            OrientVertex comment = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            if(comment == null ) {\n                error = \"Comment @rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"commentId\", comment.getProperty(\"commentId\"));\n                eventData.put(\"content\", data.get(\"content\"));\n                clearCommentCache(entityRid);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.UpdCommentRule",
      "createDate": "2016-04-02T15:15:35.873"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-04-02T15:15:35.873",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:8",
    "@version": 1,
    "@class": "Event",
    "eventId": 10009,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/03/16.\n *\n * AccessLevel R [user]\n *\n */\npublic class SpmCommentRule extends AbstractCommentRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(SpmCommentRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String entityRid = (String)data.get(\"entityRid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            // check if the comment exists\n            OrientVertex comment = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            if(comment == null ) {\n                error = \"Comment @rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"commentId\", comment.getProperty(\"commentId\"));\n                eventData.put(\"userId\", user.get(\"userId\"));\n                clearCommentCache(entityRid);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.SpmCommentRule",
      "createDate": "2016-04-02T15:15:35.931"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-04-02T15:15:35.931",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:9",
    "@version": 1,
    "@class": "Event",
    "eventId": 10010,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n *\n * AccessLevel R [user]\n *\n */\npublic class AddCommentRule extends AbstractCommentRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AddCommentRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String)data.get(\"host\");\n        String entityRid = (String)data.get(\"entityRid\");\n        String parentRid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex parent = (OrientVertex)DbService.getVertexByRid(graph, parentRid);\n            if(parent == null ) {\n                error = \"Parent @rid \" + parentRid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"host\", host);\n                eventData.put(\"content\", data.get(\"content\"));\n                eventData.put(\"rank\", 0);\n                String parentClassName = parent.getProperty(\"@class\");\n                eventData.put(\"parentClassName\", parentClassName); // parent can be a post or a comment\n                if(\"Post\".equals(parentClassName)) {\n                    eventData.put(\"parentId\", parent.getProperty(\"entityId\"));\n                } else {\n                    eventData.put(\"parentId\", parent.getProperty(\"commentId\"));\n                }\n                // generate unique identifier\n                eventData.put(\"commentId\", HashUtil.generateUUID());\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n                clearCommentCache(entityRid);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.AddCommentRule",
      "createDate": "2016-04-02T15:15:35.960"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-04-02T15:15:35.960",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:10",
    "@version": 1,
    "@class": "Event",
    "eventId": 10011,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientElementIterable;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.owasp.encoder.Encode;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\n/**\n * Created by steve on 28/12/14.\n * This the abstract class that implements functions for Blog, Forum and News as\n * they share similar traits. Since ids are generated and there is no need to check\n * uniqueness. Just make sure parent and children are checked and converted to ids.\n *\n */\npublic abstract class AbstractBfnRule extends BranchRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractBfnRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    public boolean addPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String parentRid = (String) data.remove(\"parentRid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex parent = DbService.getVertexByRid(graph, parentRid);\n            if(parent == null) {\n                error = \"Rid \" + parentRid + \" doesn't exist on host \" + host;\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n                if(eventData.get(\"title\") != null) {\n                    eventData.put(\"title\", Encode.forJavaScriptSource((String)eventData.get(\"title\")));\n                }\n                if(eventData.get(\"summary\") != null) {\n                    eventData.put(\"summary\", eventData.get(\"summary\"));\n                }\n                if(eventData.get(\"content\") != null) {\n                    eventData.put(\"content\", eventData.get(\"content\"));\n                }\n                if(eventData.get(\"originalAuthor\") != null) {\n                    eventData.put(\"originalAuthor\", Encode.forJavaScriptSource((String)eventData.get(\"originalAuthor\")));\n                }\n                if(eventData.get(\"originalSite\") != null) {\n                    eventData.put(\"originalSite\", Encode.forJavaScriptSource((String)eventData.get(\"originalSite\")));\n                }\n                if(eventData.get(\"originalUrl\") != null) {\n                    eventData.put(\"originalUrl\", Encode.forUriComponent((String)eventData.get(\"originalUrl\")));\n                }\n                eventData.put(\"parentId\", parent.getProperty(\"categoryId\"));\n                eventData.put(\"entityId\", HashUtil.generateUUID());\n                eventData.put(\"createDate\", new Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            clearListCache(host, bfnType, parentRid);\n            clearTagCache(host, (List<String>) inputMap.get(\"tags\"));\n            return true;\n        }\n    }\n\n    protected void clearListCache(String host, String bfnType, String parentRid) {\n        Map<String, Object> categoryMap = ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> listCache = (ConcurrentMap<Object, Object>)categoryMap.get(\"listCache\");\n        if(listCache != null && listCache.size() > 0) {\n            // clear recent list (recent list regardless category\n            listCache.remove(host + bfnType);\n            // clear newestList for this parentRid only this category\n            listCache.remove(parentRid + \"createDate\" + \"desc\");\n            // TODO handler future list here.\n        }\n    }\n\n    protected void clearTagCache(String host, List<String> tags) {\n        Map<String, Object> categoryMap = ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> listCache = (ConcurrentMap<Object, Object>)categoryMap.get(\"listCache\");\n        if(listCache != null && listCache.size() > 0) {\n            // clear tagList for this host\n            if(tags != null && tags.size() > 0) {\n                for(String tag: tags) {\n                    listCache.remove(host + tag);\n                }\n            }\n        }\n    }\n\n    protected void clearEntityCache(String entityRid) {\n        Map<String, Object> categoryMap = ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> entityCache = (ConcurrentMap<Object, Object>)categoryMap.get(\"entityCache\");\n        if(entityCache != null) {\n            entityCache.remove(entityRid);\n        }\n    }\n\n    public boolean addPostEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addPostDb(bfnType, data);\n        return true;\n    }\n\n    protected void addPostDb(String bfnType, Map<String, Object> data) throws Exception {\n        String className = bfnType.substring(0, 1).toUpperCase() + bfnType.substring(1);\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            List<String> tags = (List<String>)data.remove(\"tags\");\n            \n            OrientVertex post = graph.addVertex(\"class:Post\", data);\n            createUser.addEdge(\"Create\", post);\n            // parent\n            OrientVertex parent = getBranchByHostId(graph, bfnType, host, (String) data.get(\"parentId\"));\n            if(parent != null) {\n                parent.addEdge(\"HasPost\", post);\n            }\n            // tag\n            if(tags != null && tags.size() > 0) {\n                for(String tagId: tags) {\n                    Vertex tag = null;\n                    // get the tag is it exists\n                    OIndex<?> tagHostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"tagHostIdIdx\");\n                    OCompositeKey tagKey = new OCompositeKey(host, tagId);\n                    OIdentifiable tagOid = (OIdentifiable) tagHostIdIdx.get(tagKey);\n                    if (tagOid != null) {\n                        tag = graph.getVertex(tagOid.getRecord());\n                        post.addEdge(\"HasTag\", tag);\n                    } else {\n                        tag = graph.addVertex(\"class:Tag\", \"host\", host, \"tagId\", tagId, \"createDate\", data.get(\"createDate\"));\n                        createUser.addEdge(\"Create\", tag);\n                        post.addEdge(\"HasTag\", tag);\n                    }\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean delPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String)data.get(\"@rid\");\n        String parentRid = null;\n        String host = (String)data.get(\"host\");\n        String error = null;\n        List<String> tags = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex post = (OrientVertex)DbService.getVertexByRid(graph, rid);\n            if(post != null) {\n                // check if the post has comment, if yes, you cannot delete it for now\n                // TODO fix it after orientdb 2.2 release.\n                // https://github.com/orientechnologies/orientdb/issues/1108\n                if(post.countEdges(Direction.OUT, \"HasComment\") > 0) {\n                    error = \"Post has comment(s), cannot be deleted\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    // now get the parentRid in order to remove the cache.\n                    for(Edge e: post.getEdges(Direction.IN, \"HasPost\")) {\n                        Vertex edgeParent = e.getVertex(Direction.OUT);\n                        parentRid = edgeParent.getId().toString();\n                    }\n                    // now find all the tags to clear the tag list cache.\n                    Iterable iterable = post.getProperty(\"out_HasTag\");\n                    if(iterable != null) {\n                        Iterator iterator = iterable.iterator();\n                        tags = new ArrayList<String>();\n                        while(iterator.hasNext()) {\n                            OrientVertex vertex = (OrientVertex)iterator.next();\n                            tags.add(vertex.getProperty(\"tagId\"));\n                        }\n                    }\n\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"entityId\", post.getProperty(\"entityId\"));\n                }\n            } else {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            clearListCache(host, bfnType, parentRid);\n            if(tags != null && tags.size() > 0) clearTagCache(host, tags);\n            clearEntityCache(rid);\n            return true;\n        }\n    }\n\n    public boolean delPostEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delPostDb(bfnType, data);\n        return true;\n    }\n\n    protected void delPostDb(String bfnType, Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex post = (OrientVertex)graph.getVertexByKey(\"Post.entityId\", data.get(\"entityId\"));\n            if(post != null) {\n                // TODO cascade deleting all comments belong to the post.\n                // Need to come up a query on that to get the entire tree.\n                /*\n                // https://github.com/orientechnologies/orientdb/issues/1108\n                delete graph...\n                */\n                // TODO remove tags edge. Do I need to?\n                graph.removeVertex(post);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public String getEntityRid(String entityType, String entityId) {\n        String entityRid = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex entity = (OrientVertex)graph.getVertexByKey(entityType + \".entityId\", entityId);\n            entityRid = entity.getIdentity().toString();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return entityRid;\n    }\n\n    public boolean updPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"rid\");\n        String originalParentRid = null;\n        String parentRid = null;\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Set<String> addTags = null;\n        Set<String> delTags = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            // update post itself and we might have a new api to move post from one parent to another.\n            Vertex post = DbService.getVertexByRid(graph, rid);\n            if(post != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"host\", data.get(\"host\"));\n                eventData.put(\"entityId\", post.getProperty(\"entityId\"));\n                eventData.put(\"title\", Encode.forJavaScriptSource((String)data.get(\"title\")));\n                eventData.put(\"originalAuthor\", Encode.forJavaScriptSource((String)data.get(\"originalAuthor\")));\n                eventData.put(\"originalSite\", Encode.forJavaScriptSource((String)data.get(\"originalSite\")));\n                eventData.put(\"originalUrl\", Encode.forUriComponent((String)data.get(\"originalUrl\")));\n                eventData.put(\"summary\", data.get(\"summary\"));\n                eventData.put(\"content\", data.get(\"content\"));\n                eventData.put(\"updateDate\", new Date());\n                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                // it is possible for the post to switch parent.\n                parentRid = (String)data.get(\"parentRid\");\n                if(parentRid != null) {\n                    // if parentRid is not even selected, nothing to do with the parent edge.\n                    Vertex parent = DbService.getVertexByRid(graph, parentRid);\n                    if(parent != null) {\n                        boolean found = false;\n                        for(Edge e: post.getEdges(Direction.IN, \"HasPost\")) {\n                            Vertex edgeParent = e.getVertex(Direction.OUT);\n                            if(edgeParent != null) {\n                                originalParentRid =  edgeParent.getId().toString();\n                                if(originalParentRid.equals(parentRid)) {\n                                    found = true;\n                                    break;\n                                }\n\n                            }\n                        }\n                        if(!found) {\n                            // replace parent here by passing parentId to the event rule.\n                            eventData.put(\"parentId\", parent.getProperty(\"categoryId\"));\n                        }\n                    }\n                } else {\n                    // get originalParentRid from post for clearing cache.\n                    for(Edge e: post.getEdges(Direction.IN, \"HasPost\")) {\n                        Vertex edgeParent = e.getVertex(Direction.OUT);\n                        if(edgeParent != null) {\n                            originalParentRid =  edgeParent.getId().toString();\n                        }\n                    }\n                }\n\n                // tags\n                List<String> tags = (List)data.get(\"tags\");\n                if(tags == null || tags.size() == 0) {\n                    // remove all existing tags\n                    delTags = new HashSet<String>();\n                    for (Vertex vertex : (Iterable<Vertex>) post.getVertices(Direction.OUT, \"HasTag\")) {\n                        delTags.add((String)vertex.getProperty(\"tagId\"));\n                    }\n                    if(delTags.size() > 0) eventData.put(\"delTags\", delTags);\n                } else {\n                    Set<String> inputTags = new HashSet<String>(tags);\n                    Set<String> storedTags = new HashSet<String>();\n                    for (Vertex vertex : (Iterable<Vertex>) post.getVertices(Direction.OUT, \"HasTag\")) {\n                        storedTags.add((String)vertex.getProperty(\"tagId\"));\n                    }\n\n                    addTags = new HashSet<String>(inputTags);\n                    delTags = new HashSet<String>(storedTags);\n                    addTags.removeAll(storedTags);\n                    delTags.removeAll(inputTags);\n\n                    if(addTags.size() > 0) eventData.put(\"addTags\", addTags);\n                    if(delTags.size() > 0) eventData.put(\"delTags\", delTags);\n                }\n            } else {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            clearListCache(host, bfnType, originalParentRid);\n            if(parentRid != null) clearListCache(host, bfnType, parentRid);\n            if(delTags != null && delTags.size() > 0) clearTagCache(host, new ArrayList<String>(delTags));\n            if(addTags != null && addTags.size() > 0) clearTagCache(host, new ArrayList<String>(addTags));\n            clearEntityCache(rid);\n            return true;\n        }\n    }\n\n    public boolean updPostEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPostDb(bfnType, data);\n        return true;\n    }\n\n    protected void updPostDb(String bfnType, Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex post = (OrientVertex)graph.getVertexByKey(\"Post.entityId\", data.get(\"entityId\"));\n\n            if(post != null) {\n                updateUser.addEdge(\"Update\", post);\n                // fields\n                if(data.get(\"title\") != null) {\n                    post.setProperty(\"title\", data.get(\"title\"));\n                } else {\n                    post.removeProperty(\"name\");\n                }\n                if(data.get(\"originalAuthor\") != null) {\n                    post.setProperty(\"originalAuthor\", data.get(\"originalAuthor\"));\n                } else {\n                    post.removeProperty(\"originalAuthor\");\n                }\n                if(data.get(\"originalSite\") != null) {\n                    post.setProperty(\"originalSite\", data.get(\"originalSite\"));\n                } else {\n                    post.removeProperty(\"originalSite\");\n                }\n                if(data.get(\"originalUrl\") != null) {\n                    post.setProperty(\"originalUrl\", data.get(\"originalUrl\"));\n                } else {\n                    post.removeProperty(\"originalUrl\");\n                }\n                if(data.get(\"summary\") != null) {\n                    post.setProperty(\"summary\", data.get(\"summary\"));\n                } else {\n                    post.removeProperty(\"summary\");\n                }\n                if(data.get(\"content\") != null) {\n                    post.setProperty(\"content\", data.get(\"content\"));\n                } else {\n                    post.removeProperty(\"content\");\n                }\n                post.setProperty(\"updateDate\", data.get(\"updateDate\"));\n\n                // handle parent update\n                String parentId = (String)data.get(\"parentId\");\n                if(parentId != null) {\n                    OrientVertex parent = getBranchByHostId(graph, bfnType, (String) data.get(\"host\"), (String) data.get(\"parentId\"));\n                    if(parent != null) {\n                        // remove the current edge and add a new one.\n                        for(Edge e : post.getEdges(Direction.IN, \"HasPost\")) {\n                            e.remove();\n                        }\n                        parent.addEdge(\"HasPost\", post);\n                    }\n                }\n\n                // handle addTags and delTags\n                OIndex<?> hostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"tagHostIdIdx\");\n                Set<String> addTags = (Set)data.get(\"addTags\");\n                if(addTags != null) {\n                    for(String tagId: addTags) {\n                        OCompositeKey key = new OCompositeKey(data.get(\"host\"), tagId);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            OrientVertex tag = graph.getVertex(oid.getRecord());\n                            post.addEdge(\"HasTag\", tag);\n                        } else {\n                            Vertex tag = graph.addVertex(\"class:Tag\", \"host\", data.get(\"host\"), \"tagId\", tagId, \"createDate\", data.get(\"updateDate\"));\n                            updateUser.addEdge(\"Create\", tag);\n                            post.addEdge(\"HasTag\", tag);\n                        }\n                    }\n                }\n                Set<String> delTags = (Set)data.get(\"delTags\");\n                if(delTags != null) {\n                    for(String tagId: delTags) {\n                        /*\n                        OrientVertex branch = null;\n                        OIndex<?> hostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(branchType + \"HostIdIdx\");\n                        OCompositeKey key = new OCompositeKey(host, id);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            branch = graph.getVertex(oid.getRecord());\n                        }\n                        return branch;\n                        */\n\n                        OCompositeKey key = new OCompositeKey(data.get(\"host\"), tagId);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            OrientVertex tag = graph.getVertex(oid.getRecord());\n                            for (Edge edge : (Iterable<Edge>) post.getEdges(Direction.OUT, \"HasTag\")) {\n                                if(edge.getVertex(Direction.IN).equals(tag)) graph.removeEdge(edge);\n                            }\n                        }\n                    }\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean getCategoryEntity(String categoryType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String categoryRid = (String)data.get(\"@rid\");\n        String host = (String)data.get(\"host\");\n        if(categoryRid == null) {\n            inputMap.put(\"result\", \"@rid is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        Integer pageSize = (Integer)data.get(\"pageSize\");\n        Integer pageNo = (Integer)data.get(\"pageNo\");\n        if(pageSize == null) {\n            inputMap.put(\"result\", \"pageSize is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        if(pageNo == null) {\n            inputMap.put(\"result\", \"pageNo is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        String sortDir = (String)data.get(\"sortDir\");\n        String sortedBy = (String)data.get(\"sortedBy\");\n        if(sortDir == null) {\n            sortDir = \"desc\";\n        }\n        if(sortedBy == null) {\n            sortedBy = \"createDate\";\n        }\n        boolean allowUpdate = isUpdateAllowed(categoryType, host, inputMap);\n\n        // TODO support the following lists: recent, popular, controversial\n        // Get the page from cache.\n        List<String> list = getCategoryEntityList(categoryRid, sortedBy, sortDir);\n        if(list != null && list.size() > 0) {\n            long total = list.size();\n            List<Map<String, Object>> entities = new ArrayList<Map<String, Object>>();\n            for(int i = pageSize*(pageNo - 1); i < Math.min(pageSize*pageNo, list.size()); i++) {\n                String entityRid = list.get(i);\n                Map<String, Object> entity = getCategoryEntity(entityRid);\n                if(entity != null) {\n                    entities.add(entity);\n                } else {\n                    logger.warn(\"Could not find entity {} from List {}\", entityRid, categoryRid + sortedBy + sortDir);\n                }\n            }\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"entities\", entities);\n            result.put(\"allowUpdate\", allowUpdate);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            // there is no post available. but still need to return allowPost\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", 0);\n            result.put(\"allowUpdate\", allowUpdate);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        }\n    }\n\n    protected boolean isUpdateAllowed(String categoryType, String host, Map<String, Object> inputMap) {\n        boolean isAllowed = false;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        if(user != null) {\n            List roles = (List)user.get(\"roles\");\n            if(roles.contains(\"owner\")) {\n                isAllowed = true;\n            } else if(roles.contains(\"admin\") || roles.contains(categoryType + \"Admin\") || roles.contains(categoryType + \"User\")) {\n                if(host.equals(user.get(\"host\"))) {\n                    isAllowed = true;\n                }\n            }\n        }\n        return isAllowed;\n    }\n\n    protected List<String> getCategoryEntityList(String categoryRid, String sortedBy, String sortDir) throws Exception {\n        List<String> list = null;\n        // get list from cache\n        Map<String, Object> categoryMap = ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> listCache = (ConcurrentMap<Object, Object>)categoryMap.get(\"listCache\");\n        if(listCache == null) {\n            listCache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(200)\n                    .build();\n            categoryMap.put(\"listCache\", listCache);\n        } else {\n            list = (List<String>)listCache.get(categoryRid + sortedBy + sortDir);\n        }\n        if(list == null) {\n            // not in cache, get from db\n            list = getCategoryEntityListDb(categoryRid, sortedBy, sortDir);\n            if(list != null) {\n                listCache.put(categoryRid + sortedBy + sortDir, list);\n            }\n        }\n        return list;\n    }\n\n    protected List<String> getCategoryEntityListDb(String categoryRid, String sortedBy, String sortDir) {\n        List<String> entityList = null;\n        String sql = \"select @rid from (traverse out_Own, out_HasPost from ?) where @class = 'Post' order by \" + sortedBy + \" \" + sortDir;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> entities = graph.getRawGraph().command(query).execute(categoryRid);\n            if(entities.size() > 0) {\n                entityList = new ArrayList<String>();\n                for(ODocument entity: entities) {\n                    entityList.add(((ODocument)entity.field(\"rid\")).field(\"@rid\").toString());\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return entityList;\n    }\n\n    public Map<String, Object> getCategoryEntity(String entityRid) {\n        Map<String, Object> entity = null;\n        Map<String, Object> categoryMap = ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> entityCache = (ConcurrentMap<Object, Object>)categoryMap.get(\"entityCache\");\n        if(entityCache == null) {\n            entityCache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(10000)\n                    .build();\n            categoryMap.put(\"entityCache\", entityCache);\n        } else {\n            entity = (Map<String, Object>)entityCache.get(entityRid);\n        }\n        if(entity == null) {\n            entity = getCategoryEntityDb(entityRid);\n            if(entity != null) {\n                entityCache.put(entityRid, entity);\n            }\n        }\n        return entity;\n    }\n\n    public Map<String, Object> getCategoryEntityDb(String entityRid) {\n        Map<String, Object> jsonMap = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex entity = (OrientVertex)DbService.getVertexByRid(graph, entityRid);\n            if(entity != null) {\n                jsonMap = new HashMap<String, Object>();\n                jsonMap.put(\"type\", entity.getLabel());\n                jsonMap.put(\"rid\", entity.getIdentity().toString());\n                jsonMap.put(\"createDate\", entity.getProperty(\"createDate\"));\n                OrientElementIterable iterable = entity.getProperty(\"in_Create\");\n                Iterator iterator = iterable.iterator();\n                if(iterator.hasNext()) {\n                    OrientVertex vertex = (OrientVertex)iterator.next();\n                    jsonMap.put(\"createRid\", vertex.getIdentity().toString());\n                    jsonMap.put(\"createUserId\", vertex.getProperty(\"userId\"));\n                    jsonMap.put(\"gravatar\", vertex.getProperty(\"gravatar\"));\n                }\n                iterable = entity.getProperty(\"out_HasTag\");\n                if(iterable != null) {\n                    iterator = iterable.iterator();\n                    List<String> tags = new ArrayList<String>();\n                    while(iterator.hasNext()) {\n                        OrientVertex vertex = (OrientVertex)iterator.next();\n                        tags.add(vertex.getProperty(\"tagId\"));\n                    }\n                    if(tags.size() > 0) jsonMap.put(\"tags\", tags);\n                }\n                switch(entity.getLabel()) {\n                    case \"Post\":\n                        jsonMap.put(\"entityId\", entity.getProperty(\"entityId\"));\n                        jsonMap.put(\"title\", entity.getProperty(\"title\"));\n                        jsonMap.put(\"summary\", entity.getProperty(\"summary\"));\n                        jsonMap.put(\"content\", entity.getProperty(\"content\"));\n                        iterable = entity.getProperty(\"in_HasPost\");\n                        iterator = iterable.iterator();\n                        if(iterator.hasNext()) {\n                            OrientVertex vertex = (OrientVertex)iterator.next();\n                            jsonMap.put(\"parentRid\", vertex.getIdentity().toString());\n                            jsonMap.put(\"parentId\", vertex.getProperty(\"categoryId\"));\n                            jsonMap.put(\"parentType\", vertex.getLabel());\n                        }\n                        if(entity.getProperty(\"originalAuthor\") != null) jsonMap.put(\"originalAuthor\", entity.getProperty(\"originalAuthor\"));\n                        if(entity.getProperty(\"originalSite\") != null) jsonMap.put(\"originalSite\", entity.getProperty(\"originalSite\"));\n                        if(entity.getProperty(\"originalUrl\") != null) jsonMap.put(\"originalUrl\", entity.getProperty(\"originalUrl\"));\n                        break;\n                    case \"Product\":\n                        jsonMap.put(\"entityId\", entity.getProperty(\"entityId\"));\n                        jsonMap.put(\"name\", entity.getProperty(\"name\"));\n                        jsonMap.put(\"description\", entity.getProperty(\"description\"));\n                        jsonMap.put(\"content\", entity.getProperty(\"content\"));\n                        jsonMap.put(\"variants\", entity.getProperty(\"variants\"));\n                        iterable = entity.getProperty(\"in_HasProduct\");\n                        iterator = iterable.iterator();\n                        if(iterator.hasNext()) {\n                            OrientVertex vertex = (OrientVertex)iterator.next();\n                            jsonMap.put(\"parentRid\", vertex.getIdentity().toString());\n                            jsonMap.put(\"parentId\", vertex.getProperty(\"categoryId\"));\n                            jsonMap.put(\"parentType\", vertex.getLabel());\n                        }\n                        break;\n                    default:\n                        logger.error(\"Unknown entity type\", entity.getLabel());\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return jsonMap;\n    }\n\n    /**\n     * Get recent entity for category blog/news/forum/catelog regardless category\n     *\n     * @param objects\n     * @return\n     * @throws Exception\n     */\n    public boolean getRecentEntity(String categoryType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        Integer pageSize = (Integer)data.get(\"pageSize\");\n        Integer pageNo = (Integer)data.get(\"pageNo\");\n        if(pageSize == null) {\n            inputMap.put(\"result\", \"pageSize is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        if(pageNo == null) {\n            inputMap.put(\"result\", \"pageNo is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        String sortDir = (String)data.get(\"sortDir\");\n        String sortedBy = (String)data.get(\"sortedBy\");\n        if(sortDir == null) {\n            sortDir = \"desc\";\n        }\n        if(sortedBy == null) {\n            sortedBy = \"createDate\";\n        }\n        // allowUpdate will always be false as it has to be posted in a category context.\n        boolean allowUpdate = false;\n\n        // Get the list from cache.\n        List<String> list = getRecentEntityList(host, categoryType, sortedBy, sortDir);\n\n        if(list != null && list.size() > 0) {\n            long total = list.size();\n            List<Map<String, Object>> entities = new ArrayList<Map<String, Object>>();\n            for(int i = pageSize*(pageNo - 1); i < Math.min(pageSize*pageNo, list.size()); i++) {\n                String entityRid = list.get(i);\n                Map<String, Object> entity = getCategoryEntity(entityRid);\n                if(entity != null) {\n                    entities.add(entity);\n                } else {\n                    logger.warn(\"Could not find entity {} from List {}\", entityRid, host + categoryType);\n                }\n            }\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"entities\", entities);\n            result.put(\"allowUpdate\", allowUpdate);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            // there is no post available. but still need to return allowPost\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", 0);\n            result.put(\"allowUpdate\", allowUpdate);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        }\n    }\n\n    protected List<String> getRecentEntityList(String host, String categoryType, String sortedBy, String sortDir) {\n        List<String> list = null;\n        // get list from cache\n        Map<String, Object> categoryMap = ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> listCache = (ConcurrentMap<Object, Object>)categoryMap.get(\"listCache\");\n        if(listCache == null) {\n            listCache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(200)\n                    .build();\n            categoryMap.put(\"listCache\", listCache);\n        } else {\n            list = (List<String>)listCache.get(host + categoryType);\n        }\n        if(list == null) {\n            // not in cache, get from db\n            list = getRecentEntityListDb(host, categoryType, sortedBy, sortDir);\n            if(list != null) {\n                listCache.put(host + categoryType, list);\n            }\n        }\n        return list;\n    }\n\n    protected List<String> getRecentEntityListDb(String host, String categoryType, String sortedBy, String sortDir) {\n        List<String> entityList = null;\n        String sql = \"select @rid from Post where host = ? and in_HasPost[0].@class = ? order by \" + sortedBy + \" \" + sortDir;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> entities = graph.getRawGraph().command(query).execute(host, categoryType);\n            if(entities.size() > 0) {\n                entityList = new ArrayList<String>();\n                for(ODocument entity: entities) {\n                    entityList.add(((ODocument)entity.field(\"rid\")).field(\"@rid\").toString());\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return entityList;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.AbstractBfnRule",
      "createDate": "2016-04-02T15:15:36.113"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-04-02T15:15:36.113",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:12",
    "@version": 1,
    "@class": "Event",
    "eventId": 10013,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/03/16.\n *\n * AccessLevel R [user]\n *\n */\npublic class SpmCommentRule extends AbstractCommentRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(SpmCommentRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String entityRid = (String)data.get(\"entityRid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            // check if the comment exists\n            OrientVertex comment = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            if(comment == null ) {\n                error = \"Comment @rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"commentId\", comment.getProperty(\"commentId\"));\n                eventData.put(\"userId\", user.get(\"userId\"));\n                clearCommentCache(entityRid);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.SpmCommentRule",
      "createDate": "2016-04-02T15:15:55.984"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-04-02T15:15:55.984",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:13",
    "@version": 1,
    "@class": "Event",
    "eventId": 10014,
    "createUserId": "stevehu",
    "data": {
      "summary": "demo.networknt.com is alive on a free hosting service on April 2, 2016. It is a bit slow but functioning. ",
      "updateDate": "2016-04-02T15:18:58.392",
      "updateUserId": "stevehu",
      "originalSite": "null",
      "host": "www.networknt.com",
      "entityId": "wOdhRau4SzKGDphrpLRNaA",
      "originalUrl": "null",
      "title": "DEMO.NETWORKNT.COM IS LAUNCHED",
      "originalAuthor": "null",
      "content": "This site is to demo some of the functionalities of www.networknt.com powered by Light Framework. There are two pre-created users:\n\nstevehu/123456  with owner role\n\ntest/123456 with user role\n\nOf course, you can login from Google or Facebook. You cannot register on the demo site as email server is not hooked due to security reason. \n\nTo try the shopping cart, the following payment methods are available and you won't be charged.\n\nCredit card number: 4111111111111\nPaypal sandbox:: bt_buyer_us@paypal.com\n"
    },
    "name": "updPost",
    "category": "news",
    "createDate": "2016-04-02T15:18:58.384",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:14",
    "@version": 1,
    "@class": "Event",
    "eventId": 10015,
    "createUserId": "stevehu",
    "data": {
      "summary": "demo.networknt.com is alive on a free hosting service on April 2, 2016. It is a bit slow but functioning. ",
      "updateDate": "2016-04-02T16:24:53.501",
      "updateUserId": "stevehu",
      "originalSite": "",
      "host": "www.networknt.com",
      "entityId": "wOdhRau4SzKGDphrpLRNaA",
      "originalUrl": "",
      "title": "DEMO.NETWORKNT.COM IS LAUNCHED",
      "originalAuthor": "",
      "content": "This site is to demo some of the functionalities of www.networknt.com powered by Light Framework. There are two pre-created users:\n\nstevehu/123456  with owner role\n\ntest/123456 with user role\n\nOf course, you can login from Google or Facebook. You cannot register on the demo site as email server is not hooked due to security reason. \n\nTo try the shopping cart, the following payment methods are available and you won't be charged.\n\nCredit card number: 4111111111111\nPaypal sandbox:: bt_buyer_us@paypal.com\n"
    },
    "name": "updPost",
    "category": "news",
    "createDate": "2016-04-02T16:24:53.501",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:15",
    "@version": 1,
    "@class": "Event",
    "eventId": 10016,
    "createUserId": "stevehu",
    "data": {
      "summary": "[demo.edibleforestgarden.ca](demo.edibleforestgarden.ca) is alive on a free hosting service. It is a bit slow but functioning.",
      "createUserId": "stevehu",
      "host": "www.networknt.com",
      "entityId": "f6h1FTI8Q3-7UScPZDzfXA",
      "title": "DEMO.EDIBLEFORESTGARDEN.CA IS LAUNCHED",
      "content": "This site [demo.edibleforestgarden.ca](demo.edibleforestgarden.ca) is to demo some of the functionalities of [www.networknt.com](www.networknt.com) powered by Light Framework. There are two pre-created users:\n\nstevehu/123456 with owner role\n\ntest/123456 with user role\n\nOf course, you can login from Google or Facebook. You cannot register on the demo site as email server is not hooked due to security reasons.\n\nTo try the shopping cart, the following payment methods are available and you won't be charged.\n\nCredit card number: 4111111111111 \n\nPaypal sandbox: bt_buyer_us@paypal.com\n",
      "parentId": "All",
      "createDate": "2016-04-02T16:29:23.051"
    },
    "name": "addPost",
    "category": "news",
    "createDate": "2016-04-02T16:29:23.038",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:16",
    "@version": 1,
    "@class": "Event",
    "eventId": 10017,
    "createUserId": "stevehu",
    "data": {
      "summary": "[demo.networknt.com](demo.networknt.com) is alive on a free hosting service. It is a bit slow but functioning. ",
      "updateDate": "2016-04-02T16:32:23.355",
      "updateUserId": "stevehu",
      "originalSite": "",
      "host": "www.networknt.com",
      "entityId": "wOdhRau4SzKGDphrpLRNaA",
      "originalUrl": "",
      "title": "DEMO.NETWORKNT.COM IS LAUNCHED",
      "originalAuthor": "",
      "content": "This site [demo.networknt.com](demo.networknt.com) is to demo some of the functionalities of [www.networknt.com](www.networknt.com) powered by Light Framework. There are two pre-created users:\n\nstevehu/123456  with owner role\n\ntest/123456 with user role\n\nOf course, you can login from Google or Facebook. You cannot register on the demo site as email server is not hooked due to security reasons. \n\nTo try the shopping cart, the following payment methods are available and you won't be charged.\n\nCredit card number: 4111111111111\n\nPaypal sandbox:: bt_buyer_us@paypal.com\n"
    },
    "name": "updPost",
    "category": "news",
    "createDate": "2016-04-02T16:32:23.355",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:17",
    "@version": 1,
    "@class": "Event",
    "eventId": 10018,
    "createUserId": "stevehu",
    "data": {
      "summary": "[www.networknt.com](www.networknt.com) is alive in beta on Feb 15, 2016. ",
      "updateDate": "2016-04-02T16:40:45.154",
      "updateUserId": "stevehu",
      "originalSite": "null",
      "host": "www.networknt.com",
      "entityId": "y8ImgMe7QCu-5cuXMKb1pA",
      "originalUrl": "null",
      "title": "WWW.NETWORKNT.COM BETA SITE IS LAUNCHED",
      "originalAuthor": "null",
      "content": "The site [www.networknt.com](www.networknt.com) is dedicated to promote Light Framework, Light CMS and Light Commence. The E-Commence checkout is hooked to Braintree Payment Sandbox for now. "
    },
    "name": "updPost",
    "category": "news",
    "createDate": "2016-04-02T16:40:45.154",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:18",
    "@version": 1,
    "@class": "Event",
    "eventId": 10019,
    "createUserId": "stevehu",
    "data": {
      "summary": "[www.edibleforestgarden.ca](www.edibleforestgarden.ca) is alive in beta on Feb 15, 2016.",
      "updateDate": "2016-04-02T16:41:47.850",
      "updateUserId": "stevehu",
      "originalSite": "null",
      "host": "www.networknt.com",
      "entityId": "sQesTWAnTwaw-Nn0oK35GA",
      "originalUrl": "null",
      "title": "WWW.EDIBLEFORESTGARDEN.CA BETA SITE IS LAUNCHED",
      "originalAuthor": "null",
      "content": "The site [www.edibleforestgarden.ca](www.edibleforestgarden.ca) is dedicated to promote Light Framework, Light CMS and Light Commence. The E-Commence checkout is hooked to Braintree Payment Sandbox for now."
    },
    "name": "updPost",
    "category": "news",
    "createDate": "2016-04-02T16:41:47.850",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:19",
    "@version": 1,
    "@class": "Event",
    "eventId": 10020,
    "createUserId": "stevehu",
    "data": {
      "summary": "This article will walk you through steps to get start Light Framework as Java API developer in development mode. It helps you to set up IDE, Maven plugins and shows you how to test the API developed.",
      "createUserId": "stevehu",
      "host": "www.networknt.com",
      "entityId": "GxK5zzLqSKOM-ybKobKxeg",
      "title": "Start Light Framework with two demo sites for API developer in development mode ",
      "content": "TODO",
      "parentId": "All",
      "tags": [
        "Light Framework",
        "Backend"
      ],
      "createDate": "2016-04-02T17:47:37.991"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2016-04-02T17:47:37.991",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:20",
    "@version": 1,
    "@class": "Event",
    "eventId": 10021,
    "createUserId": "stevehu",
    "data": {
      "summary": "This article will walk you through steps to get start Light Framework as Java API developer in development mode. It helps you to set up IDE, Maven plugins and shows you how to test the API developed.",
      "updateDate": "2016-04-02T17:51:56.658",
      "updateUserId": "stevehu",
      "originalSite": "null",
      "host": "www.networknt.com",
      "entityId": "GxK5zzLqSKOM-ybKobKxeg",
      "originalUrl": "null",
      "title": "Start Light Framework with two demo sites for API developer in development mode ",
      "originalAuthor": "null",
      "content": "TODO Not done yet."
    },
    "name": "updPost",
    "category": "blog",
    "createDate": "2016-04-02T17:51:56.658",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:21",
    "@version": 1,
    "@class": "Event",
    "eventId": 10022,
    "createUserId": "stevehu",
    "data": {
      "summary": "This article will walk you through steps to get start Light Framework as Java API developer in development mode. It helps you to set up IDE, Maven plugins and shows you how to test the API developed.",
      "updateDate": "2016-04-02T17:56:12.586",
      "updateUserId": "stevehu",
      "originalSite": "",
      "host": "www.networknt.com",
      "entityId": "GxK5zzLqSKOM-ybKobKxeg",
      "originalUrl": "",
      "title": "Start Light Framework with two demo sites for API developer in development mode ",
      "originalAuthor": "",
      "content": "TODO Not done yet."
    },
    "name": "updPost",
    "category": "blog",
    "createDate": "2016-04-02T17:56:12.586",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:22",
    "@version": 1,
    "@class": "Event",
    "eventId": 10023,
    "createUserId": "stevehu",
    "data": {
      "summary": "This article will walk you through steps to get start Light Framework as Java API developer in development mode. It helps you to set up IDE, Maven plugins and shows you how to debug and test the API developed.",
      "updateDate": "2016-04-02T18:49:15.360",
      "updateUserId": "stevehu",
      "originalSite": "",
      "host": "www.networknt.com",
      "entityId": "GxK5zzLqSKOM-ybKobKxeg",
      "originalUrl": "",
      "title": "Start Light Framework with two demo sites for API developer in development mode ",
      "originalAuthor": "",
      "content": "The Light Framework contains two parts: Front end single page application based on React or Angular and back end API built as rules on top of Light Rule Engine. For API developers, you don't need to install the front end tools to work on your APIs. \n\n### Create a project folder\n\nI am assuming you are using Linux desktop like Ubuntu but the instruction will work on Mac and Windows with some modifications. First you need to create a project folder in your home directory.\n\nFor example, my user directory is /home/steve and I will create a new folder named project and clone the light framework from github.\n\n```\nmkdir project\ncd project\ngit clone https://github.com/networknt/light.git\n```\n\n### Build Light Framework from command line\nIn order to build the framework Java APIs, you need to install the following software packages. \n1. Oracle JDK 1.8\n2. Apache Maven 3.3.x\n\nNow, let's build the server and start it\n```\ncd light\nmvn clean install\n```\n### Start and debug server from IDE\n If you want to start server from your IDE or debug into it, open your IDE (Eclipse or Idea) and open the project from folder light. Both Eclipse and Idea will import the parent pom.xml. To start the server, navigate to server/src/main/java/com/networknt/light/server and run LightServer class. If the database doesn't exist, it will create a new one under your home directory by replaying events.\n\nOnce the server is ready, you should see the following messages on the console.\n\n```\n2016-03-09 20:23:31,396 [XNIO-1 I/O-1] DEBUG org.xnio.niorun(431) - Started channel thread 'XNIO-1 I/O-1', selector sun.nio.ch.EPollSelectorImpl@2790e59d\n2016-03-09 20:23:31,396 [XNIO-1 I/O-2] DEBUG org.xnio.niorun(431) - Started channel thread 'XNIO-1 I/O-2', selector sun.nio.ch.EPollSelectorImpl@6471ccf5\n2016-03-09 20:23:31,398 [XNIO-1 I/O-3] DEBUG org.xnio.niorun(431) - Started channel thread 'XNIO-1 I/O-3', selector sun.nio.ch.EPollSelectorImpl@72f54de2\n2016-03-09 20:23:31,399 [XNIO-1 I/O-4] DEBUG org.xnio.niorun(431) - Started channel thread 'XNIO-1 I/O-4', selector sun.nio.ch.EPollSelectorImpl@27bb2cd1\n```\n\n### Install Maven plugin rule:load\n\nAs you may know it already, each API endpoint on the Light Framework is a rule that running within the Light Rule Engine. Once the rule is built, it need to be loaded to the Framework and as an event. We have develop a Maven plugin to to that.\n\nTo install the plugin.\n\n```\ncd ~/project\ngit clone https://github.com/networknt/maven-plugin.git\ncd maven-plugin/rule-loader\nmvn clean install\n```\n\nNow the plugin is installed. If you have changed any rule from project/light/rule folder, you can just to go that folder and run the following command to load rule into the framework. Just need to be sure that the LightServer is running in your IDE. \n\n```\nmvn rule:load\n```\n\nYou need to restart your server from IDE in order for the updates to take effect. \n\n### Test and Debug rules\nTo test your APIs, you can use Postman or Google Rest Client. When requests are sent to the server, you can debug it from IDE just like working with POJO.\n\n\n"
    },
    "name": "updPost",
    "category": "blog",
    "createDate": "2016-04-02T18:49:15.360",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  }
]
