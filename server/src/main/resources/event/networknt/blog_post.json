[
  {
    "@type": "d",
    "@rid": "#17:46",
    "@version": 1,
    "@class": "Event",
    "eventId": 10047,
    "createUserId": "stevehu",
    "data": {
      "summary": "In this post, I am going to give several example on how to build REST like APIs with Light Framework.",
      "createUserId": "stevehu",
      "host": "www.networknt.com",
      "entityId": "n56D_kAYSzS4Facknfq_mA",
      "title": "Build API with Light Framework",
      "content": "Details is coming...",
      "parentId": "LightFramework",
      "tags": [
        "API",
        "Light Framework"
      ],
      "createDate": "2016-02-16T21:00:07.977"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2016-02-16T21:00:07.977",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:0",
    "@version": 1,
    "@class": "Event",
    "eventId": 10001,
    "createUserId": "stevehu",
    "data": {
      "summary": "In this article, I will walk you through the Light Framework step by step on Linux environment in development mode. ",
      "createUserId": "stevehu",
      "host": "www.networknt.com",
      "entityId": "aQL83VuuSLOTwiVntaLIDw",
      "title": "Start Light Framework with two demo sites in development mode",
      "content": "### Create a project folder\n\nI am assuming you are using Linux desktop like Ubuntu but the instruction will work on Mac and Windows with some modifications. First you need to create a project folder in your home directory.\n\nFor example, my user directory is /home/steve and I will create a new folder named project and clone the light framework from github.\n\n```\nmkdir project\ncd project\ngit clone https://github.com/networknt/light.git\n```\n\n### Build Light Framework from command line\nIn order to build the framework you need to install the following software packages. \n1. Oracle JDK 1.8\n2. Apache Maven 3.3.x\n3. Node\n4. Npm\n\nNow, let's build the server and start it\n```\ncd light\nmvn clean install\ncd server/target\nsetsid java -jar light-server.jar < /dev/zero & > /dev/null &\n```\n\nNow the Light server is up and a database named lightdb will be created under your home directory by replay the events.\n\n### Start and debug server from IDE\n If you want to start server from your IDE or debug into it, open your IDE (Eclipse or Idea) and open the project from folder light. Both Eclipse and Idea will import the parent pom.xml. To server the server, navigate to server/src/main/java/com/networknt/light/server and run LightServer class. If the database doesn't exist, it will create a new one under your home directory by replaying events.\n\nOnce the server is ready, you should see the following messages on the console.\n\n```\n2016-03-09 20:23:31,396 [XNIO-1 I/O-1] DEBUG org.xnio.niorun(431) - Started channel thread 'XNIO-1 I/O-1', selector sun.nio.ch.EPollSelectorImpl@2790e59d\n2016-03-09 20:23:31,396 [XNIO-1 I/O-2] DEBUG org.xnio.niorun(431) - Started channel thread 'XNIO-1 I/O-2', selector sun.nio.ch.EPollSelectorImpl@6471ccf5\n2016-03-09 20:23:31,398 [XNIO-1 I/O-3] DEBUG org.xnio.niorun(431) - Started channel thread 'XNIO-1 I/O-3', selector sun.nio.ch.EPollSelectorImpl@72f54de2\n2016-03-09 20:23:31,399 [XNIO-1 I/O-4] DEBUG org.xnio.niorun(431) - Started channel thread 'XNIO-1 I/O-4', selector sun.nio.ch.EPollSelectorImpl@27bb2cd1\n```\n\n### Start www.networknt.com with react hot loader\n\nwww.networknt.com is a live site to promote the framework and hosting sites built on the framework. In order to run the site locally, you need to update your /etc/hosts to point 127.0.0.1 to it.\n\n```\nsudo gedit /etc/hosts\n```\n\nAdd the following line right after 127.0.0.1\n```\n127.0.0.1       www.edibleforestgarden.ca www.networknt.com\n```\n\nTo start the server in hot loader mode.\n\n```\ncd ~\ncd project/light/networknt\nnpm installl\nnpm start\n```\n\n### Test and update the www.networknt.com\nNow open your browser (Chrome or Firefox) and the address is www.networknt.com:3000\n\nThe site will be loaded and you can login with test/123456 for normal user or you can login with stevehu/123456 as owner\n\n### Start www.edibleforestgarden.ca with react hot loader\nYou have to stop www.networknt.com before starting www.edibleforestgarden.ca as they are listening to the same port.\n\nTo start the server in hot loader mode\n```\ncd ~\ncd project/light/edibleforestgarden\nnpm install\nnpm start\n```\nThe address for the site is www.edibleforestgarden.ca:3000\n\nYou can try to update the site with your IDE and the browser will be updated automatically with react-hot-loader.\n\n\n",
      "parentId": "All",
      "tags": [
        "Light Framework",
        "Installation"
      ],
      "createDate": "2016-03-10T02:30:55.103"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2016-03-10T02:30:55.098",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:1",
    "@version": 1,
    "@class": "Event",
    "eventId": 10002,
    "createUserId": "stevehu",
    "data": {
      "summary": "In this article, I am going to walk through how Light Framework handles HTML History Fallback on both client side and server side. One the server side, PredicatedHandlerParser from Undertow will redirect all React-Router routes to index.html. And on the client side, certain configuration in Webpack will make React Router works on both development mode and production mode.",
      "createUserId": "stevehu",
      "host": "www.networknt.com",
      "entityId": "NQaRUgF8SGmjq3GGPRg8Ag",
      "title": "React Webpack HTML5 History API Fallback",
      "content": "## Overview\nFor single page application (SPA) regardless it is build with Angular or React, you have two options for client side routing - push-state and hash-based. The easiest way is to use hash-based (/#/ from showing in the browser's address bar) when using angular-router or react-router. In this way, routing is happening on the browser only and there is nothing needs to be done on the server configuration. The URL in the browser address bar looks like localhost:3000/#/ or localhost:3000/#/about. \n\nFor browsers that support HTML5 History API, we can use push-state routing. It is a little complicated and need both client and server configuration to work. However, once it is working, you application will look like a normal web application and all bookmarks for different routes will work just like server rendering.\n\n## Light Server\nHere is the logic to redirect all the server requests to index.html if it is not images, css and api calls. If it is not above listed path, then it must be client side routes and the server will serve index.html instead. This even works if you bookmark within single page application. \n\n```\n        NameVirtualHostHandler virtualHostHandler = new NameVirtualHostHandler();\n        Iterator<String> it = hostConfigMap.keySet().iterator();\n        while (it.hasNext()) {\n            String host = it.next();\n            Map<String, String> hostPropMap = (Map<String, String>)hostConfigMap.get(host);\n            String base = hostPropMap.get(\"base\");\n            String transferMinSize = hostPropMap.get(\"transferMinSize\");\n            virtualHostHandler\n                    .addHost(\n                            host,\n                            Handlers.predicates(\n                                PredicatedHandlersParser.parse(\"not path-prefix('/images', '/assets', '/api') -> rewrite('/index.html')\"\n                                , LightServer.class.getClassLoader()),\n                                    new PathHandler(resource(new FileResourceManager(\n                                            new File(base), Integer\n                                            .valueOf(transferMinSize))))\n                                            .addPrefixPath(\"/api/rs\",\n                                                    new EagerFormParsingHandler().setNext(\n                                                            new RestHandler()))\n                                            .addPrefixPath(\"/api/ws\",\n                                                    websocket(new WebSocketHandler()))\n                            ));\n        }\n\n```\n\n## React Router\nTo enable HTML5 History API, you need to set up the router to use browserHistory.\n\n```\nimport {Router, browserHistory} from 'react-router';\n\n.\n.\n.\n\nReactDOM.render(\n  <Router\n    history={browserHistory}\n    onUpdate={() => window.scrollTo(0, 0)}\n  >\n    {AppRoutes}\n  </Router>\n, document.getElementById('app'));\n\n```\n\n## WebPack Development Configuration\n\nFor development mode, I use webpack to start a server with hot loader. Webpack build path is 'src/www/assets and publicPath is /assets. When the webpack-dev-server is up, it serves app.js and style.css from /assets publicPath. Also, I use a proxy to route all API calls to API server. \n\n```\nconst webpack = require('webpack');\nconst path = require('path');\nconst buildPath = path.resolve(__dirname, 'src/www/assets');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nconst config = {\n  //Entry point to the project\n  entry: [\n    'webpack/hot/dev-server',\n    'webpack/hot/only-dev-server',\n    path.join(__dirname, '/src/app/app.jsx')\n  ],\n  //Webpack config options on how to obtain modules\n  resolve: {\n    //When requiring, you don't need to add these extensions\n    extensions: ['', '.js', '.jsx', '.md', '.txt'],\n    //Modules will be searched for in these directories\n    modulesDirectories: [\n      // We need /docs/node_modules to be resolved before /node_modules\n      path.resolve(__dirname, 'node_modules'),\n      'node_modules',\n      path.resolve(__dirname, '../src')\n    ]\n  },\n\n  //Configuration for dev server\n  //devServer: {\n  //  contentBase: 'src/www',\n  //  devtool: 'eval',\n  //  hot: true,\n  // inline: true,\n  //  port: 3000,\n  //},\n\n  devServer: {\n    proxy:       [{\n      // proxy all requests not containing \".hot-update.js\"\n      // regex is still crappy because JS doesn't have negative lookbehind\n      path:   /\\/api(.*)/,\n      // koa running on 3001 with koa-send and isomorphic react\n      target:  'http://www.networknt.com:8080'\n    }],\n    contentBase: 'src/www',\n    hot: true,\n    port: 3000,\n    host: '0.0.0.0',\n    historyApiFallback: true\n  },\n\n  devtool: 'eval',\n  //Output file config\n  output: {\n    path: buildPath,    //Path of output file\n    filename: 'app.js',  //Name of output file\n    publicPath: '/assets'\n  },\n  plugins: [\n    //Used to include index.html in build folder\n    new HtmlWebpackPlugin({\n      inject: false,\n      template: path.join(__dirname, '/src/www/index.html')\n    }),\n    //Allows for sync with browser while developing (like BorwserSync)\n    new webpack.HotModuleReplacementPlugin(),\n    //Allows error warninggs but does not stop compiling. Will remove when eslint is added\n    new webpack.NoErrorsPlugin(),\n    new ExtractTextPlugin('style.css' , {\n      allChunks: true\n    })\n  ],\n  externals: {\n    fs: 'js' // To remove once https://github.com/benjamn/recast/pull/238 is released\n  },\n  module: {\n    //eslint loader\n    preLoaders: [\n      {\n        test: /\\.(js|jsx)$/,\n        loader: 'eslint-loader',\n        include: [path.resolve(__dirname, '../src')],\n        exclude: [\n          path.resolve(__dirname, '../src/svg-icons'),\n          path.resolve(__dirname, '../src/utils/modernizr.custom.js')\n        ]\n      }\n    ],\n    //Allow loading of non-es\n    loaders: [\n      {\n        test: /\\.jsx$/,\n        loaders: [\n          'react-hot',\n          'babel-loader'\n        ],\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.txt$/,\n        loader: 'raw-loader',\n        include: path.resolve(__dirname, 'src/app/components/raw-code')\n      },\n      {\n        test: /\\.md$/,\n        loader: 'raw-loader',\n        include: path.resolve(__dirname, 'src/app/components')\n      },\n      {\n        test: /\\.css$/,\n        loaders: [\n          \"style-loader\",\n          \"css-loader\",\n          \"autoprefixer-loader?browsers=last 2 versions\"\n        ]\n      },\n      {\n        test: /\\.scss$/,\n        loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader!autoprefixer-loader?browsers=last 2 versions!sass-loader?indentedSyntax=sass&includePaths[]=\" + path.resolve(__dirname, \"src/www/assets/stylesheets\"))\n      }\n    ]\n  },\n  eslint: {\n    configFile: '../.eslintrc'\n  }\n};\n\nmodule.exports = config;\n\n```\n\n## WebPack Production Configuration\nProduction build will package everything into build folder, index.html will be build folder and app.js, style.css etc. will go to build/assets\n```\nconst webpack = require('webpack');\nconst path = require('path');\nconst buildPath = path.resolve(__dirname, 'build');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst TransferWebpackPlugin = require('transfer-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nconst config = {\n  //Entry point to the project\n  entry: [\n    path.join(__dirname, '/src/app/app.jsx'),\n  ],\n  //Webpack config options on how to obtain modules\n  resolve: {\n    //When requiring, you don't need to add these extensions\n    extensions: ['', '.js', '.jsx', '.md', '.txt'],\n    //Modules will be searched for in these directories\n    modulesDirectories: [\n      // We need /docs/node_modules to be resolved before /node_modules\n      path.resolve(__dirname, 'node_modules'),\n      'node_modules',\n      path.resolve(__dirname, '../src')\n    ]\n  },\n  devtool: 'source-map',\n  //Configuration for server\n  devServer: {\n    contentBase: 'build',\n  },\n  //Output file config\n  output: {\n    path: buildPath,    //Path of output file\n    filename: 'assets/app.js'  //Name of output file\n  },\n  plugins: [\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.optimize.DedupePlugin(),\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        warnings: false,\n      },\n      output: {\n        comments: false,\n      },\n    }),\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: JSON.stringify('production'),\n      },\n    }),\n    new HtmlWebpackPlugin({\n      inject: false,\n      template: path.join(__dirname, '/src/www/index.html'),\n    }),\n    //Allows error warninggs but does not stop compiling. Will remove when eslint is added\n    new webpack.NoErrorsPlugin(),\n    //Transfer Files\n    new TransferWebpackPlugin([\n      {from: 'www/css', to: 'css'},\n      {from: 'www/images', to: 'images'},\n    ], path.resolve(__dirname, 'src')),\n    new ExtractTextPlugin('assets/style.css' , {\n      allChunks: true\n    })\n  ],\n  externals: {\n    fs: 'fs', // To remove once https://github.com/benjamn/recast/pull/238 is released\n  },\n  module: {\n    //eslint loader\n    preLoaders: [\n      {\n        test: /\\.(js|jsx)$/,\n        loader: 'eslint-loader',\n        include: [path.resolve(__dirname, '../src')],\n        exclude: [\n          path.resolve(__dirname, '../src/svg-icons'),\n          path.resolve(__dirname, '../src/utils/modernizr.custom.js'),\n        ],\n      },\n    ],\n    //Allow loading of non-es5 js files.\n    loaders: [\n      {\n        test: /\\.(js|jsx)$/,\n        loader: 'babel-loader',\n        exclude: /node_modules/,\n      },\n      {\n        test: /\\.txt$/,\n        loader: 'raw-loader',\n        include: path.resolve(__dirname, 'src/app/components/raw-code'),\n      },\n      {\n        test: /\\.md$/,\n        loader: 'raw-loader',\n        include: path.resolve(__dirname, 'src/app/components'),\n      },\n      {\n        test: /\\.css$/,\n        loaders: [\n          \"style-loader\",\n          \"css-loader\",\n          \"autoprefixer-loader?browsers=last 2 versions\"\n        ]\n      },\n      {\n        test: /\\.scss$/,\n        loader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader!autoprefixer-loader?browsers=last 2 versions!sass-loader?indentedSyntax=sass&includePaths[]=\" + path.resolve(__dirname, \"/src/www/assets/stylesheets\"))\n      }\n    ]\n  },\n  eslint: {\n    configFile: '../.eslintrc',\n  },\n};\n\nmodule.exports = config;\n\n```\n\n",
      "parentId": "All",
      "tags": [
        "Light Framework",
        "API",
        "HTML5",
        "React Router",
        "Webpack"
      ],
      "createDate": "2016-03-11T20:36:47.566"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2016-03-11T20:36:47.557",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:19",
    "@version": 1,
    "@class": "Event",
    "eventId": 10020,
    "createUserId": "stevehu",
    "data": {
      "summary": "This article will walk you through steps to get start Light Framework as Java API developer in development mode. It helps you to set up IDE, Maven plugins and shows you how to debug and test the API developed.",
      "createUserId": "stevehu",
      "host": "www.networknt.com",
      "entityId": "GxK5zzLqSKOM-ybKobKxeg",
      "title": "Start Light Framework with two demo sites for API developer in development mode ",
      "content": "The Light Framework contains two parts: Front end single page application based on React or Angular and back end API built as rules on top of Light Rule Engine. For API developers, you don't need to install the front end tools to work on your APIs. \n\n### Create a project folder\n\nI am assuming you are using Linux desktop like Ubuntu but the instruction will work on Mac and Windows with some modifications. First you need to create a project folder in your home directory.\n\nFor example, my user directory is /home/steve and I will create a new folder named project and clone the light framework from github.\n\n```\nmkdir project\ncd project\ngit clone https://github.com/networknt/light.git\n```\n\n### Build Light Framework from command line\nIn order to build the framework Java APIs, you need to install the following software packages. \n1. Oracle JDK 1.8\n2. Apache Maven 3.3.x\n\nNow, let's build the server and start it\n```\ncd light\nmvn clean install\n```\n### Start and debug server from IDE\n If you want to start server from your IDE or debug into it, open your IDE (Eclipse or Idea) and open the project from folder light. Both Eclipse and Idea will import the parent pom.xml. To start the server, navigate to server/src/main/java/com/networknt/light/server and run LightServer class. If the database doesn't exist, it will create a new one under your home directory by replaying events.\n\nOnce the server is ready, you should see the following messages on the console.\n\n```\n2016-03-09 20:23:31,396 [XNIO-1 I/O-1] DEBUG org.xnio.niorun(431) - Started channel thread 'XNIO-1 I/O-1', selector sun.nio.ch.EPollSelectorImpl@2790e59d\n2016-03-09 20:23:31,396 [XNIO-1 I/O-2] DEBUG org.xnio.niorun(431) - Started channel thread 'XNIO-1 I/O-2', selector sun.nio.ch.EPollSelectorImpl@6471ccf5\n2016-03-09 20:23:31,398 [XNIO-1 I/O-3] DEBUG org.xnio.niorun(431) - Started channel thread 'XNIO-1 I/O-3', selector sun.nio.ch.EPollSelectorImpl@72f54de2\n2016-03-09 20:23:31,399 [XNIO-1 I/O-4] DEBUG org.xnio.niorun(431) - Started channel thread 'XNIO-1 I/O-4', selector sun.nio.ch.EPollSelectorImpl@27bb2cd1\n```\n\n### Install Maven plugin rule:load\n\nAs you may know it already, each API endpoint on the Light Framework is a rule that running within the Light Rule Engine. Once the rule is built, it need to be loaded to the Framework and as an event. We have develop a Maven plugin to to that.\n\nTo install the plugin.\n\n```\ncd ~/project\ngit clone https://github.com/networknt/maven-plugin.git\ncd maven-plugin/rule-loader\nmvn clean install\n```\n\nNow the plugin is installed. If you have changed any rule from project/light/rule folder, you can just to go that folder and run the following command to load rule into the framework. Just need to be sure that the LightServer is running in your IDE. \n\n```\nmvn rule:load\n```\n\nYou need to restart your server from IDE in order for the updates to take effect. \n\n### Test and Debug rules\nTo test your APIs, you can use Postman or Google Rest Client. When requests are sent to the server, you can debug it from IDE just like working with POJO.\n\n\n",
      "parentId": "All",
      "tags": [
        "Light Framework",
        "Backend"
      ],
      "createDate": "2016-04-02T17:47:37.991"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2016-04-02T17:47:37.991",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:2",
    "@version": 1,
    "@class": "Event",
    "eventId": 10003,
    "createUserId": "stevehu",
    "data": {
      "summary": "Most blog/news posts are created by authorized user and the risk of XSS is low; however, forum and comment are open to all registered or Google/Facebook users. In order to eliminate XSS, all user inputs are encoded by [OWASP Java Encoder](https://www.owasp.org/index.php/OWASP_Java_Encoder_Project) except Markdown content. If we encode markdown, then it cannot be converted to HTML to display on browser any more; therefore, markdown content is sanitized on the client side in marked option. ",
      "createUserId": "stevehu",
      "host": "www.networknt.com",
      "entityId": "o0GABANhSTCXQ7Tfx09Wog",
      "title": "Cross site scripting (XSS) sanitization",
      "content": "### Risky input\n\n```\n                if(eventData.get(\"originalAuthor\") != null) {\n                    eventData.put(\"originalAuthor\", Encode.forJavaScriptSource((String)eventData.get(\"originalAuthor\")));\n                }\n\n```\n\n### URLs\n```\n                if(eventData.get(\"originalUrl\") != null) {\n                    eventData.put(\"originalUrl\", Encode.forUriComponent((String)eventData.get(\"originalUrl\")));\n                }\n\n```\n\n### Markdown content\n\nset sanitize: true\n\n```\n    marked.setOptions({\n      gfm: true,\n      tables: true,\n      breaks: false,\n      pedantic: false,\n      sanitize: true,\n      smartLists: true,\n      smartypants: false,\n      highlight: function(code, lang) {\n        if(lang) {\n          return require('highlight.js').highlight(lang, code).value;\n        } else {\n          return code;\n        }\n      }\n```\n\n### Testing Vector for Markdown\n\n[Exploiting Markdown Syntax and Telescope Persistent XSS through Markdown (CVE-2014-5144)](http://shubh.am/exploiting-markdown-syntax-and-telescope-persistent-xss-through-markdown-cve-2014-5144/)\n\n```\n[a](javascript:prompt(document.cookie))\n[a](j    a   v   a   s   c   r   i   p   t:prompt(document.cookie))\n![a](javascript:prompt(document.cookie))\\\n<javascript:prompt(document.cookie)>  \n<&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29>  \n![a](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)\\\n[a](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)\n[a](&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29)\n![a'\"`onerror=prompt(document.cookie)](x)\\\n[citelol]: (javascript:prompt(document.cookie))\n[notmalicious](javascript:window.onerror=alert;throw%20document.cookie)\n[test](javascript://%0d%0aprompt(1))\n[test](javascript://%0d%0aprompt(1);com)\n```",
      "parentId": "LightFramework",
      "tags": [
        "XSS",
        "Markdown",
        "Light Framework",
        "Security"
      ],
      "createDate": "2016-04-07T02:05:50.960"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2016-04-07T02:05:50.960",
    "ipAddress": "198.16.252.9",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:3",
    "@version": 1,
    "@class": "Event",
    "eventId": 10004,
    "createUserId": "stevehu",
    "data": {
      "summary": "Light Framework has its own sign up and sign in system but for most users, it might be convenient to login with his/her Google credentials or Facebook credentials. For different level of admin users, they have to register on the site and login with the registered user as they have different roles in their profiles.",
      "createUserId": "stevehu",
      "host": "www.networknt.com",
      "entityId": "pgUzLq3bTbyf7q2mp4w5gw",
      "title": "Google and Facebook OAuth2 Login",
      "content": "Google or Facebook Login integration is easy and there are too many options; however, the only safe option for both users and the site is combination of client and server solution. On the client side browser, once \"Login from Google\" or \"Login from Facebook\" button is clicked, it will be redirect to the google.com or facebook.com to login with user's credentials. Since login happens on Google.com or Facebook.com and the web server has no chance to intercept user's password. Once login is done, an id_token is returned from Google and an access token is returned from Facebook. Both tokens will be verified by Light Framework on server side against google client_id and facebook app_id. In this case, tokens generated from other site won't work here and an 401 error will be returned from the Login API. \n\n### Client side Login.jsx\n\nGet google client_id and facebook appId from server side configuration through config API.\n```\n    _onConfigStoreChange: function() {\n        this.setState({\n            googleId: ConfigStore.getConfig(googleConfigId).client_id,\n            facebookId: ConfigStore.getConfig(facebookConfigId).appId\n        });\n    },\n```\n\nRendering Google and Facebook buttons\n```\n        let socialLogin = '';\n        if(this.state.googleId && this.state.facebookId) {\n            socialLogin = (\n                <div className=\"socialButton\">\n                    <GoogleLogin\n                        clientId={this.state.googleId}\n                        callback={this._responseGoogle}\n                        cssClass=\"googleLogin\"\n                        offline={false}\n                    />\n                    <FacebookLogin\n                        appId={this.state.facebookId}\n                        autoLoad={false}\n                        scope=\"public_profile, email\"\n                        cssClass=\"facebookLogin\"\n                        callback={this._responseFacebook}\n                    />\n                </div>\n            )\n        }\n```\n\nClient side response callback when buttons are clicked\n```\n    _responseGoogle: function(response) {\n        AuthActionCreators.googleLogin(response.getAuthResponse());\n    },\n\n    _responseFacebook: function(response) {\n        AuthActionCreators.facebookLogin(response);\n    },\n\n```\n\n### Server side Rules\n\nGoogle Login\n```\n        // https://developers.google.com/identity/sign-in/web/backend-auth#using-a-google-api-client-library\n        // first need to verify and get user profile from access token\n        GetConfigRule getConfigRule = new GetConfigRule();\n        String googleClientId = getConfigRule.getConfig(host, GOOGLE, \"$.properties.client_id\");\n\n        // Set up the HTTP transport and JSON factory\n        HttpTransport transport = GoogleNetHttpTransport.newTrustedTransport();\n        JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();\n\n        GoogleIdTokenVerifier verifier = new GoogleIdTokenVerifier.Builder(transport, jsonFactory)\n                .setAudience(Arrays.asList(googleClientId))\n                // If you retrieved the token on Android using the Play Services 8.3 API or newer, set\n                // the issuer to \"https://accounts.google.com\". Otherwise, set the issuer to\n                // \"accounts.google.com\". If you need to verify tokens from multiple sources, build\n                // a GoogleIdTokenVerifier for each issuer and try them both.\n                .setIssuer(\"accounts.google.com\")\n                .build();\n\n        GoogleIdToken idToken = verifier.verify(token);\n        if (idToken != null) {\n            GoogleIdToken.Payload payload = idToken.getPayload();\n\n            // Get profile information from payload\n            String email = payload.getEmail();\n            boolean emailVerified = Boolean.valueOf(payload.getEmailVerified());\n            String name = (String) payload.get(\"name\");\n            String familyName = (String) payload.get(\"family_name\");\n            String givenName = (String) payload.get(\"given_name\");\n\n```\n\nFacebook Login\n```\n            // https://developers.google.com/identity/sign-in/web/backend-auth#using-a-google-api-client-library\n            // first need to verify and get user profile from access token\n            GetConfigRule getConfigRule = new GetConfigRule();\n            //String facebookAppId = getConfigRule.getConfig(host, FACEBOOK, \"$.properties.appId\");\n            FacebookClient fbClient = new DefaultFacebookClient(token, Version.VERSION_2_5);\n            User me = fbClient.fetchObject(\"me\", User.class, Parameter.with(\"fields\", \"id,name,email,first_name, last_name, verified\"));\n\n            if (me != null) {\n                String email = me.getEmail();\n                String firstName = me.getFirstName();\n                String lastName = me.getLastName();\n                String name = me.getName();\n                Boolean verified = me.getVerified();\n\n```\n\n### Configuration on google.com and facebook.com\n\n1. Multiple sites can share the same client_id on google.com as long as your site is registered for that client_id on google\n\n2. For facebook.com, you have to create a new app_id for each new web site. \n\n3. Testing for google integration is easy as you can add http://localhost:8080 to the client_id, however, facebook doesn't support localhost. So you have to create a host entry in your /etc/hosts in order to test locally. Here is a link with local testing for Facebook Login.\nhttp://stackoverflow.com/questions/8818977/make-local-development-work-with-facebook-google-apis\n\n\n ",
      "parentId": "LightFramework",
      "tags": [
        "Light Framework",
        "Security",
        "Login"
      ],
      "createDate": "2016-04-07T03:05:01.528"
    },
    "name": "addPost",
    "category": "blog",
    "createDate": "2016-04-07T03:05:01.528",
    "ipAddress": "198.16.252.9",
    "@fieldTypes": "eventId=l,createDate=t"
  }
]
