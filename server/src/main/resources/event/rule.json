[
  {
    "@type": "d",
    "@rid": "#18:1",
    "@version": 1,
    "@class": "Event",
    "eventId": 10002,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 21/03/15.\n */\npublic class UpdPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPostEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpdPostEvRule",
      "createDate": "2015-12-30T20:05:14.481"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.481",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:2",
    "@version": 1,
    "@class": "Event",
    "eventId": 10003,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * Get news dropdown list for news admin page\n *\n * AccessLevel R [owner, admin, newsAdmin]\n *\n */\npublic class GetNewsDropdownRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchDropdown(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.GetNewsDropdownRule",
      "createDate": "2015-12-30T20:05:14.517"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.517",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:3",
    "@version": 1,
    "@class": "Event",
    "eventId": 10004,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 21/03/15.\n *\n * user can only delete his or her posts before anyone makes comment. However,\n * owner, admin and forumAdmin can delete post and all the comments relate to the\n * post all together. This should not be done often only at extreme situation.\n *\n * AccessLevel R [owner, admin, newsAdmin, user]\n *\n * to make is simple for now.\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n * Due to the implementation of orientdb delete graph scheduled for 2.2\n * https://github.com/orientechnologies/orientdb/issues/1108\n * We will be asking all the comments be deleted before deleting the post for now.\n *\n * TODO fix it after orientdb 2.2\n *\n */\npublic class DelPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPost(\"news\", objects);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DelPostRule",
      "createDate": "2015-12-30T20:05:14.540"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.540",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:4",
    "@version": 1,
    "@class": "Event",
    "eventId": 10005,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * Display news category on news home page.\n *\n * AccessLevel A\n *\n */\npublic class GetNewsTreeRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchTree(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.GetNewsTreeRule",
      "createDate": "2015-12-30T20:05:14.551"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.551",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:5",
    "@version": 1,
    "@class": "Event",
    "eventId": 10006,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * Get all the news for a host and display in the news admin interface\n *\n * AccessLevel R [owner, admin, newsAdmin]\n *\n */\npublic class GetNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.GetNewsRule",
      "createDate": "2015-12-30T20:05:14.569"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.569",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:6",
    "@version": 1,
    "@class": "Event",
    "eventId": 10007,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * Get all the post in a news category and sub categories\n *\n * AccessLevel A\n *\n */\npublic class GetNewsPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnPost(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.GetNewsPostRule",
      "createDate": "2015-12-30T20:05:14.582"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.582",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:7",
    "@version": 1,
    "@class": "Event",
    "eventId": 10008,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * Delete news category\n *\n * AccessLevel R [owner, admin, newsAdmin]\n *\n */\npublic class DelNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DelNewsRule",
      "createDate": "2015-12-30T20:05:14.605"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.605",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:8",
    "@version": 1,
    "@class": "Event",
    "eventId": 10009,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class UpNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranchEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpNewsEvRule",
      "createDate": "2015-12-30T20:05:14.617"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.617",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:9",
    "@version": 1,
    "@class": "Event",
    "eventId": 10010,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class DownNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DownNewsEvRule",
      "createDate": "2015-12-30T20:05:14.627"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.627",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:10",
    "@version": 1,
    "@class": "Event",
    "eventId": 10011,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * Update news category\n *\n * AccessLevel R [owner, admin, newsAdmin]\n *\n *\n */\npublic class UpdNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpdNewsRule",
      "createDate": "2015-12-30T20:05:14.645"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.645",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:11",
    "@version": 1,
    "@class": "Event",
    "eventId": 10012,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * Add news category\n *\n * AccessLevel R [owner, admin, newsAdmin]\n *\n */\npublic class AddNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.AddNewsRule",
      "createDate": "2015-12-30T20:05:14.669"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.669",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:12",
    "@version": 1,
    "@class": "Event",
    "eventId": 10013,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 21/03/15.\n */\npublic class DelPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPostEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DelPostEvRule",
      "createDate": "2015-12-30T20:05:14.697"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.697",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:13",
    "@version": 1,
    "@class": "Event",
    "eventId": 10014,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPostEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.AddPostEvRule",
      "createDate": "2015-12-30T20:05:14.721"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.721",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:14",
    "@version": 1,
    "@class": "Event",
    "eventId": 10015,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * Post news in certain new category\n *\n * AccessLevel R [owner, admin, newsAdmin, newsUser]\n *\n * newsUser can only post in category?\n *\n */\npublic class AddPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPost(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.AddPostRule",
      "createDate": "2015-12-30T20:05:14.745"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.745",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:15",
    "@version": 1,
    "@class": "Event",
    "eventId": 10016,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n *\n * Up vote news category\n *\n * AccessLevel R [user]\n *\n */\npublic class UpNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpNewsRule",
      "createDate": "2015-12-30T20:05:14.769"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.769",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:16",
    "@version": 1,
    "@class": "Event",
    "eventId": 10017,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranchEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.AddNewsEvRule",
      "createDate": "2015-12-30T20:05:14.785"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.785",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:17",
    "@version": 1,
    "@class": "Event",
    "eventId": 10018,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n *\n * Vote down news category\n *\n * AccessLevel R [user]\n *\n */\npublic class DownNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DownNewsRule",
      "createDate": "2015-12-30T20:05:14.804"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.804",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:18",
    "@version": 1,
    "@class": "Event",
    "eventId": 10019,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class DelNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranchEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DelNewsEvRule",
      "createDate": "2015-12-30T20:05:14.813"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.813",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:19",
    "@version": 1,
    "@class": "Event",
    "eventId": 10020,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 3/6/2015.\n * Update post in a forum\n *\n * AccessLevel R [owner, admin, newsAdmin, user]\n *\n * User can only update his or her post and there will be an indicate that\n * the post is updated. Maybe just the update date?\n *\n * for now to make it simple, user cannot update the post.\n *\n */public class UpdPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPost(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpdPostRule",
      "createDate": "2015-12-30T20:05:14.823"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.823",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:20",
    "@version": 1,
    "@class": "Event",
    "eventId": 10021,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class UpdNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranchEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpdNewsEvRule",
      "createDate": "2015-12-30T20:05:14.833"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.833",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:21",
    "@version": 1,
    "@class": "Event",
    "eventId": 10022,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.access.AbstractAccessRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n */\npublic class AddTransformRequestEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addTransformRequest(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.AddTransformRequestEvRule",
      "createDate": "2015-12-30T20:05:14.857"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.857",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:22",
    "@version": 1,
    "@class": "Event",
    "eventId": 10023,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class AddTransformResponseRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin adding transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    // you are not allowed to update transform rule to the rule as it is not owned by the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformResponseBySeq(ruleClass, sequence);\n                    if(json != null) {\n                        error = \"Transform rule exists for the sequence\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                        eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                        eventData.put(\"transformData\", data.get(\"transformData\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformResponseBySeq(ruleClass, sequence);\n            if(json != null) {\n                error = \"Transform rule exists for the sequence\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n                eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                eventData.put(\"transformData\", data.get(\"transformData\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.AddTransformResponseRule",
      "createDate": "2015-12-30T20:05:14.869"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.869",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:23",
    "@version": 1,
    "@class": "Event",
    "eventId": 10024,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdTransformRequestRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin adding transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only update transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    // you are not allowed to update transform rule to the rule as it is not owned by the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformRequestBySeq(ruleClass, sequence);\n                    if(json == null) {\n                        error = \"Transform rule does not exist\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                        eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                        eventData.put(\"transformData\", data.get(\"transformData\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformRequestBySeq(ruleClass, sequence);\n            if(json == null) {\n                error = \"Transform rule doesnot exist\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n                eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                eventData.put(\"transformData\", data.get(\"transformData\"));\n                eventData.put(\"updateDate\", new java.util.Date());\n                eventData.put(\"updateUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.UpdTransformRequestRule",
      "createDate": "2015-12-30T20:05:14.890"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.890",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:24",
    "@version": 1,
    "@class": "Event",
    "eventId": 10025,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/02/15.\n */\npublic class UpdTransformResponseEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updTransformResponse(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.UpdTransformResponseEvRule",
      "createDate": "2015-12-30T20:05:14.913"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.913",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:25",
    "@version": 1,
    "@class": "Event",
    "eventId": 10026,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/02/15.\n */\npublic class AddTransformResponseEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addTransformResponse(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.AddTransformResponseEvRule",
      "createDate": "2015-12-30T20:05:14.936"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.936",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:26",
    "@version": 1,
    "@class": "Event",
    "eventId": 10027,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 16/02/15.\n */\npublic abstract class AbstractTransformRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractTransformRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void addTransformRequest(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            // transformData is a json string, convert it to map.\n            Object transformData = data.get(\"transformData\");\n            if(transformData != null) {\n                Map<String, Object> map = mapper.readValue((String)transformData,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                data.put(\"transformData\", map);\n            }\n            OrientVertex transform = graph.addVertex(\"class:TransformRequest\", data);\n            createUser.addEdge(\"Create\", transform);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected void addTransformResponse(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            Object transformData = data.get(\"transformData\");\n            if(transformData != null) {\n                Map<String, Object> map = mapper.readValue((String)transformData,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                data.put(\"transformData\", map);\n            }\n            OrientVertex transform = graph.addVertex(\"class:TransformResponse\", data);\n            createUser.addEdge(\"Create\", transform);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected void updTransformRequest(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OIndex<?> reqRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ReqRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"ruleClass\"), data.get(\"sequence\"));\n            OIdentifiable oid = (OIdentifiable) reqRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                transform.field(\"transformRule\", data.get(\"transformRule\"));\n                // transformData is a json string, convert it to map.\n                Object transformData = data.get(\"transformData\");\n                if(transformData != null) {\n                    Map<String, Object> map = mapper.readValue((String)transformData,\n                            new TypeReference<HashMap<String, Object>>() {\n                            });\n                    transform.field(\"transformData\", map);\n                }\n                transform.field(\"updateDate\", data.get(\"updateDate\"));\n                transform.field(\"updateUserId\", data.get(\"updateUserId\"));\n                transform.save();\n                graph.commit();\n            }\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected void updTransformResponse(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OIndex<?> resRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ResRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"ruleClass\"), data.get(\"sequence\"));\n            OIdentifiable oid = (OIdentifiable) resRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                transform.field(\"transformRule\", data.get(\"transformRule\"));\n                // transformData is a json string, convert it to map.\n                Object transformData = data.get(\"transformData\");\n                if(transformData != null) {\n                    Map<String, Object> map = mapper.readValue((String)transformData,\n                            new TypeReference<HashMap<String, Object>>() {\n                            });\n                    transform.field(\"transformData\", map);\n                }\n                transform.field(\"updateDate\", data.get(\"updateDate\"));\n                transform.field(\"updateUserId\", data.get(\"updateUserId\"));\n                transform.save();\n                graph.commit();\n            }\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected void delTransformRequest(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OIndex<?> reqRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ReqRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"ruleClass\"), data.get(\"sequence\"));\n            OIdentifiable oid = (OIdentifiable) reqRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                transform.delete();\n                transform.save();\n                graph.commit();\n            }\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected void delTransformResponse(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OIndex<?> resRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ResRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"ruleClass\"), data.get(\"sequence\"));\n            OIdentifiable oid = (OIdentifiable) resRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                transform.delete();\n                transform.save();\n                graph.commit();\n            }\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cached list if in order to reload it\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n    /*\n    public List<Map<String, Object>> getTransformRequest(String ruleClass) {\n        String sql = \"SELECT FROM TransformRequest WHERE ruleClass = '\" + ruleClass + \"' ORDER BY sequence\";\n        List<Map<String, Object>> transforms = null;\n\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            ruleMap.put(\"cache\", cache);\n        } else {\n            Map<String, Object> rule = (Map<String, Object>)cache.get(ruleClass);\n            if(rule != null) {\n                transforms = (List<Map<String, Object>>)rule.get(\"transformRequest\");\n            }\n        }\n        if(transforms == null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n                List<ODocument> docs = graph.getRawGraph().command(query).execute();\n                transforms = new ArrayList<Map<String, Object>> ();\n                if(docs != null) {\n                    for(ODocument doc: docs) {\n                        Map<String, Object> map = new HashMap<String, Object> ();\n                        map.put(\"sequence\", doc.field(\"sequence\"));\n                        map.put(\"transformRule\", doc.field(\"transformRule\"));\n                        map.put(\"transformData\", doc.field(\"transformData\"));\n                        map.put(\"createUserId\", doc.field(\"createUserId\"));\n                        transforms.add(map);\n                    }\n                }\n                // put an empty list into the cache if no transform rules available. This can avoid access db every time the cache is hit.\n                Map<String, Object> rule = (Map<String, Object>)cache.get(ruleClass);\n                if(rule != null) {\n                    rule.put(\"transformRequest\", transforms);\n                } else {\n                    rule = new HashMap<String, Object>();\n                    rule.put(\"transformRequest\", transforms);\n                    cache.put(ruleClass, rule);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        return transforms;\n    }\n\n    public List<Map<String, Object>> getTransformResponse(String ruleClass) {\n        String sql = \"SELECT FROM TransformResponse WHERE ruleClass = '\" + ruleClass + \"' ORDER BY sequence\";\n        List<Map<String, Object>> transforms = null;\n\n        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)ruleMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            ruleMap.put(\"cache\", cache);\n        } else {\n            Map<String, Object> rule = (Map<String, Object>)cache.get(ruleClass);\n            if(rule != null) {\n                transforms = (List<Map<String, Object>>)rule.get(\"transformResponse\");\n            }\n        }\n        if(transforms == null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n                List<ODocument> docs = graph.getRawGraph().command(query).execute();\n                transforms = new ArrayList<Map<String, Object>> ();\n                if(docs != null) {\n                    for(ODocument doc: docs) {\n                        Map<String, Object> map = new HashMap<String, Object> ();\n                        map.put(\"sequence\", doc.field(\"sequence\"));\n                        map.put(\"transformRule\", doc.field(\"transformRule\"));\n                        map.put(\"transformData\", doc.field(\"transformData\"));\n                        map.put(\"createUserId\", doc.field(\"createUserId\"));\n                        transforms.add(map);\n                    }\n                }\n                // put an empty list into the cache if no transform rules available. This can avoid access db every time the cache is hit.\n                Map<String, Object> rule = (Map<String, Object>)cache.get(ruleClass);\n                if(rule != null) {\n                    rule.put(\"transformResponse\", transforms);\n                } else {\n                    rule = new HashMap<String, Object>();\n                    rule.put(\"transformResponse\", transforms);\n                    cache.put(ruleClass, rule);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        return transforms;\n    }\n    */\n    protected String getTransformRequestBySeq(String ruleClass, Integer sequence) {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OIndex<?> reqRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ReqRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(ruleClass, sequence);\n            OIdentifiable oid = (OIdentifiable) reqRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                json = transform.toJSON();\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getTransformResponseBySeq(String ruleClass, Integer sequence) {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OIndex<?> resRuleSequenceIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"ResRuleSequenceIdx\");\n            OCompositeKey key = new OCompositeKey(ruleClass, sequence);\n            OIdentifiable oid = (OIdentifiable) resRuleSequenceIdx.get(key);\n            if (oid != null) {\n                ODocument transform = (ODocument) oid.getRecord();\n                json = transform.toJSON();\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.AbstractTransformRule",
      "createDate": "2015-12-30T20:05:14.950"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.950",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:27",
    "@version": 1,
    "@class": "Event",
    "eventId": 10028,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.role.AbstractRoleRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class AddTransformRequestRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin adding transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    // you are not allowed to update transform rule to the rule as it is not owned by the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformRequestBySeq(ruleClass, sequence);\n                    if(json != null) {\n                        error = \"Transform rule exists for the sequence\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                        eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                        eventData.put(\"transformData\", data.get(\"transformData\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformRequestBySeq(ruleClass, sequence);\n            if(json != null) {\n                error = \"Transform rule exists for the sequence\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n                eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                eventData.put(\"transformData\", data.get(\"transformData\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.AddTransformRequestRule",
      "createDate": "2015-12-30T20:05:14.963"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.963",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:28",
    "@version": 1,
    "@class": "Event",
    "eventId": 10029,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n */\npublic class DelTransformResponseRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin deleting transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only delete transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformResponseBySeq(ruleClass, sequence);\n                    if(json == null) {\n                        error = \"Transform rule does not exist\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformResponseBySeq(ruleClass, sequence);\n            if(json == null) {\n                error = \"Transform rule does not exist\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.DelTransformResponseRule",
      "createDate": "2015-12-30T20:05:14.984"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.984",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:29",
    "@version": 1,
    "@class": "Event",
    "eventId": 10030,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n *\n * This is a transform rule that support Beta testing on production. When you change the API that is backward\n * compatible, you can test it on your local and then deploy it on production for testing. For certain loyal users\n * or employees, you can give them a role called betaTester in their profile. This rule will be applied before\n * API end point is reached, so that the end point can be version 1 which has no betaTester role and version 2 which\n * has betaTester role. In normal case, it will route to rule class HelloWorld.class or HelloWorld1.class if the user\n * is betaTester. Once beta testing is done, you can route all traffic to HelloWorld1.class. Later on, you want to change\n * the rule again you can create HelloWorld2.class and route betaTester to it. This can goes on and on.\n *\n * Please note: Beta testing is only for backward compatible changes. If not, one should have two versions of clients\n * to connect to two different API class in different packages.\n *\n * When set up this rule, you should have two entries in transformData beta and production to point to the right\n * class name of the rules.\n *\n * For example, for HelloWorldRule and HelloWorld_1Rule, we have the following setup in the request transformer.\n * {\n *   \"production\": \"helloWorld\",\n *   \"beta\": \"helloWorld_1\"\n * }\n *\n * AccessLevel N as it is internal.\n *\n */\npublic class BetaTestRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(BetaTestRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> transformData = (Map<String, Object>)inputMap.remove(\"transformData\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload != null) {\n            Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n            List roles = (List) user.get(\"roles\");\n            if (roles.contains(\"betaTester\")) {\n                inputMap.put(\"name\", transformData.get(\"beta\"));\n            } else {\n                inputMap.put(\"name\", transformData.get(\"production\"));\n            }\n        } else {\n            inputMap.put(\"name\", transformData.get(\"production\"));\n        }\n        return true;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.BetaTestRule",
      "createDate": "2015-12-30T20:05:14.996"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:14.996",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:30",
    "@version": 1,
    "@class": "Event",
    "eventId": 10031,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n */\npublic class DelTransformRequestEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delTransformRequest(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.DelTransformRequestEvRule",
      "createDate": "2015-12-30T20:05:15.005"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.005",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:31",
    "@version": 1,
    "@class": "Event",
    "eventId": 10032,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/02/15.\n */\npublic class DelTransformResponseEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delTransformResponse(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.DelTransformResponseEvRule",
      "createDate": "2015-12-30T20:05:15.018"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.018",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:32",
    "@version": 1,
    "@class": "Event",
    "eventId": 10033,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n */\npublic class DelTransformRequestRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin deleting transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only delete transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformRequestBySeq(ruleClass, sequence);\n                    if(json == null) {\n                        error = \"Transform rule does not exist\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformRequestBySeq(ruleClass, sequence);\n            if(json == null) {\n                error = \"Transform rule does not exist\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.DelTransformRequestRule",
      "createDate": "2015-12-30T20:05:15.030"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.030",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:33",
    "@version": 1,
    "@class": "Event",
    "eventId": 10034,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 21/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class GetTransformResponseRule extends AbstractTransformRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(GetTransformResponseRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Map ruleMap = AbstractRule.getRuleByRuleClass(ruleClass);\n        if(ruleMap != null) {\n            List<Map<String, Object>> resTransforms = (List) ruleMap.get(\"resTransforms\");\n            if(resTransforms != null && resTransforms.size() > 0) {\n                inputMap.put(\"result\", mapper.writeValueAsString(resTransforms));\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No transform can be found for ruleClass\" + ruleClass);\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"No rule can be found for ruleClass\" + ruleClass);\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.GetTransformResponseRule",
      "createDate": "2015-12-30T20:05:15.039"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.039",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:34",
    "@version": 1,
    "@class": "Event",
    "eventId": 10035,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/02/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdTransformResponseRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Integer sequence = (Integer)data.get(\"sequence\");\n        if(host != null) {\n            // admin or ruleAdmin adding transform rule for their site.\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only update transform rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // check if the ruleClass belongs to the host.\n                if(!ruleClass.contains(host)) {\n                    // you are not allowed to update transform rule to the rule as it is not owned by the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getTransformResponseBySeq(ruleClass, sequence);\n                    if(json == null) {\n                        error = \"Transform rule does not exist\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sequence\", data.get(\"sequence\"));\n                        eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                        eventData.put(\"transformData\", data.get(\"transformData\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            String json = getTransformResponseBySeq(ruleClass, sequence);\n            if(json == null) {\n                error = \"Transform rule doesnot exist\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sequence\", data.get(\"sequence\"));\n                eventData.put(\"transformRule\", data.get(\"transformRule\"));\n                eventData.put(\"transformData\", data.get(\"transformData\"));\n                eventData.put(\"updateDate\", new java.util.Date());\n                eventData.put(\"updateUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.UpdTransformResponseRule",
      "createDate": "2015-12-30T20:05:15.062"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.062",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:35",
    "@version": 1,
    "@class": "Event",
    "eventId": 10036,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n */\npublic class UpdTransformRequestEvRule extends AbstractTransformRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updTransformRequest(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.UpdTransformRequestEvRule",
      "createDate": "2015-12-30T20:05:15.074"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.074",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:36",
    "@version": 1,
    "@class": "Event",
    "eventId": 10037,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n *\n * Get all request transform rules for a ruleClass\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class GetTransformRequestRule extends AbstractTransformRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(GetTransformRequestRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Map ruleMap = AbstractRule.getRuleByRuleClass(ruleClass);\n        if(ruleMap != null) {\n            List<Map<String, Object>> reqTransforms = (List) ruleMap.get(\"reqTransforms\");\n            if(reqTransforms != null && reqTransforms.size() > 0) {\n                inputMap.put(\"result\", mapper.writeValueAsString(reqTransforms));\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No transform can be found for ruleClass\" + ruleClass);\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"No rule can be found for ruleClass\" + ruleClass);\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.GetTransformRequestRule",
      "createDate": "2015-12-30T20:05:15.084"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.084",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:37",
    "@version": 1,
    "@class": "Event",
    "eventId": 10038,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 21/12/14.\n * Download events from event store. Should be a search interface so that you can enter search\n * criteria.\n *\n * TODO make it searchable\n *\n * AccessLevel R [user]\n *\n */\npublic class DownloadEventRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        // everyone is allowed to download events performed by himself and replay it on\n        // other site build with the same framework.\n\n        // make sure that both from datetime and to datetime are in the past. And to datetime\n        // can be optional which means get everything after from datetime.\n\n        // Now let's build a criteria for db search.\n\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\")) {\n            // only owner can generate events for common components without host.\n            data.remove(\"host\");\n        }\n        data.put(\"createUserId\", user.get(\"userId\"));\n        String json = DbService.getData(\"Event\", data);\n        if(json != null) {\n            inputMap.put(\"result\", json);\n        } else {\n            error = \"No event can be found\";\n            inputMap.put(\"responseCode\", 400);\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.DownloadEventRule",
      "createDate": "2015-12-30T20:05:15.101"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.101",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:38",
    "@version": 1,
    "@class": "Event",
    "eventId": 10039,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 01/03/15.\n */\npublic class ExecUpdateCmdEvRule extends AbstractDbRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        execUpdateCmd(data, true);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExecUpdateCmdEvRule",
      "createDate": "2015-12-30T20:05:15.116"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.116",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:39",
    "@version": 1,
    "@class": "Event",
    "eventId": 10040,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 12/12/14.\n *\n * Export only the event store for backup. There is no UI as of yet. TODO.\n *\n * Only owner can export the entire event store\n *\n * AccessLevel R [owner]\n *\n */\npublic class ExpEventRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"dbAdmin\")) {\n                error = \"Role owner or admin or dbAdmin is required to add schema\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String path = (String)data.get(\"path\");\n                if(path != null) {\n                    // make sure that the Path exists.\n                    File file = new File(path);\n                    if (!file.exists()) {\n                        String result = exportEvent(path);\n                        inputMap.put(\"result\", result);\n                    } else {\n                        error = \"Please remove existing file manually\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                } else {\n                    error = \"Path is required\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExpEventRule",
      "createDate": "2015-12-30T20:05:15.146"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.146",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:40",
    "@version": 1,
    "@class": "Event",
    "eventId": 10041,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 01/03/15.\n */\npublic class ExecSchemaCmdEvRule extends AbstractDbRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        execSchemaCmd(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExecSchemaCmdEvRule",
      "createDate": "2015-12-30T20:05:15.156"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.156",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:41",
    "@version": 1,
    "@class": "Event",
    "eventId": 10042,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport com.orientechnologies.orient.core.command.OCommandOutputListener;\nimport com.orientechnologies.orient.core.command.script.OCommandScript;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.tool.ODatabaseExport;\nimport com.orientechnologies.orient.core.db.tool.ODatabaseImport;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 10/12/14.\n */\npublic abstract class AbstractDbRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractDbRule.class);\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void impDb(Map<String, Object> data) {\n        String content = (String) data.get(\"content\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            OCommandOutputListener listener = new OCommandOutputListener() {\n                @Override\n                public void onMessage(String iText) {\n                    logger.info(iText);\n                }\n            };\n            InputStream is = new ByteArrayInputStream(content.getBytes());\n            ODatabaseImport imp = new ODatabaseImport(graph.getRawGraph(), is, listener);\n            imp.importDatabase();\n            imp.close();\n        } catch (IOException ioe) {\n            logger.error(\"Exception:\", ioe);\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected String exportEvent(String path) {\n        final String[] result = new String[1];\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            OCommandOutputListener listener = new OCommandOutputListener() {\n                @Override\n                public void onMessage(String iText) {\n                    result[0] = result[0] + iText;\n                }\n            };\n            ODatabaseExport export = new ODatabaseExport(graph.getRawGraph(), path, listener);\n            export.exportDatabase();\n            export.close();\n        } catch(IOException ioe) {\n            ioe.printStackTrace();\n        } finally {\n            graph.shutdown();\n        }\n        return result[0];\n    }\n\n    protected String execUpdateCmd(Map<String, Object> data, boolean commit) {\n        String result = \"\";\n        String script = (String) data.get(\"script\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.command(new OCommandScript(\"sql\", script)).execute();\n            if(commit) {\n                graph.commit();\n            } else {\n                graph.rollback();\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            result = e.getMessage();\n        } finally {\n            graph.shutdown();\n        }\n        return result;\n    }\n\n    protected String execSchemaCmd(Map<String, Object> data) {\n        String result = \"\";\n        String script = (String) data.get(\"script\");\n        OrientGraphNoTx graph = ServiceLocator.getInstance().getGraphNoTx();\n        try{\n            graph.command(new OCommandScript(\"sql\", script)).execute();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            result = e.getMessage();\n        } finally {\n            graph.shutdown();\n        }\n        return result;\n    }\n\n    protected String execQueryCmd(OrientGraph graph, Map<String, Object> data) {\n        OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>((String)data.get(\"script\"));\n        List<ODocument> accesses = graph.getRawGraph().command(query).execute();\n        return OJSONWriter.listToJSON(accesses, null);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.AbstractDbRule",
      "createDate": "2015-12-30T20:05:15.169"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.169",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:42",
    "@version": 1,
    "@class": "Event",
    "eventId": 10043,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 01/03/15.\n *\n * This is the rule that create or update schema during new application initial setup.\n * Note that unlike update command we can try it out without commit, this one we cannot.\n *\n */\npublic class ExecSchemaCmdRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        // make sure we have content payload here.\n        String script = (String)data.get(\"script\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        eventData.put(\"script\", script);\n        eventData.put(\"createDate\", new java.util.Date());\n        eventData.put(\"createUserId\", user.get(\"userId\"));\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExecSchemaCmdRule",
      "createDate": "2015-12-30T20:05:15.185"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.185",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:43",
    "@version": 1,
    "@class": "Event",
    "eventId": 10044,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 11/12/14.\n *\n * Execute database command so that it can create schemas or other objects.\n *\n * Due to the importance of the API, the code level access control is in place.\n *\n * AccessLevel R [owner, admin, dbAdmin]\n *\n * Current AccessLevel R [owner]\n * as site level control is not done yet. TODO\n */\npublic class ExecUpdateCmdRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        // make sure we have content payload here.\n        String script = (String)data.get(\"script\");\n        if(script == null || script.length() == 0) {\n            error = \"Content is empty\";\n            inputMap.put(\"responseCode\", 400);\n        } else {\n            // make sure the script is executable.\n            String result = execUpdateCmd(data, false);\n            if(result.length() > 0) {\n                error = result;\n                inputMap.put(\"responseCode\", 500);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"script\", script);\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExecUpdateCmdRule",
      "createDate": "2015-12-30T20:05:15.204"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.204",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:44",
    "@version": 1,
    "@class": "Event",
    "eventId": 10045,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 01/03/15.\n */\npublic class ExecQueryCmdRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String script = (String)data.get(\"script\");\n        // make sure the script is executable.\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String json = null;\n        try{\n            json = execQueryCmd(graph, data);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            inputMap.put(\"result\", e.getMessage());\n            inputMap.put(\"responseCode\", 500);\n            return false;\n        } finally {\n            graph.shutdown();\n        }\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"responseCode\", 404);\n            inputMap.put(\"result\", \"Not found\");\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExecQueryCmdRule",
      "createDate": "2015-12-30T20:05:15.221"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.221",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:45",
    "@version": 1,
    "@class": "Event",
    "eventId": 10046,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 15/02/15.\n *\n * Export db into a json file and download to local hard drive for backup. This\n * is for the entire database.\n *\n * TODO complete it.\n *\n * AccessLevel R [owner]\n *\n */\npublic class ExpDbRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n\n        // export into a json in memory\n        //\n        // send to client for download\n\n        // once it is done, then create an event for persistence\n\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        eventData.put(\"createDate\", new java.util.Date());\n        eventData.put(\"createUserId\", user.get(\"userId\"));\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExpDbRule",
      "createDate": "2015-12-30T20:05:15.234"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.234",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:46",
    "@version": 1,
    "@class": "Event",
    "eventId": 10047,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.order;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 20/12/15.\n */\npublic class AddOrderEvRule extends AbstractOrderRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addOrder(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.order.AddOrderEvRule",
      "createDate": "2015-12-30T20:05:15.241"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.241",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:47",
    "@version": 1,
    "@class": "Event",
    "eventId": 10048,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.order;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.ext.XLogger;\nimport org.slf4j.ext.XLoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 20/12/15.\n */\npublic abstract class AbstractOrderRule extends AbstractRule implements Rule {\n    static final XLogger logger = XLoggerFactory.getXLogger(AbstractOrderRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    /**\n     * To save the order right before routing to payment gateway\n     *\n     * @param data\n     * @throws Exception\n     */\n    protected void addOrder(Map<String, Object> data) throws Exception {\n        logger.entry(data);\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex order = graph.addVertex(\"class:Order\", data);\n            user.addEdge(\"Create\", order);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.order.AbstractOrderRule",
      "createDate": "2015-12-30T20:05:15.256"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.256",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:48",
    "@version": 1,
    "@class": "Event",
    "eventId": 10049,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.order;\n\nimport com.braintreegateway.BraintreeGateway;\nimport com.braintreegateway.ClientTokenRequest;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.shipping.AbstractAddressRule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.math.BigDecimal;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 20/12/15.\n * Add an order before routing to the payment gateway with default\n * paymentStatus and fulfillmentStatus as pending. Due to the risk that\n * javascript can be updated on the browser, all the numbers will be\n * calculated again here.\n *\n *\n * AccessLevel User\n *\n */\npublic class AddOrderRule extends AbstractOrderRule implements Rule {\n\n    @Override\n    public boolean execute(Object... objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        List<Map<String, Object>> items = (List<Map<String, Object>>)data.get(\"items\");\n        BigDecimal subTotal = new BigDecimal(0.00);\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            for(Map<String, Object> item: items) {\n                Vertex product = DbService.getVertexByRid(graph, (String)item.get(\"rid\"));\n                String sku = (String)item.get(\"sku\");\n                BigDecimal qty = new BigDecimal(item.get(\"qty\").toString());\n                BigDecimal price = new BigDecimal(0.00);\n                List<Map<String, Object>> variants = product.getProperty(\"variants\");\n                for(Map<String, Object> variant : variants) {\n                    if(sku.equals(variant.get(\"sku\"))) {\n                        price = new BigDecimal(variant.get(\"price\").toString());\n                        item.put(\"price\", price);\n                        break;\n                    }\n                }\n                subTotal = subTotal.add(price.multiply(qty));\n            }\n\n            Vertex u = DbService.getVertexByRid(graph, (String) user.get(\"@rid\"));\n            Map<String, Object> shippingAddress = u.getProperty(\"shippingAddress\");\n            String province = (String)shippingAddress.get(\"province\");\n\n            // now calculate the shipping cost based on the subTotal for now\n            BigDecimal shipping = AbstractAddressRule.calculateShipping(province, subTotal);\n\n            // not calculate the tax based on shipping address.\n            Map<String, BigDecimal> taxes = AbstractAddressRule.calculateTax(province, subTotal.add(shipping));\n            BigDecimal tax = new BigDecimal(0.00);\n            for(BigDecimal b : taxes.values()) {\n                tax = tax.add(b);\n            }\n\n            BigDecimal total = subTotal.add(shipping).add(tax);\n\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.putAll(data);\n\n            // add orderId here\n            int orderId = DbService.incrementCounter(\"orderId\");\n            eventData.put(\"orderId\", orderId);\n            eventData.put(\"subTotal\", subTotal);\n            eventData.put(\"shipping\", shipping);\n            eventData.put(\"tax\", tax);\n            eventData.putAll(taxes);\n            eventData.put(\"total\", total);\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n            inputMap.put(\"result\", \"{\\\"orderId\\\":\" + orderId + \", \\\"total\\\":\"  + total + \"}\");\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.order.AddOrderRule",
      "createDate": "2015-12-30T20:05:15.278"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.278",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:49",
    "@version": 1,
    "@class": "Event",
    "eventId": 10050,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.demo;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/02/15.\n */\npublic class GetDropdownRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        inputMap.put(\"result\", \"[{\\\"value\\\":\\\"value1\\\",\\\"label\\\":\\\"label1\\\"},{\\\"value\\\":\\\"value2\\\",\\\"label\\\":\\\"label2\\\"},{\\\"value\\\":\\\"value3\\\",\\\"label\\\":\\\"label3\\\"}]\");\n        return true;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.demo.GetDropdownRule",
      "createDate": "2015-12-30T20:05:15.290"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.290",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:50",
    "@version": 1,
    "@class": "Event",
    "eventId": 10051,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport io.undertow.server.HttpServerExchange;\n\nimport java.util.*;\n\n/**\n * Created by husteve on 10/29/2014.\n *\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class UpdMenuItemRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only update menuItem for host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex menuItem = DbService.getVertexByRid(graph, rid);\n                if(menuItem == null) {\n                    error = \"MenuItem with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    int storedVersion = menuItem.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        inputMap.put(\"responseCode\", 422);\n                        error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    } else {\n                        // need to make sure that all the menuItems exist and convert to id for event replay.\n                        // and build addMenuItems and delMenuItems sets to the map.\n                        Set<String> inputMenuItems = new HashSet<String>();\n                        List<String> menuItems = (List<String>)data.get(\"out_Own\");\n                        if(menuItems != null) {\n                            for(String menuItemRid: menuItems) {\n                                Vertex vertex = DbService.getVertexByRid(graph, menuItemRid);\n                                if(vertex != null) {\n                                    inputMenuItems.add(vertex.getProperty(\"menuItemId\"));\n                                }\n                            }\n                        }\n\n                        Set<String> storedMenuItems = new HashSet<String>();\n                        for (Vertex vertex : (Iterable<Vertex>) menuItem.getVertices(Direction.OUT, \"Own\")) {\n                            storedMenuItems.add(vertex.getProperty(\"menuItemId\"));\n                        }\n                        Set<String> addMenuItems = new HashSet<String>(inputMenuItems);\n                        Set<String> delMenuItems = new HashSet<String>(storedMenuItems);\n                        addMenuItems.removeAll(storedMenuItems);\n                        delMenuItems.removeAll(inputMenuItems);\n\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        if(data.get(\"host\") != null) eventData.put(\"host\", data.get(\"host\"));\n                        if(addMenuItems.size() > 0) eventData.put(\"addMenuItems\", addMenuItems);\n                        if(delMenuItems.size() > 0) eventData.put(\"delMenuItems\", delMenuItems);\n                        eventData.put(\"menuItemId\", menuItem.getProperty(\"menuItemId\"));\n                        eventData.put(\"path\", data.get(\"path\"));\n                        eventData.put(\"tpl\", data.get(\"tpl\"));\n                        eventData.put(\"ctrl\", data.get(\"ctrl\"));\n                        eventData.put(\"left\", data.get(\"left\"));\n                        eventData.put(\"roles\", data.get(\"roles\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuItemRule",
      "createDate": "2015-12-30T20:05:15.304"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.304",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:51",
    "@version": 1,
    "@class": "Event",
    "eventId": 10052,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class DelMenuEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delMenu(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.DelMenuEvRule",
      "createDate": "2015-12-30T20:05:15.318"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.318",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:52",
    "@version": 1,
    "@class": "Event",
    "eventId": 10053,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class UpdMenuItemEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updMenuItem(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuItemEvRule",
      "createDate": "2015-12-30T20:05:15.332"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.332",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:53",
    "@version": 1,
    "@class": "Event",
    "eventId": 10054,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n *\n * AccessLevel R [owner]\n *\n */\npublic class DelMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only delete menu for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex menu = DbService.getVertexByRid(graph, rid);\n                if(menu == null) {\n                    error = \"Menu with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", menu.getProperty(\"host\"));// unique key\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.DelMenuRule",
      "createDate": "2015-12-30T20:05:15.352"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.352",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:54",
    "@version": 1,
    "@class": "Event",
    "eventId": 10055,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class AddMenuItemEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addMenuItem(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AddMenuItemEvRule",
      "createDate": "2015-12-30T20:05:15.367"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.367",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:55",
    "@version": 1,
    "@class": "Event",
    "eventId": 10056,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 29/10/14.\n *\n * Get All menus and menuItems for menu admin interface.\n *\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class GetAllMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String) user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String menus = null;\n        try {\n            menus = getAllMenu(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(menus != null) {\n            inputMap.put(\"result\", menus);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No menu can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.GetAllMenuRule",
      "createDate": "2015-12-30T20:05:15.374"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.374",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:56",
    "@version": 1,
    "@class": "Event",
    "eventId": 10057,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class AddMenuEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addMenu(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AddMenuEvRule",
      "createDate": "2015-12-30T20:05:15.390"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.390",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:57",
    "@version": 1,
    "@class": "Event",
    "eventId": 10058,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n * AccessLevel R [owner, admin, menuAdmin]\n */\npublic class AddMenuItemRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"You can only add menuItem for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                String json = getMenuItem(graph, (String) data.get(\"menuItemId\"));\n                if(json != null) {\n                    error = \"MenuItem for the label exists\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    List<String> menuItems = (List)data.remove(\"menuItems\");\n                    // convert to menuItemIds from rids\n                    if(menuItems != null && menuItems.size() > 0) {\n                        List<String> addMenuItems = new ArrayList();\n                        for(String rid: menuItems) {\n                            Vertex menuItem = DbService.getVertexByRid(graph, rid);\n                            addMenuItems.add(menuItem.getProperty(\"menuItemId\"));\n                        }\n                        data.put(\"addMenuItems\", addMenuItems);\n                    }\n                    eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                    if(host == null) {\n                        eventData.remove(\"host\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AddMenuItemRule",
      "createDate": "2015-12-30T20:05:15.400"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.400",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:58",
    "@version": 1,
    "@class": "Event",
    "eventId": 10059,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by Nicholas Azar on 3/25/2015.\n */\npublic class AddMenuComponentRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String menuComponentId = (String)data.get(\"menuComponentId\");\n        String host = (String)data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null) {\n            if (!userHost.equals(host)) {\n                error = \"You can only add page from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            }\n        } else {\n            // remove host as this is the owner\n            data.remove(\"host\");\n        }\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String json = getMenuComponentByHost(graph, host);\n            if(json != null) {\n                error = \"Menu component with the same host exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll(data);\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"error\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AddMenuComponentRule",
      "createDate": "2015-12-30T20:05:15.409"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.409",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:59",
    "@version": 1,
    "@class": "Event",
    "eventId": 10060,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by Nicholas Azar on 3/19/2015.\n */\n\npublic class GetMenuComponentRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String json = null;\n        try {\n            json = getMenuComponentByHost(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"Errrr...\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.GetMenuComponentRule",
      "createDate": "2015-12-30T20:05:15.417"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.417",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:60",
    "@version": 1,
    "@class": "Event",
    "eventId": 10061,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class DelMenuItemEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delMenuItem(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.DelMenuItemEvRule",
      "createDate": "2015-12-30T20:05:15.424"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.424",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:61",
    "@version": 1,
    "@class": "Event",
    "eventId": 10062,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 10/27/2014.\n * The menuMap.cache has three type of keys. host, label and @rid\n */\npublic abstract class AbstractMenuRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractMenuRule.class);\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected String getJsonByRid(String rid) {\n        String json = null;\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            json = (String)cache.get(\"rid\");\n        }\n        if(json == null) {\n            json = DbService.getJsonByRid(rid);\n            // put it into the blog cache.\n            if(json != null) {\n                if(cache == null) {\n                    cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                            .maximumWeightedCapacity(1000)\n                            .build();\n                    menuMap.put(\"cache\", cache);\n                }\n                cache.put(rid, json);\n            }\n        }\n        return json;\n    }\n\n    protected void delMenu(Map<String, Object> data) throws Exception {\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex menu = graph.getVertexByKey(\"Menu.host\", host);\n            if(menu != null) {\n                // cascade deleting all menuItems belong to the host only.\n                for (Vertex menuItem : graph.getVerticesOfClass(\"MenuItem\")) {\n                    if(host.equals(menuItem.getProperty(\"host\"))) {\n                        graph.removeVertex(menuItem);\n                    }\n                }\n                graph.removeVertex(menu);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        Map<String, Object> menuMap = ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(host);\n        }\n    }\n\n    protected void delMenuItem(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\",data.get(\"menuItemId\"));\n            if(menuItem != null) {\n                graph.removeVertex(menuItem);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        // no need to refresh cache as there is no reference to this menuItem anywhere.\n    }\n\n    protected String addMenu( Map<String, Object> data) throws Exception {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex menu = graph.addVertex(\"class:Menu\", \"host\", data.get(\"host\"), \"createDate\", data.get(\"createDate\"));\n            List<String> addMenuItems = (List<String>)data.get(\"addMenuItems\");\n            if(addMenuItems != null && addMenuItems.size() > 0) {\n                // find vertex for each menuItem id and create edge to it.\n                for(String menuItemId: addMenuItems) {\n                    Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                    menu.addEdge(\"Own\", menuItem);\n                }\n            }\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.get(\"createUserId\"));\n            user.addEdge(\"Create\", menu);\n            graph.commit();\n            json = menu.getRecord().toJSON(\"fetchPlan:menuItems:2\");\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            menuMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"host\"), json);\n        return json;\n    }\n\n    protected void addMenuItem(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            List<String> addMenuItems = (List<String>)data.remove(\"addMenuItems\");\n            OrientVertex menuItem = graph.addVertex(\"class:MenuItem\", data);\n            if(addMenuItems != null && addMenuItems.size() > 0) {\n                // find vertex for each menuItem id and create edge to it.\n                for(String menuItemId: addMenuItems) {\n                    Vertex childMenuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                    menuItem.addEdge(\"Own\", childMenuItem);\n                }\n            }\n            user.addEdge(\"Create\", menuItem);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected String getMenu(OrientGraph graph, String host) {\n        String json = null;\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            json = (String)cache.get(host);\n        }\n        if(json == null) {\n            Vertex menu = graph.getVertexByKey(\"Menu.host\", host);\n            if(menu != null) {\n                json = ((OrientVertex)menu).getRecord().toJSON(\"rid,fetchPlan:out_Own.in_Create:-2 out_Own:2\");\n            }\n            if(json != null) {\n                if(cache == null) {\n                    cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                            .maximumWeightedCapacity(1000)\n                            .build();\n                    menuMap.put(\"cache\", cache);\n                }\n                cache.put(host, json);\n            }\n        }\n        return json;\n    }\n\n    protected String getMenuItem(OrientGraph graph, String menuItemId) throws Exception {\n        String json = null;\n        Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n        if(menuItem != null) {\n            json = ((OrientVertex)menuItem).getRecord().toJSON();\n        }\n        return json;\n    }\n\n    protected String getAllMenu(OrientGraph graph, String host) {\n        String json = null;\n        String jsonMenu = null;\n        String jsonMenuItem = null;\n        String sqlMenu = \"select from Menu\";\n        if(host != null) {\n            sqlMenu += \" where host = ?\";\n        }\n        String sqlMenuItem = \"select from MenuItem\";\n        // assumption here is menuItems are not empty.\n        OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sqlMenuItem);\n        List<ODocument> menuItems = graph.getRawGraph().command(query).execute(host);\n        if(menuItems.size() > 0) {\n            jsonMenuItem = OJSONWriter.listToJSON(menuItems, null);\n            json = \"{\\\"menuItems\\\":\" + jsonMenuItem;\n        }\n\n        query = new OSQLSynchQuery<>(sqlMenu);\n        List<ODocument> menus = graph.getRawGraph().command(query).execute(host);\n        if(menus.size() > 0) {\n            jsonMenu = OJSONWriter.listToJSON(menus, null);\n            json += \", \\\"menus\\\":\" + jsonMenu + \"}\";\n        } else {\n            json += \"}\";\n        }\n        return json;\n    }\n\n    protected void updMenu(Map<String, Object> data) throws Exception {\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex menu = graph.getVertexByKey(\"Menu.host\", host);\n            if(menu != null) {\n                Set<String> addMenuItems = (Set)data.get(\"addMenuItems\");\n                if(addMenuItems != null) {\n                    for(String menuItemId: addMenuItems) {\n                        Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                        menu.addEdge(\"Own\", menuItem);\n                    }\n                }\n                Set<String> delMenuItems = (Set)data.get(\"delMenuItems\");\n                if(delMenuItems != null) {\n                    for(String menuItemId: delMenuItems) {\n                        Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                        for (Edge edge : (Iterable<Edge>) menu.getEdges(Direction.OUT, \"Own\")) {\n                            if(edge.getVertex(Direction.IN).equals(menuItem)) graph.removeEdge(edge);\n                        }\n                    }\n                }\n                menu.setProperty(\"updateDate\", data.get(\"updateDate\"));\n            }\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n            updateUser.addEdge(\"Update\", menu);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cache item in order to reload the menu.\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"host\"));\n        }\n    }\n\n    protected String getMenuItemMap(OrientGraph graph, String host) throws Exception {\n        String sql = \"SELECT FROM MenuItem\";\n        if(host != null) {\n            sql += \" WHERE host = ? OR host IS NULL\";\n        }\n        List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n        for (Vertex menuItem : (Iterable<Vertex>) graph.command(new OCommandSQL(sql)).execute()) {\n            Map<String, String> map = new HashMap<String, String>();\n            map.put(\"label\", (String)menuItem.getProperty(\"menuItemId\"));\n            map.put(\"value\", menuItem.getId().toString());\n            list.add(map);\n        }\n        return mapper.writeValueAsString(list);\n    }\n\n    protected void updMenuItem(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", (String)data.get(\"menuItemId\"));\n            if(menuItem != null) {\n                // handle addMenuItems and delMenuItems\n                Set<String> addMenuItems = (Set)data.get(\"addMenuItems\");\n                if(addMenuItems != null) {\n                    for(String menuItemId: addMenuItems) {\n                        Vertex vertex = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                        menuItem.addEdge(\"Own\", vertex);\n                    }\n                }\n                Set<String> delMenuItems = (Set)data.get(\"delMenuItems\");\n                if(delMenuItems != null) {\n                    for(String menuItemId: delMenuItems) {\n                        Vertex vertex = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                        for (Edge edge : (Iterable<Edge>) menuItem.getEdges(Direction.OUT, \"Own\")) {\n                            if(edge.getVertex(Direction.IN).equals(vertex)) graph.removeEdge(edge);\n                        }\n                    }\n                }\n                String path = (String)data.get(\"path\");\n                if(path != null && !path.equals(menuItem.getProperty(\"path\"))) {\n                    menuItem.setProperty(\"path\", path);\n                }\n                String tpl = (String)data.get(\"tpl\");\n                if(tpl != null && !tpl.equals(menuItem.getProperty(\"tpl\"))) {\n                    menuItem.setProperty(\"tpl\", tpl);\n                }\n                String ctrl = (String)data.get(\"ctrl\");\n                if(ctrl != null && !ctrl.equals(menuItem.getProperty(\"ctrl\"))) {\n                    menuItem.setProperty(\"ctrl\", ctrl);\n                }\n                Boolean left = (Boolean)data.get(\"left\");\n                if(left != null && !left.equals(menuItem.getProperty(\"left\"))) {\n                    menuItem.setProperty(\"left\", left);\n                }\n                List roles = (List)data.get(\"roles\");\n                if(roles != null) {\n                    menuItem.setProperty(\"roles\", roles);\n                } else {\n                    menuItem.setProperty(\"roles\", new ArrayList());\n                }\n                menuItem.setProperty(\"updateDate\", data.get(\"updateDate\"));\n            }\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n            updateUser.addEdge(\"Update\", menuItem);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n    protected String getMenuComponentByHost(OrientGraph graph, String host) throws Exception {\n        String sql = \"SELECT FROM MenuComponent\";\n        if(host != null) {\n            sql += \" WHERE host = ?\";\n        } else {\n            sql += \" WHERE host is null\"; // Host == null will be default menu component\n        }\n        List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n        for (Vertex menuComponent : (Iterable<Vertex>) graph.command(new OCommandSQL(sql)).execute(host)) {\n            Map<String, String> map = new HashMap<String, String>();\n            map.put(\"menuComponentId\", menuComponent.getId().toString());\n            map.put(\"host\", (String)menuComponent.getProperty(\"host\"));\n            map.put(\"source\", (String)menuComponent.getProperty(\"source\"));\n            list.add(map);\n        }\n        return mapper.writeValueAsString(list);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AbstractMenuRule",
      "createDate": "2015-12-30T20:05:15.440"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.440",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:62",
    "@version": 1,
    "@class": "Event",
    "eventId": 10063,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 13/11/14.\n *\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class GetMenuItemMapRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String) user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String menuItems = null;\n        try {\n            menuItems = getMenuItemMap(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(menuItems != null) {\n            inputMap.put(\"result\", menuItems);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No menuItem can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.GetMenuItemMapRule",
      "createDate": "2015-12-30T20:05:15.452"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.452",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:63",
    "@version": 1,
    "@class": "Event",
    "eventId": 10064,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class UpdMenuEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updMenu(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuEvRule",
      "createDate": "2015-12-30T20:05:15.476"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.476",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:64",
    "@version": 1,
    "@class": "Event",
    "eventId": 10065,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class DelMenuItemRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only delete menuItem for host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex menuItem = DbService.getVertexByRid(graph, rid);\n                if(menuItem == null) {\n                    error = \"MenuItem with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    // find out if other menu or menuItem owns this menuItem\n                    if(DbService.hasEdgeToClass(graph, (OrientVertex)menuItem, \"Own\") || DbService.hasEdgeToClass(graph, (OrientVertex)menuItem, \"Own\")) {\n                        error = \"MenuItem is referenced by other entities\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"menuItemId\", menuItem.getProperty(\"menuItemId\"));  // unique key\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.DelMenuItemRule",
      "createDate": "2015-12-30T20:05:15.495"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.495",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:65",
    "@version": 1,
    "@class": "Event",
    "eventId": 10066,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.*;\n\n/**\n * Created by husteve on 10/29/2014.\n *\n *\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class UpdMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only update menu for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex menu = DbService.getVertexByRid(graph, rid);\n                if(menu == null) {\n                    error = \"Menu with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    int storedVersion = menu.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        inputMap.put(\"responseCode\", 422);\n                        error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    } else {\n                        // need to make sure that all the menuItems exist and convert to id for event replay.\n                        // and build addMenuItems and delMenuItems sets to the map.\n                        Set<String> inputMenuItems = new HashSet<String>();\n                        List<String> menuItems = (List<String>)data.get(\"out_Own\");\n                        if(menuItems != null) {\n                            for(String menuItemRid: menuItems) {\n                                Vertex menuItem = DbService.getVertexByRid(graph, menuItemRid);\n                                if(menuItem != null) {\n                                    inputMenuItems.add(menuItem.getProperty(\"menuItemId\"));\n                                }\n                            }\n                        }\n\n                        Set<String> storedMenuItems = new HashSet<String>();\n                        for (Vertex menuItem : (Iterable<Vertex>) menu.getVertices(Direction.OUT, \"Own\")) {\n                            storedMenuItems.add(menuItem.getProperty(\"menuItemId\"));\n                        }\n                        Set<String> addMenuItems = new HashSet<String>(inputMenuItems);\n                        Set<String> delMenuItems = new HashSet<String>(storedMenuItems);\n                        addMenuItems.removeAll(storedMenuItems);\n                        delMenuItems.removeAll(inputMenuItems);\n\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        if(data.get(\"host\") != null) eventData.put(\"host\", data.get(\"host\"));\n                        if(addMenuItems.size() > 0) eventData.put(\"addMenuItems\", addMenuItems);\n                        if(delMenuItems.size() > 0) eventData.put(\"delMenuItems\", delMenuItems);\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuRule",
      "createDate": "2015-12-30T20:05:15.508"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.508",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:66",
    "@version": 1,
    "@class": "Event",
    "eventId": 10067,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 23/09/14.\n *\n * AccessLevel A\n */\npublic class GetMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String host = (String) data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String json = null;\n        try {\n            json = getMenu(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Menu for host \" + host + \" cannot be found.\");\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.GetMenuRule",
      "createDate": "2015-12-30T20:05:15.527"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.527",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:67",
    "@version": 1,
    "@class": "Event",
    "eventId": 10068,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n *\n * This is the REST API endpoint to add a menu for a host.\n *\n * AccessLevel R [owner]\n */\npublic class AddMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String json = getMenu(graph, (String)data.get(\"host\"));\n            if(json != null) {\n                error = \"Menu for the host exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"host\", host);\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n\n                // make sure all menuItems exist if there are any.\n                List<String> menuItems = (List<String>)data.get(\"menuItems\");\n                if(menuItems != null && menuItems.size() > 0) {\n                    List<String> addMenuItems = new ArrayList<String>();\n                    for(String menuItemRid: menuItems) {\n                        Vertex menuItem = DbService.getVertexByRid(graph, menuItemRid);\n                        if(menuItem == null) {\n                            error = \"MenuItem with @rid \" + menuItemRid + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                            break;\n                        } else {\n                            addMenuItems.add((String)menuItem.getProperty(\"menuItemId\"));\n                        }\n                    }\n                    eventData.put(\"addMenuItems\", addMenuItems);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AddMenuRule",
      "createDate": "2015-12-30T20:05:15.537"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.537",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:68",
    "@version": 1,
    "@class": "Event",
    "eventId": 10069,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 27/11/14.\n *\n * Get post for post admin page? user?\n *\n * AccessLevel R [owner, admin, ?]\n */\npublic class GetPostRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        long total = DbService.getCount(\"Post\", data);\n        if(total > 0) {\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            String posts = DbService.getData(\"Post\", data);\n            List<Map<String, Object>> jsonList = mapper.readValue(posts,\n                    new TypeReference<List<HashMap<String, Object>>>() {\n                    });\n            result.put(\"posts\", jsonList);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No post can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.GetPostRule",
      "createDate": "2015-12-30T20:05:15.552"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.552",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:69",
    "@version": 1,
    "@class": "Event",
    "eventId": 10070,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 01/12/14.\n *\n * Not sure if it is used.\n *\n */\npublic class GetPostTreeRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n\n        long total = DbService.getCount(\"Post\", data);\n        if(total > 0) {\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            String posts = DbService.getData(\"Post\", data);\n            List<Map<String, Object>> jsonList = mapper.readValue(posts,\n                    new TypeReference<List<HashMap<String, Object>>>() {\n                    });\n            result.put(\"posts\", jsonList);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No post can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.GetPostTreeRule",
      "createDate": "2015-12-30T20:05:15.564"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.564",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:70",
    "@version": 1,
    "@class": "Event",
    "eventId": 10071,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 28/11/14.\n */\npublic class UpPostEvRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upVotePost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.UpPostEvRule",
      "createDate": "2015-12-30T20:05:15.578"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.578",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:71",
    "@version": 1,
    "@class": "Event",
    "eventId": 10072,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 28/11/14.\n *\n * Down vote a post in blog, forum or news\n *\n *\n */\npublic class DownPostEvRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        downVotePost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.DownPostEvRule",
      "createDate": "2015-12-30T20:05:15.588"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.588",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:72",
    "@version": 1,
    "@class": "Event",
    "eventId": 10073,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 27/11/14.\n */\npublic abstract class AbstractPostRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractPostRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void upVotePost(Map<String, Object> data) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex) graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex post = (OrientVertex) graph.getVertexByKey(\"Post.postId\", data.get(\"postId\"));\n            if (post != null && updateUser != null) {\n                // remove DownVote edge if there is.\n                for (Edge edge : updateUser.getEdges(post, Direction.OUT, \"DownVote\")) {\n                    if (edge.getVertex(Direction.IN).equals(post)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"UpVote\", post);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void downVotePost(Map<String, Object> data) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex) graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex post = (OrientVertex) graph.getVertexByKey(\"Post.postId\", data.get(\"postId\"));\n            if (post != null && updateUser != null) {\n                // remove UpVote edge if there is.\n                for (Edge edge : updateUser.getEdges(post, Direction.OUT, \"UpVote\")) {\n                    if (edge.getVertex(Direction.IN).equals(post)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"DownVote\", post);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.AbstractPostRule",
      "createDate": "2015-12-30T20:05:15.599"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.599",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:73",
    "@version": 1,
    "@class": "Event",
    "eventId": 10074,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 28/11/14.\n *\n * Up vote post\n *\n * AccessLevel R [user]\n *\n */\npublic class UpPostRule extends AbstractPostRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(UpPostRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex post = (OrientVertex)DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(post == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has up voted the post before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(post, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(post)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have up voted the post already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"postId\", post.getProperty(\"postId\"));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.UpPostRule",
      "createDate": "2015-12-30T20:05:15.616"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.616",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:74",
    "@version": 1,
    "@class": "Event",
    "eventId": 10075,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 28/11/14.\n *\n * AccessLevel R [user]\n */\npublic class DownPostRule extends AbstractPostRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(UpPostRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex post = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(post == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has down voted the post before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(post, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(post)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have down voted the post already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"postId\", post.getProperty(\"postId\"));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.DownPostRule",
      "createDate": "2015-12-30T20:05:15.623"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.623",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:75",
    "@version": 1,
    "@class": "Event",
    "eventId": 10076,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 06/12/14.\n *\n * Should not be here. will be part of bfn\n *\n */\npublic class GetRecentPostRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        if(data.get(\"host\") == null || data.get(\"limitTo\") == null) {\n            inputMap.put(\"result\", \"Host and limitTo are required\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        } else {\n\n            // get recent post for blog\n\n            // get recent post for news\n\n            // get recent post for forum\n\n        }\n\n\n        long total = DbService.getCount(\"Post\", data);\n        if(total > 0) {\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            String posts = DbService.getData(\"Post\", data);\n            List<Map<String, Object>> jsonList = mapper.readValue(posts,\n                    new TypeReference<List<HashMap<String, Object>>>() {\n                    });\n            result.put(\"posts\", jsonList);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No post can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.GetRecentPostRule",
      "createDate": "2015-12-30T20:05:15.636"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.636",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:76",
    "@version": 1,
    "@class": "Event",
    "eventId": 10077,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.perf;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 02/02/15.\n */\npublic class HelloWorldRule extends AbstractRule implements Rule {\n    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(HelloWorldRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        logger.debug(this.toString());\n        inputMap.put(\"result\", \"{\\\"message\\\": \\\"Hello World\\\"}\");\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.perf.HelloWorldRule",
      "createDate": "2015-12-30T20:05:15.653"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.653",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:77",
    "@version": 1,
    "@class": "Event",
    "eventId": 10078,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.perf;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n */\npublic class HelloWorld_1Rule extends AbstractRule implements Rule {\n    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(HelloWorldRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        logger.debug(this.toString());\n        inputMap.put(\"result\", \"{\\\"message\\\": \\\"Hello World 1\\\"}\");\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.perf.HelloWorld_1Rule",
      "createDate": "2015-12-30T20:05:15.659"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.659",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:78",
    "@version": 1,
    "@class": "Event",
    "eventId": 10079,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.networknt.light.rule.dependency;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.page.AbstractPageRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 3/9/2015.\n */\npublic class AddDependencyEvRule extends AbstractDependencyRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addDependency(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.dependency.AddDependencyEvRule",
      "createDate": "2015-12-30T20:05:15.673"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.673",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:79",
    "@version": 1,
    "@class": "Event",
    "eventId": 10080,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.networknt.light.rule.dependency;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.page.AbstractPageRule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 3/9/2015.\n *\n * for admin or ruleAdmin, you can select dest only belongs to the host. However, if source\n * is not publishing the message, you get nothing.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class AddDependencyRule extends AbstractDependencyRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String source = (String)data.get(\"source\");\n        String dest = (String)data.get(\"desc\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String userHost = (String)user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex sourceRule = DbService.getVertexByRid(graph, source);\n            Vertex destRule = DbService.getVertexByRid(graph, dest);\n            if(sourceRule == null || destRule == null) {\n                error = \"source rule or destination rule doesn't exist\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                String sourceRuleClass = sourceRule.getProperty(\"ruleClass\");\n                String destRuleClass = destRule.getProperty(\"ruleClass\");\n                if(userHost != null) {\n                    if (!userHost.equals(host)) {\n                        error = \"You can only add dependency from host: \" + host;\n                        inputMap.put(\"responseCode\", 403);\n                    } else {\n                        // make sure dest ruleClass contains host.\n                        if(!destRuleClass.contains(host)) {\n                            error = \"Destination rule doesn't belong to the host \" + host;\n                            inputMap.put(\"responseCode\", 403);\n                        } else {\n                            // check if there is an depend edge from source to dest\n                            boolean hasEdge = false;\n                            for (Edge edge : (Iterable<Edge>) sourceRule.getEdges(Direction.OUT, \"Own\")) {\n                                if(edge.getVertex(Direction.IN) == destRule) hasEdge = true;\n                            }\n                            if(hasEdge) {\n                                error = \"There is depend edge between source rule and dest rule\";\n                                inputMap.put(\"responseCode\", 400);\n                            } else {\n                                Map eventMap = getEventMap(inputMap);\n                                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                                inputMap.put(\"eventMap\", eventMap);\n                                eventData.put(\"sourceRuleClass\", sourceRuleClass);\n                                eventData.put(\"destRuleClass\", destRuleClass);\n                                eventData.put(\"content\", data.get(\"content\"));\n                                eventData.put(\"createDate\", new java.util.Date());\n                                eventData.put(\"createUserId\", user.get(\"userId\"));\n                            }\n                        }\n                    }\n                }\n\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.dependency.AddDependencyRule",
      "createDate": "2015-12-30T20:05:15.687"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.687",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:80",
    "@version": 1,
    "@class": "Event",
    "eventId": 10081,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.networknt.light.rule.dependency;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 3/9/2015.\n */\npublic abstract class AbstractDependencyRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractDependencyRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void addDependency(Map<String, Object> data) throws Exception {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex sourceRule = graph.getVertexByKey(\"Rule.ruleClass\", data.get(\"sourceRuleClass\"));\n            Vertex destRule = graph.getVertexByKey(\"Rule.ruleClass\", data.get(\"destRuleClass\"));\n            Edge edge = sourceRule.addEdge(\"Depend\", destRule);\n            edge.setProperty(\"content\", data.get(\"content\"));\n            graph.commit();\n            //json = edge.getRecord().toJSON();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            pageMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"pageId\"), json);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.dependency.AbstractDependencyRule",
      "createDate": "2015-12-30T20:05:15.700"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.700",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:81",
    "@version": 1,
    "@class": "Event",
    "eventId": 10082,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class DelHostRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n\n        // check if the host exists or not.\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        if(hostMap.containsKey(data.get(\"id\"))) {\n            // host exists\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.put(\"id\", data.get(\"id\"));\n            eventData.put(\"updateDate\", new java.util.Date());\n            eventData.put(\"updateUserId\", user.get(\"userId\"));\n        } else {\n            error = \"Id for the host does not exist\";\n            inputMap.put(\"responseCode\", 400);\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.DelHostRule",
      "createDate": "2015-12-30T20:05:15.712"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.712",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:82",
    "@version": 1,
    "@class": "Event",
    "eventId": 10083,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class UpdHostRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        // check if the host exists or not.\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        if(hostMap.containsKey(data.get(\"id\"))) {\n            // host exists\n            // TODO update host into virtualhost.json here in the command or in event?\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.put(\"id\", data.get(\"id\"));\n            eventData.put(\"base\", data.get(\"base\"));\n            eventData.put(\"transferMinSize\", data.get(\"transferMinSize\"));\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n        } else {\n            error = \"Id for the host does not exist\";\n            inputMap.put(\"responseCode\", 400);\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.UpdHostRule",
      "createDate": "2015-12-30T20:05:15.728"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.728",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:83",
    "@version": 1,
    "@class": "Event",
    "eventId": 10084,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class AddHostEvRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addHost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.AddHostEvRule",
      "createDate": "2015-12-30T20:05:15.736"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.736",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:84",
    "@version": 1,
    "@class": "Event",
    "eventId": 10085,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.*;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n *\n * AccessLevel R [user]\n */\npublic class GetHostDropdownRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n        Set<String> keys = ServiceLocator.getInstance().getHostMap().keySet();\n        for(String key: keys) {\n            Map<String, String> map = new HashMap<String, String>();\n            map.put(\"label\", key);\n            map.put(\"value\", key);\n            list.add(map);\n        }\n        String hostDropdown = mapper.writeValueAsString(list);\n        if(hostDropdown != null) {\n            inputMap.put(\"result\", hostDropdown);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No host can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.GetHostDropdownRule",
      "createDate": "2015-12-30T20:05:15.744"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.744",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:85",
    "@version": 1,
    "@class": "Event",
    "eventId": 10086,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n *\n * This is only give you a way to update virtualhost.json in users directory, it won't\n * inject the new host into the virtualhosthandler. The server must be restarted in order\n * to load the newly added site.\n * TODO dynamically add a new host into virtualhosthandler without shutdonw server.\n */\npublic class AddHostRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n\n        // check if the host exists or not.\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        if(hostMap.containsKey(data.get(\"id\"))) {\n            // host exists\n            error = \"Id for the host exists\";\n            inputMap.put(\"responseCode\", 400);\n        } else {\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.put(\"id\", data.get(\"id\"));\n            eventData.put(\"base\", data.get(\"base\"));\n            eventData.put(\"transferMinSize\", data.get(\"transferMinSize\"));\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.AddHostRule",
      "createDate": "2015-12-30T20:05:15.753"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.753",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:86",
    "@version": 1,
    "@class": "Event",
    "eventId": 10087,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class GetAllHostRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\")) {\n            // flatten the set to array with all the elements of the host.\n            List hosts = new ArrayList<Map<String, Object>>();\n            Map hostMap = ServiceLocator.getInstance().getHostMap();\n            Set<String> keys = hostMap.keySet();\n            for(String key : keys) {\n                Map valueMap = (Map<String, Object>)hostMap.get(key);\n                valueMap.put(\"id\", key);\n                hosts.add(valueMap);\n            }\n            inputMap.put(\"result\", mapper.writeValueAsString(hosts));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Permission denied\");\n            inputMap.put(\"responseCode\", 403);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.GetAllHostRule",
      "createDate": "2015-12-30T20:05:15.763"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.763",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:87",
    "@version": 1,
    "@class": "Event",
    "eventId": 10088,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class DelHostEvRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delHost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.DelHostEvRule",
      "createDate": "2015-12-30T20:05:15.783"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.783",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:88",
    "@version": 1,
    "@class": "Event",
    "eventId": 10089,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class UpdHostEvRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updHost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.UpdHostEvRule",
      "createDate": "2015-12-30T20:05:15.789"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.789",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:89",
    "@version": 1,
    "@class": "Event",
    "eventId": 10090,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic abstract class AbstractHostRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(ServiceLocator.class);\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void addHost(Map<String, Object> data) throws Exception {\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"base\", data.get(\"base\"));\n        map.put(\"transferMinSize\", data.get(\"transferMinSize\"));\n        hostMap.put((String)data.get(\"id\"), map);\n        writeHostMap(hostMap);\n    }\n\n    protected void updHost(Map<String, Object> data) throws Exception {\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        Map<String, Object> map = (Map<String, Object>)hostMap.get(data.get(\"id\"));\n        map.put(\"base\", data.get(\"base\"));\n        map.put(\"transferMinSize\", data.get(\"transferMinSize\"));\n        writeHostMap(hostMap);\n    }\n\n    protected void delHost(Map<String, Object> data) throws Exception {\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        hostMap.remove(data.get(\"id\"));\n        writeHostMap(hostMap);\n    }\n\n    private void writeHostMap(Map<String, Object> hostMap) {\n        try {\n            mapper.enable(SerializationFeature.INDENT_OUTPUT);\n            mapper.writeValue((new File(System.getProperty(\"user.home\") + \"/virtualhost.json\")), hostMap);\n        } catch (IOException ioe) {\n            logger.error(\"Exception:\", ioe);\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.AbstractHostRule",
      "createDate": "2015-12-30T20:05:15.798"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.798",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:90",
    "@version": 1,
    "@class": "Event",
    "eventId": 10091,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.payment;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 20/12/15.\n *\n * This is the event rule to save the transaction created by the validation rule. As payment\n * is integrated with braintree, so the call to braintree is handled in the validation rule\n * to avoid side effect. This event rule will only save the created transactions in order to\n * recreate snapshot.\n *\n */\npublic class AddTransactionEvRule extends AbstractPaymentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addTransaction(data);\n        return true;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.payment.AddTransactionEvRule",
      "createDate": "2015-12-30T20:05:15.805"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.805",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:91",
    "@version": 1,
    "@class": "Event",
    "eventId": 10092,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.payment;\n\nimport com.braintreegateway.Result;\nimport com.braintreegateway.Transaction;\nimport com.braintreegateway.TransactionRequest;\nimport com.braintreegateway.ValidationError;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.shipping.AbstractAddressRule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.ext.XLogger;\nimport org.slf4j.ext.XLoggerFactory;\n\nimport java.math.BigDecimal;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 20/12/15.\n *\n * This rule get payment method nonce from braintree dropin and create a transaction from it.\n * It is a way to charge customer once you have authorization from braintree payment gateway.\n *\n * AccessLevel User\n *\n */\npublic class AddTransactionRule extends AbstractPaymentRule implements Rule {\n    static final XLogger logger = XLoggerFactory.getXLogger(AddTransactionRule.class);\n\n    @Override\n    public boolean execute(Object... objects) throws Exception {\n        logger.entry(objects[0]);\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)data.get(\"host\");\n        Integer orderId = (Integer)data.get(\"orderId\");\n        Map<String, Object> tran = (Map<String, Object>)data.get(\"transaction\");\n        String nonce = (String)tran.get(\"nonce\");\n        BigDecimal total = null;\n        String error = null;\n\n        // At this moment, the order is saved already in payment state as pending, load the order.\n        // with orderId passed in and return it to the client with updated\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex order = (OrientVertex)graph.getVertexByKey(\"Order.orderId\", orderId);\n            if(order != null) {\n                total = order.getProperty(\"total\");\n                TransactionRequest request = new TransactionRequest()\n                        .amount(total)\n                        .paymentMethodNonce(nonce)\n                        .options()\n                        .submitForSettlement(true)\n                        .done();\n                Result<Transaction> result = gatewayMap.get(host).transaction().sale(request);\n                if (result.isSuccess()) {\n                    Transaction transaction = result.getTarget();\n                    System.out.println(\"Success!: \" + transaction.getId());\n                    // prepare for update order payment status\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll(data);\n                    eventData.put(\"transactionId\", transaction.getId());\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                    // return the order to ui in order to render the summary page.\n                    String json = order.getRecord().toJSON();\n                    inputMap.put(\"result\", json);\n                } else if (result.getTransaction() != null) {\n                    Transaction transaction = result.getTransaction();\n                    error = \"Error processing transaction. Status: \" + transaction.getStatus() +\n                            \" Code: \" + transaction.getProcessorResponseCode() +\n                            \" Text: \" + transaction.getProcessorResponseText();\n                    inputMap.put(\"responseCode\", 400);\n                    System.out.println(\"Error processing transaction:\");\n                    System.out.println(\"  Status: \" + transaction.getStatus());\n                    System.out.println(\"  Code: \" + transaction.getProcessorResponseCode());\n                    System.out.println(\"  Text: \" + transaction.getProcessorResponseText());\n                } else {\n                    inputMap.put(\"responseCode\", 400);\n                    for (ValidationError validationError : result.getErrors().getAllDeepValidationErrors()) {\n                        error = error + \"Attribute: \" + validationError.getAttribute() +\n                                \" Code: \" + validationError.getCode() +\n                                \" Message: \" + validationError.getMessage() + \"\\n\";\n                        System.out.println(\"Attribute: \" + validationError.getAttribute());\n                        System.out.println(\"  Code: \" + validationError.getCode());\n                        System.out.println(\"  Message: \" + validationError.getMessage());\n                    }\n                }\n\n                // TODO send an email with order info to the customer here. Assuming payment status is paid here.\n\n            } else {\n                inputMap.put(\"responseCode\", 400);\n                error = \"Could not find order with orderId: \" + orderId;\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.payment.AddTransactionRule",
      "createDate": "2015-12-30T20:05:15.811"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.811",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:92",
    "@version": 1,
    "@class": "Event",
    "eventId": 10093,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.payment;\n\nimport com.braintreegateway.BraintreeGateway;\nimport com.braintreegateway.ClientTokenRequest;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 19/12/15.\n * Get client token from braintree payment in order to initialize the dropin form\n *\n * AccessLevel user\n *\n */\npublic class GetClientTokenRule extends AbstractPaymentRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n\n        String error = null;\n        // using host to get the production or sandbox configuration for braintree payment.\n        String host = (String)data.get(\"host\");\n\n        if(host == null) {\n            error = \"Host is missing from command data\";\n            inputMap.put(\"responseCode\", 400);\n        } else {\n            BraintreeGateway gateway = gatewayMap.get(host);\n            ClientTokenRequest clientTokenRequest = new ClientTokenRequest();\n            String clientToken = gateway.clientToken().generate(clientTokenRequest);\n            if(clientToken == null) {\n                error = \"Failed to generate client token\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                inputMap.put(\"result\", \"{\\\"clientToken\\\": \\\"\" + clientToken + \"\\\"}\");\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.payment.GetClientTokenRule",
      "createDate": "2015-12-30T20:05:15.828"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.828",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:93",
    "@version": 1,
    "@class": "Event",
    "eventId": 10094,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.payment;\n\nimport com.braintreegateway.BraintreeGateway;\nimport com.braintreegateway.Environment;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.ext.XLogger;\nimport org.slf4j.ext.XLoggerFactory;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 19/12/15.\n */\npublic abstract class AbstractPaymentRule extends AbstractRule implements Rule {\n    static final XLogger logger = XLoggerFactory.getXLogger(AbstractPaymentRule.class);\n    // This is to cache all the getways for each host in memory so that we don't need to create new gateway\n    // for each request.\n    static Map<String, BraintreeGateway> gatewayMap = new HashMap<String, BraintreeGateway>();\n\n    static {\n        // load braintree config for each host and initialize gateways.\n        Map<String, Object> config = ServiceLocator.getInstance().getConfig(\"braintree\");\n        for (Map.Entry<String, Object> entry : config.entrySet()) {\n            String host = entry.getKey();\n            Map<String, Object> braintreeConfig = (Map<String, Object>)entry.getValue();\n\n            BraintreeGateway gateway = new BraintreeGateway((Boolean)braintreeConfig.get(\"sandbox\") == true? Environment.SANDBOX : Environment.PRODUCTION,\n                    (String)braintreeConfig.get(\"merchant_id\"), (String)braintreeConfig.get(\"public_key\"), (String)braintreeConfig.get(\"private_key\"));\n            gatewayMap.put(host, gateway);\n        }\n    }\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    /**\n     * To save the customer transaction into database.\n     *\n     * @param data\n     * @throws Exception\n     */\n    protected void addTransaction(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            Vertex order = graph.getVertexByKey(\"Order.orderId\", data.get(\"orderId\"));\n            if(order != null) {\n                order.setProperty(\"paymentStatus\", 1);  // update payment status to paid.\n                Map<String, Object> transaction = (Map<String, Object>)data.get(\"transaction\");\n                order.setProperty(\"nonce\", transaction.get(\"nonce\"));\n                //order.setProperty\n            }\n            user.addEdge(\"Update\", order);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.payment.AbstractPaymentRule",
      "createDate": "2015-12-30T20:05:15.835"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.835",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:94",
    "@version": 1,
    "@class": "Event",
    "eventId": 10095,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n *\n * Get all the forums belong to a host for admin interface.\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n */\npublic class GetForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.GetForumRule",
      "createDate": "2015-12-30T20:05:15.851"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.851",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:95",
    "@version": 1,
    "@class": "Event",
    "eventId": 10096,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n *\n * Update forum\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n */\npublic class UpdForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpdForumRule",
      "createDate": "2015-12-30T20:05:15.861"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.861",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:96",
    "@version": 1,
    "@class": "Event",
    "eventId": 10097,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n *\n * Delete a forum node in a forum tree on a host\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n */\npublic class DelForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DelForumRule",
      "createDate": "2015-12-30T20:05:15.880"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.880",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:97",
    "@version": 1,
    "@class": "Event",
    "eventId": 10098,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n *\n * Down vote a forum\n *\n * AccessLevel R [user]\n *\n */\npublic class DownForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DownForumRule",
      "createDate": "2015-12-30T20:05:15.886"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.886",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:98",
    "@version": 1,
    "@class": "Event",
    "eventId": 10099,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 21/03/15.\n */\npublic class UpdPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPostEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpdPostEvRule",
      "createDate": "2015-12-30T20:05:15.900"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.900",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:99",
    "@version": 1,
    "@class": "Event",
    "eventId": 10100,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n *\n * Add a new forum for a host in the forum tree\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n */\npublic class AddForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.AddForumRule",
      "createDate": "2015-12-30T20:05:15.912"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.912",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:100",
    "@version": 1,
    "@class": "Event",
    "eventId": 10101,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 21/03/15.\n *\n * user can only delete his or her posts before anyone makes comment. However,\n * owner, admin and forumAdmin can delete post and all the comments relate to the\n * post all together. This should not be done often only at extreme situation.\n *\n * AccessLevel R [owner, admin, forumAdmin, user]\n *\n * to make is simple for now.\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n * Due to the implementation of orientdb delete graph scheduled for 2.2\n * https://github.com/orientechnologies/orientdb/issues/1108\n * We will be asking all the comments be deleted before deleting the post for now.\n *\n * TODO fix it after orientdb 2.2\n *\n */\npublic class DelPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPost(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DelPostRule",
      "createDate": "2015-12-30T20:05:15.919"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.919",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:101",
    "@version": 1,
    "@class": "Event",
    "eventId": 10102,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class UpForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpForumEvRule",
      "createDate": "2015-12-30T20:05:15.929"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.929",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:102",
    "@version": 1,
    "@class": "Event",
    "eventId": 10103,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 01/12/14.\n *\n * Get all the posts belong to the forum and all sub forums\n *\n * AccessLevel A\n *\n */\npublic class GetForumPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnPost(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.GetForumPostRule",
      "createDate": "2015-12-30T20:05:15.944"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.944",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:103",
    "@version": 1,
    "@class": "Event",
    "eventId": 10104,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/11/14.\n *\n * Get forum dropdown list in order to setup parent and children relationship\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n */\npublic class GetForumDropdownRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchDropdown(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.GetForumDropdownRule",
      "createDate": "2015-12-30T20:05:15.951"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.951",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:104",
    "@version": 1,
    "@class": "Event",
    "eventId": 10105,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class UpdForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpdForumEvRule",
      "createDate": "2015-12-30T20:05:15.963"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.963",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:105",
    "@version": 1,
    "@class": "Event",
    "eventId": 10106,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 21/03/15.\n */\npublic class DelPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPostEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DelPostEvRule",
      "createDate": "2015-12-30T20:05:15.981"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.981",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:106",
    "@version": 1,
    "@class": "Event",
    "eventId": 10107,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 02/12/14.\n */\npublic class AddPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPostEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.AddPostEvRule",
      "createDate": "2015-12-30T20:05:15.988"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.988",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:107",
    "@version": 1,
    "@class": "Event",
    "eventId": 10108,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class AddForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.AddForumEvRule",
      "createDate": "2015-12-30T20:05:15.994"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:15.994",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:108",
    "@version": 1,
    "@class": "Event",
    "eventId": 10109,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 02/12/14.\n *\n * Post a new topic in a forum\n *\n * AccessLevel R [user]\n *\n */\npublic class AddPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPost(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.AddPostRule",
      "createDate": "2015-12-30T20:05:16.001"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.001",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:109",
    "@version": 1,
    "@class": "Event",
    "eventId": 10110,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n *\n * Up vote forum by users\n *\n * AccessLevel R [user]\n *\n */\npublic class UpForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpForumRule",
      "createDate": "2015-12-30T20:05:16.012"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.012",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:110",
    "@version": 1,
    "@class": "Event",
    "eventId": 10111,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/11/14.\n *\n * Get tree structure of forums to display on forum home page.\n *\n * AccessLevel A\n *\n */\npublic class GetForumTreeRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchTree(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.GetForumTreeRule",
      "createDate": "2015-12-30T20:05:16.021"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.021",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:111",
    "@version": 1,
    "@class": "Event",
    "eventId": 10112,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class DownForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DownForumEvRule",
      "createDate": "2015-12-30T20:05:16.029"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.029",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:112",
    "@version": 1,
    "@class": "Event",
    "eventId": 10113,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 3/6/2015.\n * Update post in a forum\n *\n * AccessLevel R [owner, admin, forumAdmin, user]\n *\n * User can only update his or her post and there will be an indicate that\n * the post is updated. Maybe just the update date?\n *\n * for now to make it simple, user cannot update the post.\n *\n */\npublic class UpdPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPost(\"forum\", objects);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpdPostRule",
      "createDate": "2015-12-30T20:05:16.036"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.036",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:113",
    "@version": 1,
    "@class": "Event",
    "eventId": 10114,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class DelForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DelForumEvRule",
      "createDate": "2015-12-30T20:05:16.053"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.053",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:114",
    "@version": 1,
    "@class": "Event",
    "eventId": 10115,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.shipping;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport org.slf4j.ext.XLogger;\nimport org.slf4j.ext.XLoggerFactory;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by steve on 13/12/15.\n */\npublic abstract class AbstractAddressRule extends AbstractRule implements Rule {\n    static final XLogger logger = XLoggerFactory.getXLogger(AbstractAddressRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void updAddress(Map<String, Object> data) throws Exception {\n        logger.entry(data);\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex user =  graph.getVertexByKey(\"User.userId\", data.get(\"userId\"));\n            if(user != null) {\n                Map<String, Object> shippingAddress = (Map<String, Object>)data.get(\"shippingAddress\");\n                if(shippingAddress != null) {\n                    user.setProperty(\"shippingAddress\", shippingAddress);\n                }\n                Map<String, Object> paymentAddress = (Map<String, Object>)data.get(\"paymentAddress\");\n                if(paymentAddress != null) {\n                    user.setProperty(\"paymentAddress\", paymentAddress);\n                }\n                user.setProperty(\"updateDate\", data.get(\"updateDate\"));\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public static Map<String, BigDecimal> calculateTax(String province, BigDecimal subTotal) {\n        Map<String, BigDecimal> taxes = new HashMap<String, BigDecimal>();\n        BigDecimal gst = subTotal.multiply(new BigDecimal(0.05));\n        gst = gst.setScale(2, RoundingMode.HALF_UP);\n        switch(province) {\n            case \"AB\":\n                taxes.put(\"GST\", gst);\n                break;\n            case \"BC\":\n                taxes.put(\"GST\", gst);\n                BigDecimal bc = subTotal.multiply(new BigDecimal(0.07));\n                bc = bc.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"PST\", bc);\n                break;\n            case \"MB\":\n                taxes.put(\"GST\", gst);\n                BigDecimal mb = subTotal.multiply(new BigDecimal(0.08));\n                mb = mb.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"PST\", mb);\n                break;\n            case \"NB\":\n                BigDecimal nb = subTotal.multiply(new BigDecimal(0.13));\n                nb = nb.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"HST\", nb);\n                break;\n            case \"NF\":\n                BigDecimal nf = subTotal.multiply(new BigDecimal(0.13));\n                nf = nf.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"HST\", nf);\n                break;\n            case \"NS\":\n                BigDecimal ns = subTotal.multiply(new BigDecimal(0.15));\n                ns = ns.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"HST\", ns);\n                break;\n            case \"NT\":\n                taxes.put(\"GST\", gst);\n                break;\n            case \"NU\":\n                taxes.put(\"GST\", gst);\n                break;\n            case \"ON\":\n                BigDecimal on = subTotal.multiply(new BigDecimal(0.13));\n                on = on.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"HST\", on);\n                break;\n            case \"PE\":\n                BigDecimal pe = subTotal.multiply(new BigDecimal(0.14));\n                pe = pe.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"HST\", pe);\n                break;\n            case \"QC\":\n                taxes.put(\"GST\", gst);\n                BigDecimal qc = subTotal.multiply(new BigDecimal(0.09975));\n                qc = qc.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"QST\", qc);\n                break;\n            case \"SK\":\n                taxes.put(\"GST\", gst);\n                BigDecimal sk = subTotal.multiply(new BigDecimal(0.05));\n                sk = sk.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"PST\", sk);\n                break;\n            case \"YK\":\n                taxes.put(\"GST\", gst);\n                break;\n            default:\n                logger.error(\"Unknown Province \" + province);\n                break;\n        }\n        return taxes;\n    }\n\n    public static BigDecimal calculateShipping(String province, BigDecimal subTotal) {\n        BigDecimal b = subTotal.multiply(new BigDecimal(0.05));\n        b = b.setScale(2, RoundingMode.HALF_UP);\n        return b.add(new BigDecimal(30.00));\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.shipping.AbstractAddressRule",
      "createDate": "2015-12-30T20:05:16.063"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.063",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:115",
    "@version": 1,
    "@class": "Event",
    "eventId": 10116,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.shipping;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport org.slf4j.ext.XLogger;\nimport org.slf4j.ext.XLoggerFactory;\n\nimport java.math.BigDecimal;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by steve on 13/12/15.\n * This rule will validate the shipping address against the address schema and calling event\n * rule to update user profile with the updated shippingAddress. It returns the calculated\n * shipping cost and tax according to the input.\n *\n * AccessLevel user\n *\n */\npublic class UpdAddressRule extends AbstractAddressRule implements Rule {\n    static final XLogger logger = XLoggerFactory.getXLogger(UpdAddressRule.class);\n\n\n    @Override\n    public boolean execute(Object... objects) throws Exception {\n        logger.entry(objects);\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> resultMap = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)user.get(\"@rid\");\n        // expect a list of products in order to calculate shipping cost, shipping address etc.\n        // the calculation will be done on the server side in order to avoid hack in the js.\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex updateUser = DbService.getVertexByRid(graph, rid);\n            if(updateUser != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll(data);\n                eventData.put(\"userId\", updateUser.getProperty(\"userId\"));\n                eventData.put(\"updateDate\", new java.util.Date());\n\n                // now return the shipping cost and tax according to the address.\n                BigDecimal cartTotal = new BigDecimal(data.get(\"cartTotal\").toString());\n                resultMap = new HashMap<String, Object>();\n                Map<String, Object> shippingAddress = (Map<String, Object>)data.get(\"shippingAddress\");\n                BigDecimal shipping = AbstractAddressRule.calculateShipping((String) shippingAddress.get(\"province\"), cartTotal);\n                resultMap.put(\"shipping\", shipping);\n                // calculate taxes\n                Map<String, BigDecimal> taxes = calculateTax((String)shippingAddress.get(\"province\"), cartTotal.add(shipping));\n                resultMap.put(\"taxes\", taxes);\n            } else {\n                error = \"User with rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            inputMap.put(\"result\", mapper.writeValueAsString(resultMap));\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.shipping.UpdAddressRule",
      "createDate": "2015-12-30T20:05:16.085"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.085",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:116",
    "@version": 1,
    "@class": "Event",
    "eventId": 10117,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.shipping;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 13/12/15.\n *\n * An event rule to update user profile with new shipping address.\n *\n */\npublic class UpdAddressEvRule extends AbstractAddressRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updAddress(data);\n        return true;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.shipping.UpdAddressEvRule",
      "createDate": "2015-12-30T20:05:16.091"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.091",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:117",
    "@version": 1,
    "@class": "Event",
    "eventId": 10118,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.shipping;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport org.slf4j.ext.XLogger;\nimport org.slf4j.ext.XLoggerFactory;\n\nimport java.math.BigDecimal;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by steve on 13/12/15.\n *\n * This rule is to confirm that the shipping address in profile is correct and nothing needs\n * to be updated. This is a readonly rule and shipping cost and tax will be calculated and returned.\n *\n * AccessLevel user\n *\n */\npublic class CnfAddressRule extends AbstractAddressRule implements Rule {\n    static final XLogger logger = XLoggerFactory.getXLogger(UpdAddressRule.class);\n\n\n    @Override\n    public boolean execute(Object... objects) throws Exception {\n        logger.entry(objects);\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> resultMap = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)user.get(\"@rid\");\n        // expect a list of products in order to calculate shipping cost, shipping address etc.\n        // the calculation will be done on the server side in order to avoid hack in the js.\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex updateUser = DbService.getVertexByRid(graph, rid);\n            if(updateUser != null) {\n                // now return the shipping cost and tax according to the address.\n                BigDecimal cartTotal = new BigDecimal(data.get(\"cartTotal\").toString());\n                resultMap = new HashMap<String, Object>();\n                Map<String, Object> shippingAddress = (Map<String, Object>)data.get(\"shippingAddress\");\n                BigDecimal shipping = AbstractAddressRule.calculateShipping((String) shippingAddress.get(\"province\"), cartTotal);\n                resultMap.put(\"shipping\", shipping);\n                // calculate taxes\n                Map<String, BigDecimal> taxes = calculateTax((String)shippingAddress.get(\"province\"), cartTotal.add(shipping));\n                resultMap.put(\"taxes\", taxes);\n            } else {\n                error = \"User with rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            inputMap.put(\"result\", mapper.writeValueAsString(resultMap));\n            return true;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.shipping.CnfAddressRule",
      "createDate": "2015-12-30T20:05:16.098"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.098",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:118",
    "@version": 1,
    "@class": "Event",
    "eventId": 10119,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n */\npublic class ImpPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        eventData.put(\"host\", host);\n        eventData.put(\"pageId\", data.get(\"pageId\"));\n        eventData.put(\"content\", data.get(\"content\"));\n        eventData.put(\"createDate\", new java.util.Date());\n        eventData.put(\"createUserId\", user.get(\"userId\"));\n        if(host != null) {\n            if (!host.equals(data.get(\"host\"))) {\n                error = \"User can only import page from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            }\n        } else {\n            eventData.remove(\"host\");\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.ImpPageRule",
      "createDate": "2015-12-30T20:05:16.104"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.104",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:119",
    "@version": 1,
    "@class": "Event",
    "eventId": 10120,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by husteve on 10/24/2014.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n *\n */\npublic class GetAllPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String pages = null;\n        try {\n            pages = getAllPage(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(pages != null) {\n            inputMap.put(\"result\", pages);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No page can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.GetAllPageRule",
      "createDate": "2015-12-30T20:05:16.111"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.111",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:120",
    "@version": 1,
    "@class": "Event",
    "eventId": 10121,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.hazelcast.core.ITopic;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class AddPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addPage(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.AddPageEvRule",
      "createDate": "2015-12-30T20:05:16.125"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.125",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:121",
    "@version": 1,
    "@class": "Event",
    "eventId": 10122,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/02/15.\n *\n * This is the rule that called by page:load plugin in maven-plugin repo.\n * It get all the page and return a map from id to content.\n *\n * accessLevel is owner by default.\n *\n */\npublic class GetPageMapRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String pages = null;\n        try {\n            pages = getPageMap(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(pages != null) {\n            inputMap.put(\"result\", pages);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No page can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.GetPageMapRule",
      "createDate": "2015-12-30T20:05:16.136"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.136",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:122",
    "@version": 1,
    "@class": "Event",
    "eventId": 10123,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.model.CacheObject;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport io.undertow.server.HttpServerExchange;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n *\n */\npublic class AddPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String pageId = (String)data.get(\"pageId\");\n        String host = (String)data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null) {\n            if (!userHost.equals(host)) {\n                error = \"You can only add page from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            }\n        } else {\n            // remove host as this is the owner\n            data.remove(\"host\");\n        }\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            CacheObject co = getPageById(graph, pageId);\n            if(co != null) {\n                error = \"Page with the same id exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll(data);\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.AddPageRule",
      "createDate": "2015-12-30T20:05:16.153"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.153",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:123",
    "@version": 1,
    "@class": "Event",
    "eventId": 10124,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.hazelcast.core.ITopic;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class ImpPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute(Object... objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        //ITopic topic = ServiceLocator.getInstance().getHzInstance().getTopic(\"page\");\n        //topic.publish(eventMap);\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        impPage(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.ImpPageEvRule",
      "createDate": "2015-12-30T20:05:16.166"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.166",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:124",
    "@version": 1,
    "@class": "Event",
    "eventId": 10125,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport io.undertow.server.HttpServerExchange;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n *\n */\npublic class DelPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            error = \"You can only delete page from host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex page = DbService.getVertexByRid(graph, rid);\n                if(page != null) {\n                    int inputVersion = (int)data.get(\"@version\");\n                    int storedVersion = page.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        inputMap.put(\"responseCode\", 400);\n                        error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"pageId\", page.getProperty(\"pageId\"));\n                    }\n                } else {\n                    error = \"Page with @rid \" + rid + \" doesn't exist\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.DelPageRule",
      "createDate": "2015-12-30T20:05:16.178"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.178",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:125",
    "@version": 1,
    "@class": "Event",
    "eventId": 10126,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n */\npublic class UpdPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            error = \"You can only update page from host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            if(rid != null) {\n                OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                Vertex page = null;\n                try {\n                    page = DbService.getVertexByRid(graph, rid);\n                    if(page != null) {\n                        int inputVersion = (int)data.get(\"@version\");\n                        int storedVersion = page.getProperty(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"pageId\", data.get(\"pageId\"));\n                            eventData.put(\"content\", data.get(\"content\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    } else {\n                        error = \"Page with @rid \" + rid + \" cannot be found.\";\n                        inputMap.put(\"responseCode\", 404);\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Exception:\", e);\n                    throw e;\n                } finally {\n                    graph.shutdown();\n                }\n            } else {\n                error = \"@rid is required\";\n                inputMap.put(\"responseCode\", 400);\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.UpdPageRule",
      "createDate": "2015-12-30T20:05:16.203"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.203",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:126",
    "@version": 1,
    "@class": "Event",
    "eventId": 10127,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.hazelcast.core.ITopic;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class UpdPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        //ITopic topic = ServiceLocator.getInstance().getHzInstance().getTopic(\"page\");\n        //topic.publish(eventMap);\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPage(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.UpdPageEvRule",
      "createDate": "2015-12-30T20:05:16.211"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.211",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:127",
    "@version": 1,
    "@class": "Event",
    "eventId": 10128,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.hazelcast.core.ITopic;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class DelPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        //ITopic topic = ServiceLocator.getInstance().getHzInstance().getTopic(\"page\");\n        //topic.publish(eventMap);\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        String pageId = (String)data.get(\"pageId\");\n        delPage(pageId);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.DelPageEvRule",
      "createDate": "2015-12-30T20:05:16.224"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.224",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:128",
    "@version": 1,
    "@class": "Event",
    "eventId": 10129,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.model.CacheObject;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport io.undertow.server.HttpServerExchange;\nimport io.undertow.util.Headers;\nimport io.undertow.util.HttpString;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 10/24/2014.\n *\n * AccessLevel A\n *\n */\npublic class GetPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n        String pageId = (String)data.get(\"pageId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        CacheObject co = null;\n        try {\n            co = getPageById(graph, pageId);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(co != null) {\n            if(!matchEtag(inputMap, co)) {\n                inputMap.put(\"result\", co.getData());\n            }\n            return true;\n        } else {\n            inputMap.put(\"responseCode\", 404);\n            inputMap.put(\"result\", \"Page with id \" + pageId + \" cannot be found.\");\n            return false;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.GetPageRule",
      "createDate": "2015-12-30T20:05:16.236"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.236",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:129",
    "@version": 1,
    "@class": "Event",
    "eventId": 10130,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.hazelcast.core.ITopic;\nimport com.hazelcast.core.Message;\nimport com.hazelcast.core.MessageListener;\nimport com.hazelcast.util.executor.StripedRunnable;\nimport com.networknt.light.model.CacheObject;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport com.orientechnologies.orient.core.Orient;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic abstract class AbstractPageRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractPageRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    /*\n    static {\n        System.out.println(\"AbstractPageRule is called\");\n        ITopic<Map<String, Object>> page = ServiceLocator.getInstance().getHzInstance().getTopic( \"page\" );\n        page.addMessageListener(new PageMessageListenerImpl());\n    }\n\n    // As all the operations are in memory, use the same thread from the publisher.\n    private static class PageMessageListenerImpl implements MessageListener<Map<String, Object>> {\n        @Override\n        public void onMessage(final Message<Map<String, Object>> message) {\n            Map<String, Object> eventMap = message.getMessageObject();\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // simply remove the page from cache in order to reload in the next getPage rule.\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"pageId\"));\n            }\n        }\n    }\n    */\n\n    protected CacheObject getPageById(OrientGraph graph, String pageId) {\n        CacheObject co = null;\n        Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            pageMap.put(\"cache\", cache);\n        } else {\n            co = (CacheObject)cache.get(pageId);\n        }\n        if(co == null) {\n            OrientVertex page = (OrientVertex)graph.getVertexByKey(\"Page.pageId\", pageId);\n            if(page != null) {\n                String json = page.getRecord().toJSON();\n                co = new CacheObject(page.getProperty(\"@version\").toString(), json);\n                cache.put(pageId, co);\n            }\n        }\n        return co;\n    }\n\n    protected void addPage(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex page = graph.addVertex(\"class:Page\", data);\n            createUser.addEdge(\"Create\", page);\n            graph.commit();\n            String json = page.getRecord().toJSON();\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache == null) {\n                cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                        .maximumWeightedCapacity(1000)\n                        .build();\n                pageMap.put(\"cache\", cache);\n            }\n            cache.put(data.get(\"pageId\"), new CacheObject(page.getProperty(\"@version\").toString(), json));\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void delPage(String pageId) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex page = graph.getVertexByKey(\"Page.pageId\", pageId);\n            if(page != null) {\n                graph.removeVertex(page);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(pageId);\n        }\n    }\n\n    protected void updPage(Map<String, Object> data) {\n        String pageId = (String)data.get(\"pageId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex page = (OrientVertex)graph.getVertexByKey(\"Page.pageId\", pageId);\n            if(page != null) {\n                page.setProperty(\"content\", data.get(\"content\"));\n                page.setProperty(\"updateDate\", data.get(\"updateDate\"));\n                Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n                updateUser.addEdge(\"Update\", page);\n            }\n            graph.commit();\n            String json = page.getRecord().toJSON();\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache == null) {\n                cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                        .maximumWeightedCapacity(1000)\n                        .build();\n                pageMap.put(\"cache\", cache);\n            }\n            CacheObject co = (CacheObject)cache.get(pageId);\n            if(co != null) {\n                co.setEtag(page.getProperty(\"@version\").toString());\n                co.setData(json);\n            } else {\n                cache.put(pageId, new CacheObject(page.getProperty(\"@version\").toString(), json));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void impPage(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String pageId = (String)data.get(\"pageId\");\n        try {\n            graph.begin();\n            OrientVertex page = (OrientVertex)graph.getVertexByKey(\"Page.pageId\", pageId);\n            if(page != null) {\n                graph.removeVertex(page);\n            }\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            page = graph.addVertex(\"class:Page\", data);\n            createUser.addEdge(\"Create\", page);\n            graph.commit();\n            String json = page.getRecord().toJSON();\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache == null) {\n                cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                        .maximumWeightedCapacity(1000)\n                        .build();\n                pageMap.put(\"cache\", cache);\n            }\n            CacheObject co = (CacheObject)cache.get(pageId);\n            if(co != null) {\n                co.setEtag(page.getProperty(\"@version\").toString());\n                co.setData(json);\n            } else {\n                cache.put(pageId, new CacheObject(page.getProperty(\"@version\").toString(), json));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected String getAllPage(OrientGraph graph, String host) {\n        String json = null;\n        String sql = \"SELECT FROM Page\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n        List<ODocument> pages = graph.getRawGraph().command(query).execute();\n        json = OJSONWriter.listToJSON(pages, null);\n        return json;\n    }\n\n    protected String getPageMap(OrientGraph graph, String host) throws Exception {\n        String sql = \"SELECT FROM Page\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        Map<String, String> map = new HashMap<String, String>();\n        for (Vertex page : (Iterable<Vertex>) graph.command(new OCommandSQL(sql)).execute()) {\n            map.put(page.getProperty(\"pageId\"), page.getProperty(\"content\"));\n        }\n        return mapper.writeValueAsString(map);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.AbstractPageRule",
      "createDate": "2015-12-30T20:05:16.248"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.248",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:130",
    "@version": 1,
    "@class": "Event",
    "eventId": 10131,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n */\npublic class AddCommentEvRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addComment(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.AddCommentEvRule",
      "createDate": "2015-12-30T20:05:16.265"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.265",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:131",
    "@version": 1,
    "@class": "Event",
    "eventId": 10132,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/03/15.\n */\npublic class DelCommentEvRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delComment(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.DelCommentEvRule",
      "createDate": "2015-12-30T20:05:16.273"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.273",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:132",
    "@version": 1,
    "@class": "Event",
    "eventId": 10133,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/03/15.\n */\npublic class UpdCommentEvRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updComment(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.UpdCommentEvRule",
      "createDate": "2015-12-30T20:05:16.296"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.296",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:133",
    "@version": 1,
    "@class": "Event",
    "eventId": 10134,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.comment;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n *\n * Not sure if this is used or not. Do we have a comment admin page to list all of them?\n *\n */\npublic class GetCommentRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> criteria = new HashMap<String, Object>();\n        criteria.put(\"@class\", \"Comment\");\n        long total = getTotal(data, criteria);\n        if(total > 0) {\n            String json = getComment(data, criteria);\n            List<Map<String, Object>> comments\n                    = mapper.readValue(json, new TypeReference<List<HashMap<String, Object>>>() {});\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"comments\", comments);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No user can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.GetCommentRule",
      "createDate": "2015-12-30T20:05:16.315"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.315",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:134",
    "@version": 1,
    "@class": "Event",
    "eventId": 10135,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/03/15.\n *\n * only the comment content can be updated\n *\n * Access Level [owner, admin, forumAdmin, newsAdmin, blogAdmin, user]\n *\n * now only owner and admin can update\n *\n */\npublic class UpdCommentRule extends AbstractCommentRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(UpdCommentRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)data.get(\"host\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            // check if the comment exists\n            OrientVertex comment = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            if(comment == null ) {\n                error = \"Comment @rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"commentId\", comment.getProperty(\"commentId\"));\n                eventData.put(\"content\", data.get(\"content\"));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.UpdCommentRule",
      "createDate": "2015-12-30T20:05:16.326"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.326",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:135",
    "@version": 1,
    "@class": "Event",
    "eventId": 10136,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n *\n * AccessLevel A\n *\n * everyone can have read only access to all comments\n *\n */\npublic class GetCommentTreeRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String comments = getCommentTree(data);\n        if(comments != null) {\n            inputMap.put(\"result\", comments);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No comment can be found\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.GetCommentTreeRule",
      "createDate": "2015-12-30T20:05:16.336"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.336",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:136",
    "@version": 1,
    "@class": "Event",
    "eventId": 10137,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/03/15.\n *\n * AccessLevel R [owner, admin, forumAdmin, newsAdmin, blogAdmin, user]\n *\n * user can only delete his/her own comment if there is no other comment link to it.\n *\n * forumAdmin can only delete comments from forum\n * newsAdmin can only delete comments from news\n * blogAdmin can only delete comments from blog\n *\n * for now, only owner and admin will be able to delete comment and if there are\n * comments related, it cannot be deleted.\n *\n * now AccessLevel R [owner, admin]\n *\n *\n */\npublic class DelCommentRule extends AbstractCommentRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AddCommentRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)data.get(\"host\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            // check if the comment exists\n            OrientVertex comment = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            if(comment == null ) {\n                error = \"Comment @rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if there are edges HasComment\n                if(comment.countEdges(Direction.OUT, \"HasComment\") > 0) {\n                    error = \"Comment has comment(s), cannot be deleted\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"commentId\", comment.getProperty(\"commentId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.DelCommentRule",
      "createDate": "2015-12-30T20:05:16.353"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.353",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:137",
    "@version": 1,
    "@class": "Event",
    "eventId": 10138,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n */\npublic abstract class AbstractCommentRule extends AbstractRule implements Rule {\n\n    static final Logger logger = LoggerFactory.getLogger(AbstractCommentRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void addComment(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            String parentId = (String)data.remove(\"parentId\");\n            String parentClassName = (String)data.remove(\"parentClassName\");\n            Vertex parent = null;\n            if(\"Post\".equals(parentClassName)) {\n                parent = graph.getVertexByKey(\"Post.postId\", parentId);\n            } else {\n                parent = graph.getVertexByKey(\"Comment.commentId\", parentId);\n            }\n            OrientVertex comment = graph.addVertex(\"class:Comment\", data);\n            createUser.addEdge(\"Create\", comment);\n            parent.addEdge(\"HasComment\", comment);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void delComment(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            String commentId = (String)data.get(\"commentId\");\n            OrientVertex comment = (OrientVertex)graph.getVertexByKey(\"Comment.commentId\", commentId);\n            graph.removeVertex(comment);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void updComment(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            String commentId = (String)data.get(\"commentId\");\n            OrientVertex comment = (OrientVertex)graph.getVertexByKey(\"Comment.commentId\", commentId);\n            if(comment != null) {\n                comment.setProperty(\"content\", data.get(\"content\"));\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected long getTotal(Map<String, Object> data, Map<String, Object> criteria) {\n        long total = 0;\n        StringBuilder sb = new StringBuilder(\"SELECT COUNT(*) as count FROM (TRAVERSE children FROM \").append(data.get(\"@rid\")).append(\") \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sb.append(whereClause);\n        }\n        System.out.println(\"sql=\" + sb);\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            total = ((ODocument)graph.getRawGraph().query(new OSQLSynchQuery<ODocument>(sb.toString())).get(0)).field(\"count\");\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return total;\n    }\n\n    protected String getComment(Map<String, Object> data, Map<String, Object> criteria) {\n        String json = null;\n        StringBuilder sb = new StringBuilder(\"SELECT FROM (TRAVERSE children FROM \").append(data.get(\"@rid\")).append(\") \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sb.append(whereClause);\n        }\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sb.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sb.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sb.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sb.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sb);\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sb.toString());\n            List<ODocument> list = graph.getRawGraph().command(query).execute();\n            if(list.size() > 0) {\n                json = OJSONWriter.listToJSON(list, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getCommentTree(Map<String, Object> data) {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            ODocument record = graph.getVertex(data.get(\"@rid\")).getRecord();\n            json = record.toJSON(\"rid,fetchPlan:[*]in_Create:-2 out_HasComment:5\");\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.AbstractCommentRule",
      "createDate": "2015-12-30T20:05:16.362"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.362",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:138",
    "@version": 1,
    "@class": "Event",
    "eventId": 10139,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n *\n * AccessLevel R [user]\n *\n */\npublic class AddCommentRule extends AbstractCommentRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AddCommentRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)data.get(\"host\");\n        String parentRid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex parent = (OrientVertex)DbService.getVertexByRid(graph, parentRid);\n            if(parent == null ) {\n                error = \"Parent @rid \" + parentRid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"host\", host);\n                eventData.put(\"comment\", data.get(\"comment\"));\n                String parentClassName = parent.getProperty(\"@class\");\n                eventData.put(\"parentClassName\", parentClassName); // parent can be a post or a comment\n                if(\"Post\".equals(parentClassName)) {\n                    eventData.put(\"parentId\", parent.getProperty(\"postId\"));\n                } else {\n                    eventData.put(\"parentId\", parent.getProperty(\"commentId\"));\n                }\n                // generate unique identifier\n                eventData.put(\"commentId\", HashUtil.generateUUID());\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.AddCommentRule",
      "createDate": "2015-12-30T20:05:16.384"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.384",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:139",
    "@version": 1,
    "@class": "Event",
    "eventId": 10140,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.rule.AbstractRuleRule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 30/01/15.\n *\n * This is the rule to get access control list for a particular endpoint.\n *\n * AccessLevel A\n *\n */\npublic class GetAccessRule extends AbstractAccessRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(GetAccessRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Map<String, Object> access = getAccessByRuleClass(ruleClass);\n        if(access != null) {\n            inputMap.put(\"result\", mapper.writeValueAsString(access));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No access control can be found for ruleClass\" + ruleClass);\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.GetAccessRule",
      "createDate": "2015-12-30T20:05:16.399"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.399",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:140",
    "@version": 1,
    "@class": "Event",
    "eventId": 10141,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.rule.rule.AbstractRuleRule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.nio.ByteBuffer;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 30/01/15.\n *\n * This is the endpoint that can update access control list.\n *\n * Due to the importance of the API, the code level access control is in place.\n *\n * AccessLevel R [owner,admin,ruleAdmin]\n *\n */\npublic class UpdAccessRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        int inputVersion = (int)data.get(\"@version\");\n        String rid = (String)data.get(\"@rid\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"ruleAdmin\")) {\n                error = \"Role owner or admin or ruleAdmin is required to update access control\";\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null) {\n                    if (!host.equals(data.get(\"host\"))) {\n                        error = \"You can only update access control for host: \" + host;\n                        inputMap.put(\"responseCode\", 403);\n                    } else {\n                        // make sure the ruleClass contains the host.\n                        if (!ruleClass.contains(host)) {\n                            // you are not allowed to update access control to the rule as it is not owned by the host.\n                            error = \"ruleClass is not owned by the host: \" + host;\n                            inputMap.put(\"responseCode\", 403);\n                        }\n                    }\n                } else {\n                    OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                    try {\n                        Vertex access = DbService.getVertexByRid(graph, rid);\n                        if(access == null) {\n                            error = \"Access control with @rid \" + rid + \" cannot be found\";\n                            inputMap.put(\"responseCode\", 404);\n                        } else {\n                            int storedVersion = access.getProperty(\"@version\");\n                            if(inputVersion != storedVersion) {\n                                error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                                inputMap.put(\"responseCode\", 400);\n                            } else {\n                                Map eventMap = getEventMap(inputMap);\n                                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                                inputMap.put(\"eventMap\", eventMap);\n                                eventData.put(\"ruleClass\", ruleClass);\n                                String accessLevel = (String)data.get(\"accessLevel\");\n                                eventData.put(\"accessLevel\", accessLevel);\n                                List clients = (List)data.get(\"clients\");\n                                roles = (List)data.get(\"roles\");\n                                List users = (List)data.get(\"users\");\n                                switch (accessLevel) {\n                                    case \"A\":\n                                        // Access by anyone, ignore clients, roles and users\n                                        break;\n                                    case \"N\":\n                                        // Not accessible, ignore clients, roles and users.\n                                        break;\n                                    case \"C\":\n                                        // client id is in the jwt token like userId and roles.\n                                        if(clients == null || clients.size() == 0 ) {\n                                            error = \"Clients are empty for client based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"clients\", clients);\n                                        }\n                                        break;\n                                    case \"R\":\n                                        // role only\n                                        if(roles == null || roles.size() == 0 ) {\n                                            error = \"Roles are empty for role based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"roles\", roles);\n                                        }\n                                        break;\n                                    case \"U\":\n                                        //user only\n                                        if(users == null || users.size() == 0 ) {\n                                            error = \"Users are empty for user based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"users\", users);\n                                        }\n                                        break;\n                                    case \"CR\":\n                                        // client and role\n                                        if(clients == null || clients.size() == 0 || roles == null || roles.size() == 0) {\n                                            error = \"Clients or roles are empty for client and role based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"clients\", clients);\n                                            eventData.put(\"roles\", roles);\n                                        }\n                                        break;\n                                    case \"CU\":\n                                        // client and user\n                                        if(clients == null || clients.size() == 0 || users == null || users.size() == 0) {\n                                            error = \"Clients or users are empty for client and user based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"clients\", clients);\n                                            eventData.put(\"users\", users);\n                                        }\n                                        break;\n                                    case \"RU\":\n                                        // role and user\n                                        if(roles == null || roles.size() == 0 || users == null || users.size() == 0) {\n                                            error = \"Roles or users are empty for role and user based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"roles\", roles);\n                                            eventData.put(\"users\", users);\n                                        }\n                                        break;\n                                    case \"CRU\":\n                                        // client, role and user\n                                        if(clients == null || clients.size() == 0 || roles == null || roles.size() == 0 || users == null || users.size() == 0) {\n                                            error = \"Clients, roles or users are empty for client, role and user based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"clients\", clients);\n                                            eventData.put(\"roles\", roles);\n                                            eventData.put(\"users\", users);\n                                        }\n                                        break;\n                                    default:\n                                        logger.error(\"Invalid Access Level: \" + accessLevel);\n                                }\n                                eventData.put(\"updateDate\", new java.util.Date());\n                                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            }\n                        }\n\n                    } catch (Exception e) {\n                        logger.error(\"Exception:\", e);\n                        throw e;\n                    } finally {\n                        graph.shutdown();\n                    }\n\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.UpdAccessRule",
      "createDate": "2015-12-30T20:05:16.408"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.408",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:141",
    "@version": 1,
    "@class": "Event",
    "eventId": 10142,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.rule.AbstractRuleRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 30/01/15.\n */\npublic class DelAccessEvRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delAccess(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.DelAccessEvRule",
      "createDate": "2015-12-30T20:05:16.415"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.415",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:142",
    "@version": 1,
    "@class": "Event",
    "eventId": 10143,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.rule.rule.AbstractRuleRule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 30/01/15.\n *\n * This is used in access admin to delete an access control for endpoints.\n *\n * owner can delete access control for any endpoint and host admin and ruleAdmin\n * can delete endpoint for their own host.\n *\n * Due to the importance of the API, the code level access control is in place.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class DelAccessRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String rid = (String)data.get(\"@rid\");\n        int inputVersion = (int)data.get(\"@version\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n\n        if(payload == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"ruleAdmin\")) {\n                error = \"Role owner or admin or ruleAdmin is required to delete rule\";\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null && !host.equals(data.get(\"host\"))) {\n                    error = \"User can only delete access control from host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    // check if the access control exist or not.\n                    OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                    try {\n                        Vertex access = DbService.getVertexByRid(graph, rid);\n                        if(access == null) {\n                            error = \"Access control with @rid \" + rid + \" cannot be found\";\n                            inputMap.put(\"responseCode\", 404);\n                        } else {\n                            int storedVersion = access.getProperty(\"@version\");\n                            if(inputVersion != storedVersion) {\n                                error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                                inputMap.put(\"responseCode\", 400);\n                            } else {\n                                Map eventMap = getEventMap(inputMap);\n                                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                                inputMap.put(\"eventMap\", eventMap);\n                                eventData.put(\"ruleClass\", ruleClass);\n                                eventData.put(\"updateDate\", new java.util.Date());\n                                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            }\n                        }\n                    } catch (Exception e) {\n                        logger.error(\"Exception:\", e);\n                        throw e;\n                    } finally {\n                        graph.shutdown();\n                    }\n                }\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.DelAccessRule",
      "createDate": "2015-12-30T20:05:16.429"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.429",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:143",
    "@version": 1,
    "@class": "Event",
    "eventId": 10144,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.rule.AbstractRuleRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 30/01/15.\n */\npublic class UpdAccessEvRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updAccess(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.UpdAccessEvRule",
      "createDate": "2015-12-30T20:05:16.440"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.440",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:144",
    "@version": 1,
    "@class": "Event",
    "eventId": 10145,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 30/01/15.\n *\n * There is no addAccess endpoint as access is pre-populated when rule is added or imported.\n * You can only update Access policy. Do I need to delete it? Or it will be deleted once rule\n * is deleted.\n *\n * TODO Delete access when rule is deleted and retire delAccess\n *\n */\npublic abstract class AbstractAccessRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractAccessRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void updAccess(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String json = null;\n        try {\n            graph.begin();\n            OrientVertex access = (OrientVertex)graph.getVertexByKey(\"Access.ruleClass\", data.get(\"ruleClass\"));\n            if(access != null) {\n                access.setProperty(\"accessLevel\", data.get(\"accessLevel\"));\n                List<String> clients = (List)data.get(\"clients\");\n                if(clients != null && clients.size() > 0) {\n                    access.setProperty(\"clients\", clients);\n                } else {\n                    access.removeProperty(\"clients\");\n                }\n                List<String> roles = (List)data.get(\"roles\");\n                if(roles != null && roles.size() > 0) {\n                    access.setProperty(\"roles\", roles);\n                } else {\n                    access.removeProperty(\"roles\");\n                }\n                List<String> users = (List)data.get(\"users\");\n                if(users != null && users.size() > 0) {\n                    access.setProperty(\"users\", users);\n                } else {\n                    access.removeProperty(\"users\");\n                }\n                access.setProperty(\"updateDate\", data.get(\"updateDate\"));\n                Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n                updateUser.addEdge(\"Update\", access);\n            }\n            graph.commit();\n            json = access.getRecord().toJSON();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> accessMap = ServiceLocator.getInstance().getMemoryImage(\"accessMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)accessMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            accessMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"ruleClass\"), mapper.readValue(json,\n                new TypeReference<HashMap<String, Object>>() {\n                }));\n    }\n\n    protected void delAccess(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex access = graph.getVertexByKey(\"Access.ruleClass\", data.get(\"ruleClass\"));\n            if(access != null) {\n                graph.removeVertex(access);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> accessMap = ServiceLocator.getInstance().getMemoryImage(\"accessMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)accessMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected String getAccesses(String host) {\n        String sql = \"SELECT FROM Access\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host;\n        }\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> accesses = graph.getRawGraph().command(query).execute();\n            json = OJSONWriter.listToJSON(accesses, null);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.AbstractAccessRule",
      "createDate": "2015-12-30T20:05:16.448"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.448",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:145",
    "@version": 1,
    "@class": "Event",
    "eventId": 10146,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 01/02/15.\n *\n * Get all the access control list policies for access admin page.\n *\n * Due to the importance of the API, the code level access control is in place.\n *\n * AccessLevel R [owner,admin, ruleAdmin]\n *\n */\npublic class GetAllAccessRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\") || roles.contains(\"admin\") || roles.contains(\"ruleAdmin\")) {\n            String host = (String) user.get(\"host\");\n            String hostAccesses = getAccesses(host);\n            if(hostAccesses != null) {\n                inputMap.put(\"result\", hostAccesses);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No access control can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"Permission denied\");\n            inputMap.put(\"responseCode\", 403);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.GetAllAccessRule",
      "createDate": "2015-12-30T20:05:16.456"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.456",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:146",
    "@version": 1,
    "@class": "Event",
    "eventId": 10147,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.networknt.light.rule.client;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.*;\n\n/**\n * Created by steve on 31/01/15.\n * Now, we only support Browser, Android and iOS\n *\n * AccessLevel R [user]\n */\npublic class GetClientDropdownRule extends AbstractRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n        Set<String> keys = ServiceLocator.getInstance().getHostMap().keySet();\n        for(String key: keys) {\n            Map<String, Object> hostMap = (Map<String, Object>)ServiceLocator.getInstance().getHostMap().get(key);\n            List<String> supportDevices = (List)hostMap.get(\"supportDevices\");\n            for(String device: supportDevices) {\n                String client = key + \"@\" + device;\n                Map<String, String> map = new HashMap<String, String>();\n                map.put(\"label\", client);\n                map.put(\"value\", client);\n                list.add(map);\n            }\n        }\n        String clientDropdown = mapper.writeValueAsString(list);\n        if(clientDropdown != null) {\n            inputMap.put(\"result\", clientDropdown);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No client can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.client.GetClientDropdownRule",
      "createDate": "2015-12-30T20:05:16.470"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.470",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:147",
    "@version": 1,
    "@class": "Event",
    "eventId": 10148,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/8/2014.\n */\npublic class DelBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranchEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DelBlogEvRule",
      "createDate": "2015-12-30T20:05:16.484"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.484",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:148",
    "@version": 1,
    "@class": "Event",
    "eventId": 10149,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 11/10/14.\n *\n * AccessLevel R [user]\n *\n */\npublic class DownBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranch(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DownBlogRule",
      "createDate": "2015-12-30T20:05:16.496"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.496",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:149",
    "@version": 1,
    "@class": "Event",
    "eventId": 10150,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 3/6/2015.\n */\npublic class UpdPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPostEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpdPostEvRule",
      "createDate": "2015-12-30T20:05:16.505"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.505",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:150",
    "@version": 1,
    "@class": "Event",
    "eventId": 10151,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 11/10/14.\n * This is to up vote blog by user\n *\n * AccessLevel R [user]\n *\n */\npublic class UpBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranch(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpBlogRule",
      "createDate": "2015-12-30T20:05:16.516"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.516",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:151",
    "@version": 1,
    "@class": "Event",
    "eventId": 10152,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 3/6/2015.\n *\n * Blog user can only delete his or her posts before anyone makes comment. However,\n * owner, admin and blogAdmin can delete post and all the comments relate to the\n * post all together. This should not be done often only at extreme situation.\n *\n * Due to the implementation of orientdb delete graph scheduled for 2.2\n * https://github.com/orientechnologies/orientdb/issues/1108\n * We will be asking all the comments be deleted before deleting the post for now.\n *\n * TODO fix it after orientdb 2.2\n *\n * AccessLevel R [owner, admin, blogAdmin, blogUser]\n */\npublic class DelPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPost(\"blog\", objects);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DelPostRule",
      "createDate": "2015-12-30T20:05:16.523"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.523",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:152",
    "@version": 1,
    "@class": "Event",
    "eventId": 10153,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic class AddBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranchEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AddBlogEvRule",
      "createDate": "2015-12-30T20:05:16.544"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.544",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:153",
    "@version": 1,
    "@class": "Event",
    "eventId": 10154,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * AccessLevel A\n *\n */\npublic class GetBlogPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBfnPost(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.GetBlogPostRule",
      "createDate": "2015-12-30T20:05:16.550"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.550",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:154",
    "@version": 1,
    "@class": "Event",
    "eventId": 10155,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 10/8/2014.\n *\n * AccessLevel R [owner, admin, blogAdmin]\n *\n */\npublic class DelBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranch(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DelBlogRule",
      "createDate": "2015-12-30T20:05:16.560"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.560",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:155",
    "@version": 1,
    "@class": "Event",
    "eventId": 10156,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 11/10/14.\n */\npublic class DownBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranchEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DownBlogEvRule",
      "createDate": "2015-12-30T20:05:16.568"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.568",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:156",
    "@version": 1,
    "@class": "Event",
    "eventId": 10157,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * get drown down list of blogs for blog admin\n *\n * AccessLevel R [owner, admin, blogAdmin]\n *\n */\npublic class GetBlogDropdownRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchDropdown(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.GetBlogDropdownRule",
      "createDate": "2015-12-30T20:05:16.576"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.576",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:157",
    "@version": 1,
    "@class": "Event",
    "eventId": 10158,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/10/2014.\n * Update node of blog tree\n *\n * AccessLevel R [owner, admin, blogAdmin]\n *\n */\npublic class UpdBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranch(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpdBlogRule",
      "createDate": "2015-12-30T20:05:16.592"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.592",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:158",
    "@version": 1,
    "@class": "Event",
    "eventId": 10159,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/8/2014.\n *\n * This is for blog admin screen.\n *\n * AccessLevel R [owner, admin, blogAdmin]\n *\n */\npublic class GetBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranch(\"blog\", objects);\n    }\n\n    /*\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> blogMap = ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        // determine if the current user can post.\n        boolean allowPost = false;\n        String host = (String)data.get(\"host\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload != null) {\n            Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(roles.contains(\"owner\")) {\n                allowPost = true;\n            } else if(roles.contains(\"admin\") || roles.contains(\"blowAdmin\") || roles.contains(\"blogUser\")){\n                if(host.equals(user.get(\"host\"))) {\n                    allowPost = true;\n                }\n            }\n        }\n\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList == null) {\n            refreshCache(host);\n            newList = (List)blogMap.get(host + \"newList\");\n        }\n        // get the page from cache.\n        long total = newList.size();\n        Integer pageSize = (Integer)data.get(\"pageSize\");\n        Integer pageNo = (Integer)data.get(\"pageNo\");\n        if(pageSize == null) {\n            inputMap.put(\"result\", \"pageSize is required\");\n            inputMap.put(\"responseCode\", 400);\n        }\n        if(pageNo == null) {\n            inputMap.put(\"result\", \"pageNo is required\");\n            inputMap.put(\"responseCode\", 400);\n        }\n        if(total > 0) {\n            List<Map<String, Object>> blogs = new ArrayList<Map<String, Object>>();\n\n            for(int i = pageSize*(pageNo - 1); i < Math.min(pageSize*pageNo, newList.size()); i++) {\n                String rid = newList.get(i);\n                String json = getJsonByRid(rid);\n                Map<String, Object> blog = mapper.readValue(json,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                // convert tags value from map to string.\n                Map tags = (Map)blog.get(\"tags\");\n                if(tags != null && tags.size() > 0) {\n                    String s = String.join(\",\", tags.keySet());\n                    blog.put(\"tags\", s);\n                }\n\n                blogs.add(blog);\n            }\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"blogs\", blogs);\n            result.put(\"allowPost\", allowPost);\n            Set hosts = ServiceLocator.getInstance().getHostMap().keySet();\n            result.put(\"hosts\", hosts);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            // there is no blog available. but still need to return allowPost and hosts\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", 0);\n            result.put(\"allowPost\", allowPost);\n            Set hosts = ServiceLocator.getInstance().getHostMap().keySet();\n            result.put(\"hosts\", hosts);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        }\n    }\n    */\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.GetBlogRule",
      "createDate": "2015-12-30T20:05:16.603"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.603",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:159",
    "@version": 1,
    "@class": "Event",
    "eventId": 10160,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic abstract class AbstractBlogRule extends AbstractRule implements Rule {\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n    /*\n    protected String getJsonByRid(String blogRid) {\n        // try to get it from cache first.\n        String json = null;\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache != null) {\n            json = (String)cache.get(\"blogRid\");\n        }\n        if(json == null) {\n            // TODO warning to increase cache if this happens.\n            json = DbService.getJsonByRid(blogRid);\n            // put it into the blog cache.\n            if(json != null) {\n                if(cache == null) {\n                    cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                            .maximumWeightedCapacity(1000)\n                            .build();\n                    blogMap.put(\"cache\", cache);\n                }\n                cache.put(blogRid, json);\n            }\n        }\n        return json;\n    }\n\n    protected Map<String, Object> getBlogByHostTitle(String host, String title) {\n        Map<String, Object> map = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OIndex<?> hostTitleIdx = db.getMetadata().getIndexManager().getIndex(\"hostTitleIdx\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OCompositeKey key = new OCompositeKey(host, title);\n            OIdentifiable blog = (OIdentifiable) hostTitleIdx.get(key);\n            if (blog != null) {\n                String json = ((ODocument) blog.getRecord()).toJSON();\n                map = mapper.readValue(json, new TypeReference<HashMap<String, Object>>() {});\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return map;\n    }\n\n    protected ODocument addBlog(Map<String, Object> data) throws Exception {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            OIndex<?> blogHostIdIdx = db.getMetadata().getIndexManager().getIndex(\"blogHostIdIdx\");\n            blog = new ODocument(schema.getClass(\"Blog\"));\n            blog.field(\"host\", data.get(\"host\"));\n            blog.field(\"id\", data.get(\"id\"));\n            if(data.get(\"description\") != null) blog.field(\"description\", data.get(\"description\"));\n            if(data.get(\"attributes\") != null) blog.field(\"attributes\", data.get(\"attributes\"));\n            blog.field(\"createDate\", data.get(\"createDate\"));\n            blog.field(\"createUserId\", data.get(\"createUserId\"));\n            // parent\n            if(data.get(\"parent\") != null) {\n                OCompositeKey parentKey = new OCompositeKey(data.get(\"host\"), data.get(\"parent\"));\n                OIdentifiable parentOid = (OIdentifiable) blogHostIdIdx.get(parentKey);\n                if(parentOid != null) {\n                    ODocument parent = (ODocument)parentOid.getRecord();\n                    blog.field(\"parent\", parent);\n                    // update parent with the children\n                    Set children = parent.field(\"children\");\n                    if(children != null) {\n                        children.add(blog);\n                    } else {\n                        children = new HashSet<ODocument>();\n                        children.add(blog);\n                        parent.field(\"children\", children);\n                    }\n                    parent.save();\n                }\n            }\n            // children\n            List<String> childrenIds = (List<String>)data.get(\"children\");\n            if(childrenIds != null) {\n                Set children = new HashSet<ODocument>();\n                for(String childId: childrenIds) {\n                    OCompositeKey childKey = new OCompositeKey(data.get(\"host\"), childId);\n                    OIdentifiable childOid = (OIdentifiable) blogHostIdIdx.get(childKey);\n                    if(childOid != null) {\n                        ODocument child = (ODocument)childOid.getRecord();\n                        children.add(child);\n                        child.field(\"parent\", blog);\n                        child.save();\n                    }\n                }\n                blog.field(\"children\", children);\n            }\n            blog.save();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n    */\n    /*\n    protected void addBlog(Map<String, Object> data) throws Exception {\n        ODocument blog = addBlogDb(data);\n        // rebuild cache in memory.\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        // update central cache\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            blogMap.put(\"cache\", cache);\n        }\n        cache.put(blog.field(\"@rid\").toString(), blog.toJSON());\n        // update newList\n        String host = (String)data.get(\"host\");\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList == null) {\n            newList = new ArrayList<String>();\n            newList.add(blog.field(\"@rid\").toString());\n            blogMap.put(host + \"newList\", newList);\n        } else {\n            newList.add(0, blog.field(\"@rid\").toString());  // add the head of the list.\n        }\n        // TODO build hot list\n\n    }\n    */\n    /*\n    protected ODocument addBlogDb(Map<String, Object> data) throws Exception {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n\n        try {\n            db.begin();\n            blog = new ODocument(schema.getClass(\"Blog\"));\n            blog.field(\"host\", data.get(\"host\"));\n            blog.field(\"title\", data.get(\"title\"));\n            blog.field(\"source\", data.get(\"source\"));\n            blog.field(\"summary\", data.get(\"summary\"));\n            blog.field(\"content\", data.get(\"content\"));\n            blog.field(\"rank\", 0);\n            java.util.Date d = new java.util.Date();\n            blog.field(\"createDate\", data.get(\"createDate\"));\n            blog.field(\"updateDate\", data.get(\"createDate\"));\n            blog.field(\"createUserId\", data.get(\"createUserId\"));\n            blog.save();\n            db.commit();\n            Map<String, Object> tagMap = new HashMap<String, Object>();\n\n            Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n            String host = blog.field(\"host\");\n            String className = blog.field(\"@class\");\n            for(String tagName: inputTags) {\n                ODocument tag = null;\n\n                // get the tag is it exists\n                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                // this is a unique index, so it retrieves a OIdentifiable\n                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                if (oIdentifiable != null) {\n                    tag = (ODocument) oIdentifiable.getRecord();\n                    Set links = tag.field(\"links\");\n                    links.add(blog.field(\"@rid\"));\n                    tag.save();\n                    db.commit();\n                } else {\n                    tag = new ODocument(schema.getClass(\"Tag\"));\n                    tag.field(\"host\", host);\n                    tag.field(\"name\", tagName);\n                    tag.field(\"class\", className);\n                    tag.field(\"createDate\", data.get(\"createDate\"));\n                    tag.field(\"createUserId\", data.get(\"createUserId\"));\n                    Set links = new HashSet<String>();\n                    links.add(blog.field(\"@rid\"));\n                    tag.field(\"links\", links);\n                    tag.save();\n                    db.commit();\n                }\n                tagMap.put(tagName, tag.field(\"@rid\"));\n            }\n            blog.field(\"tags\", tagMap);\n            blog.save();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n    */\n    /*\n    protected boolean delBlog(Map<String, Object> data) throws Exception {\n        boolean result = false;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> blogHostIdIdx = db.getMetadata().getIndexManager().getIndex(\"blogHostIdIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"host\"), data.get(\"id\"));\n            OIdentifiable oid = (OIdentifiable) blogHostIdIdx.get(key);\n            if (oid != null) {\n                ODocument blog = (ODocument) oid.getRecord();\n                // update references from parent and children\n                ODocument parent = blog.field(\"parent\");\n                if(parent != null) {\n                    Set children = parent.field(\"children\");\n                    if(children != null && children.size() > 0) {\n                        children.remove(blog);\n                    }\n                    parent.save();\n                }\n                Set<ODocument> children = blog.field(\"children\");\n                if(children != null && children.size() > 0) {\n                    for(ODocument child: children) {\n                        if(child != null) {\n                            child.removeField(\"parent\");\n                            child.save();\n                        }\n\n                    }\n                }\n                blog.delete();\n                db.commit();\n                result = true;\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return result;\n    }\n    */\n    /*\n    protected void delBlogUpdCache(String blogRid, String host) throws Exception {\n        delBlogDb(blogRid);\n        // rebuild cache in memory.\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        // update central cache\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(blogRid);\n        }\n        // update newList\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList != null) {\n            newList.remove(blogRid);\n        }\n\n        // TODO build hot list\n\n    }\n    */\n    /*\n    protected boolean delBlogDb(String blogRid) throws Exception {\n        boolean result = false;\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId(blogRid));\n            // remove the tags\n            Map<String, Object> tagMap = blog.field(\"tags\");\n            if(tagMap != null) {\n                Iterator it = tagMap.entrySet().iterator();\n                while(it.hasNext()) {\n                    Map.Entry pairs = (Map.Entry)it.next();\n                    ODocument tag = db.load((ORecordId)pairs.getValue());\n                    Set links = tag.field(\"links\");\n                    links.remove(blog.field(\"@rid\"));\n                    tag.save();\n                    db.commit();\n                }\n            }\n            db.delete(new ORecordId(blogRid));\n            db.commit();\n            result = true;\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return result;\n    }\n    */\n    /*\n    protected int delBlogByHost(String host) throws Exception {\n        int recordsUpdated = 0;\n        String sql = \"DELETE FROM Blog WHERE host = '\" + host + \"'\";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            recordsUpdated = db.command(new OCommandSQL(sql)).execute();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        if(recordsUpdated > 0) {\n            // clean the cache if any.\n            Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n            blogMap.remove(host + \"newList\");\n            // cached blog will be remove the cache automatically.\n        }\n        return recordsUpdated;\n    }\n    */\n    /*\n    protected void updBlog(Map<String, Object> data, String userRid, String userId) throws Exception {\n        ODocument blog = updBlogDb(data, userRid, userId);\n        String blogRid = blog.field(\"@rid\").toString();\n        // rebuild cache in memory.\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            blogMap.put(\"cache\", cache);\n        }\n        cache.put(blogRid, blog.toJSON());\n\n        // update newList\n        String host = (String)data.get(\"host\");\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList == null) {\n            newList = new ArrayList<String>();\n            blogMap.put(host + \"newList\", newList);\n            newList.add(blogRid);\n        } else {\n            newList.remove(blogRid);\n            newList.add(0, blogRid);\n        }\n        // TODO build hot list\n\n    }\n\n    protected ODocument updBlogDb(Map<String, Object> data, String userRid, String userId) throws Exception {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId((String)data.get(\"@rid\")));\n            if (blog != null) {\n                String title = (String)data.get(\"title\");\n                if(title != null && !title.equals(blog.field(\"title\"))) {\n                    blog.field(\"title\", title);\n                }\n                String source = (String)data.get(\"source\");\n                if(source != null && !source.equals(blog.field(\"source\"))) {\n                    blog.field(\"source\", source);\n                }\n                String summary = (String)data.get(\"summary\");\n                if(summary != null && !summary.equals(blog.field(\"content\"))) {\n                    blog.field(\"summary\", summary);\n                }\n                String content = (String)data.get(\"content\");\n                if(content != null && !content.equals(blog.field(\"content\"))) {\n                    blog.field(\"content\", content);\n                }\n\n                // update tags\n                String host = blog.field(\"host\");\n                String className = blog.field(\"@class\");\n                Map<String, Object> tagMap = blog.field(\"tags\");\n                if(tagMap != null && tagMap.size() > 0) {\n                    // There are existing tags.\n                    if(data.get(\"tags\") != null) {\n                        // both are not null, we need a comparison to figure out what to do.\n                        Set<String> inputTags = new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\")));\n                        Set<String> storedTags = tagMap.keySet();\n                        Set<String> addSet = new HashSet<String>(inputTags);\n                        Set<String> delSet = new HashSet<String>(storedTags);\n                        addSet.removeAll(storedTags);\n                        if(addSet.size() > 0) {\n                            for(String tagName: addSet) {\n                                ODocument tag = null;\n                                // get the tag is it exists\n                                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                                // this is a unique index, so it retrieves a OIdentifiable\n                                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                                if (oIdentifiable != null) {\n                                    tag = (ODocument) oIdentifiable.getRecord();\n                                    Set links = tag.field(\"links\");\n                                    links.add(blog.field(\"@rid\"));\n                                    tag.save();\n                                    db.commit();\n                                } else {\n                                    tag = new ODocument(schema.getClass(\"Tag\"));\n                                    tag.field(\"host\", host);\n                                    tag.field(\"name\", tagName);\n                                    tag.field(\"class\", className);\n                                    tag.field(\"createDate\", new java.util.Date());\n                                    tag.field(\"createUserRid\", new ORecordId(userRid));\n                                    Set links = new HashSet<Object>();\n                                    links.add(blog.field(\"@rid\"));\n                                    tag.field(\"links\", links);\n                                    tag.save();\n                                    db.commit();\n                                }\n                                tagMap.put(tagName, tag.field(\"@rid\"));\n                            }\n                            blog.field(\"tags\", tagMap);\n                            blog.save();\n                            db.commit();\n                        }\n                        delSet.removeAll(inputTags);\n                        if(delSet.size() > 0) {\n                            // remove the tags\n                            for(String tagName: delSet) {\n                                ODocument tag = null;\n                                // get the tag is it exists\n                                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                                // this is a unique index, so it retrieves a OIdentifiable\n                                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                                if (oIdentifiable != null) {\n                                    tag = (ODocument) oIdentifiable.getRecord();\n                                    Set links = tag.field(\"links\");\n                                    links.remove(blog.field(\"@rid\"));\n                                    tag.save();\n                                    db.commit();\n                                }\n                                tagMap.remove(tagName);\n                            }\n                            blog.field(\"tags\", tagMap);\n                            blog.save();\n                            db.commit();\n                        }\n                    } else {\n                        // remove the blog reference from all tags as input is empty but stored has values.\n                        // and then remove the tags from blog.\n                        Iterator it = tagMap.entrySet().iterator();\n                        while(it.hasNext()) {\n                            ORecordId tagRid = (ORecordId)it.next();\n                            ODocument tag = db.load(tagRid);\n                            Set links = tag.field(\"links\");\n                            links.remove(blog.field(\"@rid\"));\n                            tag.save();\n                        }\n                        blog.removeField(\"tags\");\n                        blog.save();\n                        db.commit();\n                    }\n                } else {\n                    // tagMap is null\n                    if(data.get(\"tags\") != null) {\n                        tagMap = new HashMap<String, Object>();\n                        Set<String> inputTags = new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\")));\n                        for(String tagName: inputTags) {\n                            ODocument tag = null;\n                            // get the tag if it exists\n                            OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                            // this is a unique index, so it retrieves a OIdentifiable\n                            OCompositeKey key = new OCompositeKey(host, tagName, className);\n                            OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                            if (oIdentifiable != null) {\n                                tag = (ODocument) oIdentifiable.getRecord();\n                                Set links = tag.field(\"links\");\n                                links.add(blog.field(\"@rid\"));\n                                tag.save();\n                                db.commit();\n                            } else {\n                                tag = new ODocument(schema.getClass(\"Tag\"));\n                                tag.field(\"host\", host);\n                                tag.field(\"name\", tagName);\n                                tag.field(\"class\", className);\n                                tag.field(\"createDate\", new java.util.Date());\n                                tag.field(\"createUserRid\", new ORecordId(userRid));\n                                Set links = new HashSet<String>();\n                                links.add(blog.field(\"@rid\"));\n                                tag.field(\"links\", links);\n                                tag.save();\n                                db.commit();\n                            }\n                            tagMap.put(tagName, tag.field(\"@rid\"));\n                        }\n                        blog.field(\"tags\", tagMap);\n                        blog.save();\n                        db.commit();\n                    }\n                }\n                blog.field(\"updateDate\", new java.util.Date());\n                blog.field(\"updateUserId\", userId);\n                blog.field(\"updateUserRid\", userRid);\n                blog.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n    protected long getTotalNumberBlogFromDb(Map<String, Object> criteria) {\n        long total = 0;\n        StringBuilder sql = new StringBuilder(\"SELECT COUNT(*) as count FROM Blog\");\n\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            total = ((ODocument)db.query(new OSQLSynchQuery<ODocument>(sql.toString())).get(0)).field(\"count\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return total;\n    }\n\n    protected List<Map<String, Object>> searchBlogFromDb(Map<String, Object> criteria) {\n        List<Map<String,Object>> list = null;\n        StringBuilder sql = new StringBuilder(\"SELECT FROM Blog \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sql.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sql.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sql.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sql.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql.toString());\n            List<ODocument> result = db.command(query).execute();\n            if(result.size() > 0) {\n                String json = OJSONWriter.listToJSON(result, null);\n                list = mapper.readValue(json, new TypeReference<List<HashMap<String, Object>>>() {});\n\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return list;\n    }\n    protected List<ODocument> searchBlogDb(Map<String, Object> criteria) {\n        List<ODocument> blogs = null;\n        StringBuilder sql = new StringBuilder(\"SELECT FROM Blog \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sql.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sql.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sql.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sql.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql.toString());\n            blogs = db.command(query).execute();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return blogs;\n    }\n\n    protected Map<String, Object> refreshCache(String host) {\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        Map<String, Object> criteria = new HashMap<String, Object>();\n        criteria.put(\"host\", host);\n        criteria.put(\"sortedBy\", \"updateDate\");\n        criteria.put(\"sortDir\", \"DESC\");\n        List<ODocument> blogs = searchBlogDb(criteria);\n        List<String> newList = new ArrayList<String>();\n        // build new map/list\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            blogMap.put(\"cache\", cache);\n        }\n        int i = 0;\n        int pageSize = 2; // TODO get from config\n        for (ODocument blog : blogs) {\n            // cache the first page for now. most people will read the first page as it contains\n            // new posts.\n            if(i < pageSize) {\n                cache.put(blog.field(\"@rid\").toString(), blog.toJSON());\n            }\n            newList.add(blog.field(\"@rid\").toString());\n        }\n        blogMap.put(host + \"newList\", newList);\n\n        // TODO build hot list\n        return blogMap;\n    }\n\n    protected ODocument upVoteBlog(String blogRid, String userRid) {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId(blogRid));\n            if (blog != null) {\n                Set upSet = blog.field(\"upUsers\");\n                if(upSet == null) {\n                    upSet = new HashSet<String>();\n                    upSet.add(new ORecordId(userRid));\n                    blog.field(\"upUsers\", upSet);\n                } else {\n                    upSet.add(new ORecordId(userRid));\n                }\n                // remove the user from downUsers if it is there\n                // blindly remove\n                Set downSet = blog.field(\"downUsers\");\n                if(downSet != null) {\n                    downSet.remove(new ORecordId(userRid));\n                }\n                blog.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n\n    protected ODocument downVoteBlog(String blogRid, String userRid) {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId(blogRid));\n            if (blog != null) {\n                Set downSet = blog.field(\"downUsers\");\n                if(downSet == null) {\n                    downSet = new HashSet<String>();\n                    downSet.add(new ORecordId(userRid));\n                    blog.field(\"downUsers\", downSet);\n                } else {\n                    downSet.add(new ORecordId(userRid));\n                }\n                // remove the user from upUsers if it is there\n                // blindly remove\n                Set upSet = blog.field(\"upUsers\");\n                if(upSet != null) {\n                    upSet.remove(new ORecordId(userRid));\n                }\n                blog.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n    */\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AbstractBlogRule",
      "createDate": "2015-12-30T20:05:16.620"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.620",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:160",
    "@version": 1,
    "@class": "Event",
    "eventId": 10161,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 08/10/14.\n *\n * AccessLevel R [owner, admin, blogAdmin]\n *\n */\npublic class AddBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranch(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AddBlogRule",
      "createDate": "2015-12-30T20:05:16.628"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.628",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:161",
    "@version": 1,
    "@class": "Event",
    "eventId": 10162,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class DelPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPostEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DelPostEvRule",
      "createDate": "2015-12-30T20:05:16.634"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.634",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:162",
    "@version": 1,
    "@class": "Event",
    "eventId": 10163,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPostEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AddPostEvRule",
      "createDate": "2015-12-30T20:05:16.648"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.648",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:163",
    "@version": 1,
    "@class": "Event",
    "eventId": 10164,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/10/2014.\n */\npublic class UpdBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranchEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpdBlogEvRule",
      "createDate": "2015-12-30T20:05:16.657"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.657",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:164",
    "@version": 1,
    "@class": "Event",
    "eventId": 10165,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * AccessLevel R [owner, admin, blogAdmin, blogUser]\n *\n */\npublic class AddPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPost(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AddPostRule",
      "createDate": "2015-12-30T20:05:16.668"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.668",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:165",
    "@version": 1,
    "@class": "Event",
    "eventId": 10166,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * This is to get blogs displayed on the blog home page.\n *\n * AccessLevel A\n *\n */\npublic class GetBlogTreeRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchTree(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.GetBlogTreeRule",
      "createDate": "2015-12-30T20:05:16.676"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.676",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:166",
    "@version": 1,
    "@class": "Event",
    "eventId": 10167,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 11/10/14.\n */\npublic class UpBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranchEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpBlogEvRule",
      "createDate": "2015-12-30T20:05:16.687"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.687",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:167",
    "@version": 1,
    "@class": "Event",
    "eventId": 10168,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 3/6/2015.\n * Update post in a blog\n *\n * AccessLevel R [owner, admin, blogAdmin, blogUser]\n *\n * blogUser can only update his or her blog\n *\n */\npublic class UpdPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPost(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpdPostRule",
      "createDate": "2015-12-30T20:05:16.695"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.695",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:168",
    "@version": 1,
    "@class": "Event",
    "eventId": 10169,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class DelRoleEvRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        String roleId = (String)data.get(\"roleId\");\n        delRole(roleId);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.DelRoleEvRule",
      "createDate": "2015-12-30T20:05:16.705"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.705",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:169",
    "@version": 1,
    "@class": "Event",
    "eventId": 10170,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/31/2014.\n */\npublic abstract class AbstractRoleRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractRoleRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected String getRoleById(String roleId) {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex role = (OrientVertex)graph.getVertexByKey(\"Role.roleId\", roleId);\n            if(role != null) {\n                json = role.getRecord().toJSON();\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected void addRole(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex role = graph.addVertex(\"class:Role\", data);\n            createUser.addEdge(\"Create\", role);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void updRole(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            Vertex role = graph.getVertexByKey(\"Role.roleId\", data.get(\"roleId\"));\n            if(role != null) {\n                String host = (String)data.get(\"host\");\n                if(host != null && host.length() > 0) {\n                    if(!host.equals(role.getProperty(\"host\"))) role.setProperty(\"host\", host);\n                } else {\n                    role.removeProperty(\"host\");\n                }\n                String description = (String)data.get(\"description\");\n                if(description != null && !description.equals(role.getProperty(\"description\"))) {\n                    role.setProperty(\"description\", description);\n                }\n                role.setProperty(\"updateDate\", data.get(\"updateDate\"));\n                updateUser.addEdge(\"Update\", role);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void delRole(String roleId) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex role = graph.getVertexByKey(\"Role.roleId\", roleId);\n            if(role != null) {\n                graph.removeVertex(role);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected String getRoles(OrientGraph graph, String host) {\n        String sql = \"SELECT FROM Role\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> roles = graph.getRawGraph().command(query).execute();\n            json = OJSONWriter.listToJSON(roles, null);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getRoleDropdown(String host) throws Exception {\n        String sql = \"SELECT FROM Role\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> roles = graph.getRawGraph().command(query).execute();\n            if(roles.size() > 0) {\n                List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n                for(ODocument doc: roles) {\n                    Map<String, String> map = new HashMap<String, String>();\n                    String roleId = doc.field(\"roleId\");\n                    map.put(\"label\", roleId);\n                    map.put(\"value\", roleId);\n                    list.add(map);\n                }\n                json = mapper.writeValueAsString(list);\n            }\n\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.AbstractRoleRule",
      "createDate": "2015-12-30T20:05:16.716"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.716",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:170",
    "@version": 1,
    "@class": "Event",
    "eventId": 10171,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * AccessLevel R [owner, admin]\n *\n */\npublic class AddRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add role from host: \" + host;\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String json = getRoleById((String)data.get(\"roleId\"));\n                if(json != null) {\n                    error = \"Id for the role exists\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                }\n            }\n        } else {\n            String json = getRoleById((String)data.get(\"roleId\"));\n            if(json != null) {\n                error = \"Id for the role exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n                // remove host from data as this is owner adding role\n                eventData.remove(\"host\");\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.AddRoleRule",
      "createDate": "2015-12-30T20:05:16.732"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.732",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:171",
    "@version": 1,
    "@class": "Event",
    "eventId": 10172,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/11/14.\n *\n * AccessLevel R [user]\n */\npublic class GetRoleDropdownRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String) user.get(\"host\");\n        String hostRoleDropdown = getRoleDropdown(host);\n        if(hostRoleDropdown != null) {\n            inputMap.put(\"result\", hostRoleDropdown);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No role can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.GetRoleDropdownRule",
      "createDate": "2015-12-30T20:05:16.746"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.746",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:172",
    "@version": 1,
    "@class": "Event",
    "eventId": 10173,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Created by husteve on 10/31/2014.\n *\n * AccessLevel R [owner, admin]\n */\npublic class GetRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String) user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String hostRoles = getRoles(graph, host);\n            if(hostRoles != null) {\n                List<Map<String, Object>> roleList\n                        = mapper.readValue(hostRoles, new TypeReference<List<HashMap<String, Object>>>() {});\n                // get all the hosts\n                Set hosts = ServiceLocator.getInstance().getHostMap().keySet();\n\n                Map<String, Object> result = new HashMap<String, Object>();\n                result.put(\"roles\", roleList);\n                result.put(\"hosts\", hosts);\n                inputMap.put(\"result\", mapper.writeValueAsString(result));\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No role can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.GetRoleRule",
      "createDate": "2015-12-30T20:05:16.756"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.756",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:173",
    "@version": 1,
    "@class": "Event",
    "eventId": 10174,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class AddRoleEvRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addRole(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.AddRoleEvRule",
      "createDate": "2015-12-30T20:05:16.775"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.775",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:174",
    "@version": 1,
    "@class": "Event",
    "eventId": 10175,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/31/2014.\n */\npublic class UpdRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only update role for host: \" + host;\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                try {\n                    Vertex role = DbService.getVertexByRid(graph, rid);\n                    if(role == null) {\n                        error = \"Role with @rid \" + rid + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        int inputVersion = (int)data.get(\"@version\");\n                        int storedVersion = role.getProperty(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"roleId\", data.get(\"roleId\"));\n                            eventData.put(\"description\", data.get(\"description\"));\n                            eventData.put(\"host\", data.get(\"host\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Exception:\", e);\n                    throw e;\n                } finally {\n                    graph.shutdown();\n                }\n            }\n        } else {\n            try {\n                Vertex role = DbService.getVertexByRid(graph, rid);\n                if(role == null) {\n                    error = \"Role with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    int storedVersion = role.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        inputMap.put(\"responseCode\", 400);\n                        error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"roleId\", data.get(\"roleId\"));\n                        eventData.put(\"description\", data.get(\"description\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        // this is the owner update the role. no host.\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.UpdRoleRule",
      "createDate": "2015-12-30T20:05:16.787"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.787",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:175",
    "@version": 1,
    "@class": "Event",
    "eventId": 10176,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/31/2014.\n */\npublic class UpdRoleEvRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updRole(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.UpdRoleEvRule",
      "createDate": "2015-12-30T20:05:16.796"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.796",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:176",
    "@version": 1,
    "@class": "Event",
    "eventId": 10177,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * AccessLevel R [owner, admin]\n *\n */\npublic class DelRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only delete role for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex role = DbService.getVertexByRid(graph, rid);\n                if(role == null) {\n                    error = \"Role with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"roleId\", role.getProperty(\"roleId\"));\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.DelRoleRule",
      "createDate": "2015-12-30T20:05:16.805"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.805",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:177",
    "@version": 1,
    "@class": "Event",
    "eventId": 10178,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 30/12/14.\n */\npublic class ImpRuleEvRule extends AbstractRuleRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(ImpRuleEvRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        impRule(data);\n        // this is too notify readonly subsystem that the number of rules is changed.\n        // if will only send out event when isPublisher is true for the Rule. Change\n        // it from Rule Admin to enable it or disable it.\n        publishEvent(eventMap);\n        return true;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.ImpRuleEvRule",
      "createDate": "2015-12-30T20:05:16.812"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.812",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:178",
    "@version": 1,
    "@class": "Event",
    "eventId": 10179,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 3/10/2015.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdPublisherRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            eventData.put(\"isPublisher\", data.get(\"isPublisher\"));\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdPublisherRule",
      "createDate": "2015-12-30T20:05:16.819"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.819",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:179",
    "@version": 1,
    "@class": "Event",
    "eventId": 10180,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 22/03/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdSchemaRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            String schema = (String)data.get(\"schema\");\n            if(schema != null) {\n                eventData.put(\"schema\", schema);\n            }\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdSchemaRule",
      "createDate": "2015-12-30T20:05:16.828"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.828",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:180",
    "@version": 1,
    "@class": "Event",
    "eventId": 10181,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic class AddRuleEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addRule(data);\n        // this is too notify readonly subsystem that the number of rules is changed.\n        // if will only send out event when isPublisher is true for the Rule. Change\n        // it from Rule Admin to enable it or disable it.\n        publishEvent(eventMap);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.AddRuleEvRule",
      "createDate": "2015-12-30T20:05:16.836"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.836",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:181",
    "@version": 1,
    "@class": "Event",
    "eventId": 10182,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n * current R [owner]\n */\npublic class UpdRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        int inputVersion = (int)data.get(\"@version\");\n        String rid = (String)data.get(\"@rid\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"You can only update rule for host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // make sure the ruleClass contains the host.\n                if(host != null && !ruleClass.contains(host)) {\n                    // you are not allowed to update rule as it is not owned by the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                }\n            }\n        }\n        if(error == null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex rule = DbService.getVertexByRid(graph, rid);\n                if(rule == null) {\n                    error = \"Rule with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    int storedVersion = rule.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", ruleClass);\n                        eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdRuleRule",
      "createDate": "2015-12-30T20:05:16.848"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.848",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:182",
    "@version": 1,
    "@class": "Event",
    "eventId": 10183,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 10/03/15.\n */\npublic class UpdSubscriberEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updSubscriber(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdSubscriberEvRule",
      "createDate": "2015-12-30T20:05:16.855"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.855",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:183",
    "@version": 1,
    "@class": "Event",
    "eventId": 10184,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 07/11/14.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n * current R [owner] until workflow approval is done.\n *\n */\npublic class DelRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        int inputVersion = (int)data.get(\"@version\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only delete rule for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex rule = DbService.getVertexByRid(graph, rid);\n                if(rule == null) {\n                    error = \"Rule with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    // check if the ruleClass contains the host.\n                    if(host != null && !ruleClass.contains(host)) {\n                        // you are not allowed to delete access control to the rule as it is not belong to the host.\n                        error = \"ruleClass is not owned by the host: \" + host;\n                        inputMap.put(\"responseCode\", 403);\n                    } else {\n                        int storedVersion = rule.getProperty(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"ruleClass\", ruleClass);\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.DelRuleRule",
      "createDate": "2015-12-30T20:05:16.862"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.862",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:184",
    "@version": 1,
    "@class": "Event",
    "eventId": 10185,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport net.engio.mbassy.bus.MBassador;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 07/11/14.\n */\npublic class DelRuleEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delRule(data);\n        // this is too notify readonly subsystem that the number of rules is changed.\n        // if will only send out event when isPublisher is true for the Rule. Change\n        // it from Rule Admin to enable it or disable it.\n        publishEvent(eventMap);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.DelRuleEvRule",
      "createDate": "2015-12-30T20:05:16.872"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.872",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:185",
    "@version": 1,
    "@class": "Event",
    "eventId": 10186,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n *\n * This is the rule that allow user to add brand new rule from rule admin interface. It will fail\n * if the rule exist in database. And normally, you only construct simple rules on the fly. Most of\n * the time, you should use impRuleRule instead.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n * current R [owner] until workflow is done\n *\n */\npublic class AddRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if(host != null && !ruleClass.contains(host)) {\n                    // you are not allowed to add rule as it is not belong to the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    // check if the rule exists or not\n                    Map<String, Object> ruleMap = getRuleByRuleClass(ruleClass);\n                    if(ruleMap != null) {\n                        error = \"ruleClass for the rule exists\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"host\", host);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            // check if the rule exists or not.\n            Map<String, Object> ruleMap = getRuleByRuleClass((String)data.get(\"ruleClass\"));\n            if(ruleMap != null) {\n                error = \"ruleClass for the rule exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                // This is owner to import rule, notice that no host is passed in.\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.AddRuleRule",
      "createDate": "2015-12-30T20:05:16.879"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.879",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:186",
    "@version": 1,
    "@class": "Event",
    "eventId": 10187,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class GetRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\") || roles.contains(\"admin\") || roles.contains(\"ruleAdmin\")) {\n            String host = (String) user.get(\"host\");\n            String hostRules = getRules(host);\n            if(hostRules != null) {\n                inputMap.put(\"result\", hostRules);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No rule can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"Permission denied\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.GetRuleRule",
      "createDate": "2015-12-30T20:05:16.886"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.886",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:187",
    "@version": 1,
    "@class": "Event",
    "eventId": 10188,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/03/15.\n */\npublic class UpdEtagEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updEtag(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdEtagEvRule",
      "createDate": "2015-12-30T20:05:16.893"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.893",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:188",
    "@version": 1,
    "@class": "Event",
    "eventId": 10189,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/03/15.\n */\npublic class UpdCorsEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updCors(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdCorsEvRule",
      "createDate": "2015-12-30T20:05:16.904"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.904",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:189",
    "@version": 1,
    "@class": "Event",
    "eventId": 10190,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 22/03/15.\n */\npublic class UpdSchemaEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updSchema(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdSchemaEvRule",
      "createDate": "2015-12-30T20:05:16.913"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.913",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:190",
    "@version": 1,
    "@class": "Event",
    "eventId": 10191,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 10/03/15.\n */\npublic class UpdSubscriberRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventMap);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            eventData.put(\"isSubscriber\", data.get(\"isSubscriber\"));\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdSubscriberRule",
      "createDate": "2015-12-30T20:05:16.938"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.938",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:191",
    "@version": 1,
    "@class": "Event",
    "eventId": 10192,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/03/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdCorsRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            eventData.put(\"enableCors\", data.get(\"enableCors\"));\n            String corsHosts = (String)data.get(\"corsHosts\");\n            if(corsHosts != null && corsHosts.length() > 0) {\n                eventData.put(\"corsHosts\", corsHosts);\n            }\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdCorsRule",
      "createDate": "2015-12-30T20:05:16.952"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.952",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:192",
    "@version": 1,
    "@class": "Event",
    "eventId": 10193,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by hus5 on 3/10/2015.\n */\npublic class UpdPublisherEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPublisher(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdPublisherEvRule",
      "createDate": "2015-12-30T20:05:16.964"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.964",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:193",
    "@version": 1,
    "@class": "Event",
    "eventId": 10194,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 31/01/15.\n *\n * AccessLevel R [user]\n *\n */\npublic class GetRuleDropdownRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload == null) {\n            inputMap.put(\"result\", \"Login is required\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        } else {\n            Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n            String host = (String) user.get(\"host\");\n            String hostRuleDropdown = getRuleDropdown(host);\n            if(hostRuleDropdown != null) {\n                inputMap.put(\"result\", hostRuleDropdown);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No rule can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.GetRuleDropdownRule",
      "createDate": "2015-12-30T20:05:16.971"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.971",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:194",
    "@version": 1,
    "@class": "Event",
    "eventId": 10195,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/03/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdEtagRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            eventData.put(\"enableEtag\", data.get(\"enableEtag\"));\n            String cacheControl = (String)data.get(\"cacheControl\");\n            if(cacheControl != null) {\n                eventData.put(\"cacheControl\", cacheControl);\n            }\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdEtagRule",
      "createDate": "2015-12-30T20:05:16.981"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.981",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:195",
    "@version": 1,
    "@class": "Event",
    "eventId": 10196,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic class UpdRuleEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updRule(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdRuleEvRule",
      "createDate": "2015-12-30T20:05:16.996"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:16.996",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:196",
    "@version": 1,
    "@class": "Event",
    "eventId": 10197,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 25/04/15.\n *\n * Moved from blog, news and forum as this can be share by other category.\n *\n */\npublic abstract class BranchRule extends AbstractRule implements Rule {\n\n    static final Logger logger = LoggerFactory.getLogger(BranchRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    public boolean addBranch (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String branchId = (String) data.get(branchType + \"Id\");\n        String host = (String) data.get(\"host\");\n        String id = branchType + \"Id\";\n        String error = null;\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            error = \"You can only add \" + branchType + \" from host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                ODocument branch = getODocumentByHostId(graph, branchType + \"HostIdIdx\", host, branchId);\n                if(branch != null) {\n                    error = \"Id \" + branchId + \" exists on host \" + host;\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    // make sure parent exists if it is not empty.\n                    List<String> parentRids = (List<String>)data.get(\"in_Own\");\n                    if(parentRids != null && parentRids.size() == 1) {\n                        Vertex parent = DbService.getVertexByRid(graph, parentRids.get(0));\n                        if(parent == null) {\n                            error = \"Parent with @rid \" + parentRids.get(0) + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                        } else {\n                            // convert parent from @rid to id\n                            List in_Own = new ArrayList();\n                            in_Own.add(parent.getProperty(id));\n                            eventData.put(\"in_Own\", in_Own);\n                        }\n                    }\n                    if(error == null) {\n                        // make sure all children exist if there are any.\n                        // and make sure all children have empty parent.\n                        List<String> childrenRids = (List<String>)data.get(\"out_Own\");\n                        if(childrenRids != null && childrenRids.size() > 0) {\n                            List<String> out_Own = new ArrayList<String>();\n                            for(String childRid: childrenRids) {\n                                if(childRid != null) {\n                                    if(parentRids!= null && childRid.equals(parentRids.get(0))) {\n                                        error = \"Parent shows up in the Children list\";\n                                        inputMap.put(\"responseCode\", 400);\n                                        break;\n                                    }\n                                    Vertex child = DbService.getVertexByRid(graph, childRid);\n                                    if(child == null) {\n                                        error = \"Child with @rid \" + childRid + \" cannot be found.\";\n                                        inputMap.put(\"responseCode\", 404);\n                                        break;\n                                    } else {\n                                        out_Own.add((String)child.getProperty(branchType + \"Id\"));\n                                    }\n                                }\n                            }\n                            eventData.put(\"out_Own\", out_Own);\n                        }\n                    }\n                    if(error == null) {\n                        eventMap.put(id, HashUtil.generateUUID());\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as one of branch has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean addBranchEv (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addBranchDb(branchType, data);\n        return true;\n    }\n\n    protected void addBranchDb(String branchType, Map<String, Object> data) throws Exception {\n        String className = branchType.substring(0, 1).toUpperCase() + branchType.substring(1);\n        String host = (String)data.get(\"host\");\n        String id = branchType + \"Id\";\n        String index = className + \".\" + id;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            List<String> parentIds = (List<String>)data.remove(\"in_Own\");\n            List<String> childrenIds = (List<String>)data.remove(\"out_Own\");\n            OrientVertex branch = graph.addVertex(\"class:\" + className, data);\n            createUser.addEdge(\"Create\", branch);\n            // parent\n            if(parentIds != null && parentIds.size() == 1) {\n                OrientVertex parent = getBranchByHostId(graph, branchType, host, parentIds.get(0));\n                if(parent != null) {\n                    parent.addEdge(\"Own\", branch);\n                }\n            }\n            // children\n            if(childrenIds != null) {\n                for(String childId: childrenIds) {\n                    OrientVertex child = getBranchByHostId(graph, branchType, host, childId);\n                    if(child != null) {\n                        branch.addEdge(\"Own\", child);\n                    }\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean delBranch (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String userHost = (String)user.get(\"host\");\n            if(userHost != null && !userHost.equals(host)) {\n                error = \"You can only delete \" + branchType + \" from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                Vertex branch = DbService.getVertexByRid(graph, rid);\n                if(branch != null) {\n                    // Do no check if there are any children for the branch. Just delete it. The edge\n                    // will be deleted automatically and children can be linked to other branch later.\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", host);\n                    String id = branchType + \"Id\";\n                    eventData.put(id, branch.getProperty(id));\n                } else {\n                    error = \"@rid \" + rid + \" doesn't exist on host \" + host;\n                    inputMap.put(\"responseCode\", 404);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as one of branch has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean delBranchEv (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delBranchDb(branchType, data);\n        return true;\n    }\n\n    protected void delBranchDb(String branchType, Map<String, Object> data) throws Exception {\n        String className = branchType.substring(0, 1).toUpperCase() + branchType.substring(1);\n        String id = branchType + \"Id\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex branch = getBranchByHostId(graph, branchType, (String)data.get(\"host\"), (String)data.get(id));\n            if(branch != null) {\n                graph.removeVertex(branch);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean updBranch (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String id = branchType + \"Id\";\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String userHost = (String)user.get(\"host\");\n            if(userHost != null && !userHost.equals(host)) {\n                inputMap.put(\"result\", \"You can only update \" + branchType + \" from host: \" + host);\n                inputMap.put(\"responseCode\", 403);\n                return false;\n            } else {\n                Vertex branch = DbService.getVertexByRid(graph, rid);\n                if(branch != null) {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                    eventData.put(\"updateDate\", new java.util.Date());\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n\n                    // make sure parent exists if it is not empty.\n                    List parentRids = (List)data.get(\"in_Own\");\n                    if(parentRids != null) {\n                        if(rid.equals(parentRids.get(0))) {\n                            inputMap.put(\"result\", \"parent @rid is the same as current @rid\");\n                            inputMap.put(\"responseCode\", 400);\n                            return false;\n                        }\n                        Vertex parent = DbService.getVertexByRid(graph, (String)parentRids.get(0));\n                        if(parent != null) {\n                            String storedParentRid = null;\n                            String storedParentId = null;\n                            for (Vertex vertex : (Iterable<Vertex>) branch.getVertices(Direction.IN, \"Own\")) {\n                                // we only expect one parent here.\n                                storedParentRid = vertex.getId().toString();\n                                storedParentId = vertex.getProperty(id);\n                            }\n                            if(parentRids.get(0).equals(storedParentRid)) {\n                                // same parent, do nothing\n                            } else {\n                                eventData.put(\"delParentId\", storedParentId);\n                                eventData.put(\"addParentId\", parent.getProperty(id));\n                            }\n                        } else {\n                            inputMap.put(\"result\", \"Parent with @rid \" + parentRids.get(0) + \" cannot be found\");\n                            inputMap.put(\"responseCode\", 404);\n                            return false;\n                        }\n                    }\n                    // make sure all children exist if there are any.\n                    // and make sure all children have empty parent.\n                    List<String> childrenRids = (List<String>)data.get(\"out_Own\");\n                    if(childrenRids != null && childrenRids.size() > 0) {\n                        List<String> childrenIds = new ArrayList<String>();\n                        Set<String> inputChildren = new HashSet<String>();\n                        for(String childRid: childrenRids) {\n                            if(parentRids != null && childRid.equals(parentRids.get(0))) {\n                                inputMap.put(\"result\", \"Parent shows up in the Children list\");\n                                inputMap.put(\"responseCode\", 400);\n                                return false;\n                            }\n                            if(childRid.equals(rid)) {\n                                inputMap.put(\"result\", \"Current object shows up in the Children list\");\n                                inputMap.put(\"responseCode\", 400);\n                                return false;\n                            }\n                            Vertex child = DbService.getVertexByRid(graph, childRid);\n                            if(child == null) {\n                                inputMap.put(\"result\", \"Child with @rid \" + childRid + \" cannot be found\");\n                                inputMap.put(\"responseCode\", 404);\n                                return false;\n                            } else {\n                                inputChildren.add((String)child.getProperty(id));\n                            }\n                        }\n                        Set<String> storedChildren = new HashSet<String>();\n                        for (Vertex vertex : (Iterable<Vertex>) branch.getVertices(Direction.OUT, \"Own\")) {\n                            storedChildren.add((String)vertex.getProperty(id));\n                        }\n\n                        Set<String> addChildren = new HashSet<String>(inputChildren);\n                        Set<String> delChildren = new HashSet<String>(storedChildren);\n                        addChildren.removeAll(storedChildren);\n                        delChildren.removeAll(inputChildren);\n\n                        if(addChildren.size() > 0) eventData.put(\"addChildren\", addChildren);\n                        if(delChildren.size() > 0) eventData.put(\"delChildren\", delChildren);\n                    }\n                } else {\n                    inputMap.put(\"result\",  \"@rid \" + rid + \" cannot be found\");\n                    inputMap.put(\"responseCode\", 404);\n                    return false;\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // update the branch tree as one of branch has changed.\n        Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n        if(cache != null) {\n            cache.remove(host + branchType);\n        }\n        return true;\n    }\n\n    public boolean updBranchEv (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updBranchDb(branchType, data);\n        return true;\n    }\n\n    public OrientVertex getBranchByHostId(OrientGraph graph, String branchType, String host, String id) {\n        OrientVertex branch = null;\n        OIndex<?> hostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(branchType + \"HostIdIdx\");\n        OCompositeKey key = new OCompositeKey(host, id);\n        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n        if (oid != null) {\n            branch = graph.getVertex(oid.getRecord());\n        }\n        return branch;\n    }\n\n    protected void updBranchDb(String branchType, Map<String, Object> data) throws Exception {\n        String className = branchType.substring(0, 1).toUpperCase() + branchType.substring(1);\n        String id = branchType + \"Id\";\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex branch = getBranchByHostId(graph, branchType, host, (String)data.get(id));\n            if (branch != null) {\n                if(data.get(\"description\") != null) {\n                    branch.setProperty(\"description\", data.get(\"description\"));\n                } else {\n                    branch.removeProperty(\"description\");\n                }\n                if(data.get(\"attributes\") != null) {\n                    branch.setProperty(\"attributes\", data.get(\"attributes\"));\n                } else {\n                    branch.removeProperty(\"attributes\");\n                }\n                branch.setProperty(\"updateDate\", data.get(\"updateDate\"));\n\n                // parent\n                String delParentId = (String)data.get(\"delParentId\");\n                if(delParentId != null) {\n                    for (Edge edge : (Iterable<Edge>) branch.getEdges(Direction.IN, \"Own\")) {\n                        graph.removeEdge(edge);\n                    }\n                }\n                String addParentId = (String)data.get(\"addParentId\");\n                if(addParentId != null) {\n                    OrientVertex parent = getBranchByHostId(graph, branchType, host, addParentId);\n                    if (parent != null) {\n                        parent.addEdge(\"Own\", branch);\n                    }\n                }\n\n                // handle addChildren and delChildren\n                Set<String> addChildren = (Set)data.get(\"addChildren\");\n                if(addChildren != null) {\n                    for(String childId: addChildren) {\n                        OrientVertex vertex = getBranchByHostId(graph, branchType, host, childId);\n                        branch.addEdge(\"Own\", vertex);\n                    }\n                }\n                Set<String> delChildren = (Set)data.get(\"delChildren\");\n                if(delChildren != null) {\n                    for(String childId: delChildren) {\n                        OrientVertex vertex = getBranchByHostId(graph, branchType, host, childId);\n                        for (Edge edge : (Iterable<Edge>) branch.getEdges(Direction.OUT, \"Own\")) {\n                            if(edge.getVertex(Direction.IN).equals(vertex)) graph.removeEdge(edge);\n                        }\n                    }\n                }\n                // updateUser\n                updateUser.addEdge(\"Update\", branch);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean downBranch (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String id = branchType + \"Id\";\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex branch = (OrientVertex)DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(branch == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has down voted the branch before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(branch, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(branch)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have down voted the \" + branchType + \" already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", host);\n                    eventData.put(id, branch.getProperty(id));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as one of branch has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean downBranchEv (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        downBranchDb(branchType, data);\n        return true;\n    }\n\n    protected void downBranchDb(String branchType, Map<String, Object> data) throws Exception {\n        String className = branchType.substring(0, 1).toUpperCase() + branchType.substring(1);\n        String id = branchType + \"Id\";\n        String index = className + \".\" + id;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex branch = (OrientVertex)graph.getVertexByKey(index, data.get(id));\n            if(branch != null && updateUser != null) {\n                // remove UpVote edge if there is.\n                for (Edge edge : updateUser.getEdges(branch, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(branch)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"DownVote\", branch);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean upBranch (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String id = branchType + \"Id\";\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex branch = (OrientVertex)DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(branch == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has up voted the branch before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(branch, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(branch)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have up voted the \" + branchType + \" already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", host);\n                    eventData.put(id, branch.getProperty(id));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as one of branch has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean upBranchEv (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upBranchDb(branchType, data);\n        return true;\n    }\n\n    protected void upBranchDb(String branchType, Map<String, Object> data) throws Exception {\n        String className = branchType.substring(0, 1).toUpperCase() + branchType.substring(1);\n        String id = branchType + \"Id\";\n        String index = className + \".\" + id;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex branch = (OrientVertex)graph.getVertexByKey(index, data.get(id));\n            if(branch != null && updateUser != null) {\n                // remove DownVote edge if there is.\n                for (Edge edge : updateUser.getEdges(branch, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(branch)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"UpVote\", branch);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean getBranchTree(String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String json = null;\n        Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            branchMap.put(\"treeCache\", cache);\n        } else {\n            json = (String)cache.get(host + branchType);\n        }\n        if(json == null) {\n            json = getBranchTreeDb(branchType, host);\n            cache.put(host + branchType, json);\n        }\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No document can be found\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n\n    protected String getBranchTreeDb(String branchType, String host) {\n        String json = null;\n        String sql = \"SELECT FROM \" + branchType + \" WHERE host = ? and in_Own IS NULL ORDER BY id\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = graph.getRawGraph().command(query).execute(host);\n            if(docs.size() > 0) {\n                json = OJSONWriter.listToJSON(docs, \"rid,fetchPlan:[*]in_Create:-2 [*]out_Create:-2 [*]in_Update:-2 [*]out_Update:-2 [*]out_Own:-1\");\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    public boolean getBranch(String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String)data.get(\"host\");\n        Object userHost = user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            inputMap.put(\"result\", \"You can only get \" + branchType + \" from host: \" + host);\n            inputMap.put(\"responseCode\", 403);\n            return false;\n        } else {\n            String docs = getBranchDb(branchType, host);\n            if(docs != null) {\n                inputMap.put(\"result\", docs);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No document can be found\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        }\n    }\n\n    protected String getBranchDb(String branchType, String host) {\n        String json = null;\n        String sql = \"SELECT FROM \" + branchType + \" WHERE host = ? ORDER BY createDate\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = graph.getRawGraph().command(query).execute(host);\n            if(docs.size() > 0) {\n                json = OJSONWriter.listToJSON(docs, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    public boolean getBranchDropdown (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String host = (String)data.get(\"host\");\n        if(payload == null) {\n            inputMap.put(\"result\", \"Login is required\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        } else {\n            String docs = getBranchDropdownDb(branchType, host);\n            if(docs != null) {\n                inputMap.put(\"result\", docs);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No document can be found\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        }\n    }\n\n    protected String getBranchDropdownDb(String branchType, String host) {\n        String json = null;\n        String sql = \"SELECT FROM \" + branchType + \" WHERE host = ? ORDER BY id\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = graph.getRawGraph().command(query).execute(host);\n            if(docs.size() > 0) {\n                List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n                for(ODocument doc: docs) {\n                    Map<String, String> map = new HashMap<String, String>();\n                    map.put(\"label\", (String)doc.field(branchType + \"Id\"));\n                    map.put(\"value\", doc.field(\"@rid\").toString());\n                    list.add(map);\n                }\n                json = mapper.writeValueAsString(list);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.BranchRule",
      "createDate": "2015-12-30T20:05:17.013"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.013",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:197",
    "@version": 1,
    "@class": "Event",
    "eventId": 10198,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.product;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/04/15.\n */\npublic class UpProductEvRule extends AbstractProductRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upVoteProduct(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.UpProductEvRule",
      "createDate": "2015-12-30T20:05:17.020"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.020",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:198",
    "@version": 1,
    "@class": "Event",
    "eventId": 10199,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.product;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic abstract class AbstractProductRule extends AbstractRule implements Rule {\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n    static final Logger logger = LoggerFactory.getLogger(AbstractProductRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void upVoteProduct(Map<String, Object> data) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex) graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex product = (OrientVertex) graph.getVertexByKey(\"Product.productId\", data.get(\"productId\"));\n            if (product != null && updateUser != null) {\n                // remove DownVote edge if there is.\n                for (Edge edge : updateUser.getEdges(product, Direction.OUT, \"DownVote\")) {\n                    if (edge.getVertex(Direction.IN).equals(product)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"UpVote\", product);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void downVoteProduct(Map<String, Object> data) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex) graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex product = (OrientVertex) graph.getVertexByKey(\"Product.productId\", data.get(\"productId\"));\n            if (product != null && updateUser != null) {\n                // remove UpVote edge if there is.\n                for (Edge edge : updateUser.getEdges(product, Direction.OUT, \"UpVote\")) {\n                    if (edge.getVertex(Direction.IN).equals(product)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"DownVote\", product);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    /*\n    protected ODocument getProductByHostName(String host, String name) {\n        ODocument product = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OIndex<?> hostNameIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameIdx\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OCompositeKey key = new OCompositeKey(host, name);\n            OIdentifiable oid = (OIdentifiable) hostNameIdx.get(key);\n            if (oid != null) {\n                product = (ODocument)oid.getRecord();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return product;\n    }\n\n    protected ODocument addProduct(Map<String, Object> data, String userId) throws Exception {\n        ODocument product = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            productMap.put(\"cache\", cache);\n        }\n\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            product = new ODocument(schema.getClass(\"Product\"));\n            product.field(\"host\", data.get(\"host\"));\n            product.field(\"name\", data.get(\"name\"));\n            product.field(\"attributes\", data.get(\"attributes\"));\n            java.util.Date d = new java.util.Date();\n            product.field(\"createDate\", d);\n            product.field(\"updateDate\", d);\n            product.field(\"createUser\", userId);\n            product.save();\n            cache.put(product.field(\"@rid\").toString(), product);\n            String categoryRid = (String)data.get(\"categoryRid\");\n            if(categoryRid != null) {\n                // get the category and update entities list\n                ODocument category = getCategoryByRid(categoryRid);\n                List entities = category.field(\"entities\");\n                if(entities == null) {\n                    entities = new ArrayList();\n                }\n                entities.add(product);\n                category.field(\"entities\", entities);\n                category.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return product;\n    }\n\n    protected void delProduct(String productRid) throws Exception {\n        ODocument product = DbService.delODocumentByRid(productRid);\n        // rebuild cache in memory.\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        // update central cache\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(productRid);\n        }\n    }\n\n    protected void updProduct(String productRid, Map<String, Object> data) throws Exception {\n        ODocument product = getProductByRid(productRid);\n        if(product != null) {\n            product.field(\"name\", data.get(\"name\"));\n            product.field(\"attributes\", data.get(\"attributes\"));\n            product.field(\"updateDate\", new java.util.Date());\n            product.save();\n        }\n    }\n\n    protected List<ODocument> searchProductDb(Map<String, Object> criteria) {\n        List<ODocument> products = null;\n        StringBuilder sql = new StringBuilder(\"SELECT FROM Product \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sql.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sql.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sql.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sql.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql.toString());\n            products = db.command(query).execute();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return products;\n    }\n\n    protected String searchProduct(Map<String, Object> criteria) throws Exception {\n        // first check if the full list is in cache.\n        String json = null;\n        Map<String, Object> result = new HashMap<String, Object>();\n        List<ODocument> products = new ArrayList<ODocument>();\n        int total = 0;\n        String host = (String)criteria.get(\"host\");\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        Map<String, Object> hostMap = (Map<String, Object>)productMap.get(host);\n        if(hostMap == null) {\n            hostMap = new ConcurrentHashMap<String, Object>(10, 0.9f, 1);\n            productMap.put(host, hostMap);\n        }\n        String key = null;\n        String categoryRid = (String)criteria.get(\"categoryRid\");\n        if(categoryRid != null) {\n            key = categoryRid + criteria.get(\"sortedBy\");\n        } else {\n            key = \"\" + criteria.get(\"sortedBy\");\n        }\n        Integer pageNo = (Integer)criteria.remove(\"pageNo\");\n        Integer pageSize = (Integer)criteria.remove(\"pageSize\");\n        List<String> list = (List<String>)hostMap.get(key);\n        if(list == null) {\n            // not in cache, search from db and put them in cache.\n            List<ODocument> docs = searchProductDb(criteria);\n            total = docs.size();\n            int i = 0;\n            list = new ArrayList<String>();\n            for(ODocument doc: docs) {\n                list.add(doc.field(\"@rid\").toString());\n                if(i >= pageSize * (pageNo - 1) && i < pageSize*pageNo) {\n                    products.add(doc);\n                    i++;\n                    // put only the current page in cache.\n                    ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n                    if(cache == null) {\n                        cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                                .maximumWeightedCapacity(1000)\n                                .build();\n                        productMap.put(\"cache\", cache);\n                    }\n                    cache.put(doc.field(\"@rid\").toString(), doc);\n                }\n            }\n        } else {\n            // we have a list of rids.\n            total = list.size();\n            for(int i = pageSize*(pageNo - 1); i < Math.min(pageSize * pageNo, list.size()); i++) {\n                String rid = (String)list.get(i);\n                ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n                ODocument product = (ODocument)cache.get(rid);\n                if(product == null) {\n                    // not in cache, get from db and put it into the cache.\n                    product = DbService.getODocumentByRid(rid);\n                    cache.put(rid, product);\n                }\n                products.add(product);\n            }\n        }\n        if(products != null && products.size() > 0) {\n            result.put(\"total\", total);\n            result.put(\"products\", OJSONWriter.listToJSON(products, null));\n            json = mapper.writeValueAsString(result);\n        }\n        return json;\n    }\n\n    protected Map<String, Object> refreshCache(String host) {\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        Map<String, Object> criteria = new HashMap<String, Object>();\n        criteria.put(\"host\", host);\n        criteria.put(\"sortedBy\", \"updateDate\");\n        criteria.put(\"sortDir\", \"DESC\");\n        List<ODocument> products = searchProductDb(criteria);\n        Map<String, Object> hostMap = new ConcurrentHashMap<String, Object>(2, 0.9f, 1);\n        List<String> newList = new ArrayList<String>();\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            productMap.put(\"cache\", cache);\n        }\n        int i = 0;\n        int pageSize = 2; // TODO get from config\n        for (ODocument product : products) {\n            // cache the first page for now. most people will read the first page as it contains\n            // new posts.\n            if(i < pageSize) {\n                cache.put(product.field(\"@rid\").toString(), product);\n            }\n            newList.add(product.field(\"@rid\").toString());\n        }\n        hostMap.put(\"newList\", newList);\n\n        // TODO build hot list\n\n        productMap.put(host, hostMap);\n        return hostMap;\n    }\n    */\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.AbstractProductRule",
      "createDate": "2015-12-30T20:05:17.029"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.029",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:199",
    "@version": 1,
    "@class": "Event",
    "eventId": 10200,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.product;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/04/15.\n */\npublic class DownProductEvRule extends AbstractProductRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        downVoteProduct(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.DownProductEvRule",
      "createDate": "2015-12-30T20:05:17.035"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.035",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:200",
    "@version": 1,
    "@class": "Event",
    "eventId": 10201,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.product;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/04/15.\n *\n * AccessLevel R [user]\n */\npublic class UpProductRule extends AbstractProductRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(UpProductRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex product = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(product == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has up voted the product before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(product, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(product)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have up voted the product already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"productId\", product.getProperty(\"productId\"));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.UpProductRule",
      "createDate": "2015-12-30T20:05:17.044"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.044",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:201",
    "@version": 1,
    "@class": "Event",
    "eventId": 10202,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.product;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/04/15.\n *\n * AccessLevel R [user]\n */\npublic class DownProductRule extends AbstractProductRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(DownProductRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex product = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(product == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(product, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(product)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have down voted the product already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"productId\", product.getProperty(\"productId\"));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.DownProductRule",
      "createDate": "2015-12-30T20:05:17.053"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.053",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:202",
    "@version": 1,
    "@class": "Event",
    "eventId": 10203,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.log;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.db.AbstractDbRule;\n\nimport java.util.Map;\n\n/**\n * Created by admin on 2015-01-20.\n */\npublic class LogEventEvRule extends AbstractDbRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        // TODO Dispatch the event to all the internal subscribers.\n        // This will be called when replay the events and be careful regarding to the side effects.\n\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.log.LogEventEvRule",
      "createDate": "2015-12-30T20:05:17.062"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.062",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:203",
    "@version": 1,
    "@class": "Event",
    "eventId": 10204,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.log;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-20.\n *\n * This is a handler to log all the client side and server side exceptions. Also, it\n * can be used to instrument performance logging or any other events happening on\n * the client side. The data payload is a flexible structure and it is up to you\n * to define what and when to be logged.\n *\n * AccessLevel A\n *\n */\npublic class LogEventRule extends AbstractRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String userId = null;\n        if(payload != null) {\n            Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n            userId = (String)user.get(\"userId\");\n        }\n\n        // TODO send notifications for serious events or exceptions.\n        // Some events might trigger a pager\n        // Some events might trigger a email\n\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n        eventData.put(\"createDate\", new java.util.Date());\n        if(userId != null) eventData.put(\"createUserId\", userId);\n        eventData.put(\"ipAddress\", inputMap.get(\"ipAddress\"));\n\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.log.LogEventRule",
      "createDate": "2015-12-30T20:05:17.069"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.069",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:204",
    "@version": 1,
    "@class": "Event",
    "eventId": 10205,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 8/29/2014.\n *\n * owner can delete any form and admin or formAdmin can only delete forms belong to the host and name must\n * contain the host.\n *\n * AccessLevel R [owner, admin, formAdmin\n */\npublic class DelFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String formId = (String)data.get(\"formId\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            // admin or formAdmin\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only delete form for host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if(!formId.contains(host)) {\n                    // you are not allowed to delete form as it is not owned by the host.\n                    error = \"form id doesn't contain host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    String json = getFormById(inputMap);\n                    if(json == null) {\n                        error = \"Form with id \" + formId + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map<String, Object> form = mapper.readValue(json,\n                                new TypeReference<HashMap<String, Object>>() {\n                                });\n                        // check the version\n                        int storedVersion = (int)form.get(\"@version\");\n                        if (inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"formId\", form.get(\"formId\"));\n                        }\n                    }\n                }\n            }\n        } else {\n            // owner\n            int inputVersion = (int)data.get(\"@version\");\n            String json = getFormById(inputMap);\n            if(json == null) {\n                error = \"Form with id \" + formId + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map<String, Object> form = mapper.readValue(json,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                // check the version\n                int storedVersion = (int)form.get(\"@version\");\n                if (inputVersion != storedVersion) {\n                    inputMap.put(\"responseCode\", 400);\n                    error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"formId\", form.get(\"formId\"));\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.DelFormRule",
      "createDate": "2015-12-30T20:05:17.080"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.080",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:205",
    "@version": 1,
    "@class": "Event",
    "eventId": 10206,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.hazelcast.core.ITopic;\nimport com.hazelcast.core.Message;\nimport com.hazelcast.core.MessageListener;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport net.engio.mbassy.bus.MBassador;\nimport net.engio.mbassy.listener.Handler;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * Created by steve on 23/09/14.\n */\npublic abstract class AbstractFormRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractFormRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    static {\n        MBassador<Map<String, Object>> ruleBus = ServiceLocator.getInstance().getEventBus(\"rule\");\n        ruleBus.subscribe(new RuleMessageListenerImpl());\n    }\n\n    private static class RuleMessageListenerImpl {\n        @Handler\n        public void onMessage(Map<String, Object> eventMap) throws Exception {\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // which form has a drop down of rules that depending on addRule, delRule and impRule?\n            // it is defined in subscribe data for this rule AbstractFormRule. remove the form from\n            // cache so that the dropdown list can be enriched again when the form is called next\n            // time. The reason I don't reload the form here is because there might be so many rules\n            // imported at the same time and you don't want to reload again and again. Lazy loading.\n            Map map = getRuleByRuleClass(this.getClass().getName());\n            Object isSubscriber = map.get(\"isSubscriber\");\n            if(isSubscriber != null && (boolean)isSubscriber) {\n                Map subMap = (Map)map.get(\"subMap\");\n                List<String> formIds = (List)subMap.get(\"rule\");\n                Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n                ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n                if(cache != null) {\n                    for(String formId: formIds) {\n                        cache.remove(formId);\n                    }\n                }\n            }\n\n            // find the vertex for rule com.networknt.light.rule.rule.AbstractRuleRule and find edge\n            // Depend from Form vertex.\n\n            /*\n            Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"formId\"));\n            }\n            */\n        }\n    }\n\n    /*\n    static {\n        System.out.println(\"AbstractFromRule is called\");\n        ITopic<Map<String, Object>> rule = ServiceLocator.getInstance().getHzInstance().getTopic( \"rule\" );\n        rule.addMessageListener(new RuleMessageListenerImpl());\n\n        ITopic<Map<String, Object>> host = ServiceLocator.getInstance().getHzInstance().getTopic( \"host\" );\n        host.addMessageListener(new HostMessageListenerImpl());\n\n        ITopic<Map<String, Object>> role = ServiceLocator.getInstance().getHzInstance().getTopic( \"role\" );\n        role.addMessageListener(new RoleMessageListenerImpl());\n\n    }\n\n    private static class RuleMessageListenerImpl implements MessageListener<Map<String, Object>> {\n        @Override\n        public void onMessage(final Message<Map<String, Object>> message) {\n            Map<String, Object> eventMap = message.getMessageObject();\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // do we know which form to be removed from cache? Need to define the dependency between form\n            // and rule\n            Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"formId\"));\n            }\n        }\n    }\n\n    private static class HostMessageListenerImpl implements MessageListener<Map<String, Object>> {\n        @Override\n        public void onMessage(final Message<Map<String, Object>> message) {\n            Map<String, Object> eventMap = message.getMessageObject();\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // simply remove the page from cache in order to reload in the next getPage rule.\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"formId\"));\n            }\n        }\n    }\n\n    private static class RoleMessageListenerImpl implements MessageListener<Map<String, Object>> {\n        @Override\n        public void onMessage(final Message<Map<String, Object>> message) {\n            Map<String, Object> eventMap = message.getMessageObject();\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // simply remove the page from cache in order to reload in the next getPage rule.\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"formId\"));\n            }\n        }\n    }\n    */\n    protected String getFormById(Map<String, Object> inputMap) throws Exception {\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String formId = (String)data.get(\"formId\");\n        String json  = null;\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            formMap.put(\"cache\", cache);\n        } else {\n            json = (String)cache.get(formId);\n        }\n        if(json == null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                OrientVertex form = (OrientVertex)graph.getVertexByKey(\"Form.formId\", formId);\n                if(form != null) {\n                    json = form.getRecord().toJSON();\n                    if(formId.endsWith(\"_d\")) {\n                        // enrich the form with dynamicOptions for drop down values\n                        json = enrichForm(json, inputMap);\n                    }\n                    cache.put(formId, json);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        return json;\n    }\n\n    protected String enrichForm(String json, Map<String, Object> inputMap)  throws Exception {\n    \tMap<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Pattern pattern = Pattern.compile(\"\\\\[\\\\{\\\"label\\\":\\\"dynamic\\\",([^]]+)\\\\}\\\\]\");\n        Matcher m = pattern.matcher(json);\n        StringBuffer sb = new StringBuffer(json.length());\n        while (m.find()) {\n            String text = m.group(1);\n            // get the values from rules.\n            logger.debug(\"text = {}\", text);\n            text = text.substring(8);\n            logger.debug(\"text = {}\", text);\n            Map<String, Object> jsonMap = mapper.readValue(text,\n                    new TypeReference<HashMap<String, Object>>() {});\n            jsonMap.put(\"payload\", inputMap.get(\"payload\"));\n            // inject host into data here.\n            Map<String, Object> dataMap = new HashMap<String, Object>();\n            dataMap.put(\"host\", data.get(\"host\"));\n            jsonMap.put(\"data\", dataMap);\n            RuleEngine.getInstance().executeRule(Util.getCommandRuleId(jsonMap), jsonMap);\n            String result = (String)jsonMap.get(\"result\");\n            logger.debug(\"result = {}\", result);\n            if(result != null && result.length() > 0) {\n                m.appendReplacement(sb, Matcher.quoteReplacement(result));\n            } else {\n                m.appendReplacement(sb, Matcher.quoteReplacement(\"[ ]\"));\n            }\n        }\n        m.appendTail(sb);\n        logger.debug(\"form = {}\", sb.toString());\n        return sb.toString();\n    }\n\n    protected String addForm(Map<String, Object> data) throws Exception {\n        String json = null;\n        String formId = (String)data.get(\"formId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex form = graph.addVertex(\"class:Form\", data);\n            createUser.addEdge(\"Create\", form);\n            // According to action in the list, populate validation schema in rule class\n            List<Map<String, Object>> actions = form.getProperty(\"action\");\n            for(Map<String, Object> action: actions) {\n                String ruleClass = Util.getCommandRuleId(action);\n                Vertex rule = graph.getVertexByKey(\"Rule.ruleClass\", ruleClass);\n                if(rule != null) {\n                    rule.setProperty(\"schema\", data.get(\"schema\"));\n                    Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n                    ConcurrentMap<String, Map<String, Object>> cache = (ConcurrentMap<String, Map<String, Object>>)ruleMap.get(\"cache\");\n                    if(cache == null) {\n                        cache.remove(ruleClass);\n                    }\n                }\n            }\n            graph.commit();\n            json = form.getRecord().toJSON();\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(formId);\n        }\n        return json;\n    }\n\n    protected void delForm(String formId) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex form = graph.getVertexByKey(\"Form.formId\", formId);\n            if(form != null) {\n                List<Map<String, Object>> actions = form.getProperty(\"action\");\n                for(Map<String, Object> action: actions) {\n                    String ruleClass = Util.getCommandRuleId(action);\n                    Vertex rule = graph.getVertexByKey(\"Rule.ruleClass\", ruleClass);\n                    if(rule != null) {\n                        rule.removeProperty(\"schema\");\n                        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n                        ConcurrentMap<String, Map<String, Object>> cache = (ConcurrentMap<String, Map<String, Object>>)ruleMap.get(\"cache\");\n                        if(cache == null) {\n                            cache.remove(ruleClass);\n                        }\n                    }\n                }\n                graph.removeVertex(form);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(formId);\n        }\n    }\n\n    protected String updForm(Map<String, Object> data) throws Exception {\n        String json = null;\n        String formId = (String)data.get(\"formId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex form = (OrientVertex)graph.getVertexByKey(\"Form.formId\", formId);\n            if(form != null) {\n                form.setProperty(\"action\", data.get(\"action\"));\n                form.setProperty(\"schema\", data.get(\"schema\"));\n                form.setProperty(\"form\", data.get(\"form\"));\n                form.setProperty(\"modelData\", data.get(\"modelData\"));\n                form.setProperty(\"updateDate\", data.get(\"updateDate\"));\n\n                Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n                updateUser.addEdge(\"Update\", form);\n\n                // According to action in the list, populate validation schema.\n                List<Map<String, Object>> actions = form.getProperty(\"action\");\n                for(Map<String, Object> action: actions) {\n                    String ruleClass = Util.getCommandRuleId(action);\n                    Vertex rule = graph.getVertexByKey(\"Rule.ruleClass\", ruleClass);\n                    if(rule != null) {\n                        rule.setProperty(\"schema\", data.get(\"schema\"));\n                        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n                        ConcurrentMap<String, Map<String, Object>> cache = (ConcurrentMap<String, Map<String, Object>>)ruleMap.get(\"cache\");\n                        if(cache == null) {\n                            cache.remove(ruleClass);\n                        }\n                    }\n                }\n            }\n            graph.commit();\n            json = form.getRecord().toJSON();\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(formId);\n        }\n        return json;\n    }\n\n    protected String impForm(Map<String, Object> data) throws Exception {\n        String json = null;\n        String formId = (String)data.get(\"formId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex form = (OrientVertex)graph.getVertexByKey(\"Form.formId\", formId);\n            if(form != null) {\n                graph.removeVertex(form);\n            }\n\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            form = graph.addVertex(\"class:Form\", data);\n            createUser.addEdge(\"Create\", form);\n            // According to action in the list, populate validation schema.\n            List<Map<String, Object>> actions = form.getProperty(\"action\");\n            for(Map<String, Object> action: actions) {\n                String ruleClass = Util.getCommandRuleId(action);\n                Vertex rule = graph.getVertexByKey(\"Rule.ruleClass\", ruleClass);\n                if(rule != null) {\n                    rule.setProperty(\"schema\", data.get(\"schema\"));\n                    Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n                    ConcurrentMap<String, Map<String, Object>> cache = (ConcurrentMap<String, Map<String, Object>>)ruleMap.get(\"cache\");\n                    if(cache == null) {\n                        cache.remove(ruleClass);\n                    }\n                }\n            }\n            graph.commit();\n            json = form.getRecord().toJSON();\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(formId);\n        }\n        return json;\n    }\n\n    protected String getAllForm(String host) {\n        String sql = \"SELECT FROM Form\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> forms = graph.getRawGraph().command(query).execute();\n            if(forms != null && forms.size() > 0) {\n                json = OJSONWriter.listToJSON(forms, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getFormMap(String host) throws Exception {\n        String sql = \"SELECT FROM Form\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Map<String, Map<String, Object>> formMap = new HashMap<String, Map<String, Object>>();\n            for (Vertex v : (Iterable<Vertex>) graph.command(\n                    new OCommandSQL(sql)).execute()) {\n                Map<String, Object> contentMap = new HashMap<String, Object>();\n                contentMap.put(\"action\", v.getProperty(\"action\"));\n                contentMap.put(\"schema\", v.getProperty(\"schema\"));\n                contentMap.put(\"form\", v.getProperty(\"form\"));\n                contentMap.put(\"modelData\", v.getProperty(\"modelData\"));\n                formMap.put(v.getProperty(\"formId\"), contentMap);\n            }\n            json = mapper.writeValueAsString(formMap);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.AbstractFormRule",
      "createDate": "2015-12-30T20:05:17.087"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.087",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:206",
    "@version": 1,
    "@class": "Event",
    "eventId": 10207,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/26/2014.\n */\npublic class UpdFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updForm(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.UpdFormEvRule",
      "createDate": "2015-12-30T20:05:17.100"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.100",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:207",
    "@version": 1,
    "@class": "Event",
    "eventId": 10208,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.util.Util;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * Created by steve on 8/25/2014.\n *\n * You don't need to check if the form is in db or not as the form should be cached\n * in memory image already while starting the server.\n *\n * AccessLevel A\n *\n */\npublic class GetFormRule extends AbstractFormRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(GetFormRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String formId = (String)data.get(\"formId\");\n        String json = getFormById(inputMap);\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Form with \" + formId + \" cannot be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.GetFormRule",
      "createDate": "2015-12-30T20:05:17.106"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.106",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:208",
    "@version": 1,
    "@class": "Event",
    "eventId": 10209,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 9/4/2014.\n * when importing form, it might be existing or new. need to handle two situations.\n *\n */\npublic class ImpFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute(Object... objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        impForm(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.ImpFormEvRule",
      "createDate": "2015-12-30T20:05:17.115"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.115",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:209",
    "@version": 1,
    "@class": "Event",
    "eventId": 10210,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 9/4/2014.\n *\n * Is there a way to verify that the memoryImage is in sync with db?\n * In that case, we don't need to reload from db every time this rule is executed.\n * What we can do is to load all forms in the beginning when server starts, and make\n * sure all the form updates are gone through these set of rules.\n *\n * AccessLevel R [user, admin, formAdmin]\n *\n */\npublic class GetAllFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>) payload.get(\"user\");\n        String host = (String) user.get(\"host\");\n        String hostForms = getAllForm(host);\n        if(hostForms != null) {\n            inputMap.put(\"result\", hostForms);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No form can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.GetAllFormRule",
      "createDate": "2015-12-30T20:05:17.120"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.120",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:210",
    "@version": 1,
    "@class": "Event",
    "eventId": 10211,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 8/29/2014.\n *\n */\npublic class UpdFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String formId = (String)data.get(\"formId\");\n        String error = null;\n\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            // admin or formAdmin\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only update form from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if (!formId.contains(host)) {\n                    error = \"form id doesn't contain host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    String json = getFormById(inputMap);\n                    if(json == null) {\n                        error = \"Form with id \" + formId + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map<String, Object> form = mapper.readValue(json,\n                                new TypeReference<HashMap<String, Object>>() {\n                                });\n                        int storedVersion = (int)form.get(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            // no need to remove host from eventData as owner update won't touch id and host.\n                        }\n                    }\n                }\n            }\n        } else {\n            // owner\n            int inputVersion = (int)data.get(\"@version\");\n            String json = getFormById(inputMap);\n            if(json == null) {\n                error = \"Form with id \" + formId + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map<String, Object> form = mapper.readValue(json,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                int storedVersion = (int)form.get(\"@version\");\n                if(inputVersion != storedVersion) {\n                    inputMap.put(\"responseCode\", 400);\n                    error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                    eventData.put(\"updateDate\", new java.util.Date());\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    // no need to remove host from eventData as owner update won't touch id and host.\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.UpdFormRule",
      "createDate": "2015-12-30T20:05:17.127"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.127",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:211",
    "@version": 1,
    "@class": "Event",
    "eventId": 10212,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.page.AbstractPageRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/02/15.\n *\n * This is the rule that called by form loader.\n * It get all the forms and return a map from id to the content.\n *\n * accessLevel is owner by default.\n */\npublic class GetFormMapRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)user.get(\"host\");\n\n        String forms = getFormMap(host);\n        if(forms != null) {\n            inputMap.put(\"result\", forms);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No page can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.GetFormMapRule",
      "createDate": "2015-12-30T20:05:17.135"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.135",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:212",
    "@version": 1,
    "@class": "Event",
    "eventId": 10213,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Add a new form on the server. only owner can add form without host naming space.\n *\n * AccessLevel R [owner, admin, formAdmin]\n */\npublic class AddFormRule extends AbstractFormRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String formId = (String)data.get(\"formId\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add form from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if(!formId.contains(host)) {\n                    // you are not allowed to add form as it is not owned by the host.\n                    error = \"form id doesn't contain host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getFormById(inputMap);\n                    if(json != null) {\n                        error = \"Form with the same id exists\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            String json = getFormById(inputMap);\n            if(json != null) {\n                error = \"Form with the same id exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n                // remove host from data as this is owner adding role\n                eventData.remove(\"host\");\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.AddFormRule",
      "createDate": "2015-12-30T20:05:17.144"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.144",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:213",
    "@version": 1,
    "@class": "Event",
    "eventId": 10214,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/25/2014.\n */\npublic class AddFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addForm(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.AddFormEvRule",
      "createDate": "2015-12-30T20:05:17.154"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.154",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:214",
    "@version": 1,
    "@class": "Event",
    "eventId": 10215,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/26/2014.\n */\npublic class DelFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        String formId = (String)data.get(\"formId\");\n        delForm(formId);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.DelFormEvRule",
      "createDate": "2015-12-30T20:05:17.159"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.159",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:215",
    "@version": 1,
    "@class": "Event",
    "eventId": 10216,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 9/4/2014.\n *\n * Overwrite if the form exists in db.\n *\n * AccessLevel R [user, admin, formAdmin]\n *\n */\npublic class ImpFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        Map<String, Object> dataMap = mapper.readValue((String)data.get(\"content\"), new TypeReference<HashMap<String, Object>>() {});\n        String formId = (String)dataMap.get(\"formId\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only import form from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if(!formId.contains(host)) {\n                    // you are not allowed to add form as it is not owned by the host.\n                    error = \"form id doesn't contain host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    // Won't check if form exists or not here.\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", host);\n\n                    eventData.put(\"formId\", formId);\n                    eventData.put(\"action\", dataMap.get(\"action\"));\n                    eventData.put(\"schema\", dataMap.get(\"schema\"));\n                    eventData.put(\"form\", dataMap.get(\"form\"));\n                    if(dataMap.get(\"modelData\") != null) eventData.put(\"modelData\", dataMap.get(\"modelData\"));\n\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                }\n            }\n        } else {\n            // This is owner to import form, notice no host is passed in.\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n\n            eventData.put(\"formId\", formId);\n            eventData.put(\"action\", dataMap.get(\"action\"));\n            eventData.put(\"schema\", dataMap.get(\"schema\"));\n            eventData.put(\"form\", dataMap.get(\"form\"));\n            if(dataMap.get(\"modelData\") != null) eventData.put(\"modelData\", dataMap.get(\"modelData\"));\n\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.ImpFormRule",
      "createDate": "2015-12-30T20:05:17.166"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.166",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:216",
    "@version": 1,
    "@class": "Event",
    "eventId": 10217,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 28/12/14.\n * This the abstract class that implements functions for Blog, Forum and News as\n * they share similar traits. Since ids are generated and there is no need to check\n * uniqueness. Just make sure parent and children are checked and converted to ids.\n *\n */\npublic abstract class AbstractBfnRule extends BranchRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractBfnRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    public boolean addPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String parentId = (String) data.get(\"parentId\");\n        String parentRid = null;\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex parent = getBranchByHostId(graph, bfnType, host, parentId);\n            if(parent == null) {\n                error = \"Id \" + parentId + \" doesn't exist on host \" + host;\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                parentRid = parent.getId().toString();\n                Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n                eventData.put(\"postId\", HashUtil.generateUUID());\n                eventData.put(\"createDate\", new Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the bfn tree as the number of posts has changed.\n            Map<String, Object> bfnMap = ServiceLocator.getInstance().getMemoryImage(\"bfnMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)bfnMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + bfnType);\n            }\n            // update listcache as a new post is added.\n            ConcurrentMap<Object, Object> listCache = (ConcurrentMap<Object, Object>)bfnMap.get(\"listCache\");\n            if(listCache != null) {\n                listCache.remove(parentRid + \"createDate\");\n            }\n            return true;\n        }\n    }\n\n    public boolean addPostEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addPostDb(bfnType, data);\n        return true;\n    }\n\n    protected void addPostDb(String bfnType, Map<String, Object> data) throws Exception {\n        String className = bfnType.substring(0, 1).toUpperCase() + bfnType.substring(1);\n        String id = bfnType + \"Id\";\n        String index = className + \".\" + id;\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex post = graph.addVertex(\"class:Post\", data);\n            createUser.addEdge(\"Create\", post);\n            // parent\n            OrientVertex parent = getBranchByHostId(graph, bfnType, host, (String) data.get(\"parentId\"));\n            if(parent != null) {\n                parent.addEdge(\"HasPost\", post);\n            }\n            // tag\n            Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n            for(String tagId: inputTags) {\n                Vertex tag = null;\n                // get the tag is it exists\n                OIndex<?> tagHostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"tagHostIdIdx\");\n                logger.debug(\"tagHostIdIdx = \" + tagHostIdIdx);\n                OCompositeKey tagKey = new OCompositeKey(host, tagId);\n                logger.debug(\"tagKey =\" + tagKey);\n                OIdentifiable tagOid = (OIdentifiable) tagHostIdIdx.get(tagKey);\n                if (tagOid != null) {\n                    tag = graph.getVertex(tagOid.getRecord());\n                    post.addEdge(\"HasTag\", tag);\n                } else {\n                    tag = graph.addVertex(\"class:Tag\", \"host\", host, \"tagId\", tagId, \"createDate\", data.get(\"createDate\"));\n                    createUser.addEdge(\"Create\", tag);\n                    post.addEdge(\"HasTag\", tag);\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean delPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String)data.get(\"@rid\");\n        String host = (String)data.get(\"host\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex post = (OrientVertex)DbService.getVertexByRid(graph, rid);\n            if(post != null) {\n                // check if the post has comment, if yes, you cannot delete it for now\n                // TODO fix it after orientdb 2.2 release.\n                // https://github.com/orientechnologies/orientdb/issues/1108\n                if(post.countEdges(Direction.OUT, \"HasComment\") > 0) {\n                    error = \"Post has comment(s), cannot be deleted\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"postId\", post.getProperty(\"postId\"));\n                }\n            } else {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the bfn tree as the number of posts has changed.\n            Map<String, Object> bfnMap = ServiceLocator.getInstance().getMemoryImage(\"bfnMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)bfnMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + bfnType);\n            }\n            return true;\n        }\n    }\n\n    public boolean delPostEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delPostDb(bfnType, data);\n        return true;\n    }\n\n    protected void delPostDb(String bfnType, Map<String, Object> data) throws Exception {\n        String className = bfnType.substring(0, 1).toUpperCase() + bfnType.substring(1);\n        String id = bfnType + \"Id\";\n        String index = className + \".\" + id;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex post = (OrientVertex)graph.getVertexByKey(\"Post.postId\", data.get(\"postId\"));\n            if(post != null) {\n                // TODO cascade deleting all comments belong to the post.\n                // Need to come up a query on that to get the entire tree.\n                /*\n                // https://github.com/orientechnologies/orientdb/issues/1108\n                delete graph...\n                */\n                graph.removeVertex(post);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean updPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            // update post itself and we might have a new api to move post from one parent to another.\n            Vertex post = DbService.getVertexByRid(graph, rid);\n            if(post != null) {\n                Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"postId\", post.getProperty(\"postId\"));\n                eventData.put(\"title\", data.get(\"title\"));\n                eventData.put(\"source\", data.get(\"source\"));\n                eventData.put(\"summary\", data.get(\"summary\"));\n                eventData.put(\"content\", data.get(\"content\"));\n                eventData.put(\"updateDate\", new Date());\n                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                // tags\n                Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n                Set<String> storedTags = new HashSet<String>();\n                for (Vertex vertex : (Iterable<Vertex>) post.getVertices(Direction.OUT, \"HasTag\")) {\n                    storedTags.add((String)vertex.getProperty(\"tagId\"));\n                }\n\n                Set<String> addTags = new HashSet<String>(inputTags);\n                Set<String> delTags = new HashSet<String>(storedTags);\n                addTags.removeAll(storedTags);\n                delTags.removeAll(inputTags);\n\n                if(addTags.size() > 0) eventData.put(\"addTags\", addTags);\n                if(delTags.size() > 0) eventData.put(\"delTags\", delTags);\n            } else {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the bfn tree as the last update time has changed.\n            Map<String, Object> bfnMap = ServiceLocator.getInstance().getMemoryImage(\"bfnMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)bfnMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + bfnType);\n            }\n            return true;\n        }\n    }\n\n    public boolean updPostEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPostDb(bfnType, data);\n        return true;\n    }\n\n    protected void updPostDb(String bfnType, Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex post = (OrientVertex)graph.getVertexByKey(\"Post.postId\", data.get(\"postId\"));\n            if(post != null) {\n                updateUser.addEdge(\"Update\", post);\n                // fields\n                if(data.get(\"title\") != null) {\n                    post.setProperty(\"title\", data.get(\"title\"));\n                } else {\n                    post.removeProperty(\"name\");\n                }\n                if(data.get(\"source\") != null) {\n                    post.setProperty(\"source\", data.get(\"source\"));\n                } else {\n                    post.removeProperty(\"source\");\n                }\n                if(data.get(\"summary\") != null) {\n                    post.setProperty(\"summary\", data.get(\"summary\"));\n                } else {\n                    post.removeProperty(\"summary\");\n                }\n                if(data.get(\"content\") != null) {\n                    post.setProperty(\"content\", data.get(\"content\"));\n                } else {\n                    post.removeProperty(\"content\");\n                }\n                post.setProperty(\"updateDate\", data.get(\"updateDate\"));\n\n                // handle addTags and delTags\n                OIndex<?> hostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"tagHostIdIdx\");\n                Set<String> addTags = (Set)data.get(\"addTags\");\n                if(addTags != null) {\n                    for(String tagId: addTags) {\n                        OCompositeKey key = new OCompositeKey(data.get(\"host\"), tagId);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            OrientVertex tag = (OrientVertex)oid.getRecord();\n                            post.addEdge(\"HasTag\", tag);\n                        } else {\n                            Vertex tag = graph.addVertex(\"class:Tag\", \"host\", data.get(\"host\"), \"tagId\", tagId, \"createDate\", data.get(\"createDate\"));\n                            updateUser.addEdge(\"Create\", tag);\n                            post.addEdge(\"HasTag\", tag);\n                        }\n                    }\n                }\n                Set<String> delTags = (Set)data.get(\"delTags\");\n                if(delTags != null) {\n                    for(String tagId: delTags) {\n                        OCompositeKey key = new OCompositeKey(data.get(\"host\"), tagId);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            OrientVertex tag = (OrientVertex) oid.getRecord();\n                            for (Edge edge : (Iterable<Edge>) post.getEdges(Direction.OUT, \"HasTag\")) {\n                                if(edge.getVertex(Direction.IN).equals(tag)) graph.removeEdge(edge);\n                            }\n                        }\n                    }\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean getBfnPost(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String rid = (String)data.get(\"@rid\");\n        String host = (String)data.get(\"host\");\n        if(rid == null) {\n            inputMap.put(\"result\", \"@rid is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        Integer pageSize = (Integer)data.get(\"pageSize\");\n        Integer pageNo = (Integer)data.get(\"pageNo\");\n        if(pageSize == null) {\n            inputMap.put(\"result\", \"pageSize is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        if(pageNo == null) {\n            inputMap.put(\"result\", \"pageNo is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        String sortDir = (String)data.get(\"sortDir\");\n        String sortedBy = (String)data.get(\"sortedBy\");\n        if(sortDir == null) {\n            sortDir = \"desc\";\n        }\n        if(sortedBy == null) {\n            sortedBy = \"createDate\";\n        }\n        boolean allowPost = false;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload != null) {\n            Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(roles.contains(\"owner\")) {\n                allowPost = true;\n            } else if(roles.contains(\"admin\") || roles.contains(\"blogAdmin\") || roles.contains(\"blogUser\")){\n                if(host.equals(user.get(\"host\"))) {\n                    allowPost = true;\n                }\n            }\n        }\n\n        // TODO support the following lists: recent, popular, controversial\n        // Get the page from cache.\n        List<String> list = null;\n        Map<String, Object> bfnMap = ServiceLocator.getInstance().getMemoryImage(\"bfnMap\");\n        ConcurrentMap<Object, Object> listCache = (ConcurrentMap<Object, Object>)bfnMap.get(\"listCache\");\n        if(listCache == null) {\n            listCache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            bfnMap.put(\"listCache\", listCache);\n        } else {\n            list = (List<String>)listCache.get(rid + sortedBy);\n        }\n\n        ConcurrentMap<Object, Object> postCache = (ConcurrentMap<Object, Object>)bfnMap.get(\"postCache\");\n        if(postCache == null) {\n            postCache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            bfnMap.put(\"postCache\", postCache);\n        }\n\n        if(list == null) {\n            // get the list for db\n            list = new ArrayList<String>();\n            String json = getBfnPostDb(rid, sortedBy);\n            if(json != null) {\n                // convert json to list of maps.\n                List<Map<String, Object>> posts = mapper.readValue(json,\n                        new TypeReference<ArrayList<HashMap<String, Object>>>() {\n                        });\n                for(Map<String, Object> post: posts) {\n                    String postRid = (String)post.get(\"rid\");\n                    list.add(postRid);\n                    post.remove(\"@rid\");\n                    post.remove(\"@type\");\n                    post.remove(\"@version\");\n                    post.remove(\"@fieldTypes\");\n                    postCache.put(postRid, post);\n                }\n            }\n            listCache.put(rid + sortedBy, list);\n        }\n        long total = list.size();\n        if(total > 0) {\n            List<Map<String, Object>> posts = new ArrayList<Map<String, Object>>();\n            for(int i = pageSize*(pageNo - 1); i < Math.min(pageSize*pageNo, list.size()); i++) {\n                String postRid = list.get(i);\n                Map<String, Object> post = (Map<String, Object>)postCache.get(postRid);\n                posts.add(post);\n            }\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"posts\", posts);\n            result.put(\"allowPost\", allowPost);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            // there is no post available. but still need to return allowPost\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", 0);\n            result.put(\"allowPost\", allowPost);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        }\n    }\n\n    protected String getBfnPostDb(String rid, String sortedBy) {\n        String json = null;\n        // TODO there is a bug that prepared query only support one parameter. That is why sortedBy is concat into the sql.\n        String sql = \"select @rid, postId, title, content, createDate, parentId, in_Create[0].@rid as createRid, in_Create[0].userId as createUserId \" +\n                \"from (traverse out_Own, out_HasPost from ?) where @class = 'Post' order by \" + sortedBy + \" desc\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> posts = graph.getRawGraph().command(query).execute(rid);\n            if(posts.size() > 0) {\n                json = OJSONWriter.listToJSON(posts, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.AbstractBfnRule",
      "createDate": "2015-12-30T20:05:17.181"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.181",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:217",
    "@version": 1,
    "@class": "Event",
    "eventId": 10218,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 8/29/2014.\n * need to check both email and displayName uniqueness.\n *\n * AccessLevel A\n *\n */\npublic class SignUpUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String email = (String) data.get(\"email\");\n        String userId = (String) data.get(\"userId\");\n        String error = null;\n\n        // need to make sure that email and userId are unique.\n        // skip the cache and go to db directly?\n        if(isUserInDbByEmail(email)) {\n            error = \"The email address \" + email + \" has been signed up. Please login or recover your password.\";\n            inputMap.put(\"responseCode\", 400);\n        } else {\n\n            if(isUserInDbByUserId(userId)) {\n                error = \"The userId \" + userId + \" has been used by another user.\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                // check if password and password_confirm are the same.\n                String password = (String) data.get(\"password\");\n                String passwordConfirm = (String)data.remove(\"passwordConfirm\");\n                // after schema validation in the backend password and password_confirm should not be empty.\n                if(!password.equals(passwordConfirm)) {\n                    error = \"password and password confirm are not the same\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll(data);\n                    // replace the password with the hashed password.\n                    password = HashUtil.generateStorngPasswordHash(password);\n                    eventData.put(\"password\", password);\n                    // set default values here.\n                    eventData.put(\"karma\", 0);\n                    List<String> roles = new ArrayList<String>();\n                    roles.add(\"user\"); // default role for sign up users, more roles can be added later by admin\n                    eventData.put(\"roles\", roles);\n                    eventData.put(\"createDate\", new java.util.Date());\n\n                    // populate activation schema and it will be removed once the user activate the account.\n                    addActivation(userId);\n                    inputMap.put(\"result\", \"{\\\"result\\\": \\\"Pending Activation\\\"}\");\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.SignUpUserRule",
      "createDate": "2015-12-30T20:05:17.195"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.195",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:218",
    "@version": 1,
    "@class": "Event",
    "eventId": 10219,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 8/29/2014.\n *\n * AccessLevel R [owner, admin, userAdmin]\n */\npublic class DelUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String userId = (String)data.get(\"userId\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"You can only delete user from host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            if(rid == null && userId == null) {\n                error = \"rid or userId is required\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                Vertex deleteUser = null;\n                try {\n                    if(rid != null) {\n                        deleteUser = DbService.getVertexByRid(graph, rid);\n                        if(deleteUser == null) {\n                            error = \"User with rid \" + rid + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                        }\n                    } else {\n                        deleteUser = getUserByUserId(graph, userId);\n                        if(deleteUser == null) {\n                            error = \"User with userId \" + userId + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                        }\n                    }\n                    if(deleteUser != null) {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"userId\", deleteUser.getProperty(\"userId\").toString());\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Exception:\", e);\n                    throw e;\n                } finally {\n                    graph.shutdown();\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DelUserRule",
      "createDate": "2015-12-30T20:05:17.204"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.204",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:219",
    "@version": 1,
    "@class": "Event",
    "eventId": 10220,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class UnlockUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updLockByUserId(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UnlockUserEvRule",
      "createDate": "2015-12-30T20:05:17.216"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.216",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:220",
    "@version": 1,
    "@class": "Event",
    "eventId": 10221,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/29/2014.\n *\n * Logged in user update its own password\n *\n * AccessLevel R [user]\n *\n */\npublic class UpdPasswordRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)user.get(\"@rid\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex updateUser = DbService.getVertexByRid(graph, rid);\n            if(updateUser != null) {\n                String password = (String) data.get(\"password\");\n                String newPassword = (String)data.get(\"newPassword\");\n                String passwordConfirm = (String)data.get(\"passwordConfirm\");\n\n                // check if the password match\n                boolean match = checkPassword(graph, updateUser, password);\n                if(match) {\n                    if(newPassword.equals(passwordConfirm)) {\n                        newPassword = HashUtil.generateStorngPasswordHash(newPassword);\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"userId\", updateUser.getProperty(\"userId\"));\n                        eventData.put(\"password\", newPassword);\n                        eventData.put(\"updateDate\", new java.util.Date());\n                    } else {\n                        error = \"New password and password confirm are not the same.\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                } else {\n                    error = \"The old password is incorrect.\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } else {\n                error = \"User with rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdPasswordRule",
      "createDate": "2015-12-30T20:05:17.226"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.226",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:221",
    "@version": 1,
    "@class": "Event",
    "eventId": 10222,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 9/24/2014.\n *\n * log out a user.\n *\n * AccessLevel R [user]\n *\n */\npublic class LogOutUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        // The assumption is that user should have a token when he/she click logout.\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)user.get(\"@rid\");\n        // check if the rid exists or not. if exists, then create event.\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex vertex = DbService.getVertexByRid(graph, rid);\n            if(vertex != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"userId\", vertex.getProperty(\"userId\"));\n                eventData.put(\"host\", data.get(\"host\"));\n                eventData.put(\"refreshToken\", data.get(\"refreshToken\"));\n                eventData.put(\"logOutDate\", new java.util.Date());\n            } else {\n                error = \"User with @rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.LogOutUserRule",
      "createDate": "2015-12-30T20:05:17.235"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.235",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:222",
    "@version": 1,
    "@class": "Event",
    "eventId": 10223,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class UpUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upVoteUser(data);\n        // TODO refresh hot user list and cold user list\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpUserEvRule",
      "createDate": "2015-12-30T20:05:17.242"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.242",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:223",
    "@version": 1,
    "@class": "Event",
    "eventId": 10224,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 20/01/15.\n */\npublic class RevokeRefreshTokenEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        revokeRefreshToken(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.RevokeRefreshTokenEvRule",
      "createDate": "2015-12-30T20:05:17.249"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.249",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:224",
    "@version": 1,
    "@class": "Event",
    "eventId": 10225,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 8/28/2014.\n */\npublic class UpdPasswordEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPassword(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdPasswordEvRule",
      "createDate": "2015-12-30T20:05:17.255"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.255",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:225",
    "@version": 1,
    "@class": "Event",
    "eventId": 10226,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 8/29/2014.\n */\npublic class DelUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delUser(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DelUserEvRule",
      "createDate": "2015-12-30T20:05:17.262"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.262",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:226",
    "@version": 1,
    "@class": "Event",
    "eventId": 10227,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 20/01/15.\n *\n * revoke refresh token if user's device is lost or forget to log out on public computer.\n *\n * user role can only revoke refresh token belongs to the current user.\n *\n * AccessLevel R [owner, admin, userAdmin, user]\n *\n */\npublic class RevokeRefreshTokenRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String password = (String)data.get(\"password\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> userMap = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)userMap.get(\"@rid\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex user = DbService.getVertexByRid(graph, rid);\n            if(user != null) {\n                // check password again\n                if(checkPassword(graph, user, password)) {\n                    // check if there are refresh tokens for the user\n                    Vertex credential = user.getProperty(\"credential\");\n                    if(credential != null) {\n                        Map clientRefreshTokens = credential.getProperty(\"clientRefreshTokens\");\n                        if(clientRefreshTokens != null) {\n                            // generate the event to remove it.\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"userId\", user.getProperty(\"userId\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                        }\n                    }\n                } else {\n                    error = \"Invalid password\";\n                    inputMap.put(\"responseCode\", 401);\n                }\n            } else {\n                error = \"User with rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.RevokeRefreshTokenRule",
      "createDate": "2015-12-30T20:05:17.269"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.269",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:227",
    "@version": 1,
    "@class": "Event",
    "eventId": 10228,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 9/24/2014.\n */\npublic class LogOutUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        logOut(data);\n        // TODO update global online user count\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.LogOutUserEvRule",
      "createDate": "2015-12-30T20:05:17.274"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.274",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:228",
    "@version": 1,
    "@class": "Event",
    "eventId": 10229,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/05/15\n *\n * Although this rule update database, but it is only one time thing and we\n * don't want side effect in the future when replaying. so just do it in the\n * rule class not event rule class.\n *\n * AccessLevel A everyone.\n * .\n */\npublic class ActivateUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String userId = (String) data.get(\"userId\");\n        String code = (String)data.get(\"code\");\n        if(userId != null && code != null) {\n            delActivation(userId, code);\n            inputMap.put(\"result\", \"Thanks for activating your account.\");\n            return true;\n        } else {\n            inputMap.put(\"result\", \"userId and activation code are required.\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.ActivateUserRule",
      "createDate": "2015-12-30T20:05:17.281"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.281",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:229",
    "@version": 1,
    "@class": "Event",
    "eventId": 10230,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * lock a user\n *\n * AccessLevel R [owner, admin, userAdmin]\n *\n */\npublic class LockUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only lock user from host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex lockUser = null;\n                if(rid != null) {\n                    lockUser = DbService.getVertexByRid(graph, rid);\n                    if(lockUser != null) {\n                        if(lockUser.getProperty(\"locked\") != null && (Boolean)lockUser.getProperty(\"locked\")) {\n                            error = \"User with @rid \" + rid + \" has been locked already\";\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"userId\", lockUser.getProperty(\"userId\"));\n                            eventData.put(\"locked\", true);\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    } else {\n                        error = \"User with @rid \" + rid + \" cannot be found.\";\n                        inputMap.put(\"responseCode\", 404);\n                    }\n                } else {\n                    error = \"@rid is required\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.LockUserRule",
      "createDate": "2015-12-30T20:05:17.287"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.287",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:230",
    "@version": 1,
    "@class": "Event",
    "eventId": 10231,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class LockUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updLockByUserId(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.LockUserEvRule",
      "createDate": "2015-12-30T20:05:17.292"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.292",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:231",
    "@version": 1,
    "@class": "Event",
    "eventId": 10232,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * Vote up a user\n *\n * AccessLevel R [user]\n */\npublic class UpUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n\n        Map<String,Object> userMap = (Map<String, Object>)payload.get(\"user\");\n        String voteUserId = (String)userMap.get(\"userId\");\n        String userRid = (String)data.get(\"@rid\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex user = (OrientVertex)DbService.getVertexByRid(graph, userRid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", voteUserId);\n            if(user == null || voteUser == null) {\n                error = \"User or vote user cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if this VoteUserId has down voted user before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(user, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(user)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have up vote the user already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"userId\", user.getProperty(\"userId\"));\n                    eventData.put(\"voteUserId\", voteUserId);\n                    eventData.put(\"updateDate\", new java.util.Date());\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpUserRule",
      "createDate": "2015-12-30T20:05:17.301"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.301",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:232",
    "@version": 1,
    "@class": "Event",
    "eventId": 10233,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n *\n * Update role for a user.\n *\n * AccessLevel R [owner, admin, userAdmin]\n *\n */\npublic class UpdRoleRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String error = null;\n        String userHost = (String) user.get(\"host\");\n        if (userHost != null) {\n            // this is admin role to update user role\n            if(!userHost.equals(data.get(\"host\"))) {\n                error = \"admin can only update user role from host: \" + userHost;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // TODO make sure all the newly added roles belongs to the host\n            }\n        } else {\n            // this is owner update user role\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.put(\"userId\", data.get(\"userId\"));\n            eventData.put(\"roles\", data.get(\"roles\"));\n            eventData.put(\"updateUserId\", user.get(\"userId\"));\n            eventData.put(\"updateDate\", new java.util.Date());\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdRoleRule",
      "createDate": "2015-12-30T20:05:17.321"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.321",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:233",
    "@version": 1,
    "@class": "Event",
    "eventId": 10234,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/28/2014.\n *\n * Get a single user profile\n *\n * AccessLevel R [user]\n *\n */\npublic class GetUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String email = (String) data.get(\"email\");\n        String userId = (String) data.get(\"userId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            if(rid != null) {\n                OrientVertex user = (OrientVertex)DbService.getVertexByRid(graph, rid);\n                if(user != null) {\n                    inputMap.put(\"result\", user.getRecord().toJSON());\n                    return true;\n                } else {\n                    inputMap.put(\"result\", \"User with rid \" + rid + \" cannot be found.\");\n                    inputMap.put(\"responseCode\", 404);\n                    return false;\n                }\n            } else if(userId != null) {\n                OrientVertex user = (OrientVertex)getUserByUserId(graph, userId);\n                if(user != null) {\n                    inputMap.put(\"result\", user.getRecord().toJSON());\n                    return true;\n                } else {\n                    inputMap.put(\"result\", \"User with userId \" + userId + \" cannot be found.\");\n                    inputMap.put(\"responseCode\", 404);\n                    return false;\n                }\n            } else if(email != null) {\n                OrientVertex user = (OrientVertex)getUserByEmail(graph, email);\n                if(user != null) {\n                    inputMap.put(\"result\", user.getRecord().toJSON());\n                    return true;\n                } else {\n                    inputMap.put(\"result\", \"User with email \" + email + \" cannot be found.\");\n                    inputMap.put(\"responseCode\", 404);\n                    return false;\n                }\n            } else {\n                inputMap.put(\"result\", \"@rid or userId or email is required.\");\n                inputMap.put(\"responseCode\", 400);\n                return false;\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.GetUserRule",
      "createDate": "2015-12-30T20:05:17.329"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.329",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:234",
    "@version": 1,
    "@class": "Event",
    "eventId": 10235,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class DownUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        downVoteUser(data);\n        // TODO refresh hot user list and code user list\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DownUserEvRule",
      "createDate": "2015-12-30T20:05:17.340"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.340",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:235",
    "@version": 1,
    "@class": "Event",
    "eventId": 10236,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class UpdRoleEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updRole(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdRoleEvRule",
      "createDate": "2015-12-30T20:05:17.346"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.346",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:236",
    "@version": 1,
    "@class": "Event",
    "eventId": 10237,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * Vote down a user\n *\n * AccessLevel R [user]\n *\n */\npublic class DownUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String error = null;\n\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Map<String,Object> userMap = (Map<String, Object>)payload.get(\"user\");\n            String voteUserId = (String)userMap.get(\"userId\");\n            String userRid = (String)data.get(\"@rid\");\n            OrientVertex user = (OrientVertex)DbService.getVertexByRid(graph, userRid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", voteUserId);\n            if(user == null || voteUser == null) {\n                error = \"User or vote user cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if this VoteUserId has down voted user before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(user, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(user)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have down vote the user already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"userId\", user.getProperty(\"userId\"));\n                    eventData.put(\"voteUserId\", voteUserId);\n                    eventData.put(\"updateDate\", new java.util.Date());\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DownUserRule",
      "createDate": "2015-12-30T20:05:17.358"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.358",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:237",
    "@version": 1,
    "@class": "Event",
    "eventId": 10238,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 8/29/2014.\n *\n * Logged in user updates its profile\n *\n * AccessLevel R [user]\n *\n */\npublic class UpdProfileRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String)user.get(\"@rid\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex updateUser = DbService.getVertexByRid(graph, rid);\n            if(updateUser != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll(data);\n                eventData.put(\"updateDate\", new java.util.Date());\n            } else {\n                error = \"User with rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdProfileRule",
      "createDate": "2015-12-30T20:05:17.371"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.371",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:238",
    "@version": 1,
    "@class": "Event",
    "eventId": 10239,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/28/2014.\n */\npublic class SignUpUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addUser(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.SignUpUserEvRule",
      "createDate": "2015-12-30T20:05:17.378"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.378",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:239",
    "@version": 1,
    "@class": "Event",
    "eventId": 10240,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * Unlock a locked user\n *\n * AccessLevel R [owner, admin, userAdmin]\n *\n */\npublic class UnlockUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only unlock user from host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex lockUser = null;\n                if(rid != null) {\n                    lockUser = DbService.getVertexByRid(graph, rid);\n                    if(lockUser != null) {\n                        if(lockUser.getProperty(\"locked\") != null && !(Boolean)lockUser.getProperty(\"locked\")) {\n                            error = \"User with @rid \" + rid + \" is not locked\";\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"userId\", lockUser.getProperty(\"userId\"));\n                            eventData.put(\"locked\", false);\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    } else {\n                        error = \"User with @rid \" + rid + \" cannot be found.\";\n                        inputMap.put(\"responseCode\", 404);\n                    }\n                } else {\n                    error = \"@rid is required\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UnlockUserRule",
      "createDate": "2015-12-30T20:05:17.384"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.384",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:240",
    "@version": 1,
    "@class": "Event",
    "eventId": 10241,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by steve on 19/09/14.\n *\n * get an access token with a refresh token\n *\n * AccessLevel R [user]\n */\npublic class RefreshTokenRule extends AbstractUserRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n\n        String refreshToken = (String)data.get(\"refreshToken\");\n        String userId = (String)data.get(\"userId\");\n        String clientId = (String)data.get(\"clientId\");\n        if(refreshToken == null || userId == null || clientId == null) {\n            inputMap.put(\"responseCode\", 401);\n            error = \"Refresh token or userId or clientId is missing\";\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex user = getUserByUserId(graph, userId);\n                if(user != null) {\n                    Vertex credential = user.getProperty(\"credential\");\n                    if (checkRefreshToken(credential, clientId, refreshToken)) {\n                        // since here is using refresh token, it is always generate short term access token.\n                        String jwt = generateToken(user, clientId, false);\n                        if (jwt != null) {\n                            Map<String, String> tokens = new HashMap<String, String>();\n                            tokens.put(\"accessToken\", jwt);\n                            inputMap.put(\"result\", mapper.writeValueAsString(tokens));\n                        }\n                    } else {\n                        error = \"Invalid refresh token\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                } else {\n                    error = \"The userId \" + userId + \" has not been registered\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.RefreshTokenRule",
      "createDate": "2015-12-30T20:05:17.393"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.393",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:241",
    "@version": 1,
    "@class": "Event",
    "eventId": 10242,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Created by steve on 26/10/14.\n *\n * Get all users in a list for user admin page. pagination is supported in db level\n *\n * AccessLevel R [owner, admin, userAdmin]\n *\n */\npublic class GetAllUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                inputMap.put(\"result\", \"You can only get all users from host: \" + host);\n                inputMap.put(\"responseCode\", 403);\n                return false;\n            }\n        } else {\n            // retrieve everything as this is the owner\n            data.remove(\"host\"); // removed the host added by RestHandler.\n        }\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            long total = getTotalNumberUserFromDb(graph, data);\n            if(total > 0) {\n                String json = getUserFromDb(graph, data);\n                List<Map<String, Object>> users\n                        = mapper.readValue(json, new TypeReference<List<HashMap<String, Object>>>() {});\n                Map<String, Object> result = new HashMap<String, Object>();\n                result.put(\"total\", total);\n                result.put(\"users\", users);\n                inputMap.put(\"result\", mapper.writeValueAsString(result));\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No user can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.GetAllUserRule",
      "createDate": "2015-12-30T20:05:17.400"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.400",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:242",
    "@version": 1,
    "@class": "Event",
    "eventId": 10243,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/28/2014.\n */\npublic class UpdProfileEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updUser(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdProfileEvRule",
      "createDate": "2015-12-30T20:05:17.415"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.415",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:243",
    "@version": 1,
    "@class": "Event",
    "eventId": 10244,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n */\npublic class UpCatalogEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranchEv(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.UpCatalogEvRule",
      "createDate": "2015-12-30T20:05:17.424"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.424",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:244",
    "@version": 1,
    "@class": "Event",
    "eventId": 10245,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n *\n * AccessLevel A\n */\npublic class GetCatalogProductRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getCatalogProduct(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.GetCatalogProductRule",
      "createDate": "2015-12-30T20:05:17.431"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.431",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:245",
    "@version": 1,
    "@class": "Event",
    "eventId": 10246,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 24/08/15.\n *\n * This is the endpoint for product admin page to list all the products\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class GetProductRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getProduct(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.GetProductRule",
      "createDate": "2015-12-30T20:05:17.448"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.448",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:246",
    "@version": 1,
    "@class": "Event",
    "eventId": 10247,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 10/14/2014.\n *\n * you can only delete a catalog if it has no child and no entity.\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n *\n */\npublic class DelCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.DelCatalogRule",
      "createDate": "2015-12-30T20:05:17.455"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.455",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:247",
    "@version": 1,
    "@class": "Event",
    "eventId": 10248,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 30/03/15.\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class AddProductRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addProduct(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.AddProductRule",
      "createDate": "2015-12-30T20:05:17.463"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.463",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:248",
    "@version": 1,
    "@class": "Event",
    "eventId": 10249,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n */\npublic class UpdProductEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updProductEv(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.UpdProductEvRule",
      "createDate": "2015-12-30T20:05:17.475"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.475",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:249",
    "@version": 1,
    "@class": "Event",
    "eventId": 10250,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 10/14/2014.\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class AddCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.AddCatalogRule",
      "createDate": "2015-12-30T20:05:17.483"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.483",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:250",
    "@version": 1,
    "@class": "Event",
    "eventId": 10251,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n *\n * productAdmin can only delete his or her products. However,\n * owner, admin and catalogAdmin can delete product and all the comments/reivews relate to the\n * product all together. This should not be done often only at extreme situation.\n *\n * Due to the implementation of orientdb delete graph scheduled for 2.2\n * https://github.com/orientechnologies/orientdb/issues/1108\n * We will be asking all the comments be deleted before deleting the product for now.\n *\n * TODO fix it after orientdb 2.2\n *\n * AccessLevel R [owner, admin, catalogAdmin, productAdmin]\n */\npublic class DelProductRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delProduct(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.DelProductRule",
      "createDate": "2015-12-30T20:05:17.494"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.494",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:251",
    "@version": 1,
    "@class": "Event",
    "eventId": 10252,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 30/03/15.\n *\n * AccessLevel A\n */\npublic class GetCatalogTreeRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchTree(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.GetCatalogTreeRule",
      "createDate": "2015-12-30T20:05:17.501"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.501",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:252",
    "@version": 1,
    "@class": "Event",
    "eventId": 10253,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n *\n * AccessLevel R [user]\n */\npublic class UpCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.UpCatalogRule",
      "createDate": "2015-12-30T20:05:17.514"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.514",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:253",
    "@version": 1,
    "@class": "Event",
    "eventId": 10254,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 30/03/15.\n */\npublic class AddProductEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addProductEv(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.AddProductEvRule",
      "createDate": "2015-12-30T20:05:17.531"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.531",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:254",
    "@version": 1,
    "@class": "Event",
    "eventId": 10255,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n *\n *  AccessLevel R [user]\n */\npublic class DownCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.DownCatalogRule",
      "createDate": "2015-12-30T20:05:17.541"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.541",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:255",
    "@version": 1,
    "@class": "Event",
    "eventId": 10256,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n */\npublic class DelProductEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delProductEv(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.DelProductEvRule",
      "createDate": "2015-12-30T20:05:17.554"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.554",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:256",
    "@version": 1,
    "@class": "Event",
    "eventId": 10257,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/14/2014.\n *\n * This is for catalog admin screen.\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class GetCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.GetCatalogRule",
      "createDate": "2015-12-30T20:05:17.562"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.562",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:257",
    "@version": 1,
    "@class": "Event",
    "eventId": 10258,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n *\n * AccessLevel R [owner, admin, catalogAdmin, productAdmin]\n *\n * productAdmin can only update his or her product\n */\npublic class UpdProductRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updProduct(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.UpdProductRule",
      "createDate": "2015-12-30T20:05:17.567"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.567",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:258",
    "@version": 1,
    "@class": "Event",
    "eventId": 10259,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/14/2014.\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class UpdCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.UpdCatalogRule",
      "createDate": "2015-12-30T20:05:17.575"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.575",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:259",
    "@version": 1,
    "@class": "Event",
    "eventId": 10260,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 10/14/2014.\n *\n */\npublic class UpdCatalogEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranchEv(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.UpdCatalogEvRule",
      "createDate": "2015-12-30T20:05:17.588"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.588",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:260",
    "@version": 1,
    "@class": "Event",
    "eventId": 10261,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n *\n * get drown down list of catalog for catalog admin\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class GetCatalogDropdownRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchDropdown(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.GetCatalogDropdownRule",
      "createDate": "2015-12-30T20:05:17.596"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.596",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:261",
    "@version": 1,
    "@class": "Event",
    "eventId": 10262,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.BranchRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 25/04/15.\n */\npublic abstract class AbstractCatalogRule extends BranchRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractCatalogRule.class);\n    static final String branchType = \"catalog\";\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    public boolean addProduct(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            error = \"You can only add product from host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n            eventData.put(\"createDate\", new Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                // make sure parent exists if it is not empty.\n                List<String> parentRids = (List<String>)data.get(\"in_HasProduct\");\n                if(parentRids != null && parentRids.size() == 1) {\n                    Vertex parent = DbService.getVertexByRid(graph, parentRids.get(0));\n                    if(parent == null) {\n                        error = \"Parent with @rid \" + parentRids.get(0) + \" cannot be found.\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        // convert parent from @rid to id\n                        List in_HasProduct = new ArrayList();\n                        in_HasProduct.add(parent.getProperty(\"categoryId\"));\n                        eventData.put(\"in_HasProduct\", in_HasProduct);\n                    }\n                }\n                if(error == null) {\n                    eventData.put(\"productId\", HashUtil.generateUUID());\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as the number of products has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean addProductEv (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addProductDb(data);\n        return true;\n    }\n\n    protected void addProductDb(Map<String, Object> data) throws Exception {\n        String className = \"Catalog\";\n        String id = \"categoryId\";\n        String index = className + \".\" + id;\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex createUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            List<String> parentIds = (List<String>)data.remove(\"in_HasProduct\");\n            OrientVertex product = graph.addVertex(\"class:Product\", data);\n            createUser.addEdge(\"Create\", product);\n            // parent\n            if(parentIds != null && parentIds.size() == 1) {\n                OrientVertex parent = getBranchByHostId(graph, branchType, host, parentIds.get(0));\n                if(parent != null) {\n                    parent.addEdge(\"HasProduct\", product);\n                }\n            }\n            // tag\n            Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String) data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n            for(String tagId: inputTags) {\n                Vertex tag = null;\n                // get the tag is it exists\n                OIndex<?> tagHostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"tagHostIdIdx\");\n                logger.debug(\"tagHostIdIdx = \" + tagHostIdIdx);\n                OCompositeKey tagKey = new OCompositeKey(host, tagId);\n                logger.debug(\"tagKey =\" + tagKey);\n                OIdentifiable tagOid = (OIdentifiable) tagHostIdIdx.get(tagKey);\n                if (tagOid != null) {\n                    tag = graph.getVertex(tagOid.getRecord());\n                    product.addEdge(\"HasTag\", tag);\n                } else {\n                    tag = graph.addVertex(\"class:Tag\", \"host\", host, \"tagId\", tagId, \"createDate\", data.get(\"createDate\"));\n                    createUser.addEdge(\"Create\", tag);\n                    product.addEdge(\"HasTag\", tag);\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean delProduct(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String)data.get(\"@rid\");\n        String host = (String)data.get(\"host\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex product = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            if(product != null) {\n                // check if the product has variant, if yes, you cannot delete it for now\n                // TODO fix it after orientdb 2.2 release.\n                // https://github.com/orientechnologies/orientdb/issues/1108\n                if(product.countEdges(Direction.OUT, \"HasComment\") > 0) {\n                    error = \"Product has comment(s), cannot be deleted\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"productId\", product.getProperty(\"productId\"));\n                }\n            } else {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as the number of products has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean delProductEv (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delProductDb(data);\n        return true;\n    }\n\n    protected void delProductDb(Map<String, Object> data) throws Exception {\n        String className = \"Catalog\";\n        String id = \"categoryId\";\n        String index = className + \".\" + id;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex product = (OrientVertex)graph.getVertexByKey(\"Product.productId\", data.get(\"productId\"));\n            if(product != null) {\n                // TODO cascade deleting all comments belong to the product.\n                // Need to come up a query on that to get the entire tree.\n                /*\n                // https://github.com/orientechnologies/orientdb/issues/1108\n                delete graph...\n                */\n                graph.removeVertex(product);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean updProduct(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        Map<String, Object> user = (Map<String, Object>)payload.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String userHost = (String)user.get(\"host\");\n            if(userHost != null && !userHost.equals(host)) {\n                inputMap.put(\"result\", \"You can only update \" + branchType + \" from host: \" + host);\n                inputMap.put(\"responseCode\", 403);\n                return false;\n            } else {\n                // update product itself and we might have a new api to move product from one parent to another.\n                Vertex product = DbService.getVertexByRid(graph, rid);\n                if(product != null) {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"productId\", product.getProperty(\"productId\"));\n                    eventData.put(\"name\", data.get(\"name\"));\n                    eventData.put(\"host\", data.get(\"host\"));\n                    eventData.put(\"description\", data.get(\"description\"));\n                    eventData.put(\"variants\", data.get(\"variants\"));\n                    eventData.put(\"updateDate\", new Date());\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n\n                    // parent\n                    List parentRids = (List)data.get(\"in_HasProduct\");\n                    if(parentRids != null) {\n                        Vertex parent = DbService.getVertexByRid(graph, (String)parentRids.get(0));\n                        if(parent != null) {\n\n                            String storedParentRid = null;\n                            String storedParentId = null;\n                            for (Vertex vertex : (Iterable<Vertex>) product.getVertices(Direction.IN, \"HasProduct\")) {\n                                // we only expect one parent here.\n                                storedParentRid = vertex.getId().toString();\n                                storedParentId = vertex.getProperty(\"categoryId\");\n                            }\n                            if(parentRids.get(0).equals(storedParentRid)) {\n                                // same parent, do nothing\n                            } else {\n                                eventData.put(\"delParentId\", storedParentId);\n                                eventData.put(\"addParentId\", parent.getProperty(\"categoryId\"));\n                            }\n                        } else {\n                            inputMap.put(\"result\", \"Parent with @rid \" + parentRids.get(0) + \" cannot be found\");\n                            inputMap.put(\"responseCode\", 404);\n                            return false;\n                        }\n                    }\n\n                    // tags\n                    Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n                    Set<String> storedTags = new HashSet<String>();\n                    for (Vertex vertex : (Iterable<Vertex>) product.getVertices(Direction.OUT, \"HasTag\")) {\n                        storedTags.add((String)vertex.getProperty(\"tagId\"));\n                    }\n\n                    Set<String> addTags = new HashSet<String>(inputTags);\n                    Set<String> delTags = new HashSet<String>(storedTags);\n                    addTags.removeAll(storedTags);\n                    delTags.removeAll(inputTags);\n\n                    if(addTags.size() > 0) eventData.put(\"addTags\", addTags);\n                    if(delTags.size() > 0) eventData.put(\"delTags\", delTags);\n                } else {\n                    error = \"@rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                }\n            }\n\n            // make sure parent exists if it is not empty.\n\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as the last update time has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean updProductEv (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updProductDb(data);\n        return true;\n    }\n\n    protected void updProductDb(Map<String, Object> data) throws Exception {\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex product = (OrientVertex)graph.getVertexByKey(\"Product.productId\", data.get(\"productId\"));\n            if(product != null) {\n                updateUser.addEdge(\"Update\", product);\n                // fields\n                if(data.get(\"name\") != null) {\n                    product.setProperty(\"name\", data.get(\"name\"));\n                } else {\n                    product.removeProperty(\"name\");\n                }\n                if(data.get(\"description\") != null) {\n                    product.setProperty(\"description\", data.get(\"description\"));\n                } else {\n                    product.removeProperty(\"description\");\n                }\n                if(data.get(\"variants\") != null) {\n                    product.setProperty(\"variants\", data.get(\"variants\"));\n                } else {\n                    product.removeProperty(\"variants\");\n                }\n                product.setProperty(\"updateDate\", data.get(\"updateDate\"));\n\n                // handle addParent and delParent\n                String delParentId = (String)data.get(\"delParentId\");\n                if(delParentId != null) {\n                    for (Edge edge : (Iterable<Edge>) product.getEdges(Direction.IN, \"HasProduct\")) {\n                        graph.removeEdge(edge);\n                    }\n                }\n                String addParentId = (String)data.get(\"addParentId\");\n                if(addParentId != null) {\n                    OrientVertex parent = getBranchByHostId(graph, branchType, host, addParentId);\n                    if (parent != null) {\n                        parent.addEdge(\"HasProduct\", product);\n                    }\n                }\n\n\n                // handle addTags and delTags\n                OIndex<?> hostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"tagHostIdIdx\");\n                Set<String> addTags = (Set)data.get(\"addTags\");\n                if(addTags != null) {\n                    for(String tagId: addTags) {\n                        OCompositeKey key = new OCompositeKey(data.get(\"host\"), tagId);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            OrientVertex tag = (OrientVertex)oid.getRecord();\n                            product.addEdge(\"HasTag\", tag);\n                        } else {\n                            Vertex tag = graph.addVertex(\"class:Tag\", \"host\", data.get(\"host\"), \"tagId\", tagId, \"createDate\", data.get(\"createDate\"));\n                            updateUser.addEdge(\"Create\", tag);\n                            product.addEdge(\"HasTag\", tag);\n                        }\n                    }\n                }\n                Set<String> delTags = (Set)data.get(\"delTags\");\n                if(delTags != null) {\n                    for(String tagId: delTags) {\n                        OCompositeKey key = new OCompositeKey(data.get(\"host\"), tagId);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            OrientVertex tag = (OrientVertex) oid.getRecord();\n                            for (Edge edge : (Iterable<Edge>) product.getEdges(Direction.OUT, \"HasTag\")) {\n                                if(edge.getVertex(Direction.IN).equals(tag)) graph.removeEdge(edge);\n                            }\n                        }\n                    }\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean getCatalogProduct(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String rid = (String)data.get(\"@rid\");\n        String host = (String)data.get(\"host\");\n        if(rid == null) {\n            // check if categoryId exists and convert it to rid.\n            String categoryId = (String)data.get(\"categoryId\");\n            if(categoryId == null) {\n                inputMap.put(\"result\", \"@rid or categoryId is required\");\n                inputMap.put(\"responseCode\", 400);\n                return false;\n            } else {\n                // find out rid from categoryId\n                OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                try {\n                    OrientVertex catalog = getBranchByHostId(graph, \"catalog\", host, categoryId);\n                    if(catalog == null) {\n                        inputMap.put(\"result\", \"categoryId \"  + categoryId + \" doesn't exist on host \" + host);\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        rid = catalog.getId().toString();\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Exception:\", e);\n                    throw e;\n                } finally {\n                    graph.shutdown();\n                }\n            }\n        }\n        Integer pageSize = (Integer)data.get(\"pageSize\");\n        Integer pageNo = (Integer)data.get(\"pageNo\");\n        if(pageSize == null) {\n            inputMap.put(\"result\", \"pageSize is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        if(pageNo == null) {\n            inputMap.put(\"result\", \"pageNo is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        String sortDir = (String)data.get(\"sortDir\");\n        String sortedBy = (String)data.get(\"sortedBy\");\n        if(sortDir == null) {\n            sortDir = \"desc\";\n        }\n        if(sortedBy == null) {\n            sortedBy = \"createDate\";\n        }\n        boolean allowUpdate = false;\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        if(payload != null) {\n            Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n            List roles = (List)user.get(\"roles\");\n            if(roles.contains(\"owner\")) {\n                allowUpdate = true;\n            } else if(roles.contains(\"admin\") || roles.contains(\"catalogAdmin\") || roles.contains(\"productAdmin\")){\n                if(host.equals(user.get(\"host\"))) {\n                    allowUpdate = true;\n                }\n            }\n        }\n        // get ancestors\n        List<Map<String, Object>> ancestors = getAncestorDb(rid);\n\n        // TODO support the following lists: recent, popular\n        // Get the page from cache.\n        List<String> list = null;\n        Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n        ConcurrentMap<Object, Object> listCache = (ConcurrentMap<Object, Object>)branchMap.get(\"listCache\");\n        if(listCache == null) {\n            listCache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            branchMap.put(\"listCache\", listCache);\n        } else {\n            list = (List<String>)listCache.get(rid + sortedBy);\n        }\n\n        ConcurrentMap<Object, Object> productCache = (ConcurrentMap<Object, Object>)branchMap.get(\"productCache\");\n        if(productCache == null) {\n            productCache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            branchMap.put(\"productCache\", productCache);\n        }\n\n        if(list == null) {\n            // get the list for db\n            list = new ArrayList<String>();\n            String json = getCatalogProductDb(rid, sortedBy);\n            if(json != null) {\n                // convert json to list of maps.\n                List<Map<String, Object>> products = mapper.readValue(json,\n                        new TypeReference<ArrayList<HashMap<String, Object>>>() {\n                        });\n                for(Map<String, Object> product: products) {\n                    String productRid = (String)product.get(\"rid\");\n                    list.add(productRid);\n                    product.remove(\"@rid\");\n                    product.remove(\"@type\");\n                    product.remove(\"@version\");\n                    product.remove(\"@fieldTypes\");\n                    productCache.put(productRid, product);\n                }\n            }\n            listCache.put(rid + sortedBy, list);\n        }\n        long total = list.size();\n        if(total > 0) {\n            List<Map<String, Object>> products = new ArrayList<Map<String, Object>>();\n            for(int i = pageSize*(pageNo - 1); i < Math.min(pageSize*pageNo, list.size()); i++) {\n                String productRid = list.get(i);\n                Map<String, Object> product = (Map<String, Object>)productCache.get(productRid);\n                products.add(product);\n            }\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"products\", products);\n            result.put(\"rid\", rid);\n            result.put(\"allowUpdate\", allowUpdate);\n            result.put(\"ancestors\", ancestors);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            // there is no product available. but still need to return allowUpdate\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", 0);\n            result.put(\"rid\", rid);\n            result.put(\"allowUpdate\", allowUpdate);\n            result.put(\"ancestors\", ancestors);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        }\n    }\n\n\n    protected String getCatalogProductDb(String rid, String sortedBy) {\n        String json = null;\n        // TODO there is a bug that prepared query only support one parameter. That is why sortedBy is concat into the sql.\n        String sql = \"select @rid, productId, name, description, variants, createDate, parentId, in_Create[0].@rid as createRid, in_Create[0].userId as createUserId \" +\n                \"from (traverse out_Own, out_HasProduct from ?) where @class = 'Product' order by \" + sortedBy + \" desc\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> products = graph.getRawGraph().command(query).execute(rid);\n            if(products.size() > 0) {\n                json = OJSONWriter.listToJSON(products, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected List getAncestorDb(String rid) {\n        List<Map<String, Object>> ancestors = null;\n        String sql = \"select @rid, categoryId, description from (traverse in('Own') from ?)\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = graph.getRawGraph().command(query).execute(rid);\n            if(docs.size() > 0) {\n                ancestors = new ArrayList<Map<String, Object>>();\n                for (int i=docs.size()-1; i >= 0; i--) {\n                    Map<String, Object> map = new HashMap<String, Object>();\n                    OrientVertex doc = graph.getVertex(docs.get(i).getRecord());\n                    String id = doc.getProperty(\"rid\").toString();\n                    id = id.substring(id.indexOf('[') + 1, id.indexOf(']'));\n                    map.put(\"rid\", id);\n                    map.put(\"categoryId\", doc.getProperty(\"categoryId\"));\n                    map.put(\"description\", doc.getProperty(\"description\"));\n                    ancestors.add(map);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return ancestors;\n    }\n\n    public boolean getProduct(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String categoryId = (String)data.get(\"categoryId\");\n        String host = (String)data.get(\"host\");\n        Map<String, Object> payload = (Map<String, Object>) inputMap.get(\"payload\");\n        String json = null;\n        Map<String,Object> user = (Map<String, Object>)payload.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\")) {\n            json = getProductDb();\n        } else {\n            if(host.equals(user.get(\"host\"))) {\n                json = getProductDb(host);\n            } else {\n                inputMap.put(\"result\", \"Permission denied\");\n                inputMap.put(\"responseCode\", 401);\n                return false;\n            }\n        }\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Not Found\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n\n    protected String getProductDb(String host) {\n        String json = null;\n        String sql = \"select from product where host = ?\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> products = graph.getRawGraph().command(query).execute(host);\n            if(products.size() > 0) {\n                json = OJSONWriter.listToJSON(products, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getProductDb() {\n        String json = null;\n        String sql = \"select from product\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> products = graph.getRawGraph().command(query).execute();\n            if(products.size() > 0) {\n                json = OJSONWriter.listToJSON(products, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.AbstractCatalogRule",
      "createDate": "2015-12-30T20:05:17.607"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.607",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:262",
    "@version": 1,
    "@class": "Event",
    "eventId": 10263,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 10/14/2014.\n */\npublic class AddCatalogEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranchEv(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.AddCatalogEvRule",
      "createDate": "2015-12-30T20:05:17.615"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.615",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:263",
    "@version": 1,
    "@class": "Event",
    "eventId": 10264,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n */\npublic class DownCatalogEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranchEv(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.DownCatalogEvRule",
      "createDate": "2015-12-30T20:05:17.623"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.623",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:264",
    "@version": 1,
    "@class": "Event",
    "eventId": 10265,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 10/14/2014.\n */\npublic class DelCatalogEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranchEv(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.DelCatalogEvRule",
      "createDate": "2015-12-30T20:05:17.629"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2015-12-30T20:05:17.629",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  }
]
