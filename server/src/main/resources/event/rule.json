[
  {
    "@type": "d",
    "@rid": "#18:1",
    "@version": 1,
    "@class": "Event",
    "eventId": 10002,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 21/03/15.\n */\npublic class UpdPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPostEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpdPostEvRule",
      "createDate": "2016-03-31T00:36:26.823"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:26.823",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:2",
    "@version": 1,
    "@class": "Event",
    "eventId": 10003,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * Get news dropdown list for news admin page\n *\n * AccessLevel R [owner, admin, newsAdmin]\n *\n */\npublic class GetNewsDropdownRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchDropdown(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.GetNewsDropdownRule",
      "createDate": "2016-03-31T00:36:26.856"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:26.856",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:3",
    "@version": 1,
    "@class": "Event",
    "eventId": 10004,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 21/03/15.\n *\n * user can only delete his or her posts before anyone makes comment. However,\n * owner, admin and forumAdmin can delete post and all the comments relate to the\n * post all together. This should not be done often only at extreme situation.\n *\n * AccessLevel R [owner, admin, newsAdmin, user]\n *\n * to make is simple for now.\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n * Due to the implementation of orientdb delete graph scheduled for 2.2\n * https://github.com/orientechnologies/orientdb/issues/1108\n * We will be asking all the comments be deleted before deleting the post for now.\n *\n * TODO fix it after orientdb 2.2\n *\n */\npublic class DelPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPost(\"news\", objects);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DelPostRule",
      "createDate": "2016-03-31T00:36:26.889"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:26.889",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:4",
    "@version": 1,
    "@class": "Event",
    "eventId": 10005,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * Display news category on news home page.\n *\n * AccessLevel A\n *\n */\npublic class GetNewsTreeRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchTree(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.GetNewsTreeRule",
      "createDate": "2016-03-31T00:36:26.929"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:26.929",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:5",
    "@version": 1,
    "@class": "Event",
    "eventId": 10006,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * Get all the news for a host and display in the news admin interface\n *\n * AccessLevel R [owner, admin, newsAdmin]\n *\n */\npublic class GetNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.GetNewsRule",
      "createDate": "2016-03-31T00:36:26.946"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:26.946",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:6",
    "@version": 1,
    "@class": "Event",
    "eventId": 10007,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * Get all the post in a news category and sub categories\n *\n * AccessLevel A\n *\n */\npublic class GetNewsPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getCategoryEntity(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.GetNewsPostRule",
      "createDate": "2016-03-31T00:36:26.965"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:26.965",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:7",
    "@version": 1,
    "@class": "Event",
    "eventId": 10008,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * Delete news category\n *\n * AccessLevel R [owner, admin, newsAdmin]\n *\n */\npublic class DelNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DelNewsRule",
      "createDate": "2016-03-31T00:36:26.978"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:26.978",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:8",
    "@version": 1,
    "@class": "Event",
    "eventId": 10009,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class UpNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranchEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpNewsEvRule",
      "createDate": "2016-03-31T00:36:26.994"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:26.994",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:9",
    "@version": 1,
    "@class": "Event",
    "eventId": 10010,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class DownNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DownNewsEvRule",
      "createDate": "2016-03-31T00:36:27.006"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.006",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:10",
    "@version": 1,
    "@class": "Event",
    "eventId": 10011,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * Update news category\n *\n * AccessLevel R [owner, admin, newsAdmin]\n *\n *\n */\npublic class UpdNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpdNewsRule",
      "createDate": "2016-03-31T00:36:27.030"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.030",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:11",
    "@version": 1,
    "@class": "Event",
    "eventId": 10012,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * Add news category\n *\n * AccessLevel R [owner, admin, newsAdmin]\n *\n */\npublic class AddNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.AddNewsRule",
      "createDate": "2016-03-31T00:36:27.058"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.058",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:12",
    "@version": 1,
    "@class": "Event",
    "eventId": 10013,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 21/03/15.\n */\npublic class DelPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPostEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DelPostEvRule",
      "createDate": "2016-03-31T00:36:27.082"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.082",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:13",
    "@version": 1,
    "@class": "Event",
    "eventId": 10014,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPostEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.AddPostEvRule",
      "createDate": "2016-03-31T00:36:27.120"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.120",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:14",
    "@version": 1,
    "@class": "Event",
    "eventId": 10015,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 18/01/16.\n *\n * AccessLevel A everyone can access\n *\n * This API get all the post regardless category order by the time of post.\n */\npublic class GetRecentPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getRecentEntity(\"News\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.GetRecentPostRule",
      "createDate": "2016-03-31T00:36:27.145"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.145",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:15",
    "@version": 1,
    "@class": "Event",
    "eventId": 10016,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * Post news in certain new category\n *\n * AccessLevel R [owner, admin, newsAdmin, newsUser]\n *\n * newsUser can only post in category?\n *\n */\npublic class AddPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPost(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.AddPostRule",
      "createDate": "2016-03-31T00:36:27.161"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.161",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:16",
    "@version": 1,
    "@class": "Event",
    "eventId": 10017,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n *\n * Up vote news category\n *\n * AccessLevel R [user]\n *\n */\npublic class UpNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpNewsRule",
      "createDate": "2016-03-31T00:36:27.193"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.193",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:17",
    "@version": 1,
    "@class": "Event",
    "eventId": 10018,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranchEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.AddNewsEvRule",
      "createDate": "2016-03-31T00:36:27.222"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.222",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:18",
    "@version": 1,
    "@class": "Event",
    "eventId": 10019,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n *\n * Vote down news category\n *\n * AccessLevel R [user]\n *\n */\npublic class DownNewsRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranch(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DownNewsRule",
      "createDate": "2016-03-31T00:36:27.255"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.255",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:19",
    "@version": 1,
    "@class": "Event",
    "eventId": 10020,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class DelNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranchEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.DelNewsEvRule",
      "createDate": "2016-03-31T00:36:27.278"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.278",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:20",
    "@version": 1,
    "@class": "Event",
    "eventId": 10021,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 3/6/2015.\n * Update post in a forum\n *\n * AccessLevel R [owner, admin, newsAdmin, user]\n *\n * User can only update his or her post and there will be an indicate that\n * the post is updated. Maybe just the update date?\n *\n * for now to make it simple, user cannot update the post.\n *\n */public class UpdPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPost(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpdPostRule",
      "createDate": "2016-03-31T00:36:27.296"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.296",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:21",
    "@version": 1,
    "@class": "Event",
    "eventId": 10022,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.news;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class UpdNewsEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranchEv(\"news\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.news.UpdNewsEvRule",
      "createDate": "2016-03-31T00:36:27.308"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.308",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:22",
    "@version": 1,
    "@class": "Event",
    "eventId": 10023,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.transform;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n *\n * This is a transform rule that support Beta testing on production. When you change the API that is backward\n * compatible, you can test it on your local and then deploy it on production for testing. For certain loyal users\n * or employees, you can give them a role called betaTester in their profile. This rule will be applied before\n * API end point is reached, so that the end point can be version 1 which has no betaTester role and version 2 which\n * has betaTester role. In normal case, it will route to rule class HelloWorld.class or HelloWorld1.class if the user\n * is betaTester. Once beta testing is done, you can route all traffic to HelloWorld1.class. Later on, you want to change\n * the rule again you can create HelloWorld2.class and route betaTester to it. This can goes on and on.\n *\n * Please note: Beta testing is only for backward compatible changes. If not, one should have two versions of clients\n * to connect to two different API class in different packages.\n *\n * When set up this rule, you should have two entries in transformData beta and production to point to the right\n * class name of the rules.\n *\n * For example, for HelloWorldRule and HelloWorld_1Rule, we have the following setup in the request transformer.\n * {\n *   \"production\": \"helloWorld\",\n *   \"beta\": \"helloWorld_1\"\n * }\n *\n * AccessLevel N as it is internal.\n *\n */\npublic class BetaTestRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(BetaTestRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> transformData = (Map<String, Object>)inputMap.remove(\"transformData\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        if(user != null) {\n            List roles = (List) user.get(\"roles\");\n            if (roles.contains(\"betaTester\")) {\n                inputMap.put(\"name\", transformData.get(\"beta\"));\n            } else {\n                inputMap.put(\"name\", transformData.get(\"production\"));\n            }\n        } else {\n            inputMap.put(\"name\", transformData.get(\"production\"));\n        }\n        return true;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.transform.BetaTestRule",
      "createDate": "2016-03-31T00:36:27.329"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.329",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:23",
    "@version": 1,
    "@class": "Event",
    "eventId": 10024,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 21/12/14.\n * Download events from event store. Should be a search interface so that you can enter search\n * criteria.\n *\n * TODO make it searchable\n *\n * AccessLevel R [user]\n *\n */\npublic class DownloadEventRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        // everyone is allowed to download events performed by himself and replay it on\n        // other site build with the same framework.\n\n        // make sure that both from datetime and to datetime are in the past. And to datetime\n        // can be optional which means get everything after from datetime.\n\n        // Now let's build a criteria for db search.\n\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\")) {\n            // only owner can generate events for common components without host.\n            data.remove(\"host\");\n        }\n        data.put(\"createUserId\", user.get(\"userId\"));\n        String json = DbService.getData(\"Event\", data);\n        if(json != null) {\n            inputMap.put(\"result\", json);\n        } else {\n            error = \"No event can be found\";\n            inputMap.put(\"responseCode\", 400);\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.DownloadEventRule",
      "createDate": "2016-03-31T00:36:27.348"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.348",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:24",
    "@version": 1,
    "@class": "Event",
    "eventId": 10025,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 01/03/15.\n */\npublic class ExecUpdateCmdEvRule extends AbstractDbRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        execUpdateCmd(data, true);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExecUpdateCmdEvRule",
      "createDate": "2016-03-31T00:36:27.362"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.362",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:25",
    "@version": 1,
    "@class": "Event",
    "eventId": 10026,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 12/12/14.\n *\n * Export only the event store for backup. There is no UI as of yet. TODO.\n *\n * Only owner can export the entire event store\n *\n * AccessLevel R [owner]\n *\n */\npublic class ExpEventRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        if(user == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"dbAdmin\")) {\n                error = \"Role owner or admin or dbAdmin is required to add schema\";\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String path = (String)data.get(\"path\");\n                if(path != null) {\n                    // make sure that the Path exists.\n                    File file = new File(path);\n                    if (!file.exists()) {\n                        String result = exportEvent(path);\n                        inputMap.put(\"result\", result);\n                    } else {\n                        error = \"Please remove existing file manually\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                } else {\n                    error = \"Path is required\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExpEventRule",
      "createDate": "2016-03-31T00:36:27.378"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.378",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:26",
    "@version": 1,
    "@class": "Event",
    "eventId": 10027,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 01/03/15.\n */\npublic class ExecSchemaCmdEvRule extends AbstractDbRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        execSchemaCmd(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExecSchemaCmdEvRule",
      "createDate": "2016-03-31T00:36:27.393"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.393",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:27",
    "@version": 1,
    "@class": "Event",
    "eventId": 10028,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport com.orientechnologies.orient.core.command.OCommandOutputListener;\nimport com.orientechnologies.orient.core.command.script.OCommandScript;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.tool.ODatabaseExport;\nimport com.orientechnologies.orient.core.db.tool.ODatabaseImport;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 10/12/14.\n */\npublic abstract class AbstractDbRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractDbRule.class);\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void impDb(Map<String, Object> data) {\n        String content = (String) data.get(\"content\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            OCommandOutputListener listener = new OCommandOutputListener() {\n                @Override\n                public void onMessage(String iText) {\n                    logger.info(iText);\n                }\n            };\n            InputStream is = new ByteArrayInputStream(content.getBytes());\n            ODatabaseImport imp = new ODatabaseImport(graph.getRawGraph(), is, listener);\n            imp.importDatabase();\n            imp.close();\n        } catch (IOException ioe) {\n            logger.error(\"Exception:\", ioe);\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected String exportEvent(String path) {\n        final String[] result = new String[1];\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            OCommandOutputListener listener = new OCommandOutputListener() {\n                @Override\n                public void onMessage(String iText) {\n                    result[0] = result[0] + iText;\n                }\n            };\n            ODatabaseExport export = new ODatabaseExport(graph.getRawGraph(), path, listener);\n            export.exportDatabase();\n            export.close();\n        } catch(IOException ioe) {\n            ioe.printStackTrace();\n        } finally {\n            graph.shutdown();\n        }\n        return result[0];\n    }\n\n    protected String execUpdateCmd(Map<String, Object> data, boolean commit) {\n        String result = \"\";\n        String script = (String) data.get(\"script\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.command(new OCommandScript(\"sql\", script)).execute();\n            if(commit) {\n                graph.commit();\n            } else {\n                graph.rollback();\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            result = e.getMessage();\n        } finally {\n            graph.shutdown();\n        }\n        return result;\n    }\n\n    protected String execSchemaCmd(Map<String, Object> data) {\n        String result = \"\";\n        String script = (String) data.get(\"script\");\n        OrientGraphNoTx graph = ServiceLocator.getInstance().getGraphNoTx();\n        try{\n            graph.command(new OCommandScript(\"sql\", script)).execute();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            result = e.getMessage();\n        } finally {\n            graph.shutdown();\n        }\n        return result;\n    }\n\n    protected String execQueryCmd(OrientGraph graph, Map<String, Object> data) {\n        OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>((String)data.get(\"script\"));\n        List<ODocument> accesses = graph.getRawGraph().command(query).execute();\n        return OJSONWriter.listToJSON(accesses, null);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.AbstractDbRule",
      "createDate": "2016-03-31T00:36:27.429"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.429",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:28",
    "@version": 1,
    "@class": "Event",
    "eventId": 10029,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 01/03/15.\n *\n * This is the rule that create or update schema during new application initial setup.\n * Note that unlike update command we can try it out without commit, this one we cannot.\n *\n */\npublic class ExecSchemaCmdRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        // make sure we have content payload here.\n        String script = (String)data.get(\"script\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        eventData.put(\"script\", script);\n        eventData.put(\"createDate\", new java.util.Date());\n        eventData.put(\"createUserId\", user.get(\"userId\"));\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExecSchemaCmdRule",
      "createDate": "2016-03-31T00:36:27.463"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.463",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:29",
    "@version": 1,
    "@class": "Event",
    "eventId": 10030,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 11/12/14.\n *\n * Execute database command so that it can create schemas or other objects.\n *\n * Due to the importance of the API, the code level access control is in place.\n *\n * AccessLevel R [owner, admin, dbAdmin]\n *\n * Current AccessLevel R [owner]\n * as site level control is not done yet. TODO\n */\npublic class ExecUpdateCmdRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        // make sure we have content payload here.\n        String script = (String)data.get(\"script\");\n        if(script == null || script.length() == 0) {\n            error = \"Content is empty\";\n            inputMap.put(\"responseCode\", 400);\n        } else {\n            // make sure the script is executable.\n            String result = execUpdateCmd(data, false);\n            if(result.length() > 0) {\n                error = result;\n                inputMap.put(\"responseCode\", 500);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"script\", script);\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExecUpdateCmdRule",
      "createDate": "2016-03-31T00:36:27.491"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.491",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:30",
    "@version": 1,
    "@class": "Event",
    "eventId": 10031,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 01/03/15.\n */\npublic class ExecQueryCmdRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String script = (String)data.get(\"script\");\n        // make sure the script is executable.\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String json = null;\n        try{\n            json = execQueryCmd(graph, data);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            inputMap.put(\"result\", e.getMessage());\n            inputMap.put(\"responseCode\", 500);\n            return false;\n        } finally {\n            graph.shutdown();\n        }\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"responseCode\", 404);\n            inputMap.put(\"result\", \"Not found\");\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExecQueryCmdRule",
      "createDate": "2016-03-31T00:36:27.509"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.509",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:31",
    "@version": 1,
    "@class": "Event",
    "eventId": 10032,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.db;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 15/02/15.\n *\n * Export db into a json file and download to local hard drive for backup. This\n * is for the entire database.\n *\n * TODO complete it.\n *\n * AccessLevel R [owner]\n *\n */\npublic class ExpDbRule extends AbstractDbRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n\n        // export into a json in memory\n        //\n        // send to client for download\n\n        // once it is done, then create an event for persistence\n\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        eventData.put(\"createDate\", new java.util.Date());\n        eventData.put(\"createUserId\", user.get(\"userId\"));\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.db.ExpDbRule",
      "createDate": "2016-03-31T00:36:27.525"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.525",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:32",
    "@version": 1,
    "@class": "Event",
    "eventId": 10033,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.order;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 20/12/15.\n */\npublic class AddOrderEvRule extends AbstractOrderRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addOrder(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.order.AddOrderEvRule",
      "createDate": "2016-03-31T00:36:27.538"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.538",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:33",
    "@version": 1,
    "@class": "Event",
    "eventId": 10034,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.order;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.ext.XLogger;\nimport org.slf4j.ext.XLoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 20/12/15.\n */\npublic abstract class AbstractOrderRule extends AbstractRule implements Rule {\n    static final XLogger logger = XLoggerFactory.getXLogger(AbstractOrderRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    /**\n     * To save the order right before routing to payment gateway\n     *\n     * @param data\n     * @throws Exception\n     */\n    protected void addOrder(Map<String, Object> data) throws Exception {\n        logger.entry(data);\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex order = graph.addVertex(\"class:Order\", data);\n            user.addEdge(\"Create\", order);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.order.AbstractOrderRule",
      "createDate": "2016-03-31T00:36:27.558"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.558",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:34",
    "@version": 1,
    "@class": "Event",
    "eventId": 10035,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.order;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.delivery.AbstractAddressRule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.math.BigDecimal;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 20/12/15.\n * Add an order before routing to the payment gateway with default\n * paymentStatus and fulfillmentStatus as pending. Due to the risk that\n * javascript can be updated on the browser, all the numbers will be\n * calculated again here.\n *\n *\n * AccessLevel R [user]\n *\n */\npublic class AddOrderRule extends AbstractOrderRule implements Rule {\n\n    @Override\n    public boolean execute(Object... objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        List<Map<String, Object>> items = (List<Map<String, Object>>)data.get(\"items\");\n        String host = (String)data.get(\"host\");\n        BigDecimal subTotal = new BigDecimal(0.00);\n        BigDecimal total = new BigDecimal(0.00);\n\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            for(Map<String, Object> item: items) {\n                Vertex product = DbService.getVertexByRid(graph, (String)item.get(\"rid\"));\n                String sku = (String)item.get(\"sku\");\n                BigDecimal qty = new BigDecimal(item.get(\"qty\").toString());\n                BigDecimal price = new BigDecimal(0.00);\n                List<Map<String, Object>> variants = product.getProperty(\"variants\");\n                for(Map<String, Object> variant : variants) {\n                    if(sku.equals(variant.get(\"sku\"))) {\n                        price = new BigDecimal(variant.get(\"price\").toString());\n                        item.put(\"price\", price);\n                        break;\n                    }\n                }\n                subTotal = subTotal.add(price.multiply(qty));\n            }\n\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.putAll(data);\n\n            String deliveryMethod = null;\n            Map<String, Object> delivery = (Map)data.get(\"delivery\");\n            if(delivery != null) deliveryMethod = (String)delivery.get(\"method\");\n            Vertex u = graph.getVertexByKey(\"User.userId\", (String) user.get(\"userId\"));\n\n            if(\"SP\".equals(deliveryMethod) || \"SO\".equals(deliveryMethod)) {\n                // shipping cost\n                Map<String, Object> shippingAddress = u.getProperty(\"shippingAddress\");\n                // now calculate the shipping cost based on the subTotal for now\n                BigDecimal shipping = AbstractAddressRule.calculateShipping(host, shippingAddress, items, subTotal);\n                eventData.put(\"shipping\", shipping);\n\n                // now calculate the tax based on shipping address.\n                Map<String, BigDecimal> taxes = AbstractAddressRule.calculateTax(host, shippingAddress, items, subTotal.add(shipping));\n                BigDecimal tax = new BigDecimal(0.00);\n                for (BigDecimal b : taxes.values()) {\n                    tax = tax.add(b);\n                }\n                total = subTotal.add(shipping).add(tax);\n                eventData.put(\"tax\", tax);\n                eventData.putAll(taxes);\n                eventData.put(\"total\", total);\n            } else {\n                Map<String, Object> billingAddress = u.getProperty(\"billingAddress\");\n                // now calculate the tax based on shipping address.\n                Map<String, BigDecimal> taxes = AbstractAddressRule.calculateTax(host, billingAddress, items, subTotal);\n                BigDecimal tax = new BigDecimal(0.00);\n                for(BigDecimal b : taxes.values()) {\n                    tax = tax.add(b);\n                }\n                total = subTotal.add(tax);\n                eventData.put(\"tax\", tax);\n                eventData.putAll(taxes);\n                eventData.put(\"total\", total);\n            }\n\n            // add orderId here\n            int orderId = DbService.incrementCounter(\"orderId\");\n            eventData.put(\"orderId\", orderId);\n            eventData.put(\"subTotal\", subTotal);\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n            inputMap.put(\"result\", \"{\\\"orderId\\\":\" + orderId + \", \\\"total\\\":\"  + total + \"}\");\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.order.AddOrderRule",
      "createDate": "2016-03-31T00:36:27.575"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.575",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:35",
    "@version": 1,
    "@class": "Event",
    "eventId": 10036,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.demo;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/02/15.\n */\npublic class GetDropdownRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        inputMap.put(\"result\", \"[{\\\"value\\\":\\\"value1\\\",\\\"label\\\":\\\"label1\\\"},{\\\"value\\\":\\\"value2\\\",\\\"label\\\":\\\"label2\\\"},{\\\"value\\\":\\\"value3\\\",\\\"label\\\":\\\"label3\\\"}]\");\n        return true;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.demo.GetDropdownRule",
      "createDate": "2016-03-31T00:36:27.608"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.608",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:36",
    "@version": 1,
    "@class": "Event",
    "eventId": 10037,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.tag;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.db.AbstractDbRule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.db.record.ridbag.ORidBag;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientElementIterable;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by husteve on 10/21/2014.\n */\npublic abstract class AbstractTagRule extends AbstractBfnRule implements Rule {\n\n    static final Logger logger = LoggerFactory.getLogger(AbstractTagRule.class);\n\n    public abstract boolean execute(Object... objects) throws Exception;\n\n    public boolean getTagDropdown(Object... objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String host = (String) data.get(\"host\");\n        String docs = getTagDropdownDb(host);\n        if (docs != null) {\n            inputMap.put(\"result\", docs);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No record found\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n\n    protected String getTagDropdownDb(String host) {\n        String json = null;\n        String sql = \"SELECT FROM Tag WHERE host = ? ORDER BY tagId\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = graph.getRawGraph().command(query).execute(host);\n            if (docs.size() > 0) {\n                List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n                for (ODocument doc : docs) {\n                    Map<String, String> map = new HashMap<String, String>();\n                    map.put(\"label\", (String) doc.field(\"tagId\"));\n                    map.put(\"value\", (String) doc.field(\"tagId\"));\n                    list.add(map);\n                }\n                json = mapper.writeValueAsString(list);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    public boolean getTagEntity(Object... objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String tagId = (String) data.get(\"tagId\");\n        String host = (String) data.get(\"host\");\n        if(tagId == null) {\n            inputMap.put(\"result\", \"tagId is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        Integer pageSize = (Integer)data.get(\"pageSize\");\n        Integer pageNo = (Integer)data.get(\"pageNo\");\n        if(pageSize == null) {\n            inputMap.put(\"result\", \"pageSize is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        if(pageNo == null) {\n            inputMap.put(\"result\", \"pageNo is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        String sortDir = (String)data.get(\"sortDir\");\n        String sortedBy = (String)data.get(\"sortedBy\");\n        if(sortDir == null) {\n            sortDir = \"desc\";\n        }\n        if(sortedBy == null) {\n            sortedBy = \"createDate\";\n        }\n\n        // Get the entity list from cache.\n        List<String> list = getTagEntityList(host, tagId);\n\n        if(list != null && list.size() > 0) {\n            long total = list.size();\n            List<Map<String, Object>> entities = new ArrayList<Map<String, Object>>();\n            for(int i = pageSize*(pageNo - 1); i < Math.min(pageSize*pageNo, list.size()); i++) {\n                String entityRid = list.get(i);\n                Map<String, Object> entity = getTagEntity(entityRid);\n                if(entity != null) {\n                    entities.add(entity);\n                } else {\n                    logger.warn(\"Could not find entity {} from List {}\", entityRid, host + tagId);\n                }\n            }\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"entities\", entities);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", 0);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        }\n    }\n\n    protected Map<String, Object> getTagEntity(String entityRid) {\n        Map<String, Object> entity = null;\n        Map<String, Object> categoryMap = ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> entityCache = (ConcurrentMap<Object, Object>)categoryMap.get(\"entityCache\");\n        if(entityCache == null) {\n            entityCache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(10000)\n                    .build();\n            categoryMap.put(\"entityCache\", entityCache);\n        } else {\n            entity = (Map<String, Object>)entityCache.get(entityRid);\n        }\n        if(entity == null) {\n            entity = getCategoryEntityDb(entityRid);\n            if(entity != null) {\n                entityCache.put(entityRid, entity);\n            }\n        }\n        return entity;\n    }\n\n    protected List<String> getTagEntityList(String host, String tagId) {\n        List<String> list = null;\n        Map<String, Object> categoryMap = ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> listCache = (ConcurrentMap<Object, Object>)categoryMap.get(\"listCache\");\n        if(listCache == null) {\n            listCache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(200)\n                    .build();\n            categoryMap.put(\"listCache\", listCache);\n        } else {\n            list = (List<String>)listCache.get(host + tagId);\n        }\n        if(list == null) {\n            list = getTagEntityListDb(host, tagId);\n            if(list != null) {\n                listCache.put(host + tagId, list);\n            }\n        }\n        return list;\n    }\n\n    protected List<String> getTagEntityListDb(String host, String tagId) {\n        List<String> entityList = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OIndex<?> tagHostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"tagHostIdIdx\");\n            OCompositeKey key = new OCompositeKey(host, tagId);\n            OIdentifiable oid = (OIdentifiable) tagHostIdIdx.get(key);\n            if (oid != null) {\n                ODocument doc = (ODocument)oid.getRecord();\n                entityList = new ArrayList<String>();\n                ORidBag entities = doc.field(\"in_HasTag\");\n                Iterator<OIdentifiable> iterator = entities.iterator();\n                while (iterator.hasNext()) {\n                    OIdentifiable identifiable = iterator.next();\n                    entityList.add(identifiable.getIdentity().toString());\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return entityList;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.tag.AbstractTagRule",
      "createDate": "2016-03-31T00:36:27.630"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.630",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:37",
    "@version": 1,
    "@class": "Event",
    "eventId": 10038,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.tag;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 30/01/16.\n *\n * AccessLevel A anybody\n *\n */\npublic class GetTagEntityRule extends AbstractTagRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getTagEntity(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.tag.GetTagEntityRule",
      "createDate": "2016-03-31T00:36:27.642"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.642",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:38",
    "@version": 1,
    "@class": "Event",
    "eventId": 10039,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.tag;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 17/01/16.\n */\npublic class GetTagDropdownRule extends AbstractTagRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getTagDropdown(objects);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.tag.GetTagDropdownRule",
      "createDate": "2016-03-31T00:36:27.669"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.669",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:39",
    "@version": 1,
    "@class": "Event",
    "eventId": 10040,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport io.undertow.server.HttpServerExchange;\n\nimport java.util.*;\n\n/**\n * Created by husteve on 10/29/2014.\n *\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class UpdMenuItemRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only update menuItem for host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex menuItem = DbService.getVertexByRid(graph, rid);\n                if(menuItem == null) {\n                    error = \"MenuItem with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    int storedVersion = menuItem.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        inputMap.put(\"responseCode\", 422);\n                        error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    } else {\n                        // need to make sure that all the menuItems exist and convert to id for event replay.\n                        // and build addMenuItems and delMenuItems sets to the map.\n                        Set<String> inputMenuItems = new HashSet<String>();\n                        List<String> menuItems = (List<String>)data.get(\"out_Own\");\n                        if(menuItems != null) {\n                            for(String menuItemRid: menuItems) {\n                                Vertex vertex = DbService.getVertexByRid(graph, menuItemRid);\n                                if(vertex != null) {\n                                    inputMenuItems.add(vertex.getProperty(\"menuItemId\"));\n                                }\n                            }\n                        }\n\n                        Set<String> storedMenuItems = new HashSet<String>();\n                        for (Vertex vertex : (Iterable<Vertex>) menuItem.getVertices(Direction.OUT, \"Own\")) {\n                            storedMenuItems.add(vertex.getProperty(\"menuItemId\"));\n                        }\n                        Set<String> addMenuItems = new HashSet<String>(inputMenuItems);\n                        Set<String> delMenuItems = new HashSet<String>(storedMenuItems);\n                        addMenuItems.removeAll(storedMenuItems);\n                        delMenuItems.removeAll(inputMenuItems);\n\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        if(data.get(\"host\") != null) eventData.put(\"host\", data.get(\"host\"));\n                        if(addMenuItems.size() > 0) eventData.put(\"addMenuItems\", addMenuItems);\n                        if(delMenuItems.size() > 0) eventData.put(\"delMenuItems\", delMenuItems);\n                        eventData.put(\"menuItemId\", menuItem.getProperty(\"menuItemId\"));\n                        eventData.put(\"path\", data.get(\"path\"));\n                        eventData.put(\"tpl\", data.get(\"tpl\"));\n                        eventData.put(\"ctrl\", data.get(\"ctrl\"));\n                        eventData.put(\"left\", data.get(\"left\"));\n                        eventData.put(\"roles\", data.get(\"roles\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuItemRule",
      "createDate": "2016-03-31T00:36:27.692"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.692",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:40",
    "@version": 1,
    "@class": "Event",
    "eventId": 10041,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class DelMenuEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delMenu(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.DelMenuEvRule",
      "createDate": "2016-03-31T00:36:27.721"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.721",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:41",
    "@version": 1,
    "@class": "Event",
    "eventId": 10042,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class UpdMenuItemEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updMenuItem(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuItemEvRule",
      "createDate": "2016-03-31T00:36:27.737"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.737",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:42",
    "@version": 1,
    "@class": "Event",
    "eventId": 10043,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n *\n * AccessLevel R [owner]\n *\n */\npublic class DelMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only delete menu for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex menu = DbService.getVertexByRid(graph, rid);\n                if(menu == null) {\n                    error = \"Menu with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", menu.getProperty(\"host\"));// unique key\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.DelMenuRule",
      "createDate": "2016-03-31T00:36:27.754"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.754",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:43",
    "@version": 1,
    "@class": "Event",
    "eventId": 10044,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class AddMenuItemEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addMenuItem(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AddMenuItemEvRule",
      "createDate": "2016-03-31T00:36:27.777"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.777",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:44",
    "@version": 1,
    "@class": "Event",
    "eventId": 10045,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 29/10/14.\n *\n * Get All menus and menuItems for menu admin interface.\n *\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class GetAllMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String) user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String menus = null;\n        try {\n            menus = getAllMenu(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(menus != null) {\n            inputMap.put(\"result\", menus);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No menu can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.GetAllMenuRule",
      "createDate": "2016-03-31T00:36:27.802"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.802",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:45",
    "@version": 1,
    "@class": "Event",
    "eventId": 10046,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class AddMenuEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addMenu(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AddMenuEvRule",
      "createDate": "2016-03-31T00:36:27.813"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.813",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:46",
    "@version": 1,
    "@class": "Event",
    "eventId": 10047,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n * AccessLevel R [owner, admin, menuAdmin]\n */\npublic class AddMenuItemRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"You can only add menuItem for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                String json = getMenuItem(graph, (String) data.get(\"menuItemId\"));\n                if(json != null) {\n                    error = \"MenuItem for the label exists\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    List<String> menuItems = (List)data.remove(\"menuItems\");\n                    // convert to menuItemIds from rids\n                    if(menuItems != null && menuItems.size() > 0) {\n                        List<String> addMenuItems = new ArrayList();\n                        for(String rid: menuItems) {\n                            Vertex menuItem = DbService.getVertexByRid(graph, rid);\n                            addMenuItems.add(menuItem.getProperty(\"menuItemId\"));\n                        }\n                        data.put(\"addMenuItems\", addMenuItems);\n                    }\n                    eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                    if(host == null) {\n                        eventData.remove(\"host\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AddMenuItemRule",
      "createDate": "2016-03-31T00:36:27.827"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.827",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:47",
    "@version": 1,
    "@class": "Event",
    "eventId": 10048,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class DelMenuItemEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delMenuItem(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.DelMenuItemEvRule",
      "createDate": "2016-03-31T00:36:27.843"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.843",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:48",
    "@version": 1,
    "@class": "Event",
    "eventId": 10049,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 10/27/2014.\n * The menuMap.cache has three type of keys. host, label and @rid\n */\npublic abstract class AbstractMenuRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractMenuRule.class);\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected String getJsonByRid(String rid) {\n        String json = null;\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            json = (String)cache.get(\"rid\");\n        }\n        if(json == null) {\n            json = DbService.getJsonByRid(rid);\n            // put it into the blog cache.\n            if(json != null) {\n                if(cache == null) {\n                    cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                            .maximumWeightedCapacity(1000)\n                            .build();\n                    menuMap.put(\"cache\", cache);\n                }\n                cache.put(rid, json);\n            }\n        }\n        return json;\n    }\n\n    protected void delMenu(Map<String, Object> data) throws Exception {\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex menu = graph.getVertexByKey(\"Menu.host\", host);\n            if(menu != null) {\n                // cascade deleting all menuItems belong to the host only.\n                for (Vertex menuItem : graph.getVerticesOfClass(\"MenuItem\")) {\n                    if(host.equals(menuItem.getProperty(\"host\"))) {\n                        graph.removeVertex(menuItem);\n                    }\n                }\n                graph.removeVertex(menu);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        Map<String, Object> menuMap = ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(host);\n        }\n    }\n\n    protected void delMenuItem(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\",data.get(\"menuItemId\"));\n            if(menuItem != null) {\n                graph.removeVertex(menuItem);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        // no need to refresh cache as there is no reference to this menuItem anywhere.\n    }\n\n    protected String addMenu( Map<String, Object> data) throws Exception {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex menu = graph.addVertex(\"class:Menu\", \"host\", data.get(\"host\"), \"createDate\", data.get(\"createDate\"));\n            List<String> addMenuItems = (List<String>)data.get(\"addMenuItems\");\n            if(addMenuItems != null && addMenuItems.size() > 0) {\n                // find vertex for each menuItem id and create edge to it.\n                for(String menuItemId: addMenuItems) {\n                    Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                    menu.addEdge(\"Own\", menuItem);\n                }\n            }\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.get(\"createUserId\"));\n            user.addEdge(\"Create\", menu);\n            graph.commit();\n            json = menu.getRecord().toJSON(\"fetchPlan:menuItems:2\");\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            menuMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"host\"), json);\n        return json;\n    }\n\n    protected void addMenuItem(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            List<String> addMenuItems = (List<String>)data.remove(\"addMenuItems\");\n            OrientVertex menuItem = graph.addVertex(\"class:MenuItem\", data);\n            if(addMenuItems != null && addMenuItems.size() > 0) {\n                // find vertex for each menuItem id and create edge to it.\n                for(String menuItemId: addMenuItems) {\n                    Vertex childMenuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                    menuItem.addEdge(\"Own\", childMenuItem);\n                }\n            }\n            user.addEdge(\"Create\", menuItem);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected String getMenu(OrientGraph graph, String host) {\n        String json = null;\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            json = (String)cache.get(host);\n        }\n        if(json == null) {\n            Vertex menu = graph.getVertexByKey(\"Menu.host\", host);\n            if(menu != null) {\n                json = ((OrientVertex)menu).getRecord().toJSON(\"rid,fetchPlan:[*]in_Create:-2 [*]out_Create:-2 [*]in_Update:-2 [*]out_Update:-2 [*]in_Own:-2 [*]out_Own:4\");\n            }\n            if(json != null) {\n                if(cache == null) {\n                    cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                            .maximumWeightedCapacity(1000)\n                            .build();\n                    menuMap.put(\"cache\", cache);\n                }\n                cache.put(host, json);\n            }\n        }\n        return json;\n    }\n\n    protected String getMenuItem(OrientGraph graph, String menuItemId) throws Exception {\n        String json = null;\n        Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n        if(menuItem != null) {\n            json = ((OrientVertex)menuItem).getRecord().toJSON();\n        }\n        return json;\n    }\n\n    protected String getAllMenu(OrientGraph graph, String host) {\n        String json = null;\n        String jsonMenu = null;\n        String jsonMenuItem = null;\n        String sqlMenu = \"select from Menu\";\n        if(host != null) {\n            sqlMenu += \" where host = ?\";\n        }\n        String sqlMenuItem = \"select from MenuItem\";\n        // assumption here is menuItems are not empty.\n        OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sqlMenuItem);\n        List<ODocument> menuItems = graph.getRawGraph().command(query).execute(host);\n        if(menuItems.size() > 0) {\n            jsonMenuItem = OJSONWriter.listToJSON(menuItems, null);\n            json = \"{\\\"menuItems\\\":\" + jsonMenuItem;\n        }\n\n        query = new OSQLSynchQuery<>(sqlMenu);\n        List<ODocument> menus = graph.getRawGraph().command(query).execute(host);\n        if(menus.size() > 0) {\n            jsonMenu = OJSONWriter.listToJSON(menus, null);\n            json += \", \\\"menus\\\":\" + jsonMenu + \"}\";\n        } else {\n            json += \"}\";\n        }\n        return json;\n    }\n\n    protected void updMenu(Map<String, Object> data) throws Exception {\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex menu = graph.getVertexByKey(\"Menu.host\", host);\n            if(menu != null) {\n                Set<String> addMenuItems = (Set)data.get(\"addMenuItems\");\n                if(addMenuItems != null) {\n                    for(String menuItemId: addMenuItems) {\n                        Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                        menu.addEdge(\"Own\", menuItem);\n                    }\n                }\n                Set<String> delMenuItems = (Set)data.get(\"delMenuItems\");\n                if(delMenuItems != null) {\n                    for(String menuItemId: delMenuItems) {\n                        Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                        for (Edge edge : (Iterable<Edge>) menu.getEdges(Direction.OUT, \"Own\")) {\n                            if(edge.getVertex(Direction.IN).equals(menuItem)) graph.removeEdge(edge);\n                        }\n                    }\n                }\n                menu.setProperty(\"updateDate\", data.get(\"updateDate\"));\n            }\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n            updateUser.addEdge(\"Update\", menu);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // remove the cache item in order to reload the menu.\n        Map<String, Object> menuMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"menuMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)menuMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"host\"));\n        }\n    }\n\n    protected String getMenuItemMap(OrientGraph graph, String host) throws Exception {\n        String sql = \"SELECT FROM MenuItem\";\n        if(host != null) {\n            sql += \" WHERE host = ? OR host IS NULL\";\n        }\n        List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n        for (Vertex menuItem : (Iterable<Vertex>) graph.command(new OCommandSQL(sql)).execute()) {\n            Map<String, String> map = new HashMap<String, String>();\n            map.put(\"label\", (String)menuItem.getProperty(\"menuItemId\"));\n            map.put(\"value\", menuItem.getId().toString());\n            list.add(map);\n        }\n        return mapper.writeValueAsString(list);\n    }\n\n    protected void updMenuItem(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex menuItem = graph.getVertexByKey(\"MenuItem.menuItemId\", (String)data.get(\"menuItemId\"));\n            if(menuItem != null) {\n                // handle addMenuItems and delMenuItems\n                Set<String> addMenuItems = (Set)data.get(\"addMenuItems\");\n                if(addMenuItems != null) {\n                    for(String menuItemId: addMenuItems) {\n                        Vertex vertex = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                        menuItem.addEdge(\"Own\", vertex);\n                    }\n                }\n                Set<String> delMenuItems = (Set)data.get(\"delMenuItems\");\n                if(delMenuItems != null) {\n                    for(String menuItemId: delMenuItems) {\n                        Vertex vertex = graph.getVertexByKey(\"MenuItem.menuItemId\", menuItemId);\n                        for (Edge edge : (Iterable<Edge>) menuItem.getEdges(Direction.OUT, \"Own\")) {\n                            if(edge.getVertex(Direction.IN).equals(vertex)) graph.removeEdge(edge);\n                        }\n                    }\n                }\n                String path = (String)data.get(\"path\");\n                if(path != null && !path.equals(menuItem.getProperty(\"path\"))) {\n                    menuItem.setProperty(\"path\", path);\n                }\n                String tpl = (String)data.get(\"tpl\");\n                if(tpl != null && !tpl.equals(menuItem.getProperty(\"tpl\"))) {\n                    menuItem.setProperty(\"tpl\", tpl);\n                }\n                String ctrl = (String)data.get(\"ctrl\");\n                if(ctrl != null && !ctrl.equals(menuItem.getProperty(\"ctrl\"))) {\n                    menuItem.setProperty(\"ctrl\", ctrl);\n                }\n                Boolean left = (Boolean)data.get(\"left\");\n                if(left != null && !left.equals(menuItem.getProperty(\"left\"))) {\n                    menuItem.setProperty(\"left\", left);\n                }\n                List roles = (List)data.get(\"roles\");\n                if(roles != null) {\n                    menuItem.setProperty(\"roles\", roles);\n                } else {\n                    menuItem.setProperty(\"roles\", new ArrayList());\n                }\n                menuItem.setProperty(\"updateDate\", data.get(\"updateDate\"));\n            }\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n            updateUser.addEdge(\"Update\", menuItem);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AbstractMenuRule",
      "createDate": "2016-03-31T00:36:27.863"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.863",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:49",
    "@version": 1,
    "@class": "Event",
    "eventId": 10050,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 13/11/14.\n *\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class GetMenuItemMapRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String) user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String menuItems = null;\n        try {\n            menuItems = getMenuItemMap(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(menuItems != null) {\n            inputMap.put(\"result\", menuItems);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No menuItem can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.GetMenuItemMapRule",
      "createDate": "2016-03-31T00:36:27.888"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.888",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:50",
    "@version": 1,
    "@class": "Event",
    "eventId": 10051,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n */\npublic class UpdMenuEvRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updMenu(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuEvRule",
      "createDate": "2016-03-31T00:36:27.909"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.909",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:51",
    "@version": 1,
    "@class": "Event",
    "eventId": 10052,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class DelMenuItemRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only delete menuItem for host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex menuItem = DbService.getVertexByRid(graph, rid);\n                if(menuItem == null) {\n                    error = \"MenuItem with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    // find out if other menu or menuItem owns this menuItem\n                    if(DbService.hasEdgeToClass(graph, (OrientVertex)menuItem, \"Own\") || DbService.hasEdgeToClass(graph, (OrientVertex)menuItem, \"Own\")) {\n                        error = \"MenuItem is referenced by other entities\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"menuItemId\", menuItem.getProperty(\"menuItemId\"));  // unique key\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.DelMenuItemRule",
      "createDate": "2016-03-31T00:36:27.924"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.924",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:52",
    "@version": 1,
    "@class": "Event",
    "eventId": 10053,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.*;\n\n/**\n * Created by husteve on 10/29/2014.\n *\n *\n * AccessLevel R [owner, admin, menuAdmin]\n *\n */\npublic class UpdMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only update menu for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex menu = DbService.getVertexByRid(graph, rid);\n                if(menu == null) {\n                    error = \"Menu with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    int storedVersion = menu.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        inputMap.put(\"responseCode\", 422);\n                        error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    } else {\n                        // need to make sure that all the menuItems exist and convert to id for event replay.\n                        // and build addMenuItems and delMenuItems sets to the map.\n                        Set<String> inputMenuItems = new HashSet<String>();\n                        List<String> menuItems = (List<String>)data.get(\"out_Own\");\n                        if(menuItems != null) {\n                            for(String menuItemRid: menuItems) {\n                                Vertex menuItem = DbService.getVertexByRid(graph, menuItemRid);\n                                if(menuItem != null) {\n                                    inputMenuItems.add(menuItem.getProperty(\"menuItemId\"));\n                                }\n                            }\n                        }\n\n                        Set<String> storedMenuItems = new HashSet<String>();\n                        for (Vertex menuItem : (Iterable<Vertex>) menu.getVertices(Direction.OUT, \"Own\")) {\n                            storedMenuItems.add(menuItem.getProperty(\"menuItemId\"));\n                        }\n                        Set<String> addMenuItems = new HashSet<String>(inputMenuItems);\n                        Set<String> delMenuItems = new HashSet<String>(storedMenuItems);\n                        addMenuItems.removeAll(storedMenuItems);\n                        delMenuItems.removeAll(inputMenuItems);\n\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        if(data.get(\"host\") != null) eventData.put(\"host\", data.get(\"host\"));\n                        if(addMenuItems.size() > 0) eventData.put(\"addMenuItems\", addMenuItems);\n                        if(delMenuItems.size() > 0) eventData.put(\"delMenuItems\", delMenuItems);\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.UpdMenuRule",
      "createDate": "2016-03-31T00:36:27.941"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.941",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:53",
    "@version": 1,
    "@class": "Event",
    "eventId": 10054,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 23/09/14.\n *\n * AccessLevel A\n */\npublic class GetMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String host = (String) data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String json = null;\n        try {\n            json = getMenu(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Menu for host \" + host + \" cannot be found.\");\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.GetMenuRule",
      "createDate": "2016-03-31T00:36:27.961"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.961",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:54",
    "@version": 1,
    "@class": "Event",
    "eventId": 10055,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.menu;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/29/2014.\n *\n * This is the REST API endpoint to add a menu for a host.\n *\n * AccessLevel R [owner]\n */\npublic class AddMenuRule extends AbstractMenuRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String error = null;\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String json = getMenu(graph, (String)data.get(\"host\"));\n            if(json != null) {\n                error = \"Menu for the host exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"host\", host);\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n\n                // make sure all menuItems exist if there are any.\n                List<String> menuItems = (List<String>)data.get(\"menuItems\");\n                if(menuItems != null && menuItems.size() > 0) {\n                    List<String> addMenuItems = new ArrayList<String>();\n                    for(String menuItemRid: menuItems) {\n                        Vertex menuItem = DbService.getVertexByRid(graph, menuItemRid);\n                        if(menuItem == null) {\n                            error = \"MenuItem with @rid \" + menuItemRid + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                            break;\n                        } else {\n                            addMenuItems.add((String)menuItem.getProperty(\"menuItemId\"));\n                        }\n                    }\n                    eventData.put(\"addMenuItems\", addMenuItems);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.menu.AddMenuRule",
      "createDate": "2016-03-31T00:36:27.982"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.982",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:55",
    "@version": 1,
    "@class": "Event",
    "eventId": 10056,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 27/11/14.\n *\n * Get a post from post table by entityId\n *\n * AccessLevel A  Anybody\n *\n */\npublic class GetPostRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String entityId = (String)data.get(\"entityId\");\n        if(entityId != null) {\n            // convert entityId to entityRid first\n            String entityRid = getEntityRid(\"Post\", entityId);\n            Map<String, Object> result = getCategoryEntity(entityRid);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"entityId is required.\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.GetPostRule",
      "createDate": "2016-03-31T00:36:27.997"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:27.997",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:56",
    "@version": 1,
    "@class": "Event",
    "eventId": 10057,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 28/11/14.\n */\npublic class UpPostEvRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upVotePost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.UpPostEvRule",
      "createDate": "2016-03-31T00:36:28.032"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.032",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:57",
    "@version": 1,
    "@class": "Event",
    "eventId": 10058,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 28/11/14.\n *\n * Down vote a post in blog, forum or news\n *\n *\n */\npublic class DownPostEvRule extends AbstractPostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        downVotePost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.DownPostEvRule",
      "createDate": "2016-03-31T00:36:28.045"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.045",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:58",
    "@version": 1,
    "@class": "Event",
    "eventId": 10059,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 27/11/14.\n */\npublic abstract class AbstractPostRule extends AbstractBfnRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractPostRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void upVotePost(Map<String, Object> data) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex) graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex post = (OrientVertex) graph.getVertexByKey(\"Post.entityId\", data.get(\"entityId\"));\n            if (post != null && updateUser != null) {\n                // remove DownVote edge if there is.\n                for (Edge edge : updateUser.getEdges(post, Direction.OUT, \"DownVote\")) {\n                    if (edge.getVertex(Direction.IN).equals(post)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"UpVote\", post);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void downVotePost(Map<String, Object> data) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex) graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex post = (OrientVertex) graph.getVertexByKey(\"Post.entityId\", data.get(\"entityId\"));\n            if (post != null && updateUser != null) {\n                // remove UpVote edge if there is.\n                for (Edge edge : updateUser.getEdges(post, Direction.OUT, \"UpVote\")) {\n                    if (edge.getVertex(Direction.IN).equals(post)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"DownVote\", post);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.AbstractPostRule",
      "createDate": "2016-03-31T00:36:28.078"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.078",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:59",
    "@version": 1,
    "@class": "Event",
    "eventId": 10060,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 28/11/14.\n *\n * Up vote post\n *\n * AccessLevel R [user]\n *\n */\npublic class UpPostRule extends AbstractPostRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(UpPostRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex post = (OrientVertex)DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(post == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has up voted the post before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(post, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(post)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have up voted the post already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"entityId\", post.getProperty(\"entityId\"));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.UpPostRule",
      "createDate": "2016-03-31T00:36:28.096"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.096",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:60",
    "@version": 1,
    "@class": "Event",
    "eventId": 10061,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.post;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 28/11/14.\n *\n * AccessLevel R [user]\n */\npublic class DownPostRule extends AbstractPostRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(UpPostRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex post = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(post == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has down voted the post before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(post, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(post)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have down voted the post already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"entityId\", post.getProperty(\"entityId\"));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.post.DownPostRule",
      "createDate": "2016-03-31T00:36:28.110"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.110",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:61",
    "@version": 1,
    "@class": "Event",
    "eventId": 10062,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.perf;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 02/02/15.\n */\npublic class HelloWorldRule extends AbstractRule implements Rule {\n    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(HelloWorldRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        logger.debug(this.toString());\n        inputMap.put(\"result\", \"{\\\"message\\\": \\\"Hello World\\\"}\");\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.perf.HelloWorldRule",
      "createDate": "2016-03-31T00:36:28.132"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.132",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:62",
    "@version": 1,
    "@class": "Event",
    "eventId": 10063,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.perf;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 16/02/15.\n */\npublic class HelloWorld_1Rule extends AbstractRule implements Rule {\n    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(HelloWorldRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        logger.debug(this.toString());\n        inputMap.put(\"result\", \"{\\\"message\\\": \\\"Hello World 1\\\"}\");\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.perf.HelloWorld_1Rule",
      "createDate": "2016-03-31T00:36:28.146"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.146",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:63",
    "@version": 1,
    "@class": "Event",
    "eventId": 10064,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.networknt.light.rule.dependency;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.page.AbstractPageRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 3/9/2015.\n */\npublic class AddDependencyEvRule extends AbstractDependencyRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addDependency(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.dependency.AddDependencyEvRule",
      "createDate": "2016-03-31T00:36:28.156"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.156",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:64",
    "@version": 1,
    "@class": "Event",
    "eventId": 10065,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.networknt.light.rule.dependency;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.page.AbstractPageRule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 3/9/2015.\n *\n * for admin or ruleAdmin, you can select dest only belongs to the host. However, if source\n * is not publishing the message, you get nothing.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class AddDependencyRule extends AbstractDependencyRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String source = (String)data.get(\"source\");\n        String dest = (String)data.get(\"desc\");\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String userHost = (String)user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex sourceRule = DbService.getVertexByRid(graph, source);\n            Vertex destRule = DbService.getVertexByRid(graph, dest);\n            if(sourceRule == null || destRule == null) {\n                error = \"source rule or destination rule doesn't exist\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                String sourceRuleClass = sourceRule.getProperty(\"ruleClass\");\n                String destRuleClass = destRule.getProperty(\"ruleClass\");\n                if(userHost != null) {\n                    if (!userHost.equals(host)) {\n                        error = \"You can only add dependency from host: \" + host;\n                        inputMap.put(\"responseCode\", 403);\n                    } else {\n                        // make sure dest ruleClass contains host.\n                        if(!destRuleClass.contains(host)) {\n                            error = \"Destination rule doesn't belong to the host \" + host;\n                            inputMap.put(\"responseCode\", 403);\n                        } else {\n                            // check if there is an depend edge from source to dest\n                            boolean hasEdge = false;\n                            for (Edge edge : (Iterable<Edge>) sourceRule.getEdges(Direction.OUT, \"Own\")) {\n                                if(edge.getVertex(Direction.IN) == destRule) hasEdge = true;\n                            }\n                            if(hasEdge) {\n                                error = \"There is depend edge between source rule and dest rule\";\n                                inputMap.put(\"responseCode\", 400);\n                            } else {\n                                Map eventMap = getEventMap(inputMap);\n                                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                                inputMap.put(\"eventMap\", eventMap);\n                                eventData.put(\"sourceRuleClass\", sourceRuleClass);\n                                eventData.put(\"destRuleClass\", destRuleClass);\n                                eventData.put(\"content\", data.get(\"content\"));\n                                eventData.put(\"createDate\", new java.util.Date());\n                                eventData.put(\"createUserId\", user.get(\"userId\"));\n                            }\n                        }\n                    }\n                }\n\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.dependency.AddDependencyRule",
      "createDate": "2016-03-31T00:36:28.172"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.172",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:65",
    "@version": 1,
    "@class": "Event",
    "eventId": 10066,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.networknt.light.rule.dependency;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 3/9/2015.\n */\npublic abstract class AbstractDependencyRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractDependencyRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void addDependency(Map<String, Object> data) throws Exception {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex sourceRule = graph.getVertexByKey(\"Rule.ruleClass\", data.get(\"sourceRuleClass\"));\n            Vertex destRule = graph.getVertexByKey(\"Rule.ruleClass\", data.get(\"destRuleClass\"));\n            Edge edge = sourceRule.addEdge(\"Depend\", destRule);\n            edge.setProperty(\"content\", data.get(\"content\"));\n            graph.commit();\n            //json = edge.getRecord().toJSON();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            pageMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"pageId\"), json);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.dependency.AbstractDependencyRule",
      "createDate": "2016-03-31T00:36:28.191"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.191",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:66",
    "@version": 1,
    "@class": "Event",
    "eventId": 10067,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class DelHostRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String error = null;\n\n        // check if the host exists or not.\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        if(hostMap.containsKey(data.get(\"hostId\"))) {\n            // host exists\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.put(\"hostId\", data.get(\"hostId\"));\n            eventData.put(\"updateDate\", new java.util.Date());\n            eventData.put(\"updateUserId\", user.get(\"userId\"));\n            return true;\n        } else {\n            error = \"HostId does not exist\";\n            inputMap.put(\"responseCode\", 404);\n            inputMap.put(\"result\", error);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.DelHostRule",
      "createDate": "2016-03-31T00:36:28.207"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.207",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:67",
    "@version": 1,
    "@class": "Event",
    "eventId": 10068,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class UpdHostRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String error = null;\n        // check if the host exists or not.\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        if(hostMap.containsKey(data.get(\"hostId\"))) {\n            // host exists\n            // TODO update host into virtualhost.json here in the command or in event?\n            // In event is OK due to update multiple times is fine.\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.put(\"hostId\", data.get(\"hostId\"));\n            eventData.put(\"base\", data.get(\"base\"));\n            eventData.put(\"transferMinSize\", data.get(\"transferMinSize\"));\n            eventData.put(\"supportDevices\", data.get(\"supportDevices\"));\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n            return true;\n        } else {\n            error = \"HostId does not exist\";\n            inputMap.put(\"responseCode\", 404);\n            inputMap.put(\"result\", error);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.UpdHostRule",
      "createDate": "2016-03-31T00:36:28.223"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.223",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:68",
    "@version": 1,
    "@class": "Event",
    "eventId": 10069,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class AddHostEvRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addHost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.AddHostEvRule",
      "createDate": "2016-03-31T00:36:28.240"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.240",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:69",
    "@version": 1,
    "@class": "Event",
    "eventId": 10070,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.*;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n *\n * AccessLevel R [user]\n */\npublic class GetHostDropdownRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n        Set<String> keys = ServiceLocator.getInstance().getHostMap().keySet();\n        for(String key: keys) {\n            Map<String, String> map = new HashMap<String, String>();\n            map.put(\"label\", key);\n            map.put(\"value\", key);\n            list.add(map);\n        }\n        String hostDropdown = mapper.writeValueAsString(list);\n        if(hostDropdown != null) {\n            inputMap.put(\"result\", hostDropdown);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No host can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.GetHostDropdownRule",
      "createDate": "2016-03-31T00:36:28.257"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.257",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:70",
    "@version": 1,
    "@class": "Event",
    "eventId": 10071,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n *\n * This is only give you a way to update virtualhost.json in users directory, it won't\n * inject the new host into the virtualhosthandler. The server must be restarted in order\n * to load the newly added site.\n * TODO dynamically add a new host into virtualhosthandler without shutdonw server.\n *\n */\npublic class AddHostRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String error = null;\n\n        // check if the host exists or not.\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        if(hostMap.containsKey(data.get(\"hostId\"))) {\n            // host exists\n            error = \"HostId exists\";\n            inputMap.put(\"responseCode\", 400);\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.put(\"hostId\", data.get(\"hostId\"));\n            eventData.put(\"base\", data.get(\"base\"));\n            eventData.put(\"transferMinSize\", data.get(\"transferMinSize\"));\n            eventData.put(\"supportDevices\", data.get(\"supportDevices\"));\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.AddHostRule",
      "createDate": "2016-03-31T00:36:28.299"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.299",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:71",
    "@version": 1,
    "@class": "Event",
    "eventId": 10072,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n *\n * This is only used for host admin and only owner should access it.\n *\n * AccessLevel R owner.\n */\npublic class GetAllHostRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        // flatten the set to array with all the elements of the host.\n        List hosts = new ArrayList<Map<String, Object>>();\n        Map hostMap = ServiceLocator.getInstance().getHostMap();\n        Set<String> keys = hostMap.keySet();\n        for(String key : keys) {\n            Map valueMap = (Map<String, Object>)hostMap.get(key);\n            valueMap.put(\"hostId\", key);\n            hosts.add(valueMap);\n        }\n        inputMap.put(\"result\", mapper.writeValueAsString(hosts));\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.GetAllHostRule",
      "createDate": "2016-03-31T00:36:28.326"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.326",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:72",
    "@version": 1,
    "@class": "Event",
    "eventId": 10073,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class DelHostEvRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delHost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.DelHostEvRule",
      "createDate": "2016-03-31T00:36:28.342"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.342",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:73",
    "@version": 1,
    "@class": "Event",
    "eventId": 10074,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class UpdHostEvRule extends AbstractHostRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updHost(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.UpdHostEvRule",
      "createDate": "2016-03-31T00:36:28.361"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.361",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:74",
    "@version": 1,
    "@class": "Event",
    "eventId": 10075,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.host;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic abstract class AbstractHostRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(ServiceLocator.class);\n    static final String CONFIG_FILE = \"virtualhost.json\";\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void addHost(Map<String, Object> data) throws Exception {\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"base\", data.get(\"base\"));\n        map.put(\"transferMinSize\", data.get(\"transferMinSize\"));\n        map.put(\"supportDevices\", data.get(\"supportDevices\"));\n        map.put(\"hostId\", data.get(\"hostId\"));\n        hostMap.put((String)data.get(\"hostId\"), map);\n        writeHostMap(hostMap);\n    }\n\n    protected void updHost(Map<String, Object> data) throws Exception {\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        Map<String, Object> map = (Map<String, Object>)hostMap.get(data.get(\"hostId\"));\n        map.put(\"base\", data.get(\"base\"));\n        map.put(\"transferMinSize\", data.get(\"transferMinSize\"));\n        map.put(\"supportDevices\", data.get(\"supportDevices\"));\n        map.put(\"hostId\", data.get(\"hostId\"));\n        writeHostMap(hostMap);\n    }\n\n    protected void delHost(Map<String, Object> data) throws Exception {\n        Map<String, Object> hostMap = ServiceLocator.getInstance().getHostMap();\n        hostMap.remove(data.get(\"hostId\"));\n        writeHostMap(hostMap);\n    }\n\n    private void writeHostMap(Map<String, Object> hostMap) {\n        try {\n            mapper.enable(SerializationFeature.INDENT_OUTPUT);\n            try {\n                File file = new File(System.getProperty(\"config.dir\", \"\") + \"/\" + CONFIG_FILE);\n                mapper.writeValue(file, hostMap);\n            } catch (IOException ioe) {\n                logger.error(\"Host configuration should be externalized to config.dir system property folder\");\n                mapper.writeValue((new File(System.getProperty(\"user.home\") + \"/virtualhost.json\")), hostMap);\n            }\n        } catch (IOException ioe) {\n            logger.error(\"Exception:\", ioe);\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.host.AbstractHostRule",
      "createDate": "2016-03-31T00:36:28.385"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.385",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:75",
    "@version": 1,
    "@class": "Event",
    "eventId": 10076,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.payment;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 2/19/2016.\n */\npublic class AddSubscriptionEvRule extends AbstractPaymentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addSubscription(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.payment.AddSubscriptionEvRule",
      "createDate": "2016-03-31T00:36:28.397"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.397",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:76",
    "@version": 1,
    "@class": "Event",
    "eventId": 10077,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.payment;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 20/12/15.\n *\n * This is the event rule to save the transaction created by the validation rule. As payment\n * is integrated with braintree, so the call to braintree is handled in the validation rule\n * to avoid side effect. This event rule will only save the created transactions in order to\n * recreate snapshot.\n *\n */\npublic class AddTransactionEvRule extends AbstractPaymentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addTransaction(data);\n        return true;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.payment.AddTransactionEvRule",
      "createDate": "2016-03-31T00:36:28.410"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.410",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:77",
    "@version": 1,
    "@class": "Event",
    "eventId": 10078,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.payment;\n\nimport com.braintreegateway.Result;\nimport com.braintreegateway.Transaction;\nimport com.braintreegateway.TransactionRequest;\nimport com.braintreegateway.ValidationError;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.ext.XLogger;\nimport org.slf4j.ext.XLoggerFactory;\n\nimport java.math.BigDecimal;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by steve on 20/12/15.\n *\n * This rule get payment method nonce from braintree dropin and create a transaction from it.\n * It is a way to charge customer once you have authorization from braintree payment gateway.\n *\n * AccessLevel User\n *\n */\npublic class AddTransactionRule extends AbstractPaymentRule implements Rule {\n    static final XLogger logger = XLoggerFactory.getXLogger(AddTransactionRule.class);\n\n    @Override\n    public boolean execute(Object... objects) throws Exception {\n        logger.entry(objects[0]);\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String)data.get(\"host\");\n        Integer orderId = (Integer)data.get(\"orderId\");\n        Map<String, Object> tran = (Map<String, Object>)data.get(\"transaction\");\n        String nonce = (String)tran.get(\"nonce\");\n        BigDecimal total = null;\n        String error = null;\n\n        // At this moment, the order is saved already in payment state as pending, load the order.\n        // with orderId passed in and return it to the client with updated\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex order = (OrientVertex)graph.getVertexByKey(\"Order.orderId\", orderId);\n            if(order != null) {\n                total = order.getProperty(\"total\");\n                TransactionRequest request = new TransactionRequest()\n                        .amount(total)\n                        .paymentMethodNonce(nonce)\n                        .options()\n                        .submitForSettlement(true)\n                        .done();\n                Result<Transaction> result = gatewayMap.get(host).transaction().sale(request);\n                if (result.isSuccess()) {\n                    Transaction transaction = result.getTarget();\n                    //System.out.println(\"Success!: \" + transaction.getId());\n                    // prepare for update order payment status\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll(data);\n                    eventData.put(\"transactionId\", transaction.getId());\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n\n                    Map<String, Object> map = new HashMap<String, Object>();\n                    map.put(\"orderId\", orderId);\n                    inputMap.put(\"result\", mapper.writeValueAsString(map));\n                } else if (result.getTransaction() != null) {\n                    Transaction transaction = result.getTransaction();\n                    error = \"Error processing transaction. Status: \" + transaction.getStatus() +\n                            \" Code: \" + transaction.getProcessorResponseCode() +\n                            \" Text: \" + transaction.getProcessorResponseText();\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    inputMap.put(\"responseCode\", 400);\n                    for (ValidationError validationError : result.getErrors().getAllDeepValidationErrors()) {\n                        error = error + \"Attribute: \" + validationError.getAttribute() +\n                                \" Code: \" + validationError.getCode() +\n                                \" Message: \" + validationError.getMessage() + \"\\n\";\n                    }\n                }\n\n                // TODO send an email with order info to the customer here. Assuming payment status is paid here.\n\n            } else {\n                inputMap.put(\"responseCode\", 400);\n                error = \"Could not find order with orderId: \" + orderId;\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.payment.AddTransactionRule",
      "createDate": "2016-03-31T00:36:28.420"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.420",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:78",
    "@version": 1,
    "@class": "Event",
    "eventId": 10079,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.payment;\n\nimport com.braintreegateway.BraintreeGateway;\nimport com.braintreegateway.ClientTokenRequest;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 19/12/15.\n * Get client token from braintree payment in order to initialize the dropin form\n *\n * AccessLevel user\n *\n */\npublic class GetClientTokenRule extends AbstractPaymentRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n\n        String error = null;\n        // using host to get the production or sandbox configuration for braintree payment.\n        String host = (String)data.get(\"host\");\n\n        if(host == null) {\n            error = \"Host is missing from command data\";\n            inputMap.put(\"responseCode\", 400);\n        } else {\n            BraintreeGateway gateway = gatewayMap.get(host);\n            ClientTokenRequest clientTokenRequest = new ClientTokenRequest();\n            String clientToken = gateway.clientToken().generate(clientTokenRequest);\n            if(clientToken == null) {\n                error = \"Failed to generate client token\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                inputMap.put(\"result\", \"{\\\"clientToken\\\": \\\"\" + clientToken + \"\\\"}\");\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.payment.GetClientTokenRule",
      "createDate": "2016-03-31T00:36:28.430"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.430",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:79",
    "@version": 1,
    "@class": "Event",
    "eventId": 10080,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.payment;\n\nimport com.networknt.light.rule.AbstractCommerceRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport org.slf4j.ext.XLogger;\nimport org.slf4j.ext.XLoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 19/12/15.\n */\npublic abstract class AbstractPaymentRule extends AbstractCommerceRule implements Rule {\n    static final XLogger logger = XLoggerFactory.getXLogger(AbstractPaymentRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    /**\n     * To save the customer transaction into database.\n     *\n     * @param data\n     * @throws Exception\n     */\n    protected void addTransaction(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            Vertex order = graph.getVertexByKey(\"Order.orderId\", data.get(\"orderId\"));\n            if(order != null) {\n                order.setProperty(\"paymentStatus\", 1);  // update payment status to paid.\n                Map<String, Object> transaction = (Map<String, Object>)data.get(\"transaction\");\n                order.setProperty(\"nonce\", transaction.get(\"nonce\"));\n                //order.setProperty\n            }\n            user.addEdge(\"Update\", order);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    /**\n     * To save the customer transaction into database.\n     *\n     * @param data\n     * @throws Exception\n     */\n    protected void addSubscription(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex user = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            Vertex order = graph.getVertexByKey(\"Order.orderId\", data.get(\"orderId\"));\n            if(order != null) {\n                order.setProperty(\"paymentStatus\", 1);  // update payment status to paid.\n                List<Map<String, Object>> subscriptions = (List<Map<String, Object>>)data.get(\"subscriptions\");\n                order.setProperty(\"subscriptions\", subscriptions);\n                //order.setProperty\n            }\n            user.addEdge(\"Update\", order);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.payment.AbstractPaymentRule",
      "createDate": "2016-03-31T00:36:28.439"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.439",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:80",
    "@version": 1,
    "@class": "Event",
    "eventId": 10081,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.payment;\n\nimport com.braintreegateway.*;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.ext.XLogger;\nimport org.slf4j.ext.XLoggerFactory;\n\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 2/19/2016.\n *\n * This is for recurring billing for services.\n *\n * AccessLevel R [user]\n *\n */\npublic class AddSubscriptionRule extends AbstractPaymentRule implements Rule {\n    static final XLogger logger = XLoggerFactory.getXLogger(AddTransactionRule.class);\n\n    @Override\n    public boolean execute(Object... objects) throws Exception {\n        logger.entry(objects[0]);\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String)data.get(\"host\");\n        String userId = (String)user.get(\"userId\"); // this will be customer_id\n        Integer orderId = (Integer)data.get(\"orderId\");\n        Map<String, Object> tran = (Map<String, Object>)data.get(\"transaction\");\n        String nonce = (String)tran.get(\"nonce\");\n        BigDecimal total = null;\n        String error = null;\n\n        // At this moment, the order is saved already in payment state as pending, load the order.\n        // with orderId passed in and return it to the client with updated\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex order = (OrientVertex)graph.getVertexByKey(\"Order.orderId\", orderId);\n            if(order != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll(data);\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", userId);\n\n                List<Map<String, Object>> subscriptions = new ArrayList<Map<String, Object>>();\n                // first get braintree customer id from user profile. The customerId was created when\n                // billing address is created.\n                Vertex userVertex = graph.getVertexByKey(\"User.userId\", userId);\n\n                String braintreeCustomerId = userVertex.getProperty(\"braintreeCustomerId\");\n                PaymentMethodRequest paymentMethodRequest = new PaymentMethodRequest()\n                .customerId(braintreeCustomerId)\n                .paymentMethodNonce(nonce);\n                Result<? extends PaymentMethod> paymentMethodResult = gatewayMap.get(host).paymentMethod().create(paymentMethodRequest);\n                if(paymentMethodResult.isSuccess()) {\n                    String token = paymentMethodResult.getTarget().getToken();\n                    // we need to iterate the order and create subscriptions for each item.\n                    for(Map<String, Object> item: (List<Map<String, Object>>)order.getProperty(\"items\")) {\n                        // now use this token to subscribe a plan.\n                        SubscriptionRequest subscriptionRequest = new SubscriptionRequest()\n                                .paymentMethodToken(token)\n                                .planId((String)item.get(\"sku\"));\n                        Result<Subscription> subscriptionResult = gatewayMap.get(host).subscription().create(subscriptionRequest);\n                        if(subscriptionResult.isSuccess()) {\n                            Subscription subscription = subscriptionResult.getTarget();\n                            Map<String, Object> sub = new HashMap<String, Object>();\n                            sub.put(\"sku\", item.get(\"sku\"));\n                            sub.put(\"subscriptionId\", subscription.getId());\n                            subscriptions.add(sub);\n                        } else {\n                            ValidationErrors validationErrors = subscriptionResult.getErrors();\n                            List<ValidationError> errors = validationErrors.getAllDeepValidationErrors();\n                            error = \"Validation Error:\";\n                            for(ValidationError e: errors) {\n                                error = error + \" \" + e.getCode() + \" \" + e.getMessage();\n                            }\n                            inputMap.put(\"responseCode\", 400);\n                        }\n                    }\n                    eventData.put(\"subscriptions\", subscriptions);\n                    Map<String, Object> result = new HashMap<String, Object>();\n                    result.put(\"orderId\", orderId);\n                    inputMap.put(\"result\", mapper.writeValueAsString(result));\n\n                } else {\n                    // payment method failed\n\n                }\n                // TODO send an email with order info to the customer here. Assuming payment status is paid here.\n\n            } else {\n                inputMap.put(\"responseCode\", 400);\n                error = \"Could not find order with orderId: \" + orderId;\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.payment.AddSubscriptionRule",
      "createDate": "2016-03-31T00:36:28.479"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.479",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:81",
    "@version": 1,
    "@class": "Event",
    "eventId": 10082,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n *\n * Get all the forums belong to a host for admin interface.\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n */\npublic class GetForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.GetForumRule",
      "createDate": "2016-03-31T00:36:28.519"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.519",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:82",
    "@version": 1,
    "@class": "Event",
    "eventId": 10083,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n *\n * Update forum\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n */\npublic class UpdForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpdForumRule",
      "createDate": "2016-03-31T00:36:28.533"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.533",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:83",
    "@version": 1,
    "@class": "Event",
    "eventId": 10084,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n *\n * Delete a forum node in a forum tree on a host\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n */\npublic class DelForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DelForumRule",
      "createDate": "2016-03-31T00:36:28.546"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.546",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:84",
    "@version": 1,
    "@class": "Event",
    "eventId": 10085,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n *\n * Down vote a forum\n *\n * AccessLevel R [user]\n *\n */\npublic class DownForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DownForumRule",
      "createDate": "2016-03-31T00:36:28.557"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.557",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:85",
    "@version": 1,
    "@class": "Event",
    "eventId": 10086,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 21/03/15.\n */\npublic class UpdPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPostEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpdPostEvRule",
      "createDate": "2016-03-31T00:36:28.569"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.569",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:86",
    "@version": 1,
    "@class": "Event",
    "eventId": 10087,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n *\n * Add a new forum for a host in the forum tree\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n */\npublic class AddForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.AddForumRule",
      "createDate": "2016-03-31T00:36:28.581"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.581",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:87",
    "@version": 1,
    "@class": "Event",
    "eventId": 10088,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 21/03/15.\n *\n * user can only delete his or her posts before anyone makes comment. However,\n * owner, admin and forumAdmin can delete post and all the comments relate to the\n * post all together. This should not be done often only at extreme situation.\n *\n * AccessLevel R [owner, admin, forumAdmin, user]\n *\n * to make is simple for now.\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n * Due to the implementation of orientdb delete graph scheduled for 2.2\n * https://github.com/orientechnologies/orientdb/issues/1108\n * We will be asking all the comments be deleted before deleting the post for now.\n *\n * TODO fix it after orientdb 2.2\n *\n */\npublic class DelPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPost(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DelPostRule",
      "createDate": "2016-03-31T00:36:28.595"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.595",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:88",
    "@version": 1,
    "@class": "Event",
    "eventId": 10089,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class UpForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpForumEvRule",
      "createDate": "2016-03-31T00:36:28.605"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.605",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:89",
    "@version": 1,
    "@class": "Event",
    "eventId": 10090,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 01/12/14.\n *\n * Get all the posts belong to the forum and all sub forums\n *\n * AccessLevel A\n *\n */\npublic class GetForumPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getCategoryEntity(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.GetForumPostRule",
      "createDate": "2016-03-31T00:36:28.616"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.616",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:90",
    "@version": 1,
    "@class": "Event",
    "eventId": 10091,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/11/14.\n *\n * Get forum dropdown list in order to setup parent and children relationship\n *\n * AccessLevel R [owner, admin, forumAdmin]\n *\n */\npublic class GetForumDropdownRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchDropdown(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.GetForumDropdownRule",
      "createDate": "2016-03-31T00:36:28.625"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.625",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:91",
    "@version": 1,
    "@class": "Event",
    "eventId": 10092,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class UpdForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpdForumEvRule",
      "createDate": "2016-03-31T00:36:28.641"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.641",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:92",
    "@version": 1,
    "@class": "Event",
    "eventId": 10093,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 21/03/15.\n */\npublic class DelPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPostEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DelPostEvRule",
      "createDate": "2016-03-31T00:36:28.654"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.654",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:93",
    "@version": 1,
    "@class": "Event",
    "eventId": 10094,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 02/12/14.\n */\npublic class AddPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPostEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.AddPostEvRule",
      "createDate": "2016-03-31T00:36:28.663"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.663",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:94",
    "@version": 1,
    "@class": "Event",
    "eventId": 10095,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 18/01/16.\n *\n * AccessLevel A everyone can access\n *\n * This API get all the post regardless category order by the time of post.\n */\npublic class GetRecentPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getRecentEntity(\"Forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.GetRecentPostRule",
      "createDate": "2016-03-31T00:36:28.678"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.678",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:95",
    "@version": 1,
    "@class": "Event",
    "eventId": 10096,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class AddForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.AddForumEvRule",
      "createDate": "2016-03-31T00:36:28.703"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.703",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:96",
    "@version": 1,
    "@class": "Event",
    "eventId": 10097,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 02/12/14.\n *\n * Post a new topic in a forum\n *\n * AccessLevel R [user]\n *\n */\npublic class AddPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPost(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.AddPostRule",
      "createDate": "2016-03-31T00:36:28.735"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.735",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:97",
    "@version": 1,
    "@class": "Event",
    "eventId": 10098,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n *\n * Up vote forum by users\n *\n * AccessLevel R [user]\n *\n */\npublic class UpForumRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranch(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpForumRule",
      "createDate": "2016-03-31T00:36:28.788"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.788",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:98",
    "@version": 1,
    "@class": "Event",
    "eventId": 10099,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/11/14.\n *\n * Get tree structure of forums to display on forum home page.\n *\n * AccessLevel A\n *\n */\npublic class GetForumTreeRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchTree(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.GetForumTreeRule",
      "createDate": "2016-03-31T00:36:28.801"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.801",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:99",
    "@version": 1,
    "@class": "Event",
    "eventId": 10100,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class DownForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DownForumEvRule",
      "createDate": "2016-03-31T00:36:28.821"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.821",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:100",
    "@version": 1,
    "@class": "Event",
    "eventId": 10101,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 3/6/2015.\n * Update post in a forum\n *\n * AccessLevel R [owner, admin, forumAdmin, user]\n *\n * User can only update his or her post and there will be an indicate that\n * the post is updated. Maybe just the update date?\n *\n * for now to make it simple, user cannot update the post.\n *\n */\npublic class UpdPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPost(\"forum\", objects);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.UpdPostRule",
      "createDate": "2016-03-31T00:36:28.834"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.834",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:101",
    "@version": 1,
    "@class": "Event",
    "eventId": 10102,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.forum;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 26/11/14.\n */\npublic class DelForumEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranchEv(\"forum\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.forum.DelForumEvRule",
      "createDate": "2016-03-31T00:36:28.850"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.850",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:102",
    "@version": 1,
    "@class": "Event",
    "eventId": 10103,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n */\npublic class ImpPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        eventData.put(\"host\", host);\n        eventData.put(\"pageId\", data.get(\"pageId\"));\n        eventData.put(\"content\", data.get(\"content\"));\n        eventData.put(\"createDate\", new java.util.Date());\n        eventData.put(\"createUserId\", user.get(\"userId\"));\n        if(host != null) {\n            if (!host.equals(data.get(\"host\"))) {\n                error = \"User can only import page from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            }\n        } else {\n            eventData.remove(\"host\");\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.ImpPageRule",
      "createDate": "2016-03-31T00:36:28.872"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.872",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:103",
    "@version": 1,
    "@class": "Event",
    "eventId": 10104,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by husteve on 10/24/2014.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n *\n */\npublic class GetAllPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String)user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String pages = null;\n        try {\n            pages = getAllPage(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(pages != null) {\n            inputMap.put(\"result\", pages);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No page can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.GetAllPageRule",
      "createDate": "2016-03-31T00:36:28.919"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.919",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:104",
    "@version": 1,
    "@class": "Event",
    "eventId": 10105,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.hazelcast.core.ITopic;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class AddPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addPage(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.AddPageEvRule",
      "createDate": "2016-03-31T00:36:28.937"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.937",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:105",
    "@version": 1,
    "@class": "Event",
    "eventId": 10106,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/02/15.\n *\n * This is the rule that called by page:load plugin in maven-plugin repo.\n * It get all the page and return a map from id to content.\n *\n * accessLevel is owner by default.\n *\n */\npublic class GetPageMapRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String)user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String pages = null;\n        try {\n            pages = getPageMap(graph, host);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(pages != null) {\n            inputMap.put(\"result\", pages);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No page can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.GetPageMapRule",
      "createDate": "2016-03-31T00:36:28.960"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.960",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:106",
    "@version": 1,
    "@class": "Event",
    "eventId": 10107,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.model.CacheObject;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport io.undertow.server.HttpServerExchange;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n *\n */\npublic class AddPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String pageId = (String)data.get(\"pageId\");\n        String host = (String)data.get(\"host\");\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null) {\n            if (!userHost.equals(host)) {\n                error = \"You can only add page from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            }\n        } else {\n            // remove host as this is the owner\n            data.remove(\"host\");\n        }\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            CacheObject co = getPageById(graph, pageId);\n            if(co != null) {\n                error = \"Page with the same id exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll(data);\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.AddPageRule",
      "createDate": "2016-03-31T00:36:28.974"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.974",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:107",
    "@version": 1,
    "@class": "Event",
    "eventId": 10108,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.hazelcast.core.ITopic;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class ImpPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute(Object... objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        //ITopic topic = ServiceLocator.getInstance().getHzInstance().getTopic(\"page\");\n        //topic.publish(eventMap);\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        impPage(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.ImpPageEvRule",
      "createDate": "2016-03-31T00:36:28.985"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.985",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:108",
    "@version": 1,
    "@class": "Event",
    "eventId": 10109,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport io.undertow.server.HttpServerExchange;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n *\n */\npublic class DelPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            error = \"You can only delete page from host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex page = DbService.getVertexByRid(graph, rid);\n                if(page != null) {\n                    int inputVersion = (int)data.get(\"@version\");\n                    int storedVersion = page.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        inputMap.put(\"responseCode\", 400);\n                        error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"pageId\", page.getProperty(\"pageId\"));\n                    }\n                } else {\n                    error = \"Page with @rid \" + rid + \" doesn't exist\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.DelPageRule",
      "createDate": "2016-03-31T00:36:28.999"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:28.999",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:109",
    "@version": 1,
    "@class": "Event",
    "eventId": 10110,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n *\n * AccessLevel R [owner, admin, pageAdmin]\n */\npublic class UpdPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            error = \"You can only update page from host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            if(rid != null) {\n                OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                Vertex page = null;\n                try {\n                    page = DbService.getVertexByRid(graph, rid);\n                    if(page != null) {\n                        int inputVersion = (int)data.get(\"@version\");\n                        int storedVersion = page.getProperty(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"pageId\", data.get(\"pageId\"));\n                            eventData.put(\"content\", data.get(\"content\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    } else {\n                        error = \"Page with @rid \" + rid + \" cannot be found.\";\n                        inputMap.put(\"responseCode\", 404);\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Exception:\", e);\n                    throw e;\n                } finally {\n                    graph.shutdown();\n                }\n            } else {\n                error = \"@rid is required\";\n                inputMap.put(\"responseCode\", 400);\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.UpdPageRule",
      "createDate": "2016-03-31T00:36:29.007"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.007",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:110",
    "@version": 1,
    "@class": "Event",
    "eventId": 10111,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.hazelcast.core.ITopic;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class UpdPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        //ITopic topic = ServiceLocator.getInstance().getHzInstance().getTopic(\"page\");\n        //topic.publish(eventMap);\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPage(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.UpdPageEvRule",
      "createDate": "2016-03-31T00:36:29.016"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.016",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:111",
    "@version": 1,
    "@class": "Event",
    "eventId": 10112,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.hazelcast.core.ITopic;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic class DelPageEvRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        //ITopic topic = ServiceLocator.getInstance().getHzInstance().getTopic(\"page\");\n        //topic.publish(eventMap);\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        String pageId = (String)data.get(\"pageId\");\n        delPage(pageId);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.DelPageEvRule",
      "createDate": "2016-03-31T00:36:29.033"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.033",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:112",
    "@version": 1,
    "@class": "Event",
    "eventId": 10113,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.networknt.light.model.CacheObject;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport io.undertow.server.HttpServerExchange;\nimport io.undertow.util.Headers;\nimport io.undertow.util.HttpString;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 10/24/2014.\n *\n * AccessLevel A\n *\n */\npublic class GetPageRule extends AbstractPageRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n        String pageId = (String)data.get(\"pageId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        CacheObject co = null;\n        try {\n            co = getPageById(graph, pageId);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(co != null) {\n            if(!matchEtag(inputMap, co)) {\n                inputMap.put(\"result\", co.getData());\n            }\n            return true;\n        } else {\n            inputMap.put(\"responseCode\", 404);\n            inputMap.put(\"result\", \"Page with id \" + pageId + \" cannot be found.\");\n            return false;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.GetPageRule",
      "createDate": "2016-03-31T00:36:29.049"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.049",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:113",
    "@version": 1,
    "@class": "Event",
    "eventId": 10114,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.page;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.hazelcast.core.ITopic;\nimport com.hazelcast.core.Message;\nimport com.hazelcast.core.MessageListener;\nimport com.hazelcast.util.executor.StripedRunnable;\nimport com.networknt.light.model.CacheObject;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport com.orientechnologies.orient.core.Orient;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\n\n/**\n * Created by husteve on 10/24/2014.\n */\npublic abstract class AbstractPageRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractPageRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    /*\n    static {\n        System.out.println(\"AbstractPageRule is called\");\n        ITopic<Map<String, Object>> page = ServiceLocator.getInstance().getHzInstance().getTopic( \"page\" );\n        page.addMessageListener(new PageMessageListenerImpl());\n    }\n\n    // As all the operations are in memory, use the same thread from the publisher.\n    private static class PageMessageListenerImpl implements MessageListener<Map<String, Object>> {\n        @Override\n        public void onMessage(final Message<Map<String, Object>> message) {\n            Map<String, Object> eventMap = message.getMessageObject();\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // simply remove the page from cache in order to reload in the next getPage rule.\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"pageId\"));\n            }\n        }\n    }\n    */\n\n    protected CacheObject getPageById(OrientGraph graph, String pageId) {\n        CacheObject co = null;\n        Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            pageMap.put(\"cache\", cache);\n        } else {\n            co = (CacheObject)cache.get(pageId);\n        }\n        if(co == null) {\n            OrientVertex page = (OrientVertex)graph.getVertexByKey(\"Page.pageId\", pageId);\n            if(page != null) {\n                String json = page.getRecord().toJSON();\n                co = new CacheObject(page.getProperty(\"@version\").toString(), json);\n                cache.put(pageId, co);\n            }\n        }\n        return co;\n    }\n\n    protected void addPage(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex page = graph.addVertex(\"class:Page\", data);\n            createUser.addEdge(\"Create\", page);\n            graph.commit();\n            String json = page.getRecord().toJSON();\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache == null) {\n                cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                        .maximumWeightedCapacity(1000)\n                        .build();\n                pageMap.put(\"cache\", cache);\n            }\n            cache.put(data.get(\"pageId\"), new CacheObject(page.getProperty(\"@version\").toString(), json));\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void delPage(String pageId) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex page = graph.getVertexByKey(\"Page.pageId\", pageId);\n            if(page != null) {\n                graph.removeVertex(page);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(pageId);\n        }\n    }\n\n    protected void updPage(Map<String, Object> data) {\n        String pageId = (String)data.get(\"pageId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex page = (OrientVertex)graph.getVertexByKey(\"Page.pageId\", pageId);\n            if(page != null) {\n                page.setProperty(\"content\", data.get(\"content\"));\n                page.setProperty(\"updateDate\", data.get(\"updateDate\"));\n                Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n                updateUser.addEdge(\"Update\", page);\n            }\n            graph.commit();\n            String json = page.getRecord().toJSON();\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache == null) {\n                cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                        .maximumWeightedCapacity(1000)\n                        .build();\n                pageMap.put(\"cache\", cache);\n            }\n            CacheObject co = (CacheObject)cache.get(pageId);\n            if(co != null) {\n                co.setEtag(page.getProperty(\"@version\").toString());\n                co.setData(json);\n            } else {\n                cache.put(pageId, new CacheObject(page.getProperty(\"@version\").toString(), json));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void impPage(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String pageId = (String)data.get(\"pageId\");\n        try {\n            graph.begin();\n            OrientVertex page = (OrientVertex)graph.getVertexByKey(\"Page.pageId\", pageId);\n            if(page != null) {\n                graph.removeVertex(page);\n            }\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            page = graph.addVertex(\"class:Page\", data);\n            createUser.addEdge(\"Create\", page);\n            graph.commit();\n            String json = page.getRecord().toJSON();\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache == null) {\n                cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                        .maximumWeightedCapacity(1000)\n                        .build();\n                pageMap.put(\"cache\", cache);\n            }\n            CacheObject co = (CacheObject)cache.get(pageId);\n            if(co != null) {\n                co.setEtag(page.getProperty(\"@version\").toString());\n                co.setData(json);\n            } else {\n                cache.put(pageId, new CacheObject(page.getProperty(\"@version\").toString(), json));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected String getAllPage(OrientGraph graph, String host) {\n        String json = null;\n        String sql = \"SELECT FROM Page\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n        List<ODocument> pages = graph.getRawGraph().command(query).execute();\n        json = OJSONWriter.listToJSON(pages, null);\n        return json;\n    }\n\n    protected String getPageMap(OrientGraph graph, String host) throws Exception {\n        String sql = \"SELECT FROM Page\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        Map<String, String> map = new HashMap<String, String>();\n        for (Vertex page : (Iterable<Vertex>) graph.command(new OCommandSQL(sql)).execute()) {\n            map.put(page.getProperty(\"pageId\"), page.getProperty(\"content\"));\n        }\n        return mapper.writeValueAsString(map);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.page.AbstractPageRule",
      "createDate": "2016-03-31T00:36:29.062"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.062",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:114",
    "@version": 1,
    "@class": "Event",
    "eventId": 10115,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/03/16.\n *\n * AcessLevel R [user]\n */\npublic class UpCommentRule extends AbstractCommentRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(UpCommentRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String entityRid = (String)data.get(\"entityRid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            // check if the comment exists\n            OrientVertex comment = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            if(comment == null ) {\n                error = \"Comment @rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"commentId\", comment.getProperty(\"commentId\"));\n                eventData.put(\"userId\", user.get(\"userId\"));\n                clearCommentCache(entityRid);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.UpCommentRule",
      "createDate": "2016-03-31T00:36:29.072"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.072",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:115",
    "@version": 1,
    "@class": "Event",
    "eventId": 10116,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/03/16.\n */\npublic class SpmCommentEvRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        spmComment(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.SpmCommentEvRule",
      "createDate": "2016-03-31T00:36:29.085"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.085",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:116",
    "@version": 1,
    "@class": "Event",
    "eventId": 10117,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n */\npublic class AddCommentEvRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addComment(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.AddCommentEvRule",
      "createDate": "2016-03-31T00:36:29.094"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.094",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:117",
    "@version": 1,
    "@class": "Event",
    "eventId": 10118,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/03/16.\n */\npublic class UpCommentEvRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upComment(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.UpCommentEvRule",
      "createDate": "2016-03-31T00:36:29.107"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.107",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:118",
    "@version": 1,
    "@class": "Event",
    "eventId": 10119,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/03/15.\n */\npublic class DelCommentEvRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delComment(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.DelCommentEvRule",
      "createDate": "2016-03-31T00:36:29.120"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.120",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:119",
    "@version": 1,
    "@class": "Event",
    "eventId": 10120,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/03/15.\n */\npublic class UpdCommentEvRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updComment(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.UpdCommentEvRule",
      "createDate": "2016-03-31T00:36:29.132"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.132",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:120",
    "@version": 1,
    "@class": "Event",
    "eventId": 10121,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.comment;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n *\n * Not sure if this is used or not. Do we have a comment admin page to list all of them?\n *\n */\npublic class GetCommentRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> criteria = new HashMap<String, Object>();\n        criteria.put(\"@class\", \"Comment\");\n        long total = getTotal(data, criteria);\n        if(total > 0) {\n            String json = getComment(data, criteria);\n            List<Map<String, Object>> comments\n                    = mapper.readValue(json, new TypeReference<List<HashMap<String, Object>>>() {});\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"comments\", comments);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No user can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.GetCommentRule",
      "createDate": "2016-03-31T00:36:29.144"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.144",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:121",
    "@version": 1,
    "@class": "Event",
    "eventId": 10122,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.owasp.encoder.Encode;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/03/15.\n *\n * only the comment content can be updated\n *\n * Access Level [owner, admin, forumAdmin, newsAdmin, blogAdmin, user]\n *\n * now only owner and admin can update\n *\n */\npublic class UpdCommentRule extends AbstractCommentRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(UpdCommentRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String entityRid = (String)data.get(\"entityRid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            // check if the comment exists\n            OrientVertex comment = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            if(comment == null ) {\n                error = \"Comment @rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"commentId\", comment.getProperty(\"commentId\"));\n                eventData.put(\"content\", Encode.forJavaScriptSource((String)data.get(\"content\")));\n                clearCommentCache(entityRid);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.UpdCommentRule",
      "createDate": "2016-03-31T00:36:29.155"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.155",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:122",
    "@version": 1,
    "@class": "Event",
    "eventId": 10123,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/03/16.\n */\npublic class DownCommentEvRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        downComment(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.DownCommentEvRule",
      "createDate": "2016-03-31T00:36:29.163"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.163",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:123",
    "@version": 1,
    "@class": "Event",
    "eventId": 10124,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n *\n * AccessLevel A\n *\n * everyone can have read only access to all comments\n *\n */\npublic class GetCommentTreeRule extends AbstractCommentRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getCommentTree(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.GetCommentTreeRule",
      "createDate": "2016-03-31T00:36:29.175"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.175",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:124",
    "@version": 1,
    "@class": "Event",
    "eventId": 10125,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/03/16.\n *\n * AccessLevel R [user]\n *\n */\npublic class DownCommentRule extends AbstractCommentRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(DownCommentRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String entityRid = (String)data.get(\"entityRid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            // check if the comment exists\n            OrientVertex comment = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            if(comment == null ) {\n                error = \"Comment @rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"commentId\", comment.getProperty(\"commentId\"));\n                eventData.put(\"userId\", user.get(\"userId\"));\n                clearCommentCache(entityRid);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.DownCommentRule",
      "createDate": "2016-03-31T00:36:29.183"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.183",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:125",
    "@version": 1,
    "@class": "Event",
    "eventId": 10126,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.owasp.encoder.Encode;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/03/16.\n *\n * AccessLevel R [user]\n *\n */\npublic class SpmCommentRule extends AbstractCommentRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(SpmCommentRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String entityRid = (String)data.get(\"entityRid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            // check if the comment exists\n            OrientVertex comment = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            if(comment == null ) {\n                error = \"Comment @rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"commentId\", comment.getProperty(\"commentId\"));\n                eventData.put(\"userId\", user.get(\"userId\"));\n                clearCommentCache(entityRid);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.SpmCommentRule",
      "createDate": "2016-03-31T00:36:29.192"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.192",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:126",
    "@version": 1,
    "@class": "Event",
    "eventId": 10127,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/03/15.\n *\n * AccessLevel R [owner, admin, forumAdmin, newsAdmin, blogAdmin, user]\n *\n * user can only delete his/her own comment if there is no other comment link to it.\n *\n * forumAdmin can only delete comments from forum\n * newsAdmin can only delete comments from news\n * blogAdmin can only delete comments from blog\n *\n * for now, only owner and admin will be able to delete comment and if there are\n * comments related, it cannot be deleted.\n *\n * now AccessLevel R [owner, admin]\n *\n *\n */\npublic class DelCommentRule extends AbstractCommentRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AddCommentRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String entityRid = (String)data.get(\"entityRid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            // check if the comment exists\n            OrientVertex comment = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            if(comment == null ) {\n                error = \"Comment @rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if there are edges HasComment\n                if(comment.countEdges(Direction.OUT, \"HasComment\") > 0) {\n                    error = \"Comment has replied, cannot be deleted\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"commentId\", comment.getProperty(\"commentId\"));\n                    eventData.put(\"entityRid\", entityRid);\n                    clearCommentCache(entityRid);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.DelCommentRule",
      "createDate": "2016-03-31T00:36:29.203"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.203",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:127",
    "@version": 1,
    "@class": "Event",
    "eventId": 10128,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.comment;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.jayway.jsonpath.Configuration;\nimport com.jayway.jsonpath.DocumentContext;\nimport com.jayway.jsonpath.JsonPath;\nimport com.jayway.jsonpath.MapFunction;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 03/12/14.\n */\npublic abstract class AbstractCommentRule extends AbstractRule implements Rule {\n\n    static final Logger logger = LoggerFactory.getLogger(AbstractCommentRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void addComment(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            String parentId = (String)data.remove(\"parentId\");\n            String parentClassName = (String)data.remove(\"parentClassName\");\n            Vertex parent = null;\n            if(\"Post\".equals(parentClassName)) {\n                parent = graph.getVertexByKey(\"Post.entityId\", parentId);\n            } else {\n                parent = graph.getVertexByKey(\"Comment.commentId\", parentId);\n            }\n            OrientVertex comment = graph.addVertex(\"class:Comment\", data);\n            createUser.addEdge(\"Create\", comment);\n            parent.addEdge(\"HasComment\", comment);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n\n    }\n\n    protected void clearCommentCache(String entityRid) {\n        Map<String, Object> categoryMap = ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> commentCache = (ConcurrentMap<Object, Object>)categoryMap.get(\"commentCache\");\n        if(commentCache != null && commentCache.size() > 0) {\n            commentCache.remove(entityRid + \"createDate\" + \"desc\");\n            commentCache.remove(entityRid + \"createDate\" + \"asc\");\n            commentCache.remove(entityRid + \"rank\" + \"desc\");\n        }\n    }\n\n    protected void delComment(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            String commentId = (String)data.get(\"commentId\");\n            OrientVertex comment = (OrientVertex)graph.getVertexByKey(\"Comment.commentId\", commentId);\n            // remove the edge to this comment\n            for (Edge edge : comment.getEdges(Direction.IN)) {\n                graph.removeEdge(edge);\n            }\n            graph.removeVertex(comment);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void updComment(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            String commentId = (String)data.get(\"commentId\");\n            OrientVertex comment = (OrientVertex)graph.getVertexByKey(\"Comment.commentId\", commentId);\n            if(comment != null) {\n                comment.setProperty(\"content\", data.get(\"content\"));\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void spmComment(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            String commentId = (String)data.get(\"commentId\");\n            OrientVertex comment = (OrientVertex)graph.getVertexByKey(\"Comment.commentId\", commentId);\n            if(comment != null) {\n                String userId = (String)data.get(\"userId\");\n                OrientVertex user = (OrientVertex)graph.getVertexByKey(\"User.userId\", userId);\n                if(user != null) {\n                    // check if this user has reported spam for this comment.\n                    boolean reported = false;\n                    for (Edge edge : user.getEdges(comment, Direction.OUT, \"ReportSpam\")) {\n                        if(edge.getVertex(Direction.IN).equals(comment)) {\n                            reported = true;\n                            graph.removeEdge(edge);\n                        }\n                    }\n                    if(!reported) {\n                        user.addEdge(\"ReportSpam\", comment);\n                    }\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void upComment(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            String commentId = (String)data.get(\"commentId\");\n            OrientVertex comment = (OrientVertex)graph.getVertexByKey(\"Comment.commentId\", commentId);\n            if(comment != null) {\n                String userId = (String)data.get(\"userId\");\n                OrientVertex user = (OrientVertex)graph.getVertexByKey(\"User.userId\", userId);\n                Integer rank = comment.getProperty(\"rank\");\n                if(user != null) {\n                    // check if this user has down vote for the comment, if yes, then remove it.\n                    for (Edge edge : user.getEdges(comment, Direction.OUT, \"DownVote\")) {\n                        if (edge.getVertex(Direction.IN).equals(comment)) {\n                            graph.removeEdge(edge);\n                            rank++;\n                        }\n                    }\n                    // check if this user has up voted for this comment. if yes, then remove it.\n                    boolean upVoted = false;\n                    for (Edge edge : user.getEdges(comment, Direction.OUT, \"UpVote\")) {\n                        if(edge.getVertex(Direction.IN).equals(comment)) {\n                            upVoted = true;\n                            graph.removeEdge(edge);\n                            rank--;\n                        }\n                    }\n                    if(!upVoted) {\n                        user.addEdge(\"UpVote\", comment);\n                        rank++;\n                    }\n                }\n                comment.setProperty(\"rank\", rank);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void downComment(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            String commentId = (String)data.get(\"commentId\");\n            OrientVertex comment = (OrientVertex)graph.getVertexByKey(\"Comment.commentId\", commentId);\n            if(comment != null) {\n                String userId = (String)data.get(\"userId\");\n                OrientVertex user = (OrientVertex)graph.getVertexByKey(\"User.userId\", userId);\n                Integer rank = comment.getProperty(\"rank\");\n                if(user != null) {\n                    // check if this user has up voted for the comment, if yes, then remove it.\n                    for (Edge edge : user.getEdges(comment, Direction.OUT, \"UpVote\")) {\n                        if (edge.getVertex(Direction.IN).equals(comment)) {\n                            graph.removeEdge(edge);\n                            rank--;\n                        }\n                    }\n                    // check if this user has down voted for this comment. if yes, then remove it.\n                    boolean downVoted = false;\n                    for (Edge edge : user.getEdges(comment, Direction.OUT, \"DownVote\")) {\n                        if(edge.getVertex(Direction.IN).equals(comment)) {\n                            downVoted = true;\n                            graph.removeEdge(edge);\n                            rank++;\n                        }\n                    }\n                    if(!downVoted) {\n                        user.addEdge(\"DownVote\", comment);\n                        rank--;\n                    }\n                }\n                comment.setProperty(\"rank\", rank);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected long getTotal(Map<String, Object> data, Map<String, Object> criteria) {\n        long total = 0;\n        StringBuilder sb = new StringBuilder(\"SELECT COUNT(*) as count FROM (TRAVERSE out_HasComment FROM \").append(data.get(\"@rid\")).append(\") \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sb.append(whereClause);\n        }\n        //System.out.println(\"sql=\" + sb);\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            total = ((ODocument)graph.getRawGraph().query(new OSQLSynchQuery<ODocument>(sb.toString())).get(0)).field(\"count\");\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return total;\n    }\n\n    protected String getComment(Map<String, Object> data, Map<String, Object> criteria) {\n        String json = null;\n        StringBuilder sb = new StringBuilder(\"SELECT FROM (TRAVERSE out_HasComment FROM \").append(data.get(\"@rid\")).append(\") \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sb.append(whereClause);\n        }\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sb.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sb.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sb.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sb.append(\" LIMIT \").append(pageSize);\n        }\n        //System.out.println(\"sql=\" + sb);\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sb.toString());\n            List<ODocument> list = graph.getRawGraph().command(query).execute();\n            if(list.size() > 0) {\n                json = OJSONWriter.listToJSON(list, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected boolean getCommentTree(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String rid = (String)data.get(\"@rid\");\n        String host = (String)data.get(\"host\");\n        if(rid == null) {\n            inputMap.put(\"result\", \"@rid is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        Integer pageSize = (Integer)data.get(\"pageSize\");\n        Integer pageNo = (Integer)data.get(\"pageNo\");\n        if(pageSize == null) {\n            inputMap.put(\"result\", \"pageSize is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        if(pageNo == null) {\n            inputMap.put(\"result\", \"pageNo is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        String sortDir = (String)data.get(\"sortDir\");\n        String sortedBy = (String)data.get(\"sortedBy\");\n        if(sortDir == null) {\n            sortDir = \"desc\";\n        }\n        if(sortedBy == null) {\n            sortedBy = \"rank\";\n        }\n        boolean allowUpdate = isUpdateAllowed(rid, host, inputMap);\n\n        // Get the comments from cache.\n        String comments = null;\n        Map<String, Object> categoryMap = ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> commentCache = (ConcurrentMap<Object, Object>)categoryMap.get(\"commentCache\");\n        if(commentCache == null) {\n            commentCache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(200)\n                    .build();\n            categoryMap.put(\"commentCache\", commentCache);\n        } else {\n            comments = (String)commentCache.get(rid + sortedBy + sortDir);\n        }\n        if(comments == null) {\n            // not in cache, get from db\n            comments = getCommentTreeDb(rid, sortedBy, sortDir);\n            if(comments != null) {\n                commentCache.put(rid + sortedBy + sortDir, comments);\n            }\n        }\n\n        List<Map<String, Object>> list = (comments == null) ? null :\n                mapper.readValue(comments, new TypeReference<List<HashMap<String, Object>>>() {});\n\n        if(list != null && list.size() > 0) {\n            long total = list.size();\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"entities\", list.subList(pageSize*(pageNo - 1), Math.min(pageSize*pageNo,list.size())));\n            result.put(\"allowUpdate\", allowUpdate);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            // there is no post available. but still need to return allowPost\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", 0);\n            result.put(\"allowUpdate\", allowUpdate);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        }\n    }\n\n    protected boolean isUpdateAllowed(String rid, String host, Map<String, Object> inputMap) {\n        boolean isAllowed = false;\n        // get the parent class from rid.\n        String parentClass = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex parent = (OrientVertex)DbService.getVertexByRid(graph, rid);\n            if(parent != null) {\n                parentClass = parent.getLabel().toLowerCase();\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        if(user != null) {\n            List roles = (List)user.get(\"roles\");\n            if(roles.contains(\"owner\")) {\n                isAllowed = true;\n            } else if(roles.contains(\"admin\") || roles.contains(parentClass + \"Admin\") || roles.contains(parentClass + \"User\")) {\n                if(host.equals(user.get(\"host\"))) {\n                    isAllowed = true;\n                }\n            }\n        }\n        return isAllowed;\n    }\n\n    protected String getCommentTreeDb(String rid, String sortedBy, String sortDir) {\n        String sql = \"select from Comment where in_HasComment[0] = \" + rid + \" ORDER BY \" + sortedBy + \" \" + sortDir;\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> list = graph.getRawGraph().command(query).execute();\n            if(list.size() > 0) {\n                json = OJSONWriter.listToJSON(list, \"rid,fetchPlan:[*]in_HasComment:-2 [*]out_ReportSpam:-2 [*]out_UpVote:-2 [*]out_DownVote:-2 in_Create[]:0 [*]out_Create:-2 [*]out_Update:-2 [*]out_HasComment:-1\");\n                // need to fixed the in_Create within the json using json path.\n                DocumentContext dc = JsonPath.parse(json);\n                MapFunction propsFunction = new StripPropsMapFunction();\n                dc.map(\"$..in_UpVote[*]\", propsFunction);\n                dc.map(\"$..in_DownVote[*]\", propsFunction);\n                dc.map(\"$..in_ReportSpam[*]\", propsFunction);\n\n                MapFunction createFunction = new StripInCreateMapFunction();\n                json = dc.map(\"$..in_Create[0]\", createFunction).jsonString();\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    private class StripPropsMapFunction implements MapFunction {\n        @Override\n        public Object map(Object currentValue, Configuration configuration) {\n            String value = null;\n            if(currentValue instanceof Map) {\n                value = (String) ((Map) currentValue).get(\"@rid\");\n            } else if(currentValue instanceof String) {\n                value = (String)currentValue;\n            }\n            return value;\n        }\n    }\n\n    private class StripInCreateMapFunction implements MapFunction {\n        Map<String, Object> userMap = new HashMap<String, Object>();\n        @Override\n        public Object map(Object currentValue, Configuration configuration) {\n            if(currentValue instanceof Map) {\n                ((Map) currentValue).remove(\"roles\");\n                ((Map) currentValue).remove(\"email\");\n                ((Map) currentValue).remove(\"credential\");\n                ((Map) currentValue).remove(\"createDate\");\n                ((Map) currentValue).remove(\"host\");\n                ((Map) currentValue).remove(\"out_Create\");\n                ((Map) currentValue).remove(\"out_Update\");\n                ((Map) currentValue).remove(\"out_ReportSpam\");\n                ((Map) currentValue).remove(\"out_UpVote\");\n                ((Map) currentValue).remove(\"out_DownVote\");\n                String rid = (String)((Map) currentValue).get(\"@rid\");\n                if(userMap.get(rid) == null) {\n                    userMap.put(rid, currentValue);\n                }\n            } else if(currentValue instanceof String) {\n                currentValue = userMap.get((String)currentValue);\n            }\n            return currentValue;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.AbstractCommentRule",
      "createDate": "2016-03-31T00:36:29.217"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.217",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:128",
    "@version": 1,
    "@class": "Event",
    "eventId": 10129,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.comment;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.owasp.encoder.Encode;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 03/12/14.\n *\n * AccessLevel R [user]\n *\n */\npublic class AddCommentRule extends AbstractCommentRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AddCommentRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String)data.get(\"host\");\n        String entityRid = (String)data.get(\"entityRid\");\n        String parentRid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex parent = (OrientVertex)DbService.getVertexByRid(graph, parentRid);\n            if(parent == null ) {\n                error = \"Parent @rid \" + parentRid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"host\", host);\n                eventData.put(\"content\", Encode.forJavaScriptSource((String)data.get(\"content\")));\n                eventData.put(\"rank\", 0);\n                String parentClassName = parent.getProperty(\"@class\");\n                eventData.put(\"parentClassName\", parentClassName); // parent can be a post or a comment\n                if(\"Post\".equals(parentClassName)) {\n                    eventData.put(\"parentId\", parent.getProperty(\"entityId\"));\n                } else {\n                    eventData.put(\"parentId\", parent.getProperty(\"commentId\"));\n                }\n                // generate unique identifier\n                eventData.put(\"commentId\", HashUtil.generateUUID());\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n                clearCommentCache(entityRid);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.comment.AddCommentRule",
      "createDate": "2016-03-31T00:36:29.230"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.230",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:129",
    "@version": 1,
    "@class": "Event",
    "eventId": 10130,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.rule.AbstractRuleRule;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 30/01/15.\n *\n * This is the rule to get access control list for a particular endpoint.\n *\n * AccessLevel A\n *\n */\npublic class GetAccessRule extends AbstractAccessRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(GetAccessRule.class);\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        Map<String, Object> access = getAccessByRuleClass(ruleClass);\n        if(access != null) {\n            inputMap.put(\"result\", mapper.writeValueAsString(access));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No access control can be found for ruleClass\" + ruleClass);\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.GetAccessRule",
      "createDate": "2016-03-31T00:36:29.238"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.238",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:130",
    "@version": 1,
    "@class": "Event",
    "eventId": 10131,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.rule.rule.AbstractRuleRule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.nio.ByteBuffer;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 30/01/15.\n *\n * This is the endpoint that can update access control list.\n *\n * Due to the importance of the API, the code level access control is in place.\n *\n * AccessLevel R [owner,admin,ruleAdmin]\n *\n */\npublic class UpdAccessRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        int inputVersion = (int)data.get(\"@version\");\n        String rid = (String)data.get(\"@rid\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n        if(user == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"ruleAdmin\")) {\n                error = \"Role owner or admin or ruleAdmin is required to update access control\";\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null) {\n                    if (!host.equals(data.get(\"host\"))) {\n                        error = \"You can only update access control for host: \" + host;\n                        inputMap.put(\"responseCode\", 403);\n                    } else {\n                        // make sure the ruleClass contains the host.\n                        if (!ruleClass.contains(host)) {\n                            // you are not allowed to update access control to the rule as it is not owned by the host.\n                            error = \"ruleClass is not owned by the host: \" + host;\n                            inputMap.put(\"responseCode\", 403);\n                        }\n                    }\n                } else {\n                    OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                    try {\n                        Vertex access = DbService.getVertexByRid(graph, rid);\n                        if(access == null) {\n                            error = \"Access control with @rid \" + rid + \" cannot be found\";\n                            inputMap.put(\"responseCode\", 404);\n                        } else {\n                            int storedVersion = access.getProperty(\"@version\");\n                            if(inputVersion != storedVersion) {\n                                error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                                inputMap.put(\"responseCode\", 400);\n                            } else {\n                                Map eventMap = getEventMap(inputMap);\n                                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                                inputMap.put(\"eventMap\", eventMap);\n                                eventData.put(\"ruleClass\", ruleClass);\n                                String accessLevel = (String)data.get(\"accessLevel\");\n                                eventData.put(\"accessLevel\", accessLevel);\n                                List clients = (List)data.get(\"clients\");\n                                roles = (List)data.get(\"roles\");\n                                List users = (List)data.get(\"users\");\n                                switch (accessLevel) {\n                                    case \"A\":\n                                        // Access by anyone, ignore clients, roles and users\n                                        break;\n                                    case \"N\":\n                                        // Not accessible, ignore clients, roles and users.\n                                        break;\n                                    case \"C\":\n                                        // client id is in the jwt token like userId and roles.\n                                        if(clients == null || clients.size() == 0 ) {\n                                            error = \"Clients are empty for client based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"clients\", clients);\n                                        }\n                                        break;\n                                    case \"R\":\n                                        // role only\n                                        if(roles == null || roles.size() == 0 ) {\n                                            error = \"Roles are empty for role based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"roles\", roles);\n                                        }\n                                        break;\n                                    case \"U\":\n                                        //user only\n                                        if(users == null || users.size() == 0 ) {\n                                            error = \"Users are empty for user based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"users\", users);\n                                        }\n                                        break;\n                                    case \"CR\":\n                                        // client and role\n                                        if(clients == null || clients.size() == 0 || roles == null || roles.size() == 0) {\n                                            error = \"Clients or roles are empty for client and role based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"clients\", clients);\n                                            eventData.put(\"roles\", roles);\n                                        }\n                                        break;\n                                    case \"CU\":\n                                        // client and user\n                                        if(clients == null || clients.size() == 0 || users == null || users.size() == 0) {\n                                            error = \"Clients or users are empty for client and user based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"clients\", clients);\n                                            eventData.put(\"users\", users);\n                                        }\n                                        break;\n                                    case \"RU\":\n                                        // role and user\n                                        if(roles == null || roles.size() == 0 || users == null || users.size() == 0) {\n                                            error = \"Roles or users are empty for role and user based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"roles\", roles);\n                                            eventData.put(\"users\", users);\n                                        }\n                                        break;\n                                    case \"CRU\":\n                                        // client, role and user\n                                        if(clients == null || clients.size() == 0 || roles == null || roles.size() == 0 || users == null || users.size() == 0) {\n                                            error = \"Clients, roles or users are empty for client, role and user based access control\";\n                                            inputMap.put(\"responseCode\", 400);\n                                        } else {\n                                            eventData.put(\"clients\", clients);\n                                            eventData.put(\"roles\", roles);\n                                            eventData.put(\"users\", users);\n                                        }\n                                        break;\n                                    default:\n                                        logger.error(\"Invalid Access Level: \" + accessLevel);\n                                }\n                                eventData.put(\"updateDate\", new java.util.Date());\n                                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            }\n                        }\n\n                    } catch (Exception e) {\n                        logger.error(\"Exception:\", e);\n                        throw e;\n                    } finally {\n                        graph.shutdown();\n                    }\n\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.UpdAccessRule",
      "createDate": "2016-03-31T00:36:29.248"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.248",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:131",
    "@version": 1,
    "@class": "Event",
    "eventId": 10132,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.rule.AbstractRuleRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 30/01/15.\n */\npublic class DelAccessEvRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delAccess(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.DelAccessEvRule",
      "createDate": "2016-03-31T00:36:29.256"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.256",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:132",
    "@version": 1,
    "@class": "Event",
    "eventId": 10133,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.rule.rule.AbstractRuleRule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 30/01/15.\n *\n * This is used in access admin to delete an access control for endpoints.\n *\n * owner can delete access control for any endpoint and host admin and ruleAdmin\n * can delete endpoint for their own host.\n *\n * Due to the importance of the API, the code level access control is in place.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class DelAccessRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        int inputVersion = (int)data.get(\"@version\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n\n        if(user == null) {\n            error = \"Login is required\";\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            List roles = (List)user.get(\"roles\");\n            if(!roles.contains(\"owner\") && !roles.contains(\"admin\") && !roles.contains(\"ruleAdmin\")) {\n                error = \"Role owner or admin or ruleAdmin is required to delete rule\";\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                String host = (String)user.get(\"host\");\n                if(host != null && !host.equals(data.get(\"host\"))) {\n                    error = \"User can only delete access control from host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    // check if the access control exist or not.\n                    OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                    try {\n                        Vertex access = DbService.getVertexByRid(graph, rid);\n                        if(access == null) {\n                            error = \"Access control with @rid \" + rid + \" cannot be found\";\n                            inputMap.put(\"responseCode\", 404);\n                        } else {\n                            int storedVersion = access.getProperty(\"@version\");\n                            if(inputVersion != storedVersion) {\n                                error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                                inputMap.put(\"responseCode\", 400);\n                            } else {\n                                Map eventMap = getEventMap(inputMap);\n                                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                                inputMap.put(\"eventMap\", eventMap);\n                                eventData.put(\"ruleClass\", ruleClass);\n                                eventData.put(\"updateDate\", new java.util.Date());\n                                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            }\n                        }\n                    } catch (Exception e) {\n                        logger.error(\"Exception:\", e);\n                        throw e;\n                    } finally {\n                        graph.shutdown();\n                    }\n                }\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.DelAccessRule",
      "createDate": "2016-03-31T00:36:29.264"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.264",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:133",
    "@version": 1,
    "@class": "Event",
    "eventId": 10134,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.rule.AbstractRuleRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 30/01/15.\n */\npublic class UpdAccessEvRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updAccess(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.UpdAccessEvRule",
      "createDate": "2016-03-31T00:36:29.274"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.274",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:134",
    "@version": 1,
    "@class": "Event",
    "eventId": 10135,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.SerializationFeature;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 30/01/15.\n *\n * There is no addAccess endpoint as access is pre-populated when rule is added or imported.\n * You can only update Access policy. Do I need to delete it? Or it will be deleted once rule\n * is deleted.\n *\n * TODO Delete access when rule is deleted and retire delAccess\n *\n */\npublic abstract class AbstractAccessRule extends AbstractRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractAccessRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void updAccess(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        String json = null;\n        try {\n            graph.begin();\n            OrientVertex access = (OrientVertex)graph.getVertexByKey(\"Access.ruleClass\", data.get(\"ruleClass\"));\n            if(access != null) {\n                access.setProperty(\"accessLevel\", data.get(\"accessLevel\"));\n                List<String> clients = (List)data.get(\"clients\");\n                if(clients != null && clients.size() > 0) {\n                    access.setProperty(\"clients\", clients);\n                } else {\n                    access.removeProperty(\"clients\");\n                }\n                List<String> roles = (List)data.get(\"roles\");\n                if(roles != null && roles.size() > 0) {\n                    access.setProperty(\"roles\", roles);\n                } else {\n                    access.removeProperty(\"roles\");\n                }\n                List<String> users = (List)data.get(\"users\");\n                if(users != null && users.size() > 0) {\n                    access.setProperty(\"users\", users);\n                } else {\n                    access.removeProperty(\"users\");\n                }\n                access.setProperty(\"updateDate\", data.get(\"updateDate\"));\n                Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n                updateUser.addEdge(\"Update\", access);\n            }\n            graph.commit();\n            json = access.getRecord().toJSON();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> accessMap = ServiceLocator.getInstance().getMemoryImage(\"accessMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)accessMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            accessMap.put(\"cache\", cache);\n        }\n        cache.put(data.get(\"ruleClass\"), mapper.readValue(json,\n                new TypeReference<HashMap<String, Object>>() {\n                }));\n    }\n\n    protected void delAccess(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex access = graph.getVertexByKey(\"Access.ruleClass\", data.get(\"ruleClass\"));\n            if(access != null) {\n                graph.removeVertex(access);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> accessMap = ServiceLocator.getInstance().getMemoryImage(\"accessMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)accessMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(data.get(\"ruleClass\"));\n        }\n    }\n\n    protected String getAccesses(String host) {\n        String sql = \"SELECT FROM Access\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host;\n        }\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> accesses = graph.getRawGraph().command(query).execute();\n            json = OJSONWriter.listToJSON(accesses, null);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.AbstractAccessRule",
      "createDate": "2016-03-31T00:36:29.287"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.287",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:135",
    "@version": 1,
    "@class": "Event",
    "eventId": 10136,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.access;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 01/02/15.\n *\n * Get all the access control list policies for access admin page.\n *\n * Due to the importance of the API, the code level access control is in place.\n *\n * AccessLevel R [owner,admin, ruleAdmin]\n *\n */\npublic class GetAllAccessRule extends AbstractAccessRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\") || roles.contains(\"admin\") || roles.contains(\"ruleAdmin\")) {\n            String host = (String) user.get(\"host\");\n            String hostAccesses = getAccesses(host);\n            if(hostAccesses != null) {\n                inputMap.put(\"result\", hostAccesses);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No access control can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"Permission denied\");\n            inputMap.put(\"responseCode\", 403);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.access.GetAllAccessRule",
      "createDate": "2016-03-31T00:36:29.295"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.295",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:136",
    "@version": 1,
    "@class": "Event",
    "eventId": 10137,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.file;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 27/02/16.\n *\n * AccessLevel: R [fileAdmin, admin, owner]\n */\npublic class RenFileRule extends AbstractFileRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return renFile(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.file.RenFileRule",
      "createDate": "2016-03-31T00:36:29.305"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.305",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:137",
    "@version": 1,
    "@class": "Event",
    "eventId": 10138,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.file;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 2/26/2016.\n *\n * AccessLevel R [fileAdmin, admin, owner]\n */\npublic class DelFileRule extends AbstractFileRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delFile(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.file.DelFileRule",
      "createDate": "2016-03-31T00:36:29.312"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.312",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:138",
    "@version": 1,
    "@class": "Event",
    "eventId": 10139,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.file;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport io.undertow.server.HttpServerExchange;\nimport io.undertow.util.Headers;\nimport io.undertow.util.HttpString;\n\nimport java.io.File;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 2/26/2016.\n *\n * AccessLevel: R [fileAdmin, admin, owner]\n *\n */\npublic class UplFileRule extends AbstractFileRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return uplFile(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.file.UplFileRule",
      "createDate": "2016-03-31T00:36:29.320"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.320",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:139",
    "@version": 1,
    "@class": "Event",
    "eventId": 10140,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.file;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport io.undertow.server.HttpServerExchange;\nimport io.undertow.util.Headers;\nimport io.undertow.util.HttpString;\n\nimport java.io.File;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 2/26/2016.\n *\n * This rule can be access by anyone but an uuid must be passed in which created\n * by the previous command getContent.\n *\n * AccessLevel: A\n *\n */\npublic class DnlFileRule extends AbstractFileRule implements Rule {\n    public boolean execute(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String token = (String) data.get(\"token\");\n        String path = null;\n        Map<String, Object> fileMap = ServiceLocator.getInstance().getMemoryImage(\"fileMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)fileMap.get(\"cache\");\n        if(cache != null) {\n            path = (String)cache.get(token);\n        }\n        if(path == null) {\n            inputMap.put(\"result\", \"Token is expired.\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        } else {\n            HttpServerExchange exchange = (HttpServerExchange)inputMap.get(\"exchange\");\n            File file = new File(path);\n            String name = file.getName();\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/x-download\");\n            exchange.getResponseHeaders().put(new HttpString(\"Content-disposition\"), \"attachment; filename=\" + name);\n            writeToOutputStream(file, exchange.getOutputStream());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.file.DnlFileRule",
      "createDate": "2016-03-31T00:36:29.327"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.327",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:140",
    "@version": 1,
    "@class": "Event",
    "eventId": 10141,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.file;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.config.AbstractConfigRule;\n\n/**\n * Created by steve on 2/26/2016.\n *\n * This rule will create a new folder under domain folder or any specified folder.\n * \n * AccessLevel R [owner, admin, fileAdmin]\n */\npublic class AddFolderRule extends AbstractFileRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addFolder(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.file.AddFolderRule",
      "createDate": "2016-03-31T00:36:29.337"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.337",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:141",
    "@version": 1,
    "@class": "Event",
    "eventId": 10142,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.file;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport com.sun.jna.platform.FileUtils;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.LoggerFactory;\n\nimport javax.xml.bind.DatatypeConverter;\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 2/26/2016.\n */\npublic abstract class AbstractFileRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractFileRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected boolean addFolder(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        // here we get user's host to decide which domain he/she can access\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String) user.get(\"host\");\n        if(host == null) {\n            host = (String)data.get(\"host\");\n        }\n        String path = (String) data.get(\"path\");\n        String folder = (String) data.get(\"folder\");\n        File file = new File(getAbsPath(getRootPath(host), path) + \"/\" + folder);\n        if(!file.exists()) {\n            file.mkdir();\n        }\n        return true;\n    }\n\n    protected boolean renFile(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        // here we get user's host to decide which domain he/she can access\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String) user.get(\"host\");\n        if(host == null) {\n            host = (String)data.get(\"host\");\n        }\n        String path = (String) data.get(\"path\");\n        String oldName = (String) data.get(\"oldName\");\n        String newName = (String) data.get(\"newName\");\n\n        File oldFile = new File(getAbsPath(getRootPath(host), path) + \"/\" + oldName);\n        File newFile = new File(getAbsPath(getRootPath(host), path) + \"/\" + newName);\n        Files.move(oldFile.toPath(), newFile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n        return true;\n    }\n\n    public boolean delFile(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        // here we get user's host to decide which domain he/she can access\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String) user.get(\"host\");\n        if(host == null) {\n            host = (String)data.get(\"host\");\n        }\n        String path = (String) data.get(\"path\");\n        boolean isdir = (boolean)data.get(\"isdir\");\n        if(isdir) {\n            File folder = new File(getAbsPath(getRootPath(host), path));\n            deleteDir(folder);\n        } else {\n            File file = new File(getAbsPath(getRootPath(host), path));\n            file.delete();\n        }\n        return true;\n    }\n\n    public boolean uplFile(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        // here we get user's host to decide which domain he/she can access\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String) user.get(\"host\");\n        if(host == null) {\n            host = (String)data.get(\"host\");\n        }\n        String name = (String) data.get(\"name\");\n        String path = (String) data.get(\"path\");\n        String content = (String) data.get(\"content\");\n        byte[] bytes = DatatypeConverter.parseBase64Binary(content);\n        String p = getAbsPath(getRootPath(host), path);\n        File outputFile = new File(p + \"/\" + name);\n        FileOutputStream fos = new FileOutputStream(outputFile);\n        fos.write(bytes, 0, bytes.length);\n        fos.flush();\n        fos.close();\n        return true;\n    }\n\n    public String getFile(String host, String path) throws Exception {\n        String json  = null;\n        Map<String, Object> result = new HashMap<>();\n        result.put(\"path\", path);\n        List<Map<String, Object>> children = new ArrayList();\n        String root = getRootPath(host);\n        File folder = new File(getAbsPath(root, path));\n        File[] listOfFiles = folder.listFiles();\n\n        for (int i = 0; i < listOfFiles.length; i++) {\n            Map<String, Object> fileMap = new HashMap<>();\n            if (listOfFiles[i].isFile()) {\n                fileMap.put(\"isdir\", false);\n            } else if (listOfFiles[i].isDirectory()) {\n                fileMap.put(\"isdir\", true);\n            }\n            fileMap.put(\"name\", listOfFiles[i].getName());\n            fileMap.put(\"path\", getRelPath(root,listOfFiles[i].getPath()));\n            fileMap.put(\"size\", listOfFiles[i].length());\n            fileMap.put(\"time\", listOfFiles[i].lastModified());\n            children.add(fileMap);\n        }\n        result.put(\"children\", children);\n        json = mapper.writeValueAsString(result);\n        return json;\n    }\n\n    protected String getRootPath(String host) {\n        // get the root folder of host file system.\n        Map<String, Object> map = (Map<String, Object>)ServiceLocator.getInstance().getHostMap().get(host);\n        return (String)map.get(\"base\");\n    }\n\n    protected String getAbsPath(String root, String path) throws Exception {\n        String p;\n        if(path.equals(\".\")) {\n            p = root;\n        } else {\n            p = root + \"/\" + path;\n        }\n        return p;\n    }\n\n    protected String getRelPath(String root, String absPath) {\n        return absPath.substring(root.length() + 1);\n    }\n\n    protected void writeToOutputStream(File file, OutputStream oos) throws Exception {\n        byte[] buf = new byte[8192];\n        InputStream is = new FileInputStream(file);\n        int c = 0;\n        while ((c = is.read(buf, 0, buf.length)) > 0) {\n            oos.write(buf, 0, c);\n            oos.flush();\n        }\n        oos.close();\n        is.close();\n    }\n\n    protected void deleteDir(File file) {\n        File[] contents = file.listFiles();\n        if (contents != null) {\n            for (File f : contents) {\n                deleteDir(f);\n            }\n        }\n        file.delete();\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.file.AbstractFileRule",
      "createDate": "2016-03-31T00:36:29.348"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.348",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:142",
    "@version": 1,
    "@class": "Event",
    "eventId": 10143,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.file;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport io.undertow.server.HttpServerExchange;\nimport io.undertow.util.Headers;\nimport io.undertow.util.HttpString;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 27/02/16.\n *\n * AccessLevel R [fileAdmin, admin, owner]\n *\n */\npublic class GetContentRule extends AbstractFileRule implements Rule {\n    public boolean execute(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        // here we get user's host to decide which domain he/she can access\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String) user.get(\"host\");\n        if(host == null) {\n            host = (String)data.get(\"host\");\n        }\n        String path = (String) data.get(\"path\");\n        String root = getRootPath(host);\n        String absPath = getAbsPath(root, path);\n        // now save this absPath into the in memory cache and return a uuid key to the client in order to\n        // download the file.\n        Map<String, Object> fileMap = ServiceLocator.getInstance().getMemoryImage(\"fileMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)fileMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            fileMap.put(\"cache\", cache);\n        }\n        String token = HashUtil.generateUUID();\n        cache.put(token, absPath);\n        Map<String, Object> result = new HashMap<String,Object>();\n        result.put(\"token\", token);\n        inputMap.put(\"result\", mapper.writeValueAsString(result));\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.file.GetContentRule",
      "createDate": "2016-03-31T00:36:29.361"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.361",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:143",
    "@version": 1,
    "@class": "Event",
    "eventId": 10144,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.file;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 2/26/2016.\n *\n * AccessLevel R [fileAdmin, admin, owner]\n *\n */\npublic class GetFileRule extends AbstractFileRule implements Rule {\n    public boolean execute(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        // here we get user's host to decide which domain he/she can access\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String) user.get(\"host\");\n        if(host == null) {\n            // this is the owner that is updating. get the host from data.\n            host = (String)data.get(\"host\");\n        }\n        String files = getFile(host, (String)data.get(\"path\"));\n        if(files != null) {\n            inputMap.put(\"result\", files);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No files can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.file.GetFileRule",
      "createDate": "2016-03-31T00:36:29.370"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.370",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:144",
    "@version": 1,
    "@class": "Event",
    "eventId": 10145,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.networknt.light.rule.client;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.*;\n\n/**\n * Created by steve on 31/01/15.\n * Now, we only support Browser, Android and iOS\n *\n * AccessLevel R [user]\n */\npublic class GetClientDropdownRule extends AbstractRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n        Set<String> keys = ServiceLocator.getInstance().getHostMap().keySet();\n        for(String key: keys) {\n            Map<String, Object> hostMap = (Map<String, Object>)ServiceLocator.getInstance().getHostMap().get(key);\n            List<String> supportDevices = (List)hostMap.get(\"supportDevices\");\n            for(String device: supportDevices) {\n                String client = key + \"@\" + device;\n                Map<String, String> map = new HashMap<String, String>();\n                map.put(\"label\", client);\n                map.put(\"value\", client);\n                list.add(map);\n            }\n        }\n        String clientDropdown = mapper.writeValueAsString(list);\n        if(clientDropdown != null) {\n            inputMap.put(\"result\", clientDropdown);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No client can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.client.GetClientDropdownRule",
      "createDate": "2016-03-31T00:36:29.377"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.377",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:145",
    "@version": 1,
    "@class": "Event",
    "eventId": 10146,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/8/2014.\n */\npublic class DelBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranchEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DelBlogEvRule",
      "createDate": "2016-03-31T00:36:29.388"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.388",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:146",
    "@version": 1,
    "@class": "Event",
    "eventId": 10147,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 11/10/14.\n *\n * AccessLevel R [user]\n *\n */\npublic class DownBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranch(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DownBlogRule",
      "createDate": "2016-03-31T00:36:29.396"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.396",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:147",
    "@version": 1,
    "@class": "Event",
    "eventId": 10148,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 3/6/2015.\n */\npublic class UpdPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPostEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpdPostEvRule",
      "createDate": "2016-03-31T00:36:29.418"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.418",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:148",
    "@version": 1,
    "@class": "Event",
    "eventId": 10149,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 11/10/14.\n * This is to up vote blog by user\n *\n * AccessLevel R [user]\n *\n */\npublic class UpBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranch(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpBlogRule",
      "createDate": "2016-03-31T00:36:29.427"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.427",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:149",
    "@version": 1,
    "@class": "Event",
    "eventId": 10150,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 3/6/2015.\n *\n * Blog user can only delete his or her posts before anyone makes comment. However,\n * owner, admin and blogAdmin can delete post and all the comments relate to the\n * post all together. This should not be done often only at extreme situation.\n *\n * Due to the implementation of orientdb delete graph scheduled for 2.2\n * https://github.com/orientechnologies/orientdb/issues/1108\n * We will be asking all the comments be deleted before deleting the post for now.\n *\n * TODO fix it after orientdb 2.2\n *\n * AccessLevel R [owner, admin, blogAdmin, blogUser]\n */\npublic class DelPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPost(\"blog\", objects);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DelPostRule",
      "createDate": "2016-03-31T00:36:29.439"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.439",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:150",
    "@version": 1,
    "@class": "Event",
    "eventId": 10151,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic class AddBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranchEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AddBlogEvRule",
      "createDate": "2016-03-31T00:36:29.447"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.447",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:151",
    "@version": 1,
    "@class": "Event",
    "eventId": 10152,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * AccessLevel A\n *\n */\npublic class GetBlogPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getCategoryEntity(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.GetBlogPostRule",
      "createDate": "2016-03-31T00:36:29.454"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.454",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:152",
    "@version": 1,
    "@class": "Event",
    "eventId": 10153,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 10/8/2014.\n *\n * AccessLevel R [owner, admin, blogAdmin]\n *\n */\npublic class DelBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranch(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DelBlogRule",
      "createDate": "2016-03-31T00:36:29.461"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.461",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:153",
    "@version": 1,
    "@class": "Event",
    "eventId": 10154,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 11/10/14.\n */\npublic class DownBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranchEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DownBlogEvRule",
      "createDate": "2016-03-31T00:36:29.471"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.471",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:154",
    "@version": 1,
    "@class": "Event",
    "eventId": 10155,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * get drown down list of blogs for blog admin\n *\n * AccessLevel R [owner, admin, blogAdmin]\n *\n */\npublic class GetBlogDropdownRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchDropdown(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.GetBlogDropdownRule",
      "createDate": "2016-03-31T00:36:29.479"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.479",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:155",
    "@version": 1,
    "@class": "Event",
    "eventId": 10156,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/10/2014.\n * Update node of blog tree\n *\n * AccessLevel R [owner, admin, blogAdmin]\n *\n */\npublic class UpdBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranch(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpdBlogRule",
      "createDate": "2016-03-31T00:36:29.486"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.486",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:156",
    "@version": 1,
    "@class": "Event",
    "eventId": 10157,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/8/2014.\n *\n * This is for blog admin screen.\n *\n * AccessLevel R [owner, admin, blogAdmin]\n *\n */\npublic class GetBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranch(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.GetBlogRule",
      "createDate": "2016-03-31T00:36:29.494"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.494",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:157",
    "@version": 1,
    "@class": "Event",
    "eventId": 10158,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic abstract class AbstractBlogRule extends AbstractRule implements Rule {\n\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n    /*\n    protected String getJsonByRid(String blogRid) {\n        // try to get it from cache first.\n        String json = null;\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache != null) {\n            json = (String)cache.get(\"blogRid\");\n        }\n        if(json == null) {\n            // TODO warning to increase cache if this happens.\n            json = DbService.getJsonByRid(blogRid);\n            // put it into the blog cache.\n            if(json != null) {\n                if(cache == null) {\n                    cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                            .maximumWeightedCapacity(1000)\n                            .build();\n                    blogMap.put(\"cache\", cache);\n                }\n                cache.put(blogRid, json);\n            }\n        }\n        return json;\n    }\n\n    protected Map<String, Object> getBlogByHostTitle(String host, String title) {\n        Map<String, Object> map = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OIndex<?> hostTitleIdx = db.getMetadata().getIndexManager().getIndex(\"hostTitleIdx\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OCompositeKey key = new OCompositeKey(host, title);\n            OIdentifiable blog = (OIdentifiable) hostTitleIdx.get(key);\n            if (blog != null) {\n                String json = ((ODocument) blog.getRecord()).toJSON();\n                map = mapper.readValue(json, new TypeReference<HashMap<String, Object>>() {});\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return map;\n    }\n\n    protected ODocument addBlog(Map<String, Object> data) throws Exception {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            OIndex<?> blogHostIdIdx = db.getMetadata().getIndexManager().getIndex(\"blogHostIdIdx\");\n            blog = new ODocument(schema.getClass(\"Blog\"));\n            blog.field(\"host\", data.get(\"host\"));\n            blog.field(\"categoryId\", data.get(\"categoryId\"));\n            if(data.get(\"description\") != null) blog.field(\"description\", data.get(\"description\"));\n            if(data.get(\"attributes\") != null) blog.field(\"attributes\", data.get(\"attributes\"));\n            blog.field(\"createDate\", data.get(\"createDate\"));\n            blog.field(\"createUserId\", data.get(\"createUserId\"));\n            // parent\n            if(data.get(\"parent\") != null) {\n                OCompositeKey parentKey = new OCompositeKey(data.get(\"host\"), data.get(\"parent\"));\n                OIdentifiable parentOid = (OIdentifiable) blogHostIdIdx.get(parentKey);\n                if(parentOid != null) {\n                    ODocument parent = (ODocument)parentOid.getRecord();\n                    blog.field(\"parent\", parent);\n                    // update parent with the children\n                    Set children = parent.field(\"children\");\n                    if(children != null) {\n                        children.add(blog);\n                    } else {\n                        children = new HashSet<ODocument>();\n                        children.add(blog);\n                        parent.field(\"children\", children);\n                    }\n                    parent.save();\n                }\n            }\n            // children\n            List<String> childrenIds = (List<String>)data.get(\"children\");\n            if(childrenIds != null) {\n                Set children = new HashSet<ODocument>();\n                for(String childId: childrenIds) {\n                    OCompositeKey childKey = new OCompositeKey(data.get(\"host\"), childId);\n                    OIdentifiable childOid = (OIdentifiable) blogHostIdIdx.get(childKey);\n                    if(childOid != null) {\n                        ODocument child = (ODocument)childOid.getRecord();\n                        children.add(child);\n                        child.field(\"parent\", blog);\n                        child.save();\n                    }\n                }\n                blog.field(\"children\", children);\n            }\n            blog.save();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n    */\n    /*\n    protected void addBlog(Map<String, Object> data) throws Exception {\n        ODocument blog = addBlogDb(data);\n        // rebuild cache in memory.\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        // update central cache\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            blogMap.put(\"cache\", cache);\n        }\n        cache.put(blog.field(\"@rid\").toString(), blog.toJSON());\n        // update newList\n        String host = (String)data.get(\"host\");\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList == null) {\n            newList = new ArrayList<String>();\n            newList.add(blog.field(\"@rid\").toString());\n            blogMap.put(host + \"newList\", newList);\n        } else {\n            newList.add(0, blog.field(\"@rid\").toString());  // add the head of the list.\n        }\n        // TODO build hot list\n\n    }\n    */\n    /*\n    protected ODocument addBlogDb(Map<String, Object> data) throws Exception {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n\n        try {\n            db.begin();\n            blog = new ODocument(schema.getClass(\"Blog\"));\n            blog.field(\"host\", data.get(\"host\"));\n            blog.field(\"title\", data.get(\"title\"));\n            blog.field(\"source\", data.get(\"source\"));\n            blog.field(\"summary\", data.get(\"summary\"));\n            blog.field(\"content\", data.get(\"content\"));\n            blog.field(\"rank\", 0);\n            java.util.Date d = new java.util.Date();\n            blog.field(\"createDate\", data.get(\"createDate\"));\n            blog.field(\"updateDate\", data.get(\"createDate\"));\n            blog.field(\"createUserId\", data.get(\"createUserId\"));\n            blog.save();\n            db.commit();\n            Map<String, Object> tagMap = new HashMap<String, Object>();\n\n            Set<String> inputTags = data.get(\"tags\") != null? new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\"))) : new HashSet<String>();\n            String host = blog.field(\"host\");\n            String className = blog.field(\"@class\");\n            for(String tagName: inputTags) {\n                ODocument tag = null;\n\n                // get the tag is it exists\n                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                // this is a unique index, so it retrieves a OIdentifiable\n                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                if (oIdentifiable != null) {\n                    tag = (ODocument) oIdentifiable.getRecord();\n                    Set links = tag.field(\"links\");\n                    links.add(blog.field(\"@rid\"));\n                    tag.save();\n                    db.commit();\n                } else {\n                    tag = new ODocument(schema.getClass(\"Tag\"));\n                    tag.field(\"host\", host);\n                    tag.field(\"name\", tagName);\n                    tag.field(\"class\", className);\n                    tag.field(\"createDate\", data.get(\"createDate\"));\n                    tag.field(\"createUserId\", data.get(\"createUserId\"));\n                    Set links = new HashSet<String>();\n                    links.add(blog.field(\"@rid\"));\n                    tag.field(\"links\", links);\n                    tag.save();\n                    db.commit();\n                }\n                tagMap.put(tagName, tag.field(\"@rid\"));\n            }\n            blog.field(\"tags\", tagMap);\n            blog.save();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n    */\n    /*\n    protected boolean delBlog(Map<String, Object> data) throws Exception {\n        boolean result = false;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            OIndex<?> blogHostIdIdx = db.getMetadata().getIndexManager().getIndex(\"blogHostIdIdx\");\n            OCompositeKey key = new OCompositeKey(data.get(\"host\"), data.get(\"categoryId\"));\n            OIdentifiable oid = (OIdentifiable) blogHostIdIdx.get(key);\n            if (oid != null) {\n                ODocument blog = (ODocument) oid.getRecord();\n                // update references from parent and children\n                ODocument parent = blog.field(\"parent\");\n                if(parent != null) {\n                    Set children = parent.field(\"children\");\n                    if(children != null && children.size() > 0) {\n                        children.remove(blog);\n                    }\n                    parent.save();\n                }\n                Set<ODocument> children = blog.field(\"children\");\n                if(children != null && children.size() > 0) {\n                    for(ODocument child: children) {\n                        if(child != null) {\n                            child.removeField(\"parent\");\n                            child.save();\n                        }\n\n                    }\n                }\n                blog.delete();\n                db.commit();\n                result = true;\n            }\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return result;\n    }\n    */\n    /*\n    protected void delBlogUpdCache(String blogRid, String host) throws Exception {\n        delBlogDb(blogRid);\n        // rebuild cache in memory.\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        // update central cache\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(blogRid);\n        }\n        // update newList\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList != null) {\n            newList.remove(blogRid);\n        }\n\n        // TODO build hot list\n\n    }\n    */\n    /*\n    protected boolean delBlogDb(String blogRid) throws Exception {\n        boolean result = false;\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId(blogRid));\n            // remove the tags\n            Map<String, Object> tagMap = blog.field(\"tags\");\n            if(tagMap != null) {\n                Iterator it = tagMap.entrySet().iterator();\n                while(it.hasNext()) {\n                    Map.Entry pairs = (Map.Entry)it.next();\n                    ODocument tag = db.load((ORecordId)pairs.getValue());\n                    Set links = tag.field(\"links\");\n                    links.remove(blog.field(\"@rid\"));\n                    tag.save();\n                    db.commit();\n                }\n            }\n            db.delete(new ORecordId(blogRid));\n            db.commit();\n            result = true;\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return result;\n    }\n    */\n    /*\n    protected int delBlogByHost(String host) throws Exception {\n        int recordsUpdated = 0;\n        String sql = \"DELETE FROM Blog WHERE host = '\" + host + \"'\";\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            recordsUpdated = db.command(new OCommandSQL(sql)).execute();\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        if(recordsUpdated > 0) {\n            // clean the cache if any.\n            Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n            blogMap.remove(host + \"newList\");\n            // cached blog will be remove the cache automatically.\n        }\n        return recordsUpdated;\n    }\n    */\n    /*\n    protected void updBlog(Map<String, Object> data, String userRid, String userId) throws Exception {\n        ODocument blog = updBlogDb(data, userRid, userId);\n        String blogRid = blog.field(\"@rid\").toString();\n        // rebuild cache in memory.\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            blogMap.put(\"cache\", cache);\n        }\n        cache.put(blogRid, blog.toJSON());\n\n        // update newList\n        String host = (String)data.get(\"host\");\n        List<String> newList = (List<String>)blogMap.get(host + \"newList\");\n        if(newList == null) {\n            newList = new ArrayList<String>();\n            blogMap.put(host + \"newList\", newList);\n            newList.add(blogRid);\n        } else {\n            newList.remove(blogRid);\n            newList.add(0, blogRid);\n        }\n        // TODO build hot list\n\n    }\n\n    protected ODocument updBlogDb(Map<String, Object> data, String userRid, String userId) throws Exception {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId((String)data.get(\"@rid\")));\n            if (blog != null) {\n                String title = (String)data.get(\"title\");\n                if(title != null && !title.equals(blog.field(\"title\"))) {\n                    blog.field(\"title\", title);\n                }\n                String source = (String)data.get(\"source\");\n                if(source != null && !source.equals(blog.field(\"source\"))) {\n                    blog.field(\"source\", source);\n                }\n                String summary = (String)data.get(\"summary\");\n                if(summary != null && !summary.equals(blog.field(\"content\"))) {\n                    blog.field(\"summary\", summary);\n                }\n                String content = (String)data.get(\"content\");\n                if(content != null && !content.equals(blog.field(\"content\"))) {\n                    blog.field(\"content\", content);\n                }\n\n                // update tags\n                String host = blog.field(\"host\");\n                String className = blog.field(\"@class\");\n                Map<String, Object> tagMap = blog.field(\"tags\");\n                if(tagMap != null && tagMap.size() > 0) {\n                    // There are existing tags.\n                    if(data.get(\"tags\") != null) {\n                        // both are not null, we need a comparison to figure out what to do.\n                        Set<String> inputTags = new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\")));\n                        Set<String> storedTags = tagMap.keySet();\n                        Set<String> addSet = new HashSet<String>(inputTags);\n                        Set<String> delSet = new HashSet<String>(storedTags);\n                        addSet.removeAll(storedTags);\n                        if(addSet.size() > 0) {\n                            for(String tagName: addSet) {\n                                ODocument tag = null;\n                                // get the tag is it exists\n                                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                                // this is a unique index, so it retrieves a OIdentifiable\n                                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                                if (oIdentifiable != null) {\n                                    tag = (ODocument) oIdentifiable.getRecord();\n                                    Set links = tag.field(\"links\");\n                                    links.add(blog.field(\"@rid\"));\n                                    tag.save();\n                                    db.commit();\n                                } else {\n                                    tag = new ODocument(schema.getClass(\"Tag\"));\n                                    tag.field(\"host\", host);\n                                    tag.field(\"name\", tagName);\n                                    tag.field(\"class\", className);\n                                    tag.field(\"createDate\", new java.util.Date());\n                                    tag.field(\"createUserRid\", new ORecordId(userRid));\n                                    Set links = new HashSet<Object>();\n                                    links.add(blog.field(\"@rid\"));\n                                    tag.field(\"links\", links);\n                                    tag.save();\n                                    db.commit();\n                                }\n                                tagMap.put(tagName, tag.field(\"@rid\"));\n                            }\n                            blog.field(\"tags\", tagMap);\n                            blog.save();\n                            db.commit();\n                        }\n                        delSet.removeAll(inputTags);\n                        if(delSet.size() > 0) {\n                            // remove the tags\n                            for(String tagName: delSet) {\n                                ODocument tag = null;\n                                // get the tag is it exists\n                                OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                                // this is a unique index, so it retrieves a OIdentifiable\n                                OCompositeKey key = new OCompositeKey(host, tagName, className);\n                                OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                                if (oIdentifiable != null) {\n                                    tag = (ODocument) oIdentifiable.getRecord();\n                                    Set links = tag.field(\"links\");\n                                    links.remove(blog.field(\"@rid\"));\n                                    tag.save();\n                                    db.commit();\n                                }\n                                tagMap.remove(tagName);\n                            }\n                            blog.field(\"tags\", tagMap);\n                            blog.save();\n                            db.commit();\n                        }\n                    } else {\n                        // remove the blog reference from all tags as input is empty but stored has values.\n                        // and then remove the tags from blog.\n                        Iterator it = tagMap.entrySet().iterator();\n                        while(it.hasNext()) {\n                            ORecordId tagRid = (ORecordId)it.next();\n                            ODocument tag = db.load(tagRid);\n                            Set links = tag.field(\"links\");\n                            links.remove(blog.field(\"@rid\"));\n                            tag.save();\n                        }\n                        blog.removeField(\"tags\");\n                        blog.save();\n                        db.commit();\n                    }\n                } else {\n                    // tagMap is null\n                    if(data.get(\"tags\") != null) {\n                        tagMap = new HashMap<String, Object>();\n                        Set<String> inputTags = new HashSet<String>(Arrays.asList(((String)data.get(\"tags\")).split(\"\\\\s*,\\\\s*\")));\n                        for(String tagName: inputTags) {\n                            ODocument tag = null;\n                            // get the tag if it exists\n                            OIndex<?> hostNameClassIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameClassIdx\");\n                            // this is a unique index, so it retrieves a OIdentifiable\n                            OCompositeKey key = new OCompositeKey(host, tagName, className);\n                            OIdentifiable oIdentifiable = (OIdentifiable) hostNameClassIdx.get(key);\n                            if (oIdentifiable != null) {\n                                tag = (ODocument) oIdentifiable.getRecord();\n                                Set links = tag.field(\"links\");\n                                links.add(blog.field(\"@rid\"));\n                                tag.save();\n                                db.commit();\n                            } else {\n                                tag = new ODocument(schema.getClass(\"Tag\"));\n                                tag.field(\"host\", host);\n                                tag.field(\"name\", tagName);\n                                tag.field(\"class\", className);\n                                tag.field(\"createDate\", new java.util.Date());\n                                tag.field(\"createUserRid\", new ORecordId(userRid));\n                                Set links = new HashSet<String>();\n                                links.add(blog.field(\"@rid\"));\n                                tag.field(\"links\", links);\n                                tag.save();\n                                db.commit();\n                            }\n                            tagMap.put(tagName, tag.field(\"@rid\"));\n                        }\n                        blog.field(\"tags\", tagMap);\n                        blog.save();\n                        db.commit();\n                    }\n                }\n                blog.field(\"updateDate\", new java.util.Date());\n                blog.field(\"updateUserId\", userId);\n                blog.field(\"updateUserRid\", userRid);\n                blog.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n    protected long getTotalNumberBlogFromDb(Map<String, Object> criteria) {\n        long total = 0;\n        StringBuilder sql = new StringBuilder(\"SELECT COUNT(*) as count FROM Blog\");\n\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            total = ((ODocument)db.query(new OSQLSynchQuery<ODocument>(sql.toString())).get(0)).field(\"count\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return total;\n    }\n\n    protected List<Map<String, Object>> searchBlogFromDb(Map<String, Object> criteria) {\n        List<Map<String,Object>> list = null;\n        StringBuilder sql = new StringBuilder(\"SELECT FROM Blog \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sql.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sql.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sql.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sql.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql.toString());\n            List<ODocument> result = db.command(query).execute();\n            if(result.size() > 0) {\n                String json = OJSONWriter.listToJSON(result, null);\n                list = mapper.readValue(json, new TypeReference<List<HashMap<String, Object>>>() {});\n\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return list;\n    }\n    protected List<ODocument> searchBlogDb(Map<String, Object> criteria) {\n        List<ODocument> blogs = null;\n        StringBuilder sql = new StringBuilder(\"SELECT FROM Blog \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sql.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sql.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sql.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sql.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql.toString());\n            blogs = db.command(query).execute();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return blogs;\n    }\n\n    protected Map<String, Object> refreshCache(String host) {\n        Map<String, Object> blogMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"blogMap\");\n        Map<String, Object> criteria = new HashMap<String, Object>();\n        criteria.put(\"host\", host);\n        criteria.put(\"sortedBy\", \"updateDate\");\n        criteria.put(\"sortDir\", \"DESC\");\n        List<ODocument> blogs = searchBlogDb(criteria);\n        List<String> newList = new ArrayList<String>();\n        // build new map/list\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)blogMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            blogMap.put(\"cache\", cache);\n        }\n        int i = 0;\n        int pageSize = 2; // TODO get from config\n        for (ODocument blog : blogs) {\n            // cache the first page for now. most people will read the first page as it contains\n            // new posts.\n            if(i < pageSize) {\n                cache.put(blog.field(\"@rid\").toString(), blog.toJSON());\n            }\n            newList.add(blog.field(\"@rid\").toString());\n        }\n        blogMap.put(host + \"newList\", newList);\n\n        // TODO build hot list\n        return blogMap;\n    }\n\n    protected ODocument upVoteBlog(String blogRid, String userRid) {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId(blogRid));\n            if (blog != null) {\n                Set upSet = blog.field(\"upUsers\");\n                if(upSet == null) {\n                    upSet = new HashSet<String>();\n                    upSet.add(new ORecordId(userRid));\n                    blog.field(\"upUsers\", upSet);\n                } else {\n                    upSet.add(new ORecordId(userRid));\n                }\n                // remove the user from downUsers if it is there\n                // blindly remove\n                Set downSet = blog.field(\"downUsers\");\n                if(downSet != null) {\n                    downSet.remove(new ORecordId(userRid));\n                }\n                blog.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n\n    protected ODocument downVoteBlog(String blogRid, String userRid) {\n        ODocument blog = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            db.begin();\n            blog = db.load(new ORecordId(blogRid));\n            if (blog != null) {\n                Set downSet = blog.field(\"downUsers\");\n                if(downSet == null) {\n                    downSet = new HashSet<String>();\n                    downSet.add(new ORecordId(userRid));\n                    blog.field(\"downUsers\", downSet);\n                } else {\n                    downSet.add(new ORecordId(userRid));\n                }\n                // remove the user from upUsers if it is there\n                // blindly remove\n                Set upSet = blog.field(\"upUsers\");\n                if(upSet != null) {\n                    upSet.remove(new ORecordId(userRid));\n                }\n                blog.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return blog;\n    }\n    */\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AbstractBlogRule",
      "createDate": "2016-03-31T00:36:29.511"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.511",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:158",
    "@version": 1,
    "@class": "Event",
    "eventId": 10159,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 08/10/14.\n *\n * AccessLevel R [owner, admin, blogAdmin]\n *\n */\npublic class AddBlogRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranch(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AddBlogRule",
      "createDate": "2016-03-31T00:36:29.520"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.520",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:159",
    "@version": 1,
    "@class": "Event",
    "eventId": 10160,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by hus5 on 3/6/2015.\n */\npublic class DelPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delPostEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.DelPostEvRule",
      "createDate": "2016-03-31T00:36:29.536"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.536",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:160",
    "@version": 1,
    "@class": "Event",
    "eventId": 10161,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n */\npublic class AddPostEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPostEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AddPostEvRule",
      "createDate": "2016-03-31T00:36:29.544"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.544",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:161",
    "@version": 1,
    "@class": "Event",
    "eventId": 10162,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/10/2014.\n */\npublic class UpdBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranchEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpdBlogEvRule",
      "createDate": "2016-03-31T00:36:29.561"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.561",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:162",
    "@version": 1,
    "@class": "Event",
    "eventId": 10163,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 18/01/16.\n *\n * AccessLevel A everyone can access\n *\n * This API get all the post regardless category order by the time of post.\n *\n */\npublic class GetRecentPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getRecentEntity(\"Blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.GetRecentPostRule",
      "createDate": "2016-03-31T00:36:29.570"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.570",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:163",
    "@version": 1,
    "@class": "Event",
    "eventId": 10164,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * AccessLevel R [owner, admin, blogAdmin, blogUser]\n *\n */\npublic class AddPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addPost(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.AddPostRule",
      "createDate": "2016-03-31T00:36:29.578"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.578",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:164",
    "@version": 1,
    "@class": "Event",
    "eventId": 10165,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/12/14.\n *\n * This is to get blogs displayed on the blog home page.\n *\n * AccessLevel A\n *\n */\npublic class GetBlogTreeRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchTree(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.GetBlogTreeRule",
      "createDate": "2016-03-31T00:36:29.585"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.585",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:165",
    "@version": 1,
    "@class": "Event",
    "eventId": 10166,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 11/10/14.\n */\npublic class UpBlogEvRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranchEv(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpBlogEvRule",
      "createDate": "2016-03-31T00:36:29.631"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.631",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:166",
    "@version": 1,
    "@class": "Event",
    "eventId": 10167,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.blog;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 3/6/2015.\n * Update post in a blog\n *\n * AccessLevel R [owner, admin, blogAdmin, blogUser]\n *\n * blogUser can only update his or her blog\n *\n */\npublic class UpdPostRule extends AbstractBfnRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updPost(\"blog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.blog.UpdPostRule",
      "createDate": "2016-03-31T00:36:29.638"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.638",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:167",
    "@version": 1,
    "@class": "Event",
    "eventId": 10168,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule;\n\nimport com.braintreegateway.BraintreeGateway;\nimport com.braintreegateway.Environment;\nimport com.networknt.light.util.ServiceLocator;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by steve on 21/02/16.\n */\npublic abstract class AbstractCommerceRule extends AbstractRule implements Rule {\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    // This is to cache all the getways for each host in memory so that we don't need to create new gateway\n    // for each request.\n    protected static Map<String, BraintreeGateway> gatewayMap = new HashMap<String, BraintreeGateway>();\n\n    static {\n        // load braintree config for each host and initialize gateways.\n        Map<String, Object> config = ServiceLocator.getInstance().getJsonMapConfig(\"braintree\");\n        for (Map.Entry<String, Object> entry : config.entrySet()) {\n            String host = entry.getKey();\n            Map<String, Object> braintreeConfig = (Map<String, Object>)entry.getValue();\n\n            BraintreeGateway gateway = new BraintreeGateway((Boolean)braintreeConfig.get(\"sandbox\") == true? Environment.SANDBOX : Environment.PRODUCTION,\n                    (String)braintreeConfig.get(\"merchant_id\"), (String)braintreeConfig.get(\"public_key\"), (String)braintreeConfig.get(\"private_key\"));\n            gatewayMap.put(host, gateway);\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.AbstractCommerceRule",
      "createDate": "2016-03-31T00:36:29.646"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.646",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:168",
    "@version": 1,
    "@class": "Event",
    "eventId": 10169,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class DelRoleEvRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        String roleId = (String)data.get(\"roleId\");\n        delRole(roleId);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.DelRoleEvRule",
      "createDate": "2016-03-31T00:36:29.653"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.653",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:169",
    "@version": 1,
    "@class": "Event",
    "eventId": 10170,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/31/2014.\n */\npublic abstract class AbstractRoleRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractRoleRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected String getRoleById(String roleId) {\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex role = (OrientVertex)graph.getVertexByKey(\"Role.roleId\", roleId);\n            if(role != null) {\n                json = role.getRecord().toJSON();\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected void addRole(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex role = graph.addVertex(\"class:Role\", data);\n            createUser.addEdge(\"Create\", role);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void updRole(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            Vertex role = graph.getVertexByKey(\"Role.roleId\", data.get(\"roleId\"));\n            if(role != null) {\n                String host = (String)data.get(\"host\");\n                if(host != null && host.length() > 0) {\n                    if(!host.equals(role.getProperty(\"host\"))) role.setProperty(\"host\", host);\n                } else {\n                    role.removeProperty(\"host\");\n                }\n                String description = (String)data.get(\"description\");\n                if(description != null && !description.equals(role.getProperty(\"description\"))) {\n                    role.setProperty(\"description\", description);\n                }\n                role.setProperty(\"updateDate\", data.get(\"updateDate\"));\n                updateUser.addEdge(\"Update\", role);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void delRole(String roleId) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex role = graph.getVertexByKey(\"Role.roleId\", roleId);\n            if(role != null) {\n                graph.removeVertex(role);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected String getRoles(OrientGraph graph, String host) {\n        String sql = \"SELECT FROM Role\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> roles = graph.getRawGraph().command(query).execute();\n            json = OJSONWriter.listToJSON(roles, null);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getRoleDropdown(String host) throws Exception {\n        String sql = \"SELECT FROM Role\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> roles = graph.getRawGraph().command(query).execute();\n            if(roles.size() > 0) {\n                List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n                for(ODocument doc: roles) {\n                    Map<String, String> map = new HashMap<String, String>();\n                    String roleId = doc.field(\"roleId\");\n                    map.put(\"label\", roleId);\n                    map.put(\"value\", roleId);\n                    list.add(map);\n                }\n                json = mapper.writeValueAsString(list);\n            }\n\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.AbstractRoleRule",
      "createDate": "2016-03-31T00:36:29.662"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.662",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:170",
    "@version": 1,
    "@class": "Event",
    "eventId": 10171,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * AccessLevel R [owner, admin]\n *\n */\npublic class AddRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add role from host: \" + host;\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                String json = getRoleById((String)data.get(\"roleId\"));\n                if(json != null) {\n                    error = \"Id for the role exists\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                }\n            }\n        } else {\n            String json = getRoleById((String)data.get(\"roleId\"));\n            if(json != null) {\n                error = \"Id for the role exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n                // remove host from data as this is owner adding role\n                eventData.remove(\"host\");\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.AddRoleRule",
      "createDate": "2016-03-31T00:36:29.670"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.670",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:171",
    "@version": 1,
    "@class": "Event",
    "eventId": 10172,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 21/11/14.\n *\n * AccessLevel R [user]\n */\npublic class GetRoleDropdownRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String) user.get(\"host\");\n        String hostRoleDropdown = getRoleDropdown(host);\n        if(hostRoleDropdown != null) {\n            inputMap.put(\"result\", hostRoleDropdown);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No role can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.GetRoleDropdownRule",
      "createDate": "2016-03-31T00:36:29.682"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.682",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:172",
    "@version": 1,
    "@class": "Event",
    "eventId": 10173,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Created by husteve on 10/31/2014.\n *\n * AccessLevel R [owner, admin]\n */\npublic class GetRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String) user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String hostRoles = getRoles(graph, host);\n            if(hostRoles != null) {\n                List<Map<String, Object>> roleList\n                        = mapper.readValue(hostRoles, new TypeReference<List<HashMap<String, Object>>>() {});\n                // get all the hosts\n                Set hosts = ServiceLocator.getInstance().getHostMap().keySet();\n\n                Map<String, Object> result = new HashMap<String, Object>();\n                result.put(\"roles\", roleList);\n                result.put(\"hosts\", hosts);\n                inputMap.put(\"result\", mapper.writeValueAsString(result));\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No role can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.GetRoleRule",
      "createDate": "2016-03-31T00:36:29.690"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.690",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:173",
    "@version": 1,
    "@class": "Event",
    "eventId": 10174,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class AddRoleEvRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addRole(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.AddRoleEvRule",
      "createDate": "2016-03-31T00:36:29.700"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.700",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:174",
    "@version": 1,
    "@class": "Event",
    "eventId": 10175,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/31/2014.\n */\npublic class UpdRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only update role for host: \" + host;\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                try {\n                    Vertex role = DbService.getVertexByRid(graph, rid);\n                    if(role == null) {\n                        error = \"Role with @rid \" + rid + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        int inputVersion = (int)data.get(\"@version\");\n                        int storedVersion = role.getProperty(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"roleId\", data.get(\"roleId\"));\n                            eventData.put(\"description\", data.get(\"description\"));\n                            eventData.put(\"host\", data.get(\"host\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Exception:\", e);\n                    throw e;\n                } finally {\n                    graph.shutdown();\n                }\n            }\n        } else {\n            try {\n                Vertex role = DbService.getVertexByRid(graph, rid);\n                if(role == null) {\n                    error = \"Role with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    int storedVersion = role.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        inputMap.put(\"responseCode\", 400);\n                        error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"roleId\", data.get(\"roleId\"));\n                        eventData.put(\"description\", data.get(\"description\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        // this is the owner update the role. no host.\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.UpdRoleRule",
      "createDate": "2016-03-31T00:36:29.717"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.717",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:175",
    "@version": 1,
    "@class": "Event",
    "eventId": 10176,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/31/2014.\n */\npublic class UpdRoleEvRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updRole(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.UpdRoleEvRule",
      "createDate": "2016-03-31T00:36:29.727"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.727",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:176",
    "@version": 1,
    "@class": "Event",
    "eventId": 10177,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.role;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * AccessLevel R [owner, admin]\n *\n */\npublic class DelRoleRule extends AbstractRoleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only delete role for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex role = DbService.getVertexByRid(graph, rid);\n                if(role == null) {\n                    error = \"Role with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"roleId\", role.getProperty(\"roleId\"));\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.role.DelRoleRule",
      "createDate": "2016-03-31T00:36:29.740"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.740",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:177",
    "@version": 1,
    "@class": "Event",
    "eventId": 10178,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 3/10/2015.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdPublisherRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            eventData.put(\"isPublisher\", data.get(\"isPublisher\"));\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdPublisherRule",
      "createDate": "2016-03-31T00:36:29.765"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.765",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:178",
    "@version": 1,
    "@class": "Event",
    "eventId": 10179,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 22/03/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdSchemaRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            String schema = (String)data.get(\"schema\");\n            if(schema != null) {\n                eventData.put(\"schema\", schema);\n            }\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdSchemaRule",
      "createDate": "2016-03-31T00:36:29.772"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.772",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:179",
    "@version": 1,
    "@class": "Event",
    "eventId": 10180,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic class AddRuleEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addRule(data);\n        // this is too notify readonly subsystem that the number of rules is changed.\n        // if will only send out event when isPublisher is true for the Rule. Change\n        // it from Rule Admin to enable it or disable it.\n        publishEvent(eventMap);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.AddRuleEvRule",
      "createDate": "2016-03-31T00:36:29.786"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.786",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:180",
    "@version": 1,
    "@class": "Event",
    "eventId": 10181,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n * current R [owner]\n */\npublic class UpdRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        int inputVersion = (int)data.get(\"@version\");\n        String rid = (String)data.get(\"@rid\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"You can only update rule for host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // make sure the ruleClass contains the host.\n                if(host != null && !ruleClass.contains(host)) {\n                    // you are not allowed to update rule as it is not owned by the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                }\n            }\n        }\n        if(error == null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex rule = DbService.getVertexByRid(graph, rid);\n                if(rule == null) {\n                    error = \"Rule with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    int storedVersion = rule.getProperty(\"@version\");\n                    if(inputVersion != storedVersion) {\n                        error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"ruleClass\", ruleClass);\n                        eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                        eventData.put(\"updateDate\", new java.util.Date());\n                        eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdRuleRule",
      "createDate": "2016-03-31T00:36:29.798"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.798",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:181",
    "@version": 1,
    "@class": "Event",
    "eventId": 10182,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 14/02/16.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n */\npublic class UpdReqTransformRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            List<Map<String, Object>> reqTransforms = (List)data.get(\"reqTransforms\");\n            if(reqTransforms != null) {\n                // convert transformData to map from string.\n                for(Map<String, Object> transform: reqTransforms) {\n                    String transformData = (String)transform.get(\"transformData\");\n                    if(transformData != null) {\n                        Map<String, Object> map = mapper.readValue(transformData,\n                                new TypeReference<HashMap<String, Object>>() {\n                                });\n                        transform.put(\"transformData\", map);\n                    }\n                }\n                eventData.put(\"reqTransforms\", reqTransforms);\n            }\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdReqTransformRule",
      "createDate": "2016-03-31T00:36:29.806"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.806",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:182",
    "@version": 1,
    "@class": "Event",
    "eventId": 10183,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 10/03/15.\n */\npublic class UpdSubscriberEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updSubscriber(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdSubscriberEvRule",
      "createDate": "2016-03-31T00:36:29.822"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.822",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:183",
    "@version": 1,
    "@class": "Event",
    "eventId": 10184,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 07/11/14.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n * current R [owner] until workflow approval is done.\n *\n */\npublic class DelRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        int inputVersion = (int)data.get(\"@version\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only delete rule for host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex rule = DbService.getVertexByRid(graph, rid);\n                if(rule == null) {\n                    error = \"Rule with @rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    // check if the ruleClass contains the host.\n                    if(host != null && !ruleClass.contains(host)) {\n                        // you are not allowed to delete access control to the rule as it is not belong to the host.\n                        error = \"ruleClass is not owned by the host: \" + host;\n                        inputMap.put(\"responseCode\", 403);\n                    } else {\n                        int storedVersion = rule.getProperty(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"ruleClass\", ruleClass);\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.DelRuleRule",
      "createDate": "2016-03-31T00:36:29.833"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.833",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:184",
    "@version": 1,
    "@class": "Event",
    "eventId": 10185,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport net.engio.mbassy.bus.MBassador;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 07/11/14.\n */\npublic class DelRuleEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delRule(data);\n        // this is too notify readonly subsystem that the number of rules is changed.\n        // if will only send out event when isPublisher is true for the Rule. Change\n        // it from Rule Admin to enable it or disable it.\n        publishEvent(eventMap);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.DelRuleEvRule",
      "createDate": "2016-03-31T00:36:29.841"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.841",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:185",
    "@version": 1,
    "@class": "Event",
    "eventId": 10186,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n *\n * This is the rule that allow user to add brand new rule from rule admin interface. It will fail\n * if the rule exist in database. And normally, you only construct simple rules on the fly. Most of\n * the time, you should use impRuleRule instead.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n * current R [owner] until workflow is done\n *\n */\npublic class AddRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String ruleClass = (String)data.get(\"ruleClass\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add rule from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if(host != null && !ruleClass.contains(host)) {\n                    // you are not allowed to add rule as it is not belong to the host.\n                    error = \"ruleClass is not owned by the host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    // check if the rule exists or not\n                    Map<String, Object> ruleMap = getRuleByRuleClass(ruleClass);\n                    if(ruleMap != null) {\n                        error = \"ruleClass for the rule exists\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"host\", host);\n                        eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                        eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            // check if the rule exists or not.\n            Map<String, Object> ruleMap = getRuleByRuleClass((String)data.get(\"ruleClass\"));\n            if(ruleMap != null) {\n                error = \"ruleClass for the rule exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                // This is owner to import rule, notice that no host is passed in.\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n\n                eventData.put(\"ruleClass\", data.get(\"ruleClass\"));\n                eventData.put(\"sourceCode\", data.get(\"sourceCode\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.AddRuleRule",
      "createDate": "2016-03-31T00:36:29.849"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.849",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:186",
    "@version": 1,
    "@class": "Event",
    "eventId": 10187,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class GetRuleRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\") || roles.contains(\"admin\") || roles.contains(\"ruleAdmin\")) {\n            String host = (String) user.get(\"host\");\n            String hostRules = getRules(host);\n            if(hostRules != null) {\n                inputMap.put(\"result\", hostRules);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No rule can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } else {\n            inputMap.put(\"result\", \"Permission denied\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.GetRuleRule",
      "createDate": "2016-03-31T00:36:29.859"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.859",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:187",
    "@version": 1,
    "@class": "Event",
    "eventId": 10188,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/02/16.\n */\npublic class UpdResTransformEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updResTransform(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdResTransformEvRule",
      "createDate": "2016-03-31T00:36:29.870"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.870",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:188",
    "@version": 1,
    "@class": "Event",
    "eventId": 10189,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/03/15.\n */\npublic class UpdEtagEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updEtag(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdEtagEvRule",
      "createDate": "2016-03-31T00:36:29.877"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.877",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:189",
    "@version": 1,
    "@class": "Event",
    "eventId": 10190,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/03/15.\n */\npublic class UpdCorsEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updCors(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdCorsEvRule",
      "createDate": "2016-03-31T00:36:29.887"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.887",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:190",
    "@version": 1,
    "@class": "Event",
    "eventId": 10191,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 22/03/15.\n */\npublic class UpdSchemaEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updSchema(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdSchemaEvRule",
      "createDate": "2016-03-31T00:36:29.894"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.894",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:191",
    "@version": 1,
    "@class": "Event",
    "eventId": 10192,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 10/03/15.\n */\npublic class UpdSubscriberRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            eventData.put(\"isSubscriber\", data.get(\"isSubscriber\"));\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdSubscriberRule",
      "createDate": "2016-03-31T00:36:29.905"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.905",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:192",
    "@version": 1,
    "@class": "Event",
    "eventId": 10193,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 14/02/16.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n */\npublic class UpdResTransformRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            List<Map<String, Object>> resTransforms = (List)data.get(\"resTransforms\");\n            if(resTransforms != null) {\n                // convert transformData to map from string.\n                for(Map<String, Object> transform: resTransforms) {\n                    String transformData = (String)transform.get(\"transformData\");\n                    if(transformData != null) {\n                        Map<String, Object> map = mapper.readValue(transformData,\n                                new TypeReference<HashMap<String, Object>>() {\n                                });\n                        transform.put(\"transformData\", map);\n                    }\n                }\n                eventData.put(\"resTransforms\", resTransforms);\n            }\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdResTransformRule",
      "createDate": "2016-03-31T00:36:29.915"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.915",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:193",
    "@version": 1,
    "@class": "Event",
    "eventId": 10194,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/02/16.\n */\npublic class UpdReqTransformEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updReqTransform(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdReqTransformEvRule",
      "createDate": "2016-03-31T00:36:29.922"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.922",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:194",
    "@version": 1,
    "@class": "Event",
    "eventId": 10195,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/03/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdCorsRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            eventData.put(\"enableCors\", data.get(\"enableCors\"));\n            String corsHosts = (String)data.get(\"corsHosts\");\n            if(corsHosts != null && corsHosts.length() > 0) {\n                eventData.put(\"corsHosts\", corsHosts);\n            }\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdCorsRule",
      "createDate": "2016-03-31T00:36:29.935"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.935",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:195",
    "@version": 1,
    "@class": "Event",
    "eventId": 10196,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by hus5 on 3/10/2015.\n */\npublic class UpdPublisherEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPublisher(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdPublisherEvRule",
      "createDate": "2016-03-31T00:36:29.942"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.942",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:196",
    "@version": 1,
    "@class": "Event",
    "eventId": 10197,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 31/01/15.\n *\n * AccessLevel R [user]\n *\n */\npublic class GetRuleDropdownRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        if(user == null) {\n            inputMap.put(\"result\", \"Login is required\");\n            inputMap.put(\"responseCode\", 401);\n            return false;\n        } else {\n            String host = (String) user.get(\"host\");\n            String hostRuleDropdown = getRuleDropdown(host);\n            if(hostRuleDropdown != null) {\n                inputMap.put(\"result\", hostRuleDropdown);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No rule can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.GetRuleDropdownRule",
      "createDate": "2016-03-31T00:36:29.955"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.955",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:197",
    "@version": 1,
    "@class": "Event",
    "eventId": 10198,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/03/15.\n *\n * AccessLevel R [owner, admin, ruleAdmin]\n *\n */\npublic class UpdEtagRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        String error = updateValidation(inputMap, eventData);\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            eventData.put(\"enableEtag\", data.get(\"enableEtag\"));\n            String cacheControl = (String)data.get(\"cacheControl\");\n            if(cacheControl != null) {\n                eventData.put(\"cacheControl\", cacheControl);\n            }\n            eventData.put(\"updateDate\", new java.util.Date());\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdEtagRule",
      "createDate": "2016-03-31T00:36:29.962"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.962",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:198",
    "@version": 1,
    "@class": "Event",
    "eventId": 10199,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.rule;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 08/10/14.\n */\npublic class UpdRuleEvRule extends AbstractRuleRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updRule(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.rule.UpdRuleEvRule",
      "createDate": "2016-03-31T00:36:29.972"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.972",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:199",
    "@version": 1,
    "@class": "Event",
    "eventId": 10200,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule;\n\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 25/04/15.\n *\n * Moved from blog, news and forum as this can be share by other category.\n *\n */\npublic abstract class BranchRule extends AbstractRule implements Rule {\n\n    static final Logger logger = LoggerFactory.getLogger(BranchRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    public boolean addBranch (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String categoryId = (String) data.get(\"categoryId\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            error = \"You can only add \" + branchType + \" from host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                ODocument branch = getODocumentByHostId(graph, branchType + \"HostIdIdx\", host, categoryId);\n                if(branch != null) {\n                    error = \"categoryId \" + categoryId + \" exists on host \" + host;\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    // make sure parent exists if it is not empty.\n                    List<String> parentRids = (List<String>)data.get(\"in_Own\");\n                    if(parentRids != null && parentRids.size() == 1) {\n                        Vertex parent = DbService.getVertexByRid(graph, parentRids.get(0));\n                        if(parent == null) {\n                            error = \"Parent with @rid \" + parentRids.get(0) + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                        } else {\n                            // convert parent from @rid to id\n                            List in_Own = new ArrayList();\n                            in_Own.add(parent.getProperty(\"categoryId\"));\n                            eventData.put(\"in_Own\", in_Own);\n                        }\n                    }\n                    if(error == null) {\n                        // make sure all children exist if there are any.\n                        // and make sure all children have empty parent.\n                        List<String> childrenRids = (List<String>)data.get(\"out_Own\");\n                        if(childrenRids != null && childrenRids.size() > 0) {\n                            List<String> out_Own = new ArrayList<String>();\n                            for(String childRid: childrenRids) {\n                                if(childRid != null) {\n                                    if(parentRids!= null && childRid.equals(parentRids.get(0))) {\n                                        error = \"Parent shows up in the Children list\";\n                                        inputMap.put(\"responseCode\", 400);\n                                        break;\n                                    }\n                                    Vertex child = DbService.getVertexByRid(graph, childRid);\n                                    if(child == null) {\n                                        error = \"Child with @rid \" + childRid + \" cannot be found.\";\n                                        inputMap.put(\"responseCode\", 404);\n                                        break;\n                                    } else {\n                                        out_Own.add(child.getProperty(\"categoryId\"));\n                                    }\n                                }\n                            }\n                            eventData.put(\"out_Own\", out_Own);\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as one of branch has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean addBranchEv (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addBranchDb(branchType, data);\n        return true;\n    }\n\n    protected void addBranchDb(String branchType, Map<String, Object> data) throws Exception {\n        String className = branchType.substring(0, 1).toUpperCase() + branchType.substring(1);\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            List<String> parentIds = (List<String>)data.remove(\"in_Own\");\n            List<String> childrenIds = (List<String>)data.remove(\"out_Own\");\n            OrientVertex branch = graph.addVertex(\"class:\" + className, data);\n            createUser.addEdge(\"Create\", branch);\n            // parent\n            if(parentIds != null && parentIds.size() == 1) {\n                OrientVertex parent = getBranchByHostId(graph, branchType, host, parentIds.get(0));\n                if(parent != null) {\n                    parent.addEdge(\"Own\", branch);\n                }\n            }\n            // children\n            if(childrenIds != null) {\n                for(String childId: childrenIds) {\n                    OrientVertex child = getBranchByHostId(graph, branchType, host, childId);\n                    if(child != null) {\n                        branch.addEdge(\"Own\", child);\n                    }\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean delBranch (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String userHost = (String)user.get(\"host\");\n            if(userHost != null && !userHost.equals(host)) {\n                error = \"You can only delete \" + branchType + \" from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                Vertex branch = DbService.getVertexByRid(graph, rid);\n                if(branch != null) {\n                    // Do no check if there are any children for the branch. Just delete it. The edge\n                    // will be deleted automatically and children can be linked to other branch later.\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", host);\n                    eventData.put(\"categoryId\", branch.getProperty(\"categoryId\"));\n                } else {\n                    error = \"@rid \" + rid + \" doesn't exist on host \" + host;\n                    inputMap.put(\"responseCode\", 404);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as one of branch has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean delBranchEv (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delBranchDb(branchType, data);\n        return true;\n    }\n\n    protected void delBranchDb(String branchType, Map<String, Object> data) throws Exception {\n        String className = branchType.substring(0, 1).toUpperCase() + branchType.substring(1);\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex branch = getBranchByHostId(graph, branchType, (String)data.get(\"host\"), (String)data.get(\"categoryId\"));\n            if(branch != null) {\n                graph.removeVertex(branch);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean updBranch (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String userHost = (String)user.get(\"host\");\n            if(userHost != null && !userHost.equals(host)) {\n                inputMap.put(\"result\", \"You can only update \" + branchType + \" from host: \" + host);\n                inputMap.put(\"responseCode\", 403);\n                return false;\n            } else {\n                Vertex branch = DbService.getVertexByRid(graph, rid);\n                if(branch != null) {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                    eventData.put(\"updateDate\", new java.util.Date());\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n\n                    // make sure parent exists if it is not empty.\n                    List parentRids = (List)data.get(\"in_Own\");\n                    if(parentRids != null) {\n                        if(rid.equals(parentRids.get(0))) {\n                            inputMap.put(\"result\", \"parent @rid is the same as current @rid\");\n                            inputMap.put(\"responseCode\", 400);\n                            return false;\n                        }\n                        Vertex parent = DbService.getVertexByRid(graph, (String)parentRids.get(0));\n                        if(parent != null) {\n                            String storedParentRid = null;\n                            String storedParentId = null;\n                            for (Vertex vertex : (Iterable<Vertex>) branch.getVertices(Direction.IN, \"Own\")) {\n                                // we only expect one parent here.\n                                storedParentRid = vertex.getId().toString();\n                                storedParentId = vertex.getProperty(\"categoryId\");\n                            }\n                            if(parentRids.get(0).equals(storedParentRid)) {\n                                // same parent, do nothing\n                            } else {\n                                if(storedParentId != null) eventData.put(\"delParentId\", storedParentId);\n                                eventData.put(\"addParentId\", parent.getProperty(\"categoryId\"));\n                            }\n                        } else {\n                            inputMap.put(\"result\", \"Parent with @rid \" + parentRids.get(0) + \" cannot be found\");\n                            inputMap.put(\"responseCode\", 404);\n                            return false;\n                        }\n                    }\n                    // make sure all children exist if there are any.\n                    // and make sure all children have empty parent.\n                    List<String> childrenRids = (List<String>)data.get(\"out_Own\");\n                    if(childrenRids != null && childrenRids.size() > 0) {\n                        List<String> childrenIds = new ArrayList<String>();\n                        Set<String> inputChildren = new HashSet<String>();\n                        for(String childRid: childrenRids) {\n                            if(parentRids != null && childRid.equals(parentRids.get(0))) {\n                                inputMap.put(\"result\", \"Parent shows up in the Children list\");\n                                inputMap.put(\"responseCode\", 400);\n                                return false;\n                            }\n                            if(childRid.equals(rid)) {\n                                inputMap.put(\"result\", \"Current object shows up in the Children list\");\n                                inputMap.put(\"responseCode\", 400);\n                                return false;\n                            }\n                            Vertex child = DbService.getVertexByRid(graph, childRid);\n                            if(child == null) {\n                                inputMap.put(\"result\", \"Child with @rid \" + childRid + \" cannot be found\");\n                                inputMap.put(\"responseCode\", 404);\n                                return false;\n                            } else {\n                                inputChildren.add(child.getProperty(\"categoryId\"));\n                            }\n                        }\n                        Set<String> storedChildren = new HashSet<String>();\n                        for (Vertex vertex : (Iterable<Vertex>) branch.getVertices(Direction.OUT, \"Own\")) {\n                            storedChildren.add(vertex.getProperty(\"categoryId\"));\n                        }\n\n                        Set<String> addChildren = new HashSet<String>(inputChildren);\n                        Set<String> delChildren = new HashSet<String>(storedChildren);\n                        addChildren.removeAll(storedChildren);\n                        delChildren.removeAll(inputChildren);\n\n                        if(addChildren.size() > 0) eventData.put(\"addChildren\", addChildren);\n                        if(delChildren.size() > 0) eventData.put(\"delChildren\", delChildren);\n                    }\n                } else {\n                    inputMap.put(\"result\",  \"@rid \" + rid + \" cannot be found\");\n                    inputMap.put(\"responseCode\", 404);\n                    return false;\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        // update the branch tree as one of branch has changed.\n        Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n        if(cache != null) {\n            cache.remove(host + branchType);\n        }\n        return true;\n    }\n\n    public boolean updBranchEv (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updBranchDb(branchType, data);\n        return true;\n    }\n\n    public OrientVertex getBranchByHostId(OrientGraph graph, String branchType, String host, String categoryId) {\n        OrientVertex branch = null;\n        OIndex<?> hostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(branchType + \"HostIdIdx\");\n        OCompositeKey key = new OCompositeKey(host, categoryId);\n        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n        if (oid != null) {\n            branch = graph.getVertex(oid.getRecord());\n        }\n        return branch;\n    }\n\n    protected void updBranchDb(String branchType, Map<String, Object> data) throws Exception {\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex branch = getBranchByHostId(graph, branchType, host, (String)data.get(\"categoryId\"));\n            if (branch != null) {\n                if(data.get(\"description\") != null) {\n                    branch.setProperty(\"description\", data.get(\"description\"));\n                } else {\n                    branch.removeProperty(\"description\");\n                }\n                if(data.get(\"attributes\") != null) {\n                    branch.setProperty(\"attributes\", data.get(\"attributes\"));\n                } else {\n                    branch.removeProperty(\"attributes\");\n                }\n                branch.setProperty(\"updateDate\", data.get(\"updateDate\"));\n\n                // parent\n                String delParentId = (String)data.get(\"delParentId\");\n                if(delParentId != null) {\n                    for (Edge edge : (Iterable<Edge>) branch.getEdges(Direction.IN, \"Own\")) {\n                        graph.removeEdge(edge);\n                    }\n                }\n                String addParentId = (String)data.get(\"addParentId\");\n                if(addParentId != null) {\n                    OrientVertex parent = getBranchByHostId(graph, branchType, host, addParentId);\n                    if (parent != null) {\n                        parent.addEdge(\"Own\", branch);\n                    }\n                }\n\n                // handle addChildren and delChildren\n                Set<String> addChildren = (Set)data.get(\"addChildren\");\n                if(addChildren != null) {\n                    for(String childId: addChildren) {\n                        OrientVertex vertex = getBranchByHostId(graph, branchType, host, childId);\n                        branch.addEdge(\"Own\", vertex);\n                    }\n                }\n                Set<String> delChildren = (Set)data.get(\"delChildren\");\n                if(delChildren != null) {\n                    for(String childId: delChildren) {\n                        OrientVertex vertex = getBranchByHostId(graph, branchType, host, childId);\n                        for (Edge edge : (Iterable<Edge>) branch.getEdges(Direction.OUT, \"Own\")) {\n                            if(edge.getVertex(Direction.IN).equals(vertex)) graph.removeEdge(edge);\n                        }\n                    }\n                }\n                // updateUser\n                updateUser.addEdge(\"Update\", branch);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean downBranch (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex branch = (OrientVertex)DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(branch == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has down voted the branch before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(branch, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(branch)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have down voted the \" + branchType + \" already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", host);\n                    eventData.put(\"categoryId\", branch.getProperty(\"categoryId\"));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as one of branch has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean downBranchEv (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        downBranchDb(branchType, data);\n        return true;\n    }\n\n    protected void downBranchDb(String branchType, Map<String, Object> data) throws Exception {\n        String className = branchType.substring(0, 1).toUpperCase() + branchType.substring(1);\n        String index = className + \".categoryId\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex branch = (OrientVertex)graph.getVertexByKey(index, data.get(\"categoryId\"));\n            if(branch != null && updateUser != null) {\n                // remove UpVote edge if there is.\n                for (Edge edge : updateUser.getEdges(branch, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(branch)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"DownVote\", branch);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean upBranch (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex branch = (OrientVertex)DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(branch == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has up voted the branch before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(branch, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(branch)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have up voted the \" + branchType + \" already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", host);\n                    eventData.put(\"categoryId\", branch.getProperty(\"categoryId\"));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as one of branch has changed.\n            Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n            if(cache != null) {\n                cache.remove(host + branchType);\n            }\n            return true;\n        }\n    }\n\n    public boolean upBranchEv (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upBranchDb(branchType, data);\n        return true;\n    }\n\n    protected void upBranchDb(String branchType, Map<String, Object> data) throws Exception {\n        String className = branchType.substring(0, 1).toUpperCase() + branchType.substring(1);\n        String index = className + \".categoryId\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex branch = (OrientVertex)graph.getVertexByKey(index, data.get(\"categoryId\"));\n            if(branch != null && updateUser != null) {\n                // remove DownVote edge if there is.\n                for (Edge edge : updateUser.getEdges(branch, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(branch)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"UpVote\", branch);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    /**\n     * Only this method needs to be cached as it is called by the site home rendering. Other get methods\n     * are for admin only and no need to be cached.\n     * @param branchType\n     * @param objects\n     * @return\n     * @throws Exception\n     */\n    public boolean getBranchTree(String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String json = null;\n        Map<String, Object> branchMap = ServiceLocator.getInstance().getMemoryImage(\"branchMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)branchMap.get(\"treeCache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            branchMap.put(\"treeCache\", cache);\n        } else {\n            json = (String)cache.get(host + branchType);\n        }\n        if(json == null) {\n            json = getBranchTreeDb(branchType, host);\n            if(json != null) cache.put(host + branchType, json);\n        }\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No document can be found\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n\n    protected String getBranchTreeDb(String branchType, String host) {\n        String json = null;\n        String sql = \"SELECT FROM \" + branchType + \" WHERE host = ? and in_Own IS NULL ORDER BY id\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = graph.getRawGraph().command(query).execute(host);\n            if(docs.size() > 0) {\n                json = OJSONWriter.listToJSON(docs, \"rid,fetchPlan:[*]in_Create:-2 [*]out_Create:-2 [*]in_Update:-2 [*]out_Update:-2 [*]in_HasPost:-2 [*]out_HasPost:-2 [*]out_Own:5\");\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    public boolean getBranch(String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String)data.get(\"host\");\n        Object userHost = user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            inputMap.put(\"result\", \"You can only get \" + branchType + \" from host: \" + host);\n            inputMap.put(\"responseCode\", 403);\n            return false;\n        } else {\n            String docs = getBranchDb(branchType, host);\n            if(docs != null) {\n                inputMap.put(\"result\", docs);\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No document can be found\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        }\n    }\n\n    protected String getBranchDb(String branchType, String host) {\n        String json = null;\n        String sql = \"SELECT FROM \" + branchType + \" WHERE host = ? ORDER BY createDate\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = graph.getRawGraph().command(query).execute(host);\n            if(docs.size() > 0) {\n                json = OJSONWriter.listToJSON(docs, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    public boolean getBranchDropdown (String branchType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String docs = getBranchDropdownDb(branchType, host);\n        if(docs != null) {\n            inputMap.put(\"result\", docs);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No document can be found\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n\n    protected String getBranchDropdownDb(String branchType, String host) {\n        String json = null;\n        String sql = \"SELECT FROM \" + branchType + \" WHERE host = ? ORDER BY categoryId\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = graph.getRawGraph().command(query).execute(host);\n            if(docs.size() > 0) {\n                List<Map<String, String>> list = new ArrayList<Map<String, String>>();\n                for(ODocument doc: docs) {\n                    Map<String, String> map = new HashMap<String, String>();\n                    map.put(\"label\", (String)doc.field(\"categoryId\"));\n                    map.put(\"value\", doc.field(\"@rid\").toString());\n                    list.add(map);\n                }\n                json = mapper.writeValueAsString(list);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.BranchRule",
      "createDate": "2016-03-31T00:36:29.982"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.982",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:200",
    "@version": 1,
    "@class": "Event",
    "eventId": 10201,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.config;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/02/16.\n */\npublic class DelHostConfigEvRule extends AbstractConfigRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delHostConfigEv(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.config.DelHostConfigEvRule",
      "createDate": "2016-03-31T00:36:29.990"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.990",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:201",
    "@version": 1,
    "@class": "Event",
    "eventId": 10202,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.config;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 2/18/2016.\n *\n * AccessLevel R [owner]\n */\npublic class GetAllConfigRule extends AbstractConfigRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String hostConfigs = getAllConfig();\n        if(hostConfigs != null) {\n            inputMap.put(\"result\", hostConfigs);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No config can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.config.GetAllConfigRule",
      "createDate": "2016-03-31T00:36:29.997"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:29.997",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:202",
    "@version": 1,
    "@class": "Event",
    "eventId": 10203,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.config;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.jayway.jsonpath.JsonPath;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 2/18/2016.\n */\npublic abstract class AbstractConfigRule extends AbstractRule implements Rule {\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n    static final Logger logger = LoggerFactory.getLogger(AbstractConfigRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    public boolean addConfig (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String configId = (String) data.get(\"configId\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex config = graph.getVertexByKey(\"Config.configId\", configId);\n            if(config != null) {\n                error = \"configId \" + configId + \" exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n                // remove host\n                eventData.remove(\"host\");\n                // replace properties\n                String properties = (String)data.get(\"properties\");\n                if(properties != null) {\n                    Map<String, Object> map = mapper.readValue(properties,\n                            new TypeReference<HashMap<String, Object>>() {\n                            });\n                    eventData.put(\"properties\", map);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public boolean addHostConfig (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String configId = (String) data.get(\"configId\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            error = \"You can only add config from host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                ODocument config = getODocumentByHostId(graph, \"configHostIdIdx\", host, configId);\n                if(config != null) {\n                    error = \"configId \" + configId + \" exists on host \" + host;\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                    // replace properties\n                    String properties = (String)data.get(\"properties\");\n                    if(properties != null) {\n                        Map<String, Object> map = mapper.readValue(properties,\n                                new TypeReference<HashMap<String, Object>>() {\n                                });\n                        eventData.put(\"properties\", map);\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    public boolean addConfigEv(Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addConfigDb(data);\n        return true;\n    }\n\n    public boolean addHostConfigEv(Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addHostConfigDb(data);\n        return true;\n    }\n\n    protected void addConfigDb(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex config = graph.addVertex(\"class:Config\", data);\n            createUser.addEdge(\"Create\", config);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void addHostConfigDb(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex hostConfig = graph.addVertex(\"class:HostConfig\", data);\n            createUser.addEdge(\"Create\", hostConfig);\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean delConfig(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String configId = null;\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex config = DbService.getVertexByRid(graph, rid);\n            if(config != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                configId = config.getProperty(\"configId\");\n                eventData.put(\"configId\", configId);\n            } else {\n                error = \"@rid \" + rid + \" doesn't exist on host \" + host;\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            Map<String, Object> configMap = ServiceLocator.getInstance().getMemoryImage(\"configMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)configMap.get(\"cache\");\n            if(cache != null) {\n                cache.clear();\n            }\n            return true;\n        }\n    }\n\n    public boolean delHostConfig(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String configId = null;\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String userHost = (String)user.get(\"host\");\n            if(userHost != null && !userHost.equals(host)) {\n                error = \"You can only delete config from host: \" + host;\n                inputMap.put(\"responseCode\", 401);\n            } else {\n                Vertex config = DbService.getVertexByRid(graph, rid);\n                if(config != null) {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", host);\n                    configId = config.getProperty(\"configId\");\n                    eventData.put(\"configId\", configId);\n                } else {\n                    error = \"@rid \" + rid + \" doesn't exist on host \" + host;\n                    inputMap.put(\"responseCode\", 404);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            // update the branch tree as one of branch has changed.\n            Map<String, Object> configMap = ServiceLocator.getInstance().getMemoryImage(\"configMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)configMap.get(\"cache\");\n            if(cache != null) {\n                cache.clear();\n            }\n            return true;\n        }\n    }\n\n    public boolean delConfigEv(Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delConfigDb(data);\n        return true;\n    }\n\n    public boolean delHostConfigEv(Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delHostConfigDb(data);\n        return true;\n    }\n\n    protected void delConfigDb(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex config = graph.getVertexByKey(\"Config.configId\", (String)data.get(\"configId\"));\n            if(config != null) {\n                graph.removeVertex(config);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void delHostConfigDb(Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex config = getConfigByHostId(graph, (String)data.get(\"host\"), (String)data.get(\"configId\"));\n            if(config != null) {\n                graph.removeVertex(config);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public OrientVertex getConfigByHostId(OrientGraph graph, String host, String configId) {\n        OrientVertex config = null;\n        OIndex<?> hostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"configHostIdIdx\");\n        OCompositeKey key = new OCompositeKey(host, configId);\n        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n        if (oid != null) {\n            config = graph.getVertex(oid.getRecord());\n        }\n        return config;\n    }\n\n    public boolean updConfig (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String configId = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex config = DbService.getVertexByRid(graph, rid);\n            if(config != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                eventData.put(\"updateDate\", new java.util.Date());\n                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                configId = config.getProperty(\"configId\");\n                eventData.remove(\"host\");\n                String properties = (String)data.get(\"properties\");\n                if(properties != null) {\n                    Map<String, Object> map = mapper.readValue(properties,\n                            new TypeReference<HashMap<String, Object>>() {\n                            });\n                    eventData.put(\"properties\", map);\n                }\n            } else {\n                inputMap.put(\"result\",  \"@rid \" + rid + \" cannot be found\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> configMap = ServiceLocator.getInstance().getMemoryImage(\"configMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)configMap.get(\"cache\");\n        if(cache != null) {\n            cache.clear();\n        }\n        return true;\n    }\n\n    public boolean updHostConfig (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String host = (String) data.get(\"host\");\n        String configId = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String userHost = (String)user.get(\"host\");\n            if(userHost != null && !userHost.equals(host)) {\n                inputMap.put(\"result\", \"You can only update config from host: \" + host);\n                inputMap.put(\"responseCode\", 401);\n                return false;\n            } else {\n                Vertex config = DbService.getVertexByRid(graph, rid);\n                if(config != null) {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                    eventData.put(\"updateDate\", new java.util.Date());\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    configId = config.getProperty(\"configId\");\n\n                    String properties = (String)data.get(\"properties\");\n                    if(properties != null) {\n                        Map<String, Object> map = mapper.readValue(properties,\n                                new TypeReference<HashMap<String, Object>>() {\n                                });\n                        eventData.put(\"properties\", map);\n                    }\n                } else {\n                    inputMap.put(\"result\",  \"@rid \" + rid + \" cannot be found\");\n                    inputMap.put(\"responseCode\", 404);\n                    return false;\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> configMap = ServiceLocator.getInstance().getMemoryImage(\"configMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)configMap.get(\"cache\");\n        if(cache != null) {\n            cache.clear();\n        }\n        return true;\n    }\n\n    public boolean updConfigEv (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updConfigDb(data);\n        return true;\n    }\n\n    public boolean updHostConfigEv (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updHostConfigDb(data);\n        return true;\n    }\n\n    protected void updConfigDb(Map<String, Object> data) throws Exception {\n        String configId = (String)data.get(\"configId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            Vertex config = graph.getVertexByKey(\"Config.configId\", configId);\n            if(config != null) {\n                if(data.get(\"description\") != null) {\n                    config.setProperty(\"description\", data.get(\"description\"));\n                } else {\n                    config.removeProperty(\"description\");\n                }\n                if(data.get(\"properties\") != null) {\n                    config.setProperty(\"properties\", data.get(\"properties\"));\n                } else {\n                    config.removeProperty(\"properties\");\n                }\n                config.setProperty(\"updateDate\", data.get(\"updateDate\"));\n                // updateUser\n                updateUser.addEdge(\"Update\", config);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void updHostConfigDb(Map<String, Object> data) throws Exception {\n        String host = (String)data.get(\"host\");\n        String configId = (String)data.get(\"configId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex config = getConfigByHostId(graph, host, configId);\n            if(config != null) {\n                if(data.get(\"description\") != null) {\n                    config.setProperty(\"description\", data.get(\"description\"));\n                } else {\n                    config.removeProperty(\"description\");\n                }\n                if(data.get(\"properties\") != null) {\n                    config.setProperty(\"properties\", data.get(\"properties\"));\n                } else {\n                    config.removeProperty(\"properties\");\n                }\n                config.setProperty(\"updateDate\", data.get(\"updateDate\"));\n                // updateUser\n                updateUser.addEdge(\"Update\", config);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public String getConfig(String host, String configId, String jsonPath) throws Exception {\n        String json  = null;\n        jsonPath = jsonPath == null? \"\" : jsonPath;\n        Map<String, Object> configMap = ServiceLocator.getInstance().getMemoryImage(\"configMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)configMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            configMap.put(\"cache\", cache);\n        } else {\n            json = (String)cache.get(host + configId + jsonPath);\n            if(json == null) {\n                // fall back to system config instead of host config\n                json = (String) cache.get(configId + jsonPath);\n            }\n        }\n        if(json == null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                OrientVertex config = getConfigByHostId(graph, host, configId);\n                if(config != null) {\n                    json = config.getRecord().toJSON();\n                    // now we need to apply jsonpath.\n                    if(jsonPath.length() > 0) {\n                        Object object = JsonPath.parse(json).read(jsonPath);\n                        if(object instanceof String) {\n                            json = (String)object;\n                        } else {\n                            json = mapper.writeValueAsString(object);\n                        }\n                    }\n                    cache.put(host + configId + jsonPath, json);\n                } else {\n                    // get system config here.\n                    config = (OrientVertex)graph.getVertexByKey(\"Config.configId\", configId);\n                    if(config != null) {\n                        json = config.getRecord().toJSON();\n                        if(jsonPath.length() > 0) {\n                            json = mapper.writeValueAsString(JsonPath.parse(json).read(jsonPath));\n                        }\n                        cache.put(configId + jsonPath, json);\n                    }\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        return json;\n    }\n\n    protected String getAllConfig() {\n        String sql = \"SELECT FROM Config\";\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> configs = graph.getRawGraph().command(query).execute();\n            if(configs != null && configs.size() > 0) {\n                json = OJSONWriter.listToJSON(configs, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getAllHostConfig(String host) {\n        String sql = \"SELECT FROM HostConfig WHERE host = ?\";\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> configs = graph.getRawGraph().command(query).execute(host);\n            if(configs != null && configs.size() > 0) {\n                json = OJSONWriter.listToJSON(configs, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.config.AbstractConfigRule",
      "createDate": "2016-03-31T00:36:30.006"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.006",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:203",
    "@version": 1,
    "@class": "Event",
    "eventId": 10204,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.config;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/02/16.\n *\n * AccessLevel R [owner, admin, configAdmin]\n */\npublic class DelHostConfigRule extends AbstractConfigRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delHostConfig(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.config.DelHostConfigRule",
      "createDate": "2016-03-31T00:36:30.014"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.014",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:204",
    "@version": 1,
    "@class": "Event",
    "eventId": 10205,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.config;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 2/18/2016.\n */\npublic class DelConfigEvRule extends AbstractConfigRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delConfigEv(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.config.DelConfigEvRule",
      "createDate": "2016-03-31T00:36:30.020"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.020",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:205",
    "@version": 1,
    "@class": "Event",
    "eventId": 10206,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.config;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/02/16.\n */\npublic class AddHostConfigEvRule extends AbstractConfigRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addHostConfigEv(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.config.AddHostConfigEvRule",
      "createDate": "2016-03-31T00:36:30.028"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.028",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:206",
    "@version": 1,
    "@class": "Event",
    "eventId": 10207,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.config;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 2/18/2016.\n */\npublic class AddConfigEvRule extends AbstractConfigRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addConfigEv(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.config.AddConfigEvRule",
      "createDate": "2016-03-31T00:36:30.035"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.035",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:207",
    "@version": 1,
    "@class": "Event",
    "eventId": 10208,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.config;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/02/16.\n *\n * AccessLevel R [owner, admin, configAdmin]\n */\npublic class UpdHostConfigRule extends AbstractConfigRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updHostConfig(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.config.UpdHostConfigRule",
      "createDate": "2016-03-31T00:36:30.042"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.042",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:208",
    "@version": 1,
    "@class": "Event",
    "eventId": 10209,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.config;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 2/18/2016.\n *\n * The lookup sequence is host then system.\n *\n * In some cases, the config values need to be accessed in the dropdown list. so the\n * access level is A (anyone)\n *\n * AccessLevel: A\n */\npublic class GetConfigRule extends AbstractConfigRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String configId = (String)data.get(\"configId\");\n        String jsonPath = (String)data.get(\"jsonPath\");\n        String json = getConfig(host, configId, jsonPath);\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Config with \" + configId + \" cannot be found on host \" + host);\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.config.GetConfigRule",
      "createDate": "2016-03-31T00:36:30.051"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.051",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:209",
    "@version": 1,
    "@class": "Event",
    "eventId": 10210,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.config;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 2/18/2016.\n *\n * AccessLevel R [owner]\n *\n */\npublic class DelConfigRule extends AbstractConfigRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delConfig(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.config.DelConfigRule",
      "createDate": "2016-03-31T00:36:30.058"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.058",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:210",
    "@version": 1,
    "@class": "Event",
    "eventId": 10211,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.config;\n\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 2/18/2016.\n */\npublic class UpdConfigEvRule extends AbstractConfigRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updConfigEv(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.config.UpdConfigEvRule",
      "createDate": "2016-03-31T00:36:30.065"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.065",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:211",
    "@version": 1,
    "@class": "Event",
    "eventId": 10212,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.config;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 2/18/2016.\n *\n * Access Level R [owner]\n *\n */\npublic class AddConfigRule extends AbstractConfigRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addConfig(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.config.AddConfigRule",
      "createDate": "2016-03-31T00:36:30.072"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.072",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:212",
    "@version": 1,
    "@class": "Event",
    "eventId": 10213,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.config;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/02/16.\n */\npublic class UpdHostConfigEvRule extends AbstractConfigRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updHostConfigEv(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.config.UpdHostConfigEvRule",
      "createDate": "2016-03-31T00:36:30.079"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.079",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:213",
    "@version": 1,
    "@class": "Event",
    "eventId": 10214,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.config;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 28/02/16.\n *\n * AccessLevel R [owner, admin, configAdmin]\n */\npublic class GetAllHostConfigRule extends AbstractConfigRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String host = (String) data.get(\"host\");\n        String hostConfigs = getAllHostConfig(host);\n        if(hostConfigs != null) {\n            inputMap.put(\"result\", hostConfigs);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No config can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.config.GetAllHostConfigRule",
      "createDate": "2016-03-31T00:36:30.088"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.088",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:214",
    "@version": 1,
    "@class": "Event",
    "eventId": 10215,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.config;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 28/02/16.\n *\n * Access Level R [owner, admin, configAdmin]\n */\npublic class AddHostConfigRule extends AbstractConfigRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addHostConfig(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.config.AddHostConfigRule",
      "createDate": "2016-03-31T00:36:30.097"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.097",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:215",
    "@version": 1,
    "@class": "Event",
    "eventId": 10216,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.config;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 2/18/2016.\n *\n * AccessLevel R [owner]\n *\n */\npublic class UpdConfigRule extends AbstractConfigRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updConfig(objects);\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.config.UpdConfigRule",
      "createDate": "2016-03-31T00:36:30.124"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.124",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:216",
    "@version": 1,
    "@class": "Event",
    "eventId": 10217,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.product;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.post.AbstractPostRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 02/02/16.\n *\n * Get a product from Product table in case product page is accessed by bookmark url\n *\n * AccessLevel A Anybody\n *\n */\npublic class GetProductRule extends AbstractProductRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String entityId = (String)data.get(\"entityId\");\n        if(entityId != null) {\n            String entityRid = getEntityRid(\"Product\", entityId);\n            Map<String, Object> result = getCategoryEntity(entityRid);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            inputMap.put(\"result\", \"entityId is required.\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.GetProductRule",
      "createDate": "2016-03-31T00:36:30.135"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.135",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:217",
    "@version": 1,
    "@class": "Event",
    "eventId": 10218,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.product;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/04/15.\n */\npublic class UpProductEvRule extends AbstractProductRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upVoteProduct(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.UpProductEvRule",
      "createDate": "2016-03-31T00:36:30.149"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.149",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:218",
    "@version": 1,
    "@class": "Event",
    "eventId": 10219,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.product;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/14/2014.\n */\npublic abstract class AbstractProductRule extends AbstractBfnRule implements Rule {\n    ObjectMapper mapper = ServiceLocator.getInstance().getMapper();\n    static final Logger logger = LoggerFactory.getLogger(AbstractProductRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void upVoteProduct(Map<String, Object> data) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex) graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex product = (OrientVertex) graph.getVertexByKey(\"Product.entityId\", data.get(\"entityId\"));\n            if (product != null && updateUser != null) {\n                // remove DownVote edge if there is.\n                for (Edge edge : updateUser.getEdges(product, Direction.OUT, \"DownVote\")) {\n                    if (edge.getVertex(Direction.IN).equals(product)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"UpVote\", product);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    protected void downVoteProduct(Map<String, Object> data) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex updateUser = (OrientVertex) graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex product = (OrientVertex) graph.getVertexByKey(\"Product.entityId\", data.get(\"entityId\"));\n            if (product != null && updateUser != null) {\n                // remove UpVote edge if there is.\n                for (Edge edge : updateUser.getEdges(product, Direction.OUT, \"UpVote\")) {\n                    if (edge.getVertex(Direction.IN).equals(product)) graph.removeEdge(edge);\n                }\n                updateUser.addEdge(\"DownVote\", product);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    /*\n    protected ODocument getProductByHostName(String host, String name) {\n        ODocument product = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OIndex<?> hostNameIdx = db.getMetadata().getIndexManager().getIndex(\"hostNameIdx\");\n            // this is a unique index, so it retrieves a OIdentifiable\n            OCompositeKey key = new OCompositeKey(host, name);\n            OIdentifiable oid = (OIdentifiable) hostNameIdx.get(key);\n            if (oid != null) {\n                product = (ODocument)oid.getRecord();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return product;\n    }\n\n    protected ODocument addProduct(Map<String, Object> data, String userId) throws Exception {\n        ODocument product = null;\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            productMap.put(\"cache\", cache);\n        }\n\n        OSchema schema = db.getMetadata().getSchema();\n        try {\n            db.begin();\n            product = new ODocument(schema.getClass(\"Product\"));\n            product.field(\"host\", data.get(\"host\"));\n            product.field(\"name\", data.get(\"name\"));\n            product.field(\"attributes\", data.get(\"attributes\"));\n            java.util.Date d = new java.util.Date();\n            product.field(\"createDate\", d);\n            product.field(\"updateDate\", d);\n            product.field(\"createUser\", userId);\n            product.save();\n            cache.put(product.field(\"@rid\").toString(), product);\n            String categoryRid = (String)data.get(\"categoryRid\");\n            if(categoryRid != null) {\n                // get the category and update entities list\n                ODocument category = getCategoryByRid(categoryRid);\n                List entities = category.field(\"entities\");\n                if(entities == null) {\n                    entities = new ArrayList();\n                }\n                entities.add(product);\n                category.field(\"entities\", entities);\n                category.save();\n            }\n            db.commit();\n        } catch (Exception e) {\n            db.rollback();\n            e.printStackTrace();\n            throw e;\n        } finally {\n            db.close();\n        }\n        return product;\n    }\n\n    protected void delProduct(String productRid) throws Exception {\n        ODocument product = DbService.delODocumentByRid(productRid);\n        // rebuild cache in memory.\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        // update central cache\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(productRid);\n        }\n    }\n\n    protected void updProduct(String productRid, Map<String, Object> data) throws Exception {\n        ODocument product = getProductByRid(productRid);\n        if(product != null) {\n            product.field(\"name\", data.get(\"name\"));\n            product.field(\"attributes\", data.get(\"attributes\"));\n            product.field(\"updateDate\", new java.util.Date());\n            product.save();\n        }\n    }\n\n    protected List<ODocument> searchProductDb(Map<String, Object> criteria) {\n        List<ODocument> products = null;\n        StringBuilder sql = new StringBuilder(\"SELECT FROM Product \");\n        String whereClause = DbService.getWhereClause(criteria);\n        if(whereClause != null && whereClause.length() > 0) {\n            sql.append(whereClause);\n        }\n\n        String sortedBy = (String)criteria.get(\"sortedBy\");\n        String sortDir = (String)criteria.get(\"sortDir\");\n        if(sortedBy != null) {\n            sql.append(\" ORDER BY \").append(sortedBy);\n            if(sortDir != null) {\n                sql.append(\" \").append(sortDir);\n            }\n        }\n        Integer pageSize = (Integer)criteria.get(\"pageSize\");\n        Integer pageNo = (Integer)criteria.get(\"pageNo\");\n        if(pageNo != null && pageSize != null) {\n            sql.append(\" SKIP \").append((pageNo - 1) * pageSize);\n            sql.append(\" LIMIT \").append(pageSize);\n        }\n        System.out.println(\"sql=\" + sql);\n        ODatabaseDocumentTx db = ServiceLocator.getInstance().getDb();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql.toString());\n            products = db.command(query).execute();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            db.close();\n        }\n        return products;\n    }\n\n    protected String searchProduct(Map<String, Object> criteria) throws Exception {\n        // first check if the full list is in cache.\n        String json = null;\n        Map<String, Object> result = new HashMap<String, Object>();\n        List<ODocument> products = new ArrayList<ODocument>();\n        int total = 0;\n        String host = (String)criteria.get(\"host\");\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        Map<String, Object> hostMap = (Map<String, Object>)productMap.get(host);\n        if(hostMap == null) {\n            hostMap = new ConcurrentHashMap<String, Object>(10, 0.9f, 1);\n            productMap.put(host, hostMap);\n        }\n        String key = null;\n        String categoryRid = (String)criteria.get(\"categoryRid\");\n        if(categoryRid != null) {\n            key = categoryRid + criteria.get(\"sortedBy\");\n        } else {\n            key = \"\" + criteria.get(\"sortedBy\");\n        }\n        Integer pageNo = (Integer)criteria.remove(\"pageNo\");\n        Integer pageSize = (Integer)criteria.remove(\"pageSize\");\n        List<String> list = (List<String>)hostMap.get(key);\n        if(list == null) {\n            // not in cache, search from db and put them in cache.\n            List<ODocument> docs = searchProductDb(criteria);\n            total = docs.size();\n            int i = 0;\n            list = new ArrayList<String>();\n            for(ODocument doc: docs) {\n                list.add(doc.field(\"@rid\").toString());\n                if(i >= pageSize * (pageNo - 1) && i < pageSize*pageNo) {\n                    products.add(doc);\n                    i++;\n                    // put only the current page in cache.\n                    ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n                    if(cache == null) {\n                        cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                                .maximumWeightedCapacity(1000)\n                                .build();\n                        productMap.put(\"cache\", cache);\n                    }\n                    cache.put(doc.field(\"@rid\").toString(), doc);\n                }\n            }\n        } else {\n            // we have a list of rids.\n            total = list.size();\n            for(int i = pageSize*(pageNo - 1); i < Math.min(pageSize * pageNo, list.size()); i++) {\n                String rid = (String)list.get(i);\n                ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n                ODocument product = (ODocument)cache.get(rid);\n                if(product == null) {\n                    // not in cache, get from db and put it into the cache.\n                    product = DbService.getODocumentByRid(rid);\n                    cache.put(rid, product);\n                }\n                products.add(product);\n            }\n        }\n        if(products != null && products.size() > 0) {\n            result.put(\"total\", total);\n            result.put(\"products\", OJSONWriter.listToJSON(products, null));\n            json = mapper.writeValueAsString(result);\n        }\n        return json;\n    }\n\n    protected Map<String, Object> refreshCache(String host) {\n        Map<String, Object> productMap = (Map<String, Object>)ServiceLocator.getInstance().getMemoryImage(\"productMap\");\n        Map<String, Object> criteria = new HashMap<String, Object>();\n        criteria.put(\"host\", host);\n        criteria.put(\"sortedBy\", \"updateDate\");\n        criteria.put(\"sortDir\", \"DESC\");\n        List<ODocument> products = searchProductDb(criteria);\n        Map<String, Object> hostMap = new ConcurrentHashMap<String, Object>(2, 0.9f, 1);\n        List<String> newList = new ArrayList<String>();\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)productMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(1000)\n                    .build();\n            productMap.put(\"cache\", cache);\n        }\n        int i = 0;\n        int pageSize = 2; // TODO get from config\n        for (ODocument product : products) {\n            // cache the first page for now. most people will read the first page as it contains\n            // new posts.\n            if(i < pageSize) {\n                cache.put(product.field(\"@rid\").toString(), product);\n            }\n            newList.add(product.field(\"@rid\").toString());\n        }\n        hostMap.put(\"newList\", newList);\n\n        // TODO build hot list\n\n        productMap.put(host, hostMap);\n        return hostMap;\n    }\n    */\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.AbstractProductRule",
      "createDate": "2016-03-31T00:36:30.163"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.163",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:219",
    "@version": 1,
    "@class": "Event",
    "eventId": 10220,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.product;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/04/15.\n */\npublic class DownProductEvRule extends AbstractProductRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        downVoteProduct(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.DownProductEvRule",
      "createDate": "2016-03-31T00:36:30.175"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.175",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:220",
    "@version": 1,
    "@class": "Event",
    "eventId": 10221,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.product;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/04/15.\n *\n * AccessLevel R [user]\n */\npublic class UpProductRule extends AbstractProductRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(UpProductRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex product = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(product == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // TODO check if the current user has up voted the product before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(product, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(product)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have up voted the product already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"entityId\", product.getProperty(\"entityId\"));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.UpProductRule",
      "createDate": "2016-03-31T00:36:30.191"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.191",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:221",
    "@version": 1,
    "@class": "Event",
    "eventId": 10222,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.product;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/04/15.\n *\n * AccessLevel R [user]\n */\npublic class DownProductRule extends AbstractProductRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(DownProductRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)data.get(\"@rid\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex product = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", user.get(\"userId\"));\n            if(product == null) {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(product, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(product)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have down voted the product already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"entityId\", product.getProperty(\"entityId\"));\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.product.DownProductRule",
      "createDate": "2016-03-31T00:36:30.207"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.207",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:222",
    "@version": 1,
    "@class": "Event",
    "eventId": 10223,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.log;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.db.AbstractDbRule;\n\nimport java.util.Map;\n\n/**\n * Created by admin on 2015-01-20.\n */\npublic class LogEventEvRule extends AbstractDbRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        // TODO Dispatch the event to all the internal subscribers.\n        // This will be called when replay the events and be careful regarding to the side effects.\n\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.log.LogEventEvRule",
      "createDate": "2016-03-31T00:36:30.217"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.217",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:223",
    "@version": 1,
    "@class": "Event",
    "eventId": 10224,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.log;\n\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-20.\n *\n * This is a handler to log all the client side and server side exceptions. Also, it\n * can be used to instrument performance logging or any other events happening on\n * the client side. The data payload is a flexible structure and it is up to you\n * to define what and when to be logged.\n *\n * AccessLevel A\n *\n */\npublic class LogEventRule extends AbstractRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String userId = null;\n        if(user != null) {\n            userId = (String)user.get(\"userId\");\n        }\n\n        // TODO send notifications for serious events or exceptions.\n        // Some events might trigger a pager\n        // Some events might trigger a email\n\n        Map eventMap = getEventMap(inputMap);\n        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n        inputMap.put(\"eventMap\", eventMap);\n        eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n        eventData.put(\"createDate\", new java.util.Date());\n        if(userId != null) eventData.put(\"createUserId\", userId);\n        eventData.put(\"ipAddress\", inputMap.get(\"ipAddress\"));\n\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.log.LogEventRule",
      "createDate": "2016-03-31T00:36:30.224"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.224",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:224",
    "@version": 1,
    "@class": "Event",
    "eventId": 10225,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 8/29/2014.\n *\n * owner can delete any form and admin or formAdmin can only delete forms belong to the host and name must\n * contain the host.\n *\n * AccessLevel R [owner, admin, formAdmin\n */\npublic class DelFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String formId = (String)data.get(\"formId\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            // admin or formAdmin\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only delete form for host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if(!formId.contains(host)) {\n                    // you are not allowed to delete form as it is not owned by the host.\n                    error = \"form id doesn't contain host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    String json = getFormById(inputMap);\n                    if(json == null) {\n                        error = \"Form with id \" + formId + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map<String, Object> form = mapper.readValue(json,\n                                new TypeReference<HashMap<String, Object>>() {\n                                });\n                        // check the version\n                        int storedVersion = (int)form.get(\"@version\");\n                        if (inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"formId\", form.get(\"formId\"));\n                        }\n                    }\n                }\n            }\n        } else {\n            // owner\n            int inputVersion = (int)data.get(\"@version\");\n            String json = getFormById(inputMap);\n            if(json == null) {\n                error = \"Form with id \" + formId + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map<String, Object> form = mapper.readValue(json,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                // check the version\n                int storedVersion = (int)form.get(\"@version\");\n                if (inputVersion != storedVersion) {\n                    inputMap.put(\"responseCode\", 400);\n                    error = \"Deleting version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"formId\", form.get(\"formId\"));\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.DelFormRule",
      "createDate": "2016-03-31T00:36:30.232"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.232",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:225",
    "@version": 1,
    "@class": "Event",
    "eventId": 10226,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.hazelcast.core.ITopic;\nimport com.hazelcast.core.Message;\nimport com.hazelcast.core.MessageListener;\nimport com.networknt.light.rule.AbstractRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.util.ServiceLocator;\nimport com.networknt.light.util.Util;\nimport com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport net.engio.mbassy.bus.MBassador;\nimport net.engio.mbassy.listener.Handler;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * Created by steve on 23/09/14.\n */\npublic abstract class AbstractFormRule extends AbstractRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(AbstractFormRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    static {\n        MBassador<Map<String, Object>> ruleBus = ServiceLocator.getInstance().getEventBus(\"rule\");\n        ruleBus.subscribe(new RuleMessageListenerImpl());\n    }\n\n    private static class RuleMessageListenerImpl {\n        @Handler\n        public void onMessage(Map<String, Object> eventMap) throws Exception {\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            //System.out.println(\"Received: \" + eventMap);\n            // which form has a drop down of rules that depending on addRule, delRule and impRule?\n            // it is defined in subscribe data for this rule AbstractFormRule. remove the form from\n            // cache so that the dropdown list can be enriched again when the form is called next\n            // time. The reason I don't reload the form here is because there might be so many rules\n            // imported at the same time and you don't want to reload again and again. Lazy loading.\n            Map map = getRuleByRuleClass(this.getClass().getName());\n            Object isSubscriber = map.get(\"isSubscriber\");\n            if(isSubscriber != null && (boolean)isSubscriber) {\n                Map subMap = (Map)map.get(\"subMap\");\n                List<String> formIds = (List)subMap.get(\"rule\");\n                Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n                ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n                if(cache != null) {\n                    for(String formId: formIds) {\n                        cache.remove(formId);\n                    }\n                }\n            }\n\n            // find the vertex for rule com.networknt.light.rule.rule.AbstractRuleRule and find edge\n            // Depend from Form vertex.\n\n            /*\n            Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"formId\"));\n            }\n            */\n        }\n    }\n\n    /*\n    static {\n        System.out.println(\"AbstractFromRule is called\");\n        ITopic<Map<String, Object>> rule = ServiceLocator.getInstance().getHzInstance().getTopic( \"rule\" );\n        rule.addMessageListener(new RuleMessageListenerImpl());\n\n        ITopic<Map<String, Object>> host = ServiceLocator.getInstance().getHzInstance().getTopic( \"host\" );\n        host.addMessageListener(new HostMessageListenerImpl());\n\n        ITopic<Map<String, Object>> role = ServiceLocator.getInstance().getHzInstance().getTopic( \"role\" );\n        role.addMessageListener(new RoleMessageListenerImpl());\n\n    }\n\n    private static class RuleMessageListenerImpl implements MessageListener<Map<String, Object>> {\n        @Override\n        public void onMessage(final Message<Map<String, Object>> message) {\n            Map<String, Object> eventMap = message.getMessageObject();\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // do we know which form to be removed from cache? Need to define the dependency between form\n            // and rule\n            Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"formId\"));\n            }\n        }\n    }\n\n    private static class HostMessageListenerImpl implements MessageListener<Map<String, Object>> {\n        @Override\n        public void onMessage(final Message<Map<String, Object>> message) {\n            Map<String, Object> eventMap = message.getMessageObject();\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // simply remove the page from cache in order to reload in the next getPage rule.\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"formId\"));\n            }\n        }\n    }\n\n    private static class RoleMessageListenerImpl implements MessageListener<Map<String, Object>> {\n        @Override\n        public void onMessage(final Message<Map<String, Object>> message) {\n            Map<String, Object> eventMap = message.getMessageObject();\n            Map<String, Object> data = (Map<String, Object>)eventMap.get(\"data\");\n            System.out.println(\"Received: \" + eventMap);\n            // simply remove the page from cache in order to reload in the next getPage rule.\n            Map<String, Object> pageMap = ServiceLocator.getInstance().getMemoryImage(\"pageMap\");\n            ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)pageMap.get(\"cache\");\n            if(cache != null) {\n                cache.remove(data.get(\"formId\"));\n            }\n        }\n    }\n    */\n    protected String getFormById(Map<String, Object> inputMap) throws Exception {\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String formId = (String)data.get(\"formId\");\n        String json  = null;\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache == null) {\n            cache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(100)\n                    .build();\n            formMap.put(\"cache\", cache);\n        } else {\n            json = (String)cache.get(formId);\n        }\n        if(json == null) {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                OrientVertex form = (OrientVertex)graph.getVertexByKey(\"Form.formId\", formId);\n                if(form != null) {\n                    json = form.getRecord().toJSON();\n                    if(formId.endsWith(\"_d\")) {\n                        // enrich the form with dynamicOptions for drop down values\n                        json = enrichForm(json, inputMap);\n                    }\n                    cache.put(formId, json);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        return json;\n    }\n\n    protected String enrichForm(String json, Map<String, Object> inputMap)  throws Exception {\n    \tMap<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Pattern pattern = Pattern.compile(\"\\\\[\\\\{\\\"label\\\":\\\"dynamic\\\",([^]]+)\\\\}\\\\]\");\n        Matcher m = pattern.matcher(json);\n        StringBuffer sb = new StringBuffer(json.length());\n        while (m.find()) {\n            String text = m.group(1);\n            // get the values from rules.\n            logger.debug(\"text = {}\", text);\n            text = text.substring(8);\n            logger.debug(\"text = {}\", text);\n            Map<String, Object> jsonMap = mapper.readValue(text,\n                    new TypeReference<HashMap<String, Object>>() {});\n            jsonMap.put(\"user\", inputMap.get(\"user\"));\n            // inject host into data here.\n            Map<String, Object> dataMap = new HashMap<String, Object>();\n            dataMap.put(\"host\", data.get(\"host\"));\n            jsonMap.put(\"data\", dataMap);\n            RuleEngine.getInstance().executeRule(Util.getCommandRuleId(jsonMap), jsonMap);\n            String result = (String)jsonMap.get(\"result\");\n            logger.debug(\"result = {}\", result);\n            if(result != null && result.length() > 0) {\n                m.appendReplacement(sb, Matcher.quoteReplacement(result));\n            } else {\n                m.appendReplacement(sb, Matcher.quoteReplacement(\"[ ]\"));\n            }\n        }\n        m.appendTail(sb);\n        logger.debug(\"form = {}\", sb.toString());\n        return sb.toString();\n    }\n\n    protected String addForm(Map<String, Object> data) throws Exception {\n        String json = null;\n        String formId = (String)data.get(\"formId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            OrientVertex form = graph.addVertex(\"class:Form\", data);\n            createUser.addEdge(\"Create\", form);\n            // According to action in the list, populate validation schema in rule class\n            List<Map<String, Object>> actions = form.getProperty(\"action\");\n            for(Map<String, Object> action: actions) {\n                if(action.get(\"name\") != null) {\n                    String ruleClass = Util.getCommandRuleId(action);\n                    Vertex rule = graph.getVertexByKey(\"Rule.ruleClass\", ruleClass);\n                    if(rule != null) {\n                        rule.setProperty(\"schema\", data.get(\"schema\"));\n                        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n                        ConcurrentMap<String, Map<String, Object>> cache = (ConcurrentMap<String, Map<String, Object>>)ruleMap.get(\"cache\");\n                        if(cache != null) {\n                            cache.remove(ruleClass);\n                        }\n                    } else {\n                        logger.error(\"Could not find rule \" + ruleClass);\n                    }\n                }\n            }\n            graph.commit();\n            json = form.getRecord().toJSON();\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(formId);\n        }\n        return json;\n    }\n\n    protected void delForm(String formId) {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex form = graph.getVertexByKey(\"Form.formId\", formId);\n            if(form != null) {\n                List<Map<String, Object>> actions = form.getProperty(\"action\");\n                for(Map<String, Object> action: actions) {\n                    String ruleClass = Util.getCommandRuleId(action);\n                    Vertex rule = graph.getVertexByKey(\"Rule.ruleClass\", ruleClass);\n                    if(rule != null) {\n                        rule.removeProperty(\"schema\");\n                        Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n                        ConcurrentMap<String, Map<String, Object>> cache = (ConcurrentMap<String, Map<String, Object>>)ruleMap.get(\"cache\");\n                        if(cache != null) {\n                            cache.remove(ruleClass);\n                        }\n                    } else {\n                        logger.error(\"Could not find rule \" + ruleClass);\n                    }\n                }\n                graph.removeVertex(form);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(formId);\n        }\n    }\n\n    protected String updForm(Map<String, Object> data) throws Exception {\n        String json = null;\n        String formId = (String)data.get(\"formId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex form = (OrientVertex)graph.getVertexByKey(\"Form.formId\", formId);\n            if(form != null) {\n                form.setProperty(\"action\", data.get(\"action\"));\n                form.setProperty(\"schema\", data.get(\"schema\"));\n                form.setProperty(\"form\", data.get(\"form\"));\n                form.setProperty(\"modelData\", data.get(\"modelData\"));\n                form.setProperty(\"updateDate\", data.get(\"updateDate\"));\n\n                Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.get(\"updateUserId\"));\n                updateUser.addEdge(\"Update\", form);\n                // According to action in the list, populate validation schema.\n                List<Map<String, Object>> actions = form.getProperty(\"action\");\n                for(Map<String, Object> action: actions) {\n                    if(action.get(\"name\") != null) {\n                        String ruleClass = Util.getCommandRuleId(action);\n                        Vertex rule = graph.getVertexByKey(\"Rule.ruleClass\", ruleClass);\n                        if(rule != null) {\n                            rule.setProperty(\"schema\", data.get(\"schema\"));\n                            Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n                            ConcurrentMap<String, Map<String, Object>> cache = (ConcurrentMap<String, Map<String, Object>>)ruleMap.get(\"cache\");\n                            if(cache != null) {\n                                cache.remove(ruleClass);\n                            }\n                        } else {\n                            logger.error(\"Could not find rule \" + ruleClass);\n                        }\n                    }\n                }\n            }\n            graph.commit();\n            json = form.getRecord().toJSON();\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(formId);\n        }\n        return json;\n    }\n\n    protected String impForm(Map<String, Object> data) throws Exception {\n        String json = null;\n        String formId = (String)data.get(\"formId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            OrientVertex form = (OrientVertex)graph.getVertexByKey(\"Form.formId\", formId);\n            if(form != null) {\n                graph.removeVertex(form);\n            }\n\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            form = graph.addVertex(\"class:Form\", data);\n            createUser.addEdge(\"Create\", form);\n            // According to action in the list, populate validation schema.\n            List<Map<String, Object>> actions = form.getProperty(\"action\");\n            if(actions != null && actions.size() > 0) {\n                for(Map<String, Object> action: actions) {\n                    if(action.get(\"name\") != null) {\n                        String ruleClass = Util.getCommandRuleId(action);\n                        Vertex rule = graph.getVertexByKey(\"Rule.ruleClass\", ruleClass);\n                        if(rule != null) {\n                            rule.setProperty(\"schema\", data.get(\"schema\"));\n                            Map<String, Object> ruleMap = ServiceLocator.getInstance().getMemoryImage(\"ruleMap\");\n                            ConcurrentMap<String, Map<String, Object>> cache = (ConcurrentMap<String, Map<String, Object>>)ruleMap.get(\"cache\");\n                            if(cache != null) {\n                                cache.remove(ruleClass);\n                            }\n                        } else {\n                            logger.error(\"Could not find rule \" + ruleClass);\n                        }\n                    }\n                }\n            }\n            graph.commit();\n            json = form.getRecord().toJSON();\n        } catch (Exception e) {\n            graph.rollback();\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        Map<String, Object> formMap = ServiceLocator.getInstance().getMemoryImage(\"formMap\");\n        ConcurrentMap<Object, Object> cache = (ConcurrentMap<Object, Object>)formMap.get(\"cache\");\n        if(cache != null) {\n            cache.remove(formId);\n        }\n        return json;\n    }\n\n    protected String getAllForm(String host) {\n        String sql = \"SELECT FROM Form\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<>(sql);\n            List<ODocument> forms = graph.getRawGraph().command(query).execute();\n            if(forms != null && forms.size() > 0) {\n                json = OJSONWriter.listToJSON(forms, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getFormMap(String host) throws Exception {\n        String sql = \"SELECT FROM Form\";\n        if(host != null) {\n            sql = sql + \" WHERE host = '\" + host + \"' OR host IS NULL\";\n        }\n        String json = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Map<String, Map<String, Object>> formMap = new HashMap<String, Map<String, Object>>();\n            for (Vertex v : (Iterable<Vertex>) graph.command(\n                    new OCommandSQL(sql)).execute()) {\n                Map<String, Object> contentMap = new HashMap<String, Object>();\n                contentMap.put(\"action\", v.getProperty(\"action\"));\n                contentMap.put(\"schema\", v.getProperty(\"schema\"));\n                contentMap.put(\"form\", v.getProperty(\"form\"));\n                contentMap.put(\"modelData\", v.getProperty(\"modelData\"));\n                formMap.put(v.getProperty(\"formId\"), contentMap);\n            }\n            json = mapper.writeValueAsString(formMap);\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.AbstractFormRule",
      "createDate": "2016-03-31T00:36:30.242"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.242",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:226",
    "@version": 1,
    "@class": "Event",
    "eventId": 10227,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/26/2014.\n */\npublic class UpdFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updForm(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.UpdFormEvRule",
      "createDate": "2016-03-31T00:36:30.257"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.257",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:227",
    "@version": 1,
    "@class": "Event",
    "eventId": 10228,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.RuleEngine;\nimport com.networknt.light.util.Util;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * Created by steve on 8/25/2014.\n *\n * You don't need to check if the form is in db or not as the form should be cached\n * in memory image already while starting the server.\n *\n * AccessLevel A\n *\n */\npublic class GetFormRule extends AbstractFormRule implements Rule {\n    static final org.slf4j.Logger logger = LoggerFactory.getLogger(GetFormRule.class);\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String formId = (String)data.get(\"formId\");\n        String json = getFormById(inputMap);\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Form with \" + formId + \" cannot be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.GetFormRule",
      "createDate": "2016-03-31T00:36:30.274"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.274",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:228",
    "@version": 1,
    "@class": "Event",
    "eventId": 10229,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 9/4/2014.\n * when importing form, it might be existing or new. need to handle two situations.\n *\n */\npublic class ImpFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute(Object... objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        impForm(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.ImpFormEvRule",
      "createDate": "2016-03-31T00:36:30.290"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.290",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:229",
    "@version": 1,
    "@class": "Event",
    "eventId": 10230,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 9/4/2014.\n *\n * Is there a way to verify that the memoryImage is in sync with db?\n * In that case, we don't need to reload from db every time this rule is executed.\n * What we can do is to load all forms in the beginning when server starts, and make\n * sure all the form updates are gone through these set of rules.\n *\n * AccessLevel R [user, admin, formAdmin]\n *\n */\npublic class GetAllFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String) user.get(\"host\");\n        String hostForms = getAllForm(host);\n        if(hostForms != null) {\n            inputMap.put(\"result\", hostForms);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No form can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.GetAllFormRule",
      "createDate": "2016-03-31T00:36:30.301"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.301",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:230",
    "@version": 1,
    "@class": "Event",
    "eventId": 10231,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 8/29/2014.\n *\n */\npublic class UpdFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String formId = (String)data.get(\"formId\");\n        String error = null;\n\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            // admin or formAdmin\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only update form from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if (!formId.contains(host)) {\n                    error = \"form id doesn't contain host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    int inputVersion = (int)data.get(\"@version\");\n                    String json = getFormById(inputMap);\n                    if(json == null) {\n                        error = \"Form with id \" + formId + \" cannot be found\";\n                        inputMap.put(\"responseCode\", 404);\n                    } else {\n                        Map<String, Object> form = mapper.readValue(json,\n                                new TypeReference<HashMap<String, Object>>() {\n                                });\n                        int storedVersion = (int)form.get(\"@version\");\n                        if(inputVersion != storedVersion) {\n                            inputMap.put(\"responseCode\", 400);\n                            error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                            // no need to remove host from eventData as owner update won't touch id and host.\n                        }\n                    }\n                }\n            }\n        } else {\n            // owner\n            int inputVersion = (int)data.get(\"@version\");\n            String json = getFormById(inputMap);\n            if(json == null) {\n                error = \"Form with id \" + formId + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                Map<String, Object> form = mapper.readValue(json,\n                        new TypeReference<HashMap<String, Object>>() {\n                        });\n                int storedVersion = (int)form.get(\"@version\");\n                if(inputVersion != storedVersion) {\n                    inputMap.put(\"responseCode\", 400);\n                    error = \"Updating version \" + inputVersion + \" doesn't match stored version \" + storedVersion;\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                    eventData.put(\"updateDate\", new java.util.Date());\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n                    // no need to remove host from eventData as owner update won't touch id and host.\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.UpdFormRule",
      "createDate": "2016-03-31T00:36:30.318"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.318",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:231",
    "@version": 1,
    "@class": "Event",
    "eventId": 10232,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.page.AbstractPageRule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 14/02/15.\n *\n * This is the rule that called by form loader.\n * It get all the forms and return a map from id to the content.\n *\n * accessLevel is owner by default.\n */\npublic class GetFormMapRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String)user.get(\"host\");\n\n        String forms = getFormMap(host);\n        if(forms != null) {\n            inputMap.put(\"result\", forms);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"No page can be found.\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.GetFormMapRule",
      "createDate": "2016-03-31T00:36:30.326"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.326",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:232",
    "@version": 1,
    "@class": "Event",
    "eventId": 10233,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Add a new form on the server. only owner can add form without host naming space.\n *\n * AccessLevel R [owner, admin, formAdmin]\n */\npublic class AddFormRule extends AbstractFormRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String formId = (String)data.get(\"formId\");\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only add form from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if(!formId.contains(host)) {\n                    // you are not allowed to add form as it is not owned by the host.\n                    error = \"form id doesn't contain host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    String json = getFormById(inputMap);\n                    if(json != null) {\n                        error = \"Form with the same id exists\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                        eventData.put(\"createDate\", new java.util.Date());\n                        eventData.put(\"createUserId\", user.get(\"userId\"));\n                    }\n                }\n            }\n        } else {\n            String json = getFormById(inputMap);\n            if(json != null) {\n                error = \"Form with the same id exists\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll((Map<String, Object>)inputMap.get(\"data\"));\n                eventData.put(\"createDate\", new java.util.Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n                // remove host from data as this is owner adding role\n                eventData.remove(\"host\");\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.AddFormRule",
      "createDate": "2016-03-31T00:36:30.336"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.336",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:233",
    "@version": 1,
    "@class": "Event",
    "eventId": 10234,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/25/2014.\n */\npublic class AddFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addForm(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.AddFormEvRule",
      "createDate": "2016-03-31T00:36:30.343"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.343",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:234",
    "@version": 1,
    "@class": "Event",
    "eventId": 10235,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/26/2014.\n */\npublic class DelFormEvRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        String formId = (String)data.get(\"formId\");\n        delForm(formId);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.DelFormEvRule",
      "createDate": "2016-03-31T00:36:30.350"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.350",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:235",
    "@version": 1,
    "@class": "Event",
    "eventId": 10236,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.form;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 9/4/2014.\n *\n * Overwrite if the form exists in db.\n *\n * AccessLevel R [user, admin, formAdmin]\n *\n */\npublic class ImpFormRule extends AbstractFormRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        Map<String, Object> dataMap = mapper.readValue((String)data.get(\"content\"), new TypeReference<HashMap<String, Object>>() {});\n        String formId = (String)dataMap.get(\"formId\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                error = \"User can only import form from host: \" + host;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                if(!formId.contains(host)) {\n                    // you are not allowed to add form as it is not owned by the host.\n                    error = \"form id doesn't contain host: \" + host;\n                    inputMap.put(\"responseCode\", 403);\n                } else {\n                    // Won't check if form exists or not here.\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"host\", host);\n\n                    eventData.put(\"formId\", formId);\n                    eventData.put(\"action\", dataMap.get(\"action\"));\n                    eventData.put(\"schema\", dataMap.get(\"schema\"));\n                    eventData.put(\"form\", dataMap.get(\"form\"));\n                    if(dataMap.get(\"modelData\") != null) eventData.put(\"modelData\", dataMap.get(\"modelData\"));\n\n                    eventData.put(\"createDate\", new java.util.Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                }\n            }\n        } else {\n            // This is owner to import form, notice no host is passed in.\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n\n            eventData.put(\"formId\", formId);\n            eventData.put(\"action\", dataMap.get(\"action\"));\n            eventData.put(\"schema\", dataMap.get(\"schema\"));\n            eventData.put(\"form\", dataMap.get(\"form\"));\n            if(dataMap.get(\"modelData\") != null) eventData.put(\"modelData\", dataMap.get(\"modelData\"));\n\n            eventData.put(\"createDate\", new java.util.Date());\n            eventData.put(\"createUserId\", user.get(\"userId\"));\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.form.ImpFormRule",
      "createDate": "2016-03-31T00:36:30.357"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.357",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:236",
    "@version": 1,
    "@class": "Event",
    "eventId": 10237,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientElementIterable;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.owasp.encoder.Encode;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\n/**\n * Created by steve on 28/12/14.\n * This the abstract class that implements functions for Blog, Forum and News as\n * they share similar traits. Since ids are generated and there is no need to check\n * uniqueness. Just make sure parent and children are checked and converted to ids.\n *\n */\npublic abstract class AbstractBfnRule extends BranchRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractBfnRule.class);\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    public boolean addPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String parentRid = (String) data.remove(\"parentRid\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex parent = DbService.getVertexByRid(graph, parentRid);\n            if(parent == null) {\n                error = \"Rid \" + parentRid + \" doesn't exist on host \" + host;\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n                if(eventData.get(\"title\") != null) {\n                    eventData.put(\"title\", Encode.forJavaScriptSource((String)eventData.get(\"title\")));\n                }\n                if(eventData.get(\"summary\") != null) {\n                    eventData.put(\"summary\", Encode.forJavaScriptSource((String)eventData.get(\"summary\")));\n                }\n                if(eventData.get(\"content\") != null) {\n                    eventData.put(\"content\", Encode.forJavaScriptSource((String)eventData.get(\"content\")));\n                }\n                if(eventData.get(\"originalAuthor\") != null) {\n                    eventData.put(\"originalAuthor\", Encode.forJavaScriptSource((String)eventData.get(\"originalAuthor\")));\n                }\n                if(eventData.get(\"originalSite\") != null) {\n                    eventData.put(\"originalSite\", Encode.forJavaScriptSource((String)eventData.get(\"originalSite\")));\n                }\n                if(eventData.get(\"originalUrl\") != null) {\n                    eventData.put(\"originalUrl\", Encode.forUriComponent((String)eventData.get(\"originalUrl\")));\n                }\n                eventData.put(\"parentId\", parent.getProperty(\"categoryId\"));\n                eventData.put(\"entityId\", HashUtil.generateUUID());\n                eventData.put(\"createDate\", new Date());\n                eventData.put(\"createUserId\", user.get(\"userId\"));\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            clearListCache(host, bfnType, parentRid);\n            clearTagCache(host, (List<String>) inputMap.get(\"tags\"));\n            return true;\n        }\n    }\n\n    protected void clearListCache(String host, String bfnType, String parentRid) {\n        Map<String, Object> categoryMap = ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> listCache = (ConcurrentMap<Object, Object>)categoryMap.get(\"listCache\");\n        if(listCache != null && listCache.size() > 0) {\n            // clear recent list (recent list regardless category\n            listCache.remove(host + bfnType);\n            // clear newestList for this parentRid only this category\n            listCache.remove(parentRid + \"createDate\" + \"desc\");\n            // TODO handler future list here.\n        }\n    }\n\n    protected void clearTagCache(String host, List<String> tags) {\n        Map<String, Object> categoryMap = ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> listCache = (ConcurrentMap<Object, Object>)categoryMap.get(\"listCache\");\n        if(listCache != null && listCache.size() > 0) {\n            // clear tagList for this host\n            if(tags != null && tags.size() > 0) {\n                for(String tag: tags) {\n                    listCache.remove(host + tag);\n                }\n            }\n        }\n    }\n\n    protected void clearEntityCache(String entityRid) {\n        Map<String, Object> categoryMap = ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> entityCache = (ConcurrentMap<Object, Object>)categoryMap.get(\"entityCache\");\n        if(entityCache != null) {\n            entityCache.remove(entityRid);\n        }\n    }\n\n    public boolean addPostEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addPostDb(bfnType, data);\n        return true;\n    }\n\n    protected void addPostDb(String bfnType, Map<String, Object> data) throws Exception {\n        String className = bfnType.substring(0, 1).toUpperCase() + bfnType.substring(1);\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex createUser = graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            List<String> tags = (List<String>)data.remove(\"tags\");\n            \n            OrientVertex post = graph.addVertex(\"class:Post\", data);\n            createUser.addEdge(\"Create\", post);\n            // parent\n            OrientVertex parent = getBranchByHostId(graph, bfnType, host, (String) data.get(\"parentId\"));\n            if(parent != null) {\n                parent.addEdge(\"HasPost\", post);\n            }\n            // tag\n            if(tags != null && tags.size() > 0) {\n                for(String tagId: tags) {\n                    Vertex tag = null;\n                    // get the tag is it exists\n                    OIndex<?> tagHostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"tagHostIdIdx\");\n                    OCompositeKey tagKey = new OCompositeKey(host, tagId);\n                    OIdentifiable tagOid = (OIdentifiable) tagHostIdIdx.get(tagKey);\n                    if (tagOid != null) {\n                        tag = graph.getVertex(tagOid.getRecord());\n                        post.addEdge(\"HasTag\", tag);\n                    } else {\n                        tag = graph.addVertex(\"class:Tag\", \"host\", host, \"tagId\", tagId, \"createDate\", data.get(\"createDate\"));\n                        createUser.addEdge(\"Create\", tag);\n                        post.addEdge(\"HasTag\", tag);\n                    }\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean delPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String)data.get(\"@rid\");\n        String parentRid = null;\n        String host = (String)data.get(\"host\");\n        String error = null;\n        List<String> tags = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex post = (OrientVertex)DbService.getVertexByRid(graph, rid);\n            if(post != null) {\n                // check if the post has comment, if yes, you cannot delete it for now\n                // TODO fix it after orientdb 2.2 release.\n                // https://github.com/orientechnologies/orientdb/issues/1108\n                if(post.countEdges(Direction.OUT, \"HasComment\") > 0) {\n                    error = \"Post has comment(s), cannot be deleted\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    // now get the parentRid in order to remove the cache.\n                    for(Edge e: post.getEdges(Direction.IN, \"HasPost\")) {\n                        Vertex edgeParent = e.getVertex(Direction.OUT);\n                        parentRid = edgeParent.getId().toString();\n                    }\n                    // now find all the tags to clear the tag list cache.\n                    Iterable iterable = post.getProperty(\"out_HasTag\");\n                    if(iterable != null) {\n                        Iterator iterator = iterable.iterator();\n                        tags = new ArrayList<String>();\n                        while(iterator.hasNext()) {\n                            OrientVertex vertex = (OrientVertex)iterator.next();\n                            tags.add(vertex.getProperty(\"tagId\"));\n                        }\n                    }\n\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"entityId\", post.getProperty(\"entityId\"));\n                }\n            } else {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            clearListCache(host, bfnType, parentRid);\n            if(tags != null && tags.size() > 0) clearTagCache(host, tags);\n            clearEntityCache(rid);\n            return true;\n        }\n    }\n\n    public boolean delPostEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delPostDb(bfnType, data);\n        return true;\n    }\n\n    protected void delPostDb(String bfnType, Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex post = (OrientVertex)graph.getVertexByKey(\"Post.entityId\", data.get(\"entityId\"));\n            if(post != null) {\n                // TODO cascade deleting all comments belong to the post.\n                // Need to come up a query on that to get the entire tree.\n                /*\n                // https://github.com/orientechnologies/orientdb/issues/1108\n                delete graph...\n                */\n                // TODO remove tags edge. Do I need to?\n                graph.removeVertex(post);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public String getEntityRid(String entityType, String entityId) {\n        String entityRid = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex entity = (OrientVertex)graph.getVertexByKey(entityType + \".entityId\", entityId);\n            entityRid = entity.getIdentity().toString();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return entityRid;\n    }\n\n    public boolean updPost(String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"rid\");\n        String originalParentRid = null;\n        String parentRid = null;\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Set<String> addTags = null;\n        Set<String> delTags = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            // update post itself and we might have a new api to move post from one parent to another.\n            Vertex post = DbService.getVertexByRid(graph, rid);\n            if(post != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"host\", data.get(\"host\"));\n                eventData.put(\"entityId\", post.getProperty(\"entityId\"));\n                eventData.put(\"title\", Encode.forJavaScriptSource((String)data.get(\"title\")));\n                eventData.put(\"originalAuthor\", Encode.forJavaScriptSource((String)data.get(\"originalAuthor\")));\n                eventData.put(\"originalSite\", Encode.forJavaScriptSource((String)data.get(\"originalSite\")));\n                eventData.put(\"originalUrl\", Encode.forUriComponent((String)data.get(\"originalUrl\")));\n                eventData.put(\"summary\", Encode.forJavaScriptSource((String)data.get(\"summary\")));\n                eventData.put(\"content\", Encode.forJavaScriptSource((String)data.get(\"content\")));\n                eventData.put(\"updateDate\", new Date());\n                eventData.put(\"updateUserId\", user.get(\"userId\"));\n                // it is possible for the post to switch parent.\n                parentRid = (String)data.get(\"parentRid\");\n                if(parentRid != null) {\n                    // if parentRid is not even selected, nothing to do with the parent edge.\n                    Vertex parent = DbService.getVertexByRid(graph, parentRid);\n                    if(parent != null) {\n                        boolean found = false;\n                        for(Edge e: post.getEdges(Direction.IN, \"HasPost\")) {\n                            Vertex edgeParent = e.getVertex(Direction.OUT);\n                            if(edgeParent != null) {\n                                originalParentRid =  edgeParent.getId().toString();\n                                if(originalParentRid.equals(parentRid)) {\n                                    found = true;\n                                    break;\n                                }\n\n                            }\n                        }\n                        if(!found) {\n                            // replace parent here by passing parentId to the event rule.\n                            eventData.put(\"parentId\", parent.getProperty(\"categoryId\"));\n                        }\n                    }\n                } else {\n                    // get originalParentRid from post for clearing cache.\n                    for(Edge e: post.getEdges(Direction.IN, \"HasPost\")) {\n                        Vertex edgeParent = e.getVertex(Direction.OUT);\n                        if(edgeParent != null) {\n                            originalParentRid =  edgeParent.getId().toString();\n                        }\n                    }\n                }\n\n                // tags\n                List<String> tags = (List)data.get(\"tags\");\n                if(tags == null || tags.size() == 0) {\n                    // remove all existing tags\n                    delTags = new HashSet<String>();\n                    for (Vertex vertex : (Iterable<Vertex>) post.getVertices(Direction.OUT, \"HasTag\")) {\n                        delTags.add((String)vertex.getProperty(\"tagId\"));\n                    }\n                    if(delTags.size() > 0) eventData.put(\"delTags\", delTags);\n                } else {\n                    Set<String> inputTags = new HashSet<String>(tags);\n                    Set<String> storedTags = new HashSet<String>();\n                    for (Vertex vertex : (Iterable<Vertex>) post.getVertices(Direction.OUT, \"HasTag\")) {\n                        storedTags.add((String)vertex.getProperty(\"tagId\"));\n                    }\n\n                    addTags = new HashSet<String>(inputTags);\n                    delTags = new HashSet<String>(storedTags);\n                    addTags.removeAll(storedTags);\n                    delTags.removeAll(inputTags);\n\n                    if(addTags.size() > 0) eventData.put(\"addTags\", addTags);\n                    if(delTags.size() > 0) eventData.put(\"delTags\", delTags);\n                }\n            } else {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            clearListCache(host, bfnType, originalParentRid);\n            if(parentRid != null) clearListCache(host, bfnType, parentRid);\n            if(delTags != null && delTags.size() > 0) clearTagCache(host, new ArrayList<String>(delTags));\n            if(addTags != null && addTags.size() > 0) clearTagCache(host, new ArrayList<String>(addTags));\n            clearEntityCache(rid);\n            return true;\n        }\n    }\n\n    public boolean updPostEv (String bfnType, Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPostDb(bfnType, data);\n        return true;\n    }\n\n    protected void updPostDb(String bfnType, Map<String, Object> data) throws Exception {\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex post = (OrientVertex)graph.getVertexByKey(\"Post.entityId\", data.get(\"entityId\"));\n\n            if(post != null) {\n                updateUser.addEdge(\"Update\", post);\n                // fields\n                if(data.get(\"title\") != null) {\n                    post.setProperty(\"title\", data.get(\"title\"));\n                } else {\n                    post.removeProperty(\"name\");\n                }\n                if(data.get(\"originalAuthor\") != null) {\n                    post.setProperty(\"originalAuthor\", data.get(\"originalAuthor\"));\n                } else {\n                    post.removeProperty(\"originalAuthor\");\n                }\n                if(data.get(\"originalSite\") != null) {\n                    post.setProperty(\"originalSite\", data.get(\"originalSite\"));\n                } else {\n                    post.removeProperty(\"originalSite\");\n                }\n                if(data.get(\"originalUrl\") != null) {\n                    post.setProperty(\"originalUrl\", data.get(\"originalUrl\"));\n                } else {\n                    post.removeProperty(\"originalUrl\");\n                }\n                if(data.get(\"summary\") != null) {\n                    post.setProperty(\"summary\", data.get(\"summary\"));\n                } else {\n                    post.removeProperty(\"summary\");\n                }\n                if(data.get(\"content\") != null) {\n                    post.setProperty(\"content\", data.get(\"content\"));\n                } else {\n                    post.removeProperty(\"content\");\n                }\n                post.setProperty(\"updateDate\", data.get(\"updateDate\"));\n\n                // handle parent update\n                String parentId = (String)data.get(\"parentId\");\n                if(parentId != null) {\n                    OrientVertex parent = getBranchByHostId(graph, bfnType, (String) data.get(\"host\"), (String) data.get(\"parentId\"));\n                    if(parent != null) {\n                        // remove the current edge and add a new one.\n                        for(Edge e : post.getEdges(Direction.IN, \"HasPost\")) {\n                            e.remove();\n                        }\n                        parent.addEdge(\"HasPost\", post);\n                    }\n                }\n\n                // handle addTags and delTags\n                OIndex<?> hostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"tagHostIdIdx\");\n                Set<String> addTags = (Set)data.get(\"addTags\");\n                if(addTags != null) {\n                    for(String tagId: addTags) {\n                        OCompositeKey key = new OCompositeKey(data.get(\"host\"), tagId);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            OrientVertex tag = graph.getVertex(oid.getRecord());\n                            post.addEdge(\"HasTag\", tag);\n                        } else {\n                            Vertex tag = graph.addVertex(\"class:Tag\", \"host\", data.get(\"host\"), \"tagId\", tagId, \"createDate\", data.get(\"updateDate\"));\n                            updateUser.addEdge(\"Create\", tag);\n                            post.addEdge(\"HasTag\", tag);\n                        }\n                    }\n                }\n                Set<String> delTags = (Set)data.get(\"delTags\");\n                if(delTags != null) {\n                    for(String tagId: delTags) {\n                        /*\n                        OrientVertex branch = null;\n                        OIndex<?> hostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(branchType + \"HostIdIdx\");\n                        OCompositeKey key = new OCompositeKey(host, id);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            branch = graph.getVertex(oid.getRecord());\n                        }\n                        return branch;\n                        */\n\n                        OCompositeKey key = new OCompositeKey(data.get(\"host\"), tagId);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            OrientVertex tag = graph.getVertex(oid.getRecord());\n                            for (Edge edge : (Iterable<Edge>) post.getEdges(Direction.OUT, \"HasTag\")) {\n                                if(edge.getVertex(Direction.IN).equals(tag)) graph.removeEdge(edge);\n                            }\n                        }\n                    }\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean getCategoryEntity(String categoryType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String categoryRid = (String)data.get(\"@rid\");\n        String host = (String)data.get(\"host\");\n        if(categoryRid == null) {\n            inputMap.put(\"result\", \"@rid is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        Integer pageSize = (Integer)data.get(\"pageSize\");\n        Integer pageNo = (Integer)data.get(\"pageNo\");\n        if(pageSize == null) {\n            inputMap.put(\"result\", \"pageSize is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        if(pageNo == null) {\n            inputMap.put(\"result\", \"pageNo is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        String sortDir = (String)data.get(\"sortDir\");\n        String sortedBy = (String)data.get(\"sortedBy\");\n        if(sortDir == null) {\n            sortDir = \"desc\";\n        }\n        if(sortedBy == null) {\n            sortedBy = \"createDate\";\n        }\n        boolean allowUpdate = isUpdateAllowed(categoryType, host, inputMap);\n\n        // TODO support the following lists: recent, popular, controversial\n        // Get the page from cache.\n        List<String> list = getCategoryEntityList(categoryRid, sortedBy, sortDir);\n        if(list != null && list.size() > 0) {\n            long total = list.size();\n            List<Map<String, Object>> entities = new ArrayList<Map<String, Object>>();\n            for(int i = pageSize*(pageNo - 1); i < Math.min(pageSize*pageNo, list.size()); i++) {\n                String entityRid = list.get(i);\n                Map<String, Object> entity = getCategoryEntity(entityRid);\n                if(entity != null) {\n                    entities.add(entity);\n                } else {\n                    logger.warn(\"Could not find entity {} from List {}\", entityRid, categoryRid + sortedBy + sortDir);\n                }\n            }\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"entities\", entities);\n            result.put(\"allowUpdate\", allowUpdate);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            // there is no post available. but still need to return allowPost\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", 0);\n            result.put(\"allowUpdate\", allowUpdate);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        }\n    }\n\n    protected boolean isUpdateAllowed(String categoryType, String host, Map<String, Object> inputMap) {\n        boolean isAllowed = false;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        if(user != null) {\n            List roles = (List)user.get(\"roles\");\n            if(roles.contains(\"owner\")) {\n                isAllowed = true;\n            } else if(roles.contains(\"admin\") || roles.contains(categoryType + \"Admin\") || roles.contains(categoryType + \"User\")) {\n                if(host.equals(user.get(\"host\"))) {\n                    isAllowed = true;\n                }\n            }\n        }\n        return isAllowed;\n    }\n\n    protected List<String> getCategoryEntityList(String categoryRid, String sortedBy, String sortDir) throws Exception {\n        List<String> list = null;\n        // get list from cache\n        Map<String, Object> categoryMap = ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> listCache = (ConcurrentMap<Object, Object>)categoryMap.get(\"listCache\");\n        if(listCache == null) {\n            listCache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(200)\n                    .build();\n            categoryMap.put(\"listCache\", listCache);\n        } else {\n            list = (List<String>)listCache.get(categoryRid + sortedBy + sortDir);\n        }\n        if(list == null) {\n            // not in cache, get from db\n            list = getCategoryEntityListDb(categoryRid, sortedBy, sortDir);\n            if(list != null) {\n                listCache.put(categoryRid + sortedBy + sortDir, list);\n            }\n        }\n        return list;\n    }\n\n    protected List<String> getCategoryEntityListDb(String categoryRid, String sortedBy, String sortDir) {\n        List<String> entityList = null;\n        String sql = \"select @rid from (traverse out_Own, out_HasPost from ?) where @class = 'Post' order by \" + sortedBy + \" \" + sortDir;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> entities = graph.getRawGraph().command(query).execute(categoryRid);\n            if(entities.size() > 0) {\n                entityList = new ArrayList<String>();\n                for(ODocument entity: entities) {\n                    entityList.add(((ODocument)entity.field(\"rid\")).field(\"@rid\").toString());\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return entityList;\n    }\n\n    public Map<String, Object> getCategoryEntity(String entityRid) {\n        Map<String, Object> entity = null;\n        Map<String, Object> categoryMap = ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> entityCache = (ConcurrentMap<Object, Object>)categoryMap.get(\"entityCache\");\n        if(entityCache == null) {\n            entityCache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(10000)\n                    .build();\n            categoryMap.put(\"entityCache\", entityCache);\n        } else {\n            entity = (Map<String, Object>)entityCache.get(entityRid);\n        }\n        if(entity == null) {\n            entity = getCategoryEntityDb(entityRid);\n            if(entity != null) {\n                entityCache.put(entityRid, entity);\n            }\n        }\n        return entity;\n    }\n\n    public Map<String, Object> getCategoryEntityDb(String entityRid) {\n        Map<String, Object> jsonMap = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex entity = (OrientVertex)DbService.getVertexByRid(graph, entityRid);\n            if(entity != null) {\n                jsonMap = new HashMap<String, Object>();\n                jsonMap.put(\"type\", entity.getLabel());\n                jsonMap.put(\"rid\", entity.getIdentity().toString());\n                jsonMap.put(\"createDate\", entity.getProperty(\"createDate\"));\n                OrientElementIterable iterable = entity.getProperty(\"in_Create\");\n                Iterator iterator = iterable.iterator();\n                if(iterator.hasNext()) {\n                    OrientVertex vertex = (OrientVertex)iterator.next();\n                    jsonMap.put(\"createRid\", vertex.getIdentity().toString());\n                    jsonMap.put(\"createUserId\", vertex.getProperty(\"userId\"));\n                    jsonMap.put(\"gravatar\", vertex.getProperty(\"gravatar\"));\n                }\n                iterable = entity.getProperty(\"out_HasTag\");\n                if(iterable != null) {\n                    iterator = iterable.iterator();\n                    List<String> tags = new ArrayList<String>();\n                    while(iterator.hasNext()) {\n                        OrientVertex vertex = (OrientVertex)iterator.next();\n                        tags.add(vertex.getProperty(\"tagId\"));\n                    }\n                    if(tags.size() > 0) jsonMap.put(\"tags\", tags);\n                }\n                switch(entity.getLabel()) {\n                    case \"Post\":\n                        jsonMap.put(\"entityId\", entity.getProperty(\"entityId\"));\n                        jsonMap.put(\"title\", entity.getProperty(\"title\"));\n                        jsonMap.put(\"summary\", entity.getProperty(\"summary\"));\n                        jsonMap.put(\"content\", entity.getProperty(\"content\"));\n                        iterable = entity.getProperty(\"in_HasPost\");\n                        iterator = iterable.iterator();\n                        if(iterator.hasNext()) {\n                            OrientVertex vertex = (OrientVertex)iterator.next();\n                            jsonMap.put(\"parentRid\", vertex.getIdentity().toString());\n                            jsonMap.put(\"parentId\", vertex.getProperty(\"categoryId\"));\n                            jsonMap.put(\"parentType\", vertex.getLabel());\n                        }\n                        if(entity.getProperty(\"originalAuthor\") != null) jsonMap.put(\"originalAuthor\", entity.getProperty(\"originalAuthor\"));\n                        if(entity.getProperty(\"originalSite\") != null) jsonMap.put(\"originalSite\", entity.getProperty(\"originalSite\"));\n                        if(entity.getProperty(\"originalUrl\") != null) jsonMap.put(\"originalUrl\", entity.getProperty(\"originalUrl\"));\n                        break;\n                    case \"Product\":\n                        jsonMap.put(\"entityId\", entity.getProperty(\"entityId\"));\n                        jsonMap.put(\"name\", entity.getProperty(\"name\"));\n                        jsonMap.put(\"description\", entity.getProperty(\"description\"));\n                        jsonMap.put(\"content\", entity.getProperty(\"content\"));\n                        jsonMap.put(\"variants\", entity.getProperty(\"variants\"));\n                        iterable = entity.getProperty(\"in_HasProduct\");\n                        iterator = iterable.iterator();\n                        if(iterator.hasNext()) {\n                            OrientVertex vertex = (OrientVertex)iterator.next();\n                            jsonMap.put(\"parentRid\", vertex.getIdentity().toString());\n                            jsonMap.put(\"parentId\", vertex.getProperty(\"categoryId\"));\n                            jsonMap.put(\"parentType\", vertex.getLabel());\n                        }\n                        break;\n                    default:\n                        logger.error(\"Unknown entity type\", entity.getLabel());\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return jsonMap;\n    }\n\n    /**\n     * Get recent entity for category blog/news/forum/catelog regardless category\n     *\n     * @param objects\n     * @return\n     * @throws Exception\n     */\n    public boolean getRecentEntity(String categoryType, Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        Integer pageSize = (Integer)data.get(\"pageSize\");\n        Integer pageNo = (Integer)data.get(\"pageNo\");\n        if(pageSize == null) {\n            inputMap.put(\"result\", \"pageSize is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        if(pageNo == null) {\n            inputMap.put(\"result\", \"pageNo is required\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n        String sortDir = (String)data.get(\"sortDir\");\n        String sortedBy = (String)data.get(\"sortedBy\");\n        if(sortDir == null) {\n            sortDir = \"desc\";\n        }\n        if(sortedBy == null) {\n            sortedBy = \"createDate\";\n        }\n        // allowUpdate will always be false as it has to be posted in a category context.\n        boolean allowUpdate = false;\n\n        // Get the list from cache.\n        List<String> list = getRecentEntityList(host, categoryType, sortedBy, sortDir);\n\n        if(list != null && list.size() > 0) {\n            long total = list.size();\n            List<Map<String, Object>> entities = new ArrayList<Map<String, Object>>();\n            for(int i = pageSize*(pageNo - 1); i < Math.min(pageSize*pageNo, list.size()); i++) {\n                String entityRid = list.get(i);\n                Map<String, Object> entity = getCategoryEntity(entityRid);\n                if(entity != null) {\n                    entities.add(entity);\n                } else {\n                    logger.warn(\"Could not find entity {} from List {}\", entityRid, host + categoryType);\n                }\n            }\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", total);\n            result.put(\"entities\", entities);\n            result.put(\"allowUpdate\", allowUpdate);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        } else {\n            // there is no post available. but still need to return allowPost\n            Map<String, Object> result = new HashMap<String, Object>();\n            result.put(\"total\", 0);\n            result.put(\"allowUpdate\", allowUpdate);\n            inputMap.put(\"result\", mapper.writeValueAsString(result));\n            return true;\n        }\n    }\n\n    protected List<String> getRecentEntityList(String host, String categoryType, String sortedBy, String sortDir) {\n        List<String> list = null;\n        // get list from cache\n        Map<String, Object> categoryMap = ServiceLocator.getInstance().getMemoryImage(\"categoryMap\");\n        ConcurrentMap<Object, Object> listCache = (ConcurrentMap<Object, Object>)categoryMap.get(\"listCache\");\n        if(listCache == null) {\n            listCache = new ConcurrentLinkedHashMap.Builder<Object, Object>()\n                    .maximumWeightedCapacity(200)\n                    .build();\n            categoryMap.put(\"listCache\", listCache);\n        } else {\n            list = (List<String>)listCache.get(host + categoryType);\n        }\n        if(list == null) {\n            // not in cache, get from db\n            list = getRecentEntityListDb(host, categoryType, sortedBy, sortDir);\n            if(list != null) {\n                listCache.put(host + categoryType, list);\n            }\n        }\n        return list;\n    }\n\n    protected List<String> getRecentEntityListDb(String host, String categoryType, String sortedBy, String sortDir) {\n        List<String> entityList = null;\n        String sql = \"select @rid from Post where host = ? and in_HasPost[0].@class = ? order by \" + sortedBy + \" \" + sortDir;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> entities = graph.getRawGraph().command(query).execute(host, categoryType);\n            if(entities.size() > 0) {\n                entityList = new ArrayList<String>();\n                for(ODocument entity: entities) {\n                    entityList.add(((ODocument)entity.field(\"rid\")).field(\"@rid\").toString());\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return entityList;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.AbstractBfnRule",
      "createDate": "2016-03-31T00:36:30.392"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.392",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:237",
    "@version": 1,
    "@class": "Event",
    "eventId": 10238,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.delivery;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.AbstractCommerceRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.config.GetConfigRule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport org.slf4j.ext.XLogger;\nimport org.slf4j.ext.XLoggerFactory;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.*;\n\n/**\n * Created by steve on 20/02/16.\n */\npublic abstract class AbstractAddressRule extends AbstractCommerceRule implements Rule {\n    static final XLogger logger = XLoggerFactory.getXLogger(AbstractAddressRule.class);\n    static final String TAX = \"tax\";\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    protected void updAddress(Map<String, Object> data) throws Exception {\n        logger.entry(data);\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            graph.begin();\n            Vertex user =  graph.getVertexByKey(\"User.userId\", data.get(\"userId\"));\n            if(user != null) {\n                Map<String, Object> shippingAddress = (Map<String, Object>)data.get(\"shippingAddress\");\n                if(shippingAddress != null) {\n                    user.setProperty(\"shippingAddress\", shippingAddress);\n                }\n                Map<String, Object> billingAddress = (Map<String, Object>)data.get(\"billingAddress\");\n                if(billingAddress != null) {\n                    user.setProperty(\"billingAddress\", billingAddress);\n                }\n                String braintreeCustomerId = (String)data.get(\"braintreeCustomerId\");\n                if(braintreeCustomerId != null) {\n                    user.setProperty(\"braintreeCustomerId\", braintreeCustomerId);\n                }\n                user.setProperty(\"updateDate\", data.get(\"updateDate\"));\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    /**\n     * Assuming that default delivery method will identify product type (goods vs services)\n     *\n     */\n    public static Map<String, BigDecimal> calculateTax(String host, Map<String, Object> address, List<Map<String, Object>> items, BigDecimal subTotal) throws Exception {\n        Map<String, BigDecimal> taxes = new HashMap<String, BigDecimal>();\n        String country = (String)address.get(\"country\");\n        String province = (String)address.get(\"province\");\n        String postalPost = (String)address.get(\"postalCode\");\n        GetConfigRule getConfigRule = new GetConfigRule();\n        String s = getConfigRule.getConfig(host, TAX, \"$.properties.taxIncluded\");\n        boolean taxIncluded = Boolean.valueOf(s);\n        if(taxIncluded) {\n            // do nothing here.\n        } else {\n\n            String tax = getConfigRule.getConfig(host, TAX, \"$.properties.\" + country + \".\" + province);\n            if(tax.startsWith(\"0\")) {\n                // we have single value tax rate.\n                BigDecimal b = subTotal.multiply(new BigDecimal(tax));\n                b = b.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"Tax\", b);\n            } else if(tax.startsWith(\"[\")) {\n                // we have an array of tax rate\n                List<Map<String, Object>> list = ServiceLocator.getInstance().getMapper().readValue(tax, new TypeReference<List<HashMap<String, Object>>>() {});\n                for(Map<String, Object> t: list) {\n                    Iterator<String> iterator = t.keySet().iterator();\n                    String name = iterator.next();\n                    BigDecimal b = subTotal.multiply(new BigDecimal((Double)t.get(name)));\n                    b = b.setScale(2, RoundingMode.HALF_UP);\n                    taxes.put(name, b);\n                }\n            } else {\n                tax = getConfigRule.getConfig(host, TAX, \"$.properties.\" + country + \".\" + province + \".\" + postalPost);\n                // we assume that this tax will be a single value\n                BigDecimal b = subTotal.multiply(new BigDecimal(tax));\n                b = b.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"Tax\", b);\n            }\n        }\n        return taxes;\n    }\n    // TODO calculate base on the rule defined in the config.\n    /*\n    public static Map<String, BigDecimal> calculateTax(String province, BigDecimal subTotal) {\n        Map<String, BigDecimal> taxes = new HashMap<String, BigDecimal>();\n        BigDecimal gst = subTotal.multiply(new BigDecimal(0.05));\n        gst = gst.setScale(2, RoundingMode.HALF_UP);\n        switch(province) {\n            case \"AB\":\n                taxes.put(\"GST\", gst);\n                break;\n            case \"BC\":\n                taxes.put(\"GST\", gst);\n                BigDecimal bc = subTotal.multiply(new BigDecimal(0.07));\n                bc = bc.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"PST\", bc);\n                break;\n            case \"MB\":\n                taxes.put(\"GST\", gst);\n                BigDecimal mb = subTotal.multiply(new BigDecimal(0.08));\n                mb = mb.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"PST\", mb);\n                break;\n            case \"NB\":\n                BigDecimal nb = subTotal.multiply(new BigDecimal(0.13));\n                nb = nb.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"HST\", nb);\n                break;\n            case \"NF\":\n                BigDecimal nf = subTotal.multiply(new BigDecimal(0.13));\n                nf = nf.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"HST\", nf);\n                break;\n            case \"NS\":\n                BigDecimal ns = subTotal.multiply(new BigDecimal(0.15));\n                ns = ns.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"HST\", ns);\n                break;\n            case \"NT\":\n                taxes.put(\"GST\", gst);\n                break;\n            case \"NU\":\n                taxes.put(\"GST\", gst);\n                break;\n            case \"ON\":\n                BigDecimal on = subTotal.multiply(new BigDecimal(0.13));\n                on = on.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"HST\", on);\n                break;\n            case \"PE\":\n                BigDecimal pe = subTotal.multiply(new BigDecimal(0.14));\n                pe = pe.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"HST\", pe);\n                break;\n            case \"QC\":\n                taxes.put(\"GST\", gst);\n                BigDecimal qc = subTotal.multiply(new BigDecimal(0.09975));\n                qc = qc.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"QST\", qc);\n                break;\n            case \"SK\":\n                taxes.put(\"GST\", gst);\n                BigDecimal sk = subTotal.multiply(new BigDecimal(0.05));\n                sk = sk.setScale(2, RoundingMode.HALF_UP);\n                taxes.put(\"PST\", sk);\n                break;\n            case \"YK\":\n                taxes.put(\"GST\", gst);\n                break;\n            default:\n                logger.error(\"Unknown Province \" + province);\n                break;\n        }\n        return taxes;\n    }\n    */\n    // TODO calculate based on the rule defined in the config.\n    public static BigDecimal calculateShipping(String host, Map<String, Object> address, List<Map<String, Object>> items, BigDecimal subTotal) {\n        BigDecimal b = subTotal.multiply(new BigDecimal(0.05));\n        b = b.setScale(2, RoundingMode.HALF_UP);\n        return b.add(new BigDecimal(20.00));\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.delivery.AbstractAddressRule",
      "createDate": "2016-03-31T00:36:30.402"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.402",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:238",
    "@version": 1,
    "@class": "Event",
    "eventId": 10239,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.delivery;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.ext.XLogger;\nimport org.slf4j.ext.XLoggerFactory;\n\nimport java.math.BigDecimal;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 20/02/16.\n *\n * Confirm billing address can only be called from shopping cart. assume cartTotal is there.\n *\n * AccessLevel R [user]\n *\n */\npublic class CnfBillingAddressRule extends AbstractAddressRule implements Rule {\n    static final XLogger logger = XLoggerFactory.getXLogger(CnfBillingAddressRule.class);\n\n\n    @Override\n    public boolean execute(Object... objects) throws Exception {\n        logger.entry(objects);\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> resultMap = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String userId = (String)user.get(\"userId\");\n        String host = (String)data.get(\"host\");\n        // expect a list of products/services in order to calculate tax etc.\n        // the calculation will be done on the server side in order to avoid hack in the js.\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex updateUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", userId);\n            if(updateUser != null) {\n                BigDecimal cartTotal = new BigDecimal(data.get(\"cartTotal\").toString());\n                List<Map<String, Object>> items = (List)data.get(\"cartItems\");\n                resultMap = new HashMap<String, Object>();\n                Map<String, Object> billingAddress = (Map<String, Object>)data.get(\"billingAddress\");\n                // calculate taxes\n                Map<String, BigDecimal> taxes = calculateTax(host, billingAddress, items, cartTotal);\n                resultMap.put(\"taxes\", taxes);\n            } else {\n                error = \"User with userId \" + userId + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            inputMap.put(\"result\", mapper.writeValueAsString(resultMap));\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.delivery.CnfBillingAddressRule",
      "createDate": "2016-03-31T00:36:30.410"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.410",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:239",
    "@version": 1,
    "@class": "Event",
    "eventId": 10240,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.delivery;\n\nimport com.networknt.light.rule.Rule;\nimport java.util.Map;\n\n/**\n * Created by steve on 20/02/16.\n */\npublic class UpdShippingAddressEvRule extends AbstractAddressRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updAddress(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.delivery.UpdShippingAddressEvRule",
      "createDate": "2016-03-31T00:36:30.418"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.418",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:240",
    "@version": 1,
    "@class": "Event",
    "eventId": 10241,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.delivery;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 20/02/16.\n */\npublic class UpdBillingAddressEvRule extends AbstractAddressRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updAddress(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.delivery.UpdBillingAddressEvRule",
      "createDate": "2016-03-31T00:36:30.426"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.426",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:241",
    "@version": 1,
    "@class": "Event",
    "eventId": 10242,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.delivery;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.ext.XLogger;\nimport org.slf4j.ext.XLoggerFactory;\n\nimport java.math.BigDecimal;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 20/02/16.\n *\n * Confirm shipping address will only be called from shopping cart. So assume cartTotal is not null\n *\n * AccessLevel R [user]\n *\n */\npublic class CnfShippingAddressRule extends AbstractAddressRule implements Rule {\n    static final XLogger logger = XLoggerFactory.getXLogger(CnfShippingAddressRule.class);\n\n\n    @Override\n    public boolean execute(Object... objects) throws Exception {\n        logger.entry(objects);\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> resultMap = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String userId = (String)user.get(\"userId\");\n        String host = (String)data.get(\"host\");\n        // expect a list of products in order to calculate shipping cost, shipping address etc.\n        // the calculation will be done on the server side in order to avoid hack in the js.\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex updateUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", userId);\n            if(updateUser != null) {\n                // now return the shipping cost and tax according to the address.\n                BigDecimal cartTotal = new BigDecimal(data.get(\"cartTotal\").toString());\n                List<Map<String, Object>> items = (List)data.get(\"cartItems\");\n                resultMap = new HashMap<String, Object>();\n                Map<String, Object> shippingAddress = (Map<String, Object>)data.get(\"shippingAddress\");\n                BigDecimal shipping = calculateShipping(host, shippingAddress, items, cartTotal);\n                resultMap.put(\"shipping\", shipping);\n                // calculate taxes\n                Map<String, BigDecimal> taxes = calculateTax(host, shippingAddress, items, cartTotal.add(shipping));\n                resultMap.put(\"taxes\", taxes);\n            } else {\n                error = \"User with userId \" + userId + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            inputMap.put(\"result\", mapper.writeValueAsString(resultMap));\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.delivery.CnfShippingAddressRule",
      "createDate": "2016-03-31T00:36:30.434"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.434",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:242",
    "@version": 1,
    "@class": "Event",
    "eventId": 10243,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.delivery;\n\nimport com.braintreegateway.Customer;\nimport com.braintreegateway.CustomerRequest;\nimport com.braintreegateway.Result;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.ext.XLogger;\nimport org.slf4j.ext.XLoggerFactory;\n\nimport java.math.BigDecimal;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 20/02/16.\n */\npublic class UpdBillingAddressRule extends AbstractAddressRule implements Rule {\n    static final XLogger logger = XLoggerFactory.getXLogger(UpdBillingAddressRule.class);\n\n\n    @Override\n    public boolean execute(Object... objects) throws Exception {\n        logger.entry(objects);\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> resultMap = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String userId = (String)user.get(\"userId\");\n        String host  = (String)data.get(\"host\");\n\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex updateUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", userId);\n            if(updateUser != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll(data);\n                eventData.put(\"userId\", userId);\n                eventData.put(\"updateDate\", new java.util.Date());\n                // create a braintree customer here.\n                Map<String, Object> billingAddress = (Map<String, Object>)data.get(\"billingAddress\");\n                CustomerRequest request = new CustomerRequest()\n                        .firstName((String)billingAddress.get(\"firstName\"))\n                        .lastName((String)billingAddress.get(\"lastName\"))\n                        .email((String)billingAddress.get(\"email\"))\n                        .phone((String)billingAddress.get(\"phone\"));\n                Result<Customer> customerResult = gatewayMap.get(host).customer().create(request);\n                if(customerResult.isSuccess()) {\n                    Customer customer = customerResult.getTarget();\n                    eventData.put(\"braintreeCustomerId\", customer.getId());\n                } else {\n                    logger.error(\"failed to create customer\" + customerResult.getMessage());\n                }\n\n                // now return the tax according to the address if cartTotal exists\n                Object total = data.get(\"cartTotal\");\n                if(total != null) {\n                    BigDecimal cartTotal = new BigDecimal(data.get(\"cartTotal\").toString());\n                    List<Map<String, Object>> items = (List)data.get(\"cartItems\");\n                    resultMap = new HashMap<String, Object>();\n                    // calculate taxes\n                    Map<String, BigDecimal> taxes = calculateTax(host, billingAddress, items, cartTotal);\n                    resultMap.put(\"taxes\", taxes);\n                }\n            } else {\n                error = \"User with userId \" + userId + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            if(resultMap != null) inputMap.put(\"result\", mapper.writeValueAsString(resultMap));\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.delivery.UpdBillingAddressRule",
      "createDate": "2016-03-31T00:36:30.442"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.442",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:243",
    "@version": 1,
    "@class": "Event",
    "eventId": 10244,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.delivery;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.ext.XLogger;\nimport org.slf4j.ext.XLoggerFactory;\n\nimport java.math.BigDecimal;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 20/02/16.\n *\n * AccessLevel R [user]\n */\npublic class UpdShippingAddressRule extends AbstractAddressRule implements Rule {\n    static final XLogger logger = XLoggerFactory.getXLogger(UpdShippingAddressRule.class);\n\n\n    @Override\n    public boolean execute(Object... objects) throws Exception {\n        logger.entry(objects);\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> resultMap = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String userId = (String)user.get(\"userId\");\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex updateUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", userId);\n            if(updateUser != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll(data);\n                eventData.put(\"userId\", userId);\n                eventData.put(\"updateDate\", new java.util.Date());\n\n                // now return the shipping cost and tax according to the address if cartTotal exists\n                Object total = data.get(\"cartTotal\");\n                if(total != null) {\n                    BigDecimal cartTotal = new BigDecimal(data.get(\"cartTotal\").toString());\n                    List<Map<String, Object>> items = (List)data.get(\"cartItems\");\n                    resultMap = new HashMap<String, Object>();\n                    Map<String, Object> shippingAddress = (Map<String, Object>)data.get(\"shippingAddress\");\n                    BigDecimal shipping = calculateShipping(host, shippingAddress, items, cartTotal);\n                    resultMap.put(\"shipping\", shipping);\n                    // calculate taxes\n                    Map<String, BigDecimal> taxes = calculateTax(host, shippingAddress, items, cartTotal.add(shipping));\n                    resultMap.put(\"taxes\", taxes);\n                }\n            } else {\n                error = \"User with userId \" + userId + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            if(resultMap != null) inputMap.put(\"result\", mapper.writeValueAsString(resultMap));\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.delivery.UpdShippingAddressRule",
      "createDate": "2016-03-31T00:36:30.451"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.451",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:244",
    "@version": 1,
    "@class": "Event",
    "eventId": 10245,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.EmailUtil;\nimport com.networknt.light.util.HashUtil;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 8/29/2014.\n * need to check both email and displayName uniqueness.\n *\n * AccessLevel A\n *\n */\npublic class SignUpUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String email = (String) data.get(\"email\");\n        String userId = (String) data.get(\"userId\");\n        String host = (String) data.get(\"host\");\n        String error = null;\n\n        // need to make sure that email and userId are unique.\n        // skip the cache and go to db directly?\n        if(isUserInDbByEmail(email)) {\n            error = \"The email address \" + email + \" has been signed up. Please login or recover your password.\";\n            inputMap.put(\"responseCode\", 400);\n        } else {\n\n            if(isUserInDbByUserId(userId)) {\n                error = \"The userId \" + userId + \" has been used by another user.\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                // check if password and password_confirm are the same.\n                String password = (String) data.get(\"password\");\n                String passwordConfirm = (String)data.remove(\"passwordConfirm\");\n                // after schema validation in the backend password and password_confirm should not be empty.\n                if(!password.equals(passwordConfirm)) {\n                    error = \"password and password confirm are not the same\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll(data);\n                    // replace the password with the hashed password.\n                    password = HashUtil.generateStorngPasswordHash(password);\n                    eventData.put(\"password\", password);\n                    // set default values here.\n                    eventData.put(\"karma\", 0);\n                    List<String> roles = new ArrayList<String>();\n                    roles.add(\"user\"); // default role for sign up users, more roles can be added later by admin\n                    eventData.put(\"roles\", roles);\n                    eventData.put(\"createDate\", new java.util.Date());\n\n                    // populate activation code here to indicate that this user is not acitvate yet.\n                    // you cannot login if there is an activation code in your user profile.\n                    String code = HashUtil.generateUUID();\n                    eventData.put(\"code\", code);\n                    // send email for activation\n                    EmailUtil.sendSignupEmail(host, email, code);\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.SignUpUserRule",
      "createDate": "2016-03-31T00:36:30.461"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.461",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:245",
    "@version": 1,
    "@class": "Event",
    "eventId": 10246,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 8/29/2014.\n *\n * AccessLevel R [owner, admin, userAdmin]\n */\npublic class DelUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String userId = (String)data.get(\"userId\");\n        String error = null;\n\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"You can only delete user from host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            if(rid == null && userId == null) {\n                error = \"rid or userId is required\";\n                inputMap.put(\"responseCode\", 400);\n            } else {\n                OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                Vertex deleteUser = null;\n                try {\n                    if(rid != null) {\n                        deleteUser = DbService.getVertexByRid(graph, rid);\n                        if(deleteUser == null) {\n                            error = \"User with rid \" + rid + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                        }\n                    } else {\n                        deleteUser = getUserByUserId(graph, userId);\n                        if(deleteUser == null) {\n                            error = \"User with userId \" + userId + \" cannot be found.\";\n                            inputMap.put(\"responseCode\", 404);\n                        }\n                    }\n                    if(deleteUser != null) {\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"userId\", deleteUser.getProperty(\"userId\").toString());\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Exception:\", e);\n                    throw e;\n                } finally {\n                    graph.shutdown();\n                }\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DelUserRule",
      "createDate": "2016-03-31T00:36:30.469"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.469",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:246",
    "@version": 1,
    "@class": "Event",
    "eventId": 10247,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class UnlockUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updLockByUserId(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UnlockUserEvRule",
      "createDate": "2016-03-31T00:36:30.479"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.479",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:247",
    "@version": 1,
    "@class": "Event",
    "eventId": 10248,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/29/2014.\n *\n * Logged in user update its own password\n *\n * AccessLevel R [user]\n *\n */\npublic class UpdPasswordRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String userId = (String)user.get(\"userId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", userId);\n            if(updateUser != null) {\n                String password = (String) data.get(\"password\");\n                String newPassword = (String)data.get(\"newPassword\");\n                String passwordConfirm = (String)data.get(\"passwordConfirm\");\n\n                // check if the password match\n                boolean match = checkPassword(graph, updateUser, password);\n                if(match) {\n                    if(newPassword.equals(passwordConfirm)) {\n                        newPassword = HashUtil.generateStorngPasswordHash(newPassword);\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                        eventData.put(\"userId\", updateUser.getProperty(\"userId\"));\n                        eventData.put(\"password\", newPassword);\n                        eventData.put(\"updateDate\", new java.util.Date());\n                    } else {\n                        error = \"New password and password confirm are not the same.\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                } else {\n                    error = \"The old password is incorrect.\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } else {\n                error = \"User with userId \" + userId + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdPasswordRule",
      "createDate": "2016-03-31T00:36:30.486"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.486",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:248",
    "@version": 1,
    "@class": "Event",
    "eventId": 10249,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 9/24/2014.\n *\n * log out a user.\n *\n * AccessLevel R [user]\n *\n */\npublic class LogOutUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        // The assumption is that user should have a token when he/she click logout.\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String userId = (String)user.get(\"userId\");\n        // check if the rid exists or not. if exists, then create event.\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex vertex = graph.getVertexByKey(\"User.userId\", userId);\n            if(vertex != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.put(\"userId\", vertex.getProperty(\"userId\"));\n                eventData.put(\"host\", data.get(\"host\"));\n                eventData.put(\"refreshToken\", data.get(\"refreshToken\"));\n                eventData.put(\"logOutDate\", new java.util.Date());\n            } else {\n                error = \"User with userId \" + userId + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.LogOutUserRule",
      "createDate": "2016-03-31T00:36:30.496"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.496",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:249",
    "@version": 1,
    "@class": "Event",
    "eventId": 10250,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class UpUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        upVoteUser(data);\n        // TODO refresh hot user list and cold user list\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpUserEvRule",
      "createDate": "2016-03-31T00:36:30.507"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.507",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:250",
    "@version": 1,
    "@class": "Event",
    "eventId": 10251,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 20/01/15.\n */\npublic class RevokeRefreshTokenEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        revokeRefreshToken(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.RevokeRefreshTokenEvRule",
      "createDate": "2016-03-31T00:36:30.514"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.514",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:251",
    "@version": 1,
    "@class": "Event",
    "eventId": 10252,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 8/28/2014.\n */\npublic class UpdPasswordEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updPassword(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdPasswordEvRule",
      "createDate": "2016-03-31T00:36:30.521"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.521",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:252",
    "@version": 1,
    "@class": "Event",
    "eventId": 10253,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 8/29/2014.\n */\npublic class DelUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delUser(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DelUserEvRule",
      "createDate": "2016-03-31T00:36:30.528"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.528",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:253",
    "@version": 1,
    "@class": "Event",
    "eventId": 10254,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 20/01/15.\n *\n * revoke refresh token if user's device is lost or forget to log out on public computer.\n *\n * user role can only revoke refresh token belongs to the current user.\n *\n * AccessLevel R [owner, admin, userAdmin, user]\n *\n */\npublic class RevokeRefreshTokenRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String password = (String)data.get(\"password\");\n        String error = null;\n        Map<String, Object> userMap = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String)userMap.get(\"@rid\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex user = DbService.getVertexByRid(graph, rid);\n            if(user != null) {\n                // check password again\n                if(checkPassword(graph, user, password)) {\n                    // check if there are refresh tokens for the user\n                    Vertex credential = user.getProperty(\"credential\");\n                    if(credential != null) {\n                        Map clientRefreshTokens = credential.getProperty(\"clientRefreshTokens\");\n                        if(clientRefreshTokens != null) {\n                            // generate the event to remove it.\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"userId\", user.getProperty(\"userId\"));\n                            eventData.put(\"updateDate\", new java.util.Date());\n                        }\n                    }\n                } else {\n                    error = \"Invalid password\";\n                    inputMap.put(\"responseCode\", 401);\n                }\n            } else {\n                error = \"User with rid \" + rid + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.RevokeRefreshTokenRule",
      "createDate": "2016-03-31T00:36:30.536"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.536",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:254",
    "@version": 1,
    "@class": "Event",
    "eventId": 10255,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 9/24/2014.\n */\npublic class LogOutUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        logOut(data);\n        // TODO update global online user count\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.LogOutUserEvRule",
      "createDate": "2016-03-31T00:36:30.543"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.543",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:255",
    "@version": 1,
    "@class": "Event",
    "eventId": 10256,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 26/05/15\n *\n * Although this rule update database, but it is only one time thing and we\n * don't want side effect in the future when replaying. so just do it in the\n * rule class not event rule class.\n *\n * AccessLevel A everyone.\n * .\n */\npublic class ActivateUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String email = (String) data.get(\"email\");\n        String code = (String)data.get(\"code\");\n        if(email != null && code != null) {\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.putAll(data);\n            inputMap.put(\"result\", \"Your account is activated.\");\n            return true;\n        } else {\n            inputMap.put(\"result\", \"email and activation code are required.\");\n            inputMap.put(\"responseCode\", 400);\n            return false;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.ActivateUserRule",
      "createDate": "2016-03-31T00:36:30.550"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.550",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:256",
    "@version": 1,
    "@class": "Event",
    "eventId": 10257,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * lock a user\n *\n * AccessLevel R [owner, admin, userAdmin]\n *\n */\npublic class LockUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only lock user from host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex lockUser = null;\n                if(rid != null) {\n                    lockUser = DbService.getVertexByRid(graph, rid);\n                    if(lockUser != null) {\n                        if(lockUser.getProperty(\"locked\") != null && (Boolean)lockUser.getProperty(\"locked\")) {\n                            error = \"User with @rid \" + rid + \" has been locked already\";\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"userId\", lockUser.getProperty(\"userId\"));\n                            eventData.put(\"locked\", true);\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    } else {\n                        error = \"User with @rid \" + rid + \" cannot be found.\";\n                        inputMap.put(\"responseCode\", 404);\n                    }\n                } else {\n                    error = \"@rid is required\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.LockUserRule",
      "createDate": "2016-03-31T00:36:30.558"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.558",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:257",
    "@version": 1,
    "@class": "Event",
    "eventId": 10258,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class LockUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updLockByUserId(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.LockUserEvRule",
      "createDate": "2016-03-31T00:36:30.569"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.569",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:258",
    "@version": 1,
    "@class": "Event",
    "eventId": 10259,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.config.GetConfigRule;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.restfb.DefaultFacebookClient;\nimport com.restfb.FacebookClient;\nimport com.restfb.Parameter;\nimport com.restfb.Version;\nimport com.restfb.types.User;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by steve on 13/03/16.\n *\n * AccessLevel A\n */\npublic class FacebookLoginRule extends AbstractUserRule implements Rule {\n    static final String FACEBOOK = \"facebook\";\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String clientId = (String)data.get(\"clientId\");\n        String token = (String)data.get(\"accessToken\");\n        String error = null;\n\n        // for some reasons, facebook login page might be hang and close the window will send a null token here.\n        if(token != null) {\n            // https://developers.google.com/identity/sign-in/web/backend-auth#using-a-google-api-client-library\n            // first need to verify and get user profile from access token\n            GetConfigRule getConfigRule = new GetConfigRule();\n            //String facebookAppId = getConfigRule.getConfig(host, FACEBOOK, \"$.properties.appId\");\n            FacebookClient fbClient = new DefaultFacebookClient(token, Version.VERSION_2_5);\n            User me = fbClient.fetchObject(\"me\", User.class, Parameter.with(\"fields\", \"id,name,email,first_name, last_name, verified\"));\n\n            if (me != null) {\n                String email = me.getEmail();\n                String firstName = me.getFirstName();\n                String lastName = me.getLastName();\n                String name = me.getName();\n                Boolean verified = me.getVerified();\n\n                OrientGraph graph = ServiceLocator.getInstance().getGraph();\n                try {\n                    OrientVertex user = null;\n                    user = (OrientVertex)getUserByEmail(graph, email);\n                    if(user != null) {\n                        // check if the user is locked or not\n                        if (user.getProperty(\"locked\") != null && (boolean)user.getProperty(\"locked\")) {\n                            error = \"Account is locked\";\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            // for third party login, won't remember it.\n                            String jwt = generateToken(user, clientId, false);\n                            if(jwt != null) {\n                                Map<String, Object> tokens = new HashMap<String, Object>();\n                                tokens.put(\"accessToken\", jwt);\n                                tokens.put(\"rid\", user.getIdentity().toString());\n                                inputMap.put(\"result\", mapper.writeValueAsString(tokens));\n                            }\n                            // create an empty eventMap, otherwise the event cannot be saved into event db.\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                        }\n                    } else {\n                        // generate jwt token\n                        Map<String, Object> userMap = new HashMap<String, Object>();\n                        userMap.put(\"userId\", name + \"@g\");\n                        userMap.put(\"host\", host);\n                        userMap.put(\"clientId\", clientId);\n                        List roles = new ArrayList();\n                        roles.add(\"user\");\n                        userMap.put(\"roles\", roles);\n                        userMap.put(\"rememberMe\", false);\n                        String jwt = generateToken(userMap);\n                        if(jwt != null) {\n                            Map<String, Object> tokens = new HashMap<String, Object>();\n                            tokens.put(\"accessToken\", jwt);\n                            inputMap.put(\"result\", mapper.writeValueAsString(tokens));\n                        }\n\n                        // save user\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n\n                        eventData.put(\"clientId\", clientId);\n                        eventData.put(\"host\", data.get(\"host\"));\n                        eventData.put(\"userId\", name + \"@f\");\n                        eventData.put(\"email\", email);\n                        eventData.put(\"roles\", roles);\n                        eventData.put(\"verified\", verified);\n                        eventData.put(\"firstName\", firstName);\n                        eventData.put(\"lastName\", lastName);\n                    }\n                } catch (Exception e) {\n                    logger.error(\"Exception:\", e);\n                    throw e;\n                } finally {\n                    graph.shutdown();\n                }\n            } else {\n                error = \"Invalid facebook accessToken\";\n                inputMap.put(\"responseCode\", 401);\n            }\n        } else {\n            error = \"Invalid facebook accessToken\";\n            inputMap.put(\"responseCode\", 401);\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.FacebookLoginRule",
      "createDate": "2016-03-31T00:36:30.576"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.576",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:259",
    "@version": 1,
    "@class": "Event",
    "eventId": 10260,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * Vote up a user\n *\n * AccessLevel R [user]\n */\npublic class UpUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> userMap = (Map<String, Object>) inputMap.get(\"user\");\n        String error = null;\n\n        String voteUserId = (String)userMap.get(\"userId\");\n        String userRid = (String)data.get(\"@rid\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex user = (OrientVertex)DbService.getVertexByRid(graph, userRid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", voteUserId);\n            if(user == null || voteUser == null) {\n                error = \"User or vote user cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if this VoteUserId has down voted user before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(user, Direction.OUT, \"UpVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(user)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have up vote the user already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"userId\", user.getProperty(\"userId\"));\n                    eventData.put(\"voteUserId\", voteUserId);\n                    eventData.put(\"updateDate\", new java.util.Date());\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpUserRule",
      "createDate": "2016-03-31T00:36:30.584"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.584",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:260",
    "@version": 1,
    "@class": "Event",
    "eventId": 10261,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n *\n * Update role for a user.\n *\n * AccessLevel R [owner, admin, userAdmin]\n *\n */\npublic class UpdRoleRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String error = null;\n        String userHost = (String) user.get(\"host\");\n        if (userHost != null) {\n            // this is admin role to update user role\n            if(!userHost.equals(data.get(\"host\"))) {\n                error = \"admin can only update user role from host: \" + userHost;\n                inputMap.put(\"responseCode\", 403);\n            } else {\n                // TODO make sure all the newly added roles belongs to the host\n            }\n        } else {\n            // this is owner update user role\n            Map eventMap = getEventMap(inputMap);\n            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n            inputMap.put(\"eventMap\", eventMap);\n            eventData.put(\"userId\", data.get(\"userId\"));\n            eventData.put(\"roles\", data.get(\"roles\"));\n            eventData.put(\"updateUserId\", user.get(\"userId\"));\n            eventData.put(\"updateDate\", new java.util.Date());\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdRoleRule",
      "createDate": "2016-03-31T00:36:30.594"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.594",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:261",
    "@version": 1,
    "@class": "Event",
    "eventId": 10262,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 13/03/16.\n */\npublic class GoogleLoginEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addUser(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.GoogleLoginEvRule",
      "createDate": "2016-03-31T00:36:30.601"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.601",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:262",
    "@version": 1,
    "@class": "Event",
    "eventId": 10263,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/28/2014.\n *\n * Get a single user profile\n *\n * AccessLevel R [user]\n *\n */\npublic class GetUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"@rid\");\n        String email = (String) data.get(\"email\");\n        String userId = (String) data.get(\"userId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            if(rid != null) {\n                OrientVertex user = (OrientVertex)DbService.getVertexByRid(graph, rid);\n                if(user != null) {\n                    inputMap.put(\"result\", user.getRecord().toJSON());\n                    return true;\n                } else {\n                    inputMap.put(\"result\", \"User with rid \" + rid + \" cannot be found.\");\n                    inputMap.put(\"responseCode\", 404);\n                    return false;\n                }\n            } else if(userId != null) {\n                OrientVertex user = (OrientVertex)getUserByUserId(graph, userId);\n                if(user != null) {\n                    inputMap.put(\"result\", user.getRecord().toJSON());\n                    return true;\n                } else {\n                    inputMap.put(\"result\", \"User with userId \" + userId + \" cannot be found.\");\n                    inputMap.put(\"responseCode\", 404);\n                    return false;\n                }\n            } else if(email != null) {\n                OrientVertex user = (OrientVertex)getUserByEmail(graph, email);\n                if(user != null) {\n                    inputMap.put(\"result\", user.getRecord().toJSON());\n                    return true;\n                } else {\n                    inputMap.put(\"result\", \"User with email \" + email + \" cannot be found.\");\n                    inputMap.put(\"responseCode\", 404);\n                    return false;\n                }\n            } else {\n                inputMap.put(\"result\", \"@rid or userId or email is required.\");\n                inputMap.put(\"responseCode\", 400);\n                return false;\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.GetUserRule",
      "createDate": "2016-03-31T00:36:30.609"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.609",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:263",
    "@version": 1,
    "@class": "Event",
    "eventId": 10264,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n */\npublic class DownUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        downVoteUser(data);\n        // TODO refresh hot user list and code user list\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DownUserEvRule",
      "createDate": "2016-03-31T00:36:30.628"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.628",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:264",
    "@version": 1,
    "@class": "Event",
    "eventId": 10265,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by Steve Hu on 2015-01-19.\n */\npublic class UpdRoleEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updRole(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdRoleEvRule",
      "createDate": "2016-03-31T00:36:30.634"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.634",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:265",
    "@version": 1,
    "@class": "Event",
    "eventId": 10266,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * Vote down a user\n *\n * AccessLevel R [user]\n *\n */\npublic class DownUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>)objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        Map<String, Object> userMap = (Map<String, Object>) inputMap.get(\"user\");\n        String error = null;\n\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String voteUserId = (String)userMap.get(\"userId\");\n            String userRid = (String)data.get(\"@rid\");\n            OrientVertex user = (OrientVertex)DbService.getVertexByRid(graph, userRid);\n            OrientVertex voteUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", voteUserId);\n            if(user == null || voteUser == null) {\n                error = \"User or vote user cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            } else {\n                // check if this VoteUserId has down voted user before.\n                boolean voted = false;\n                for (Edge edge : voteUser.getEdges(user, Direction.OUT, \"DownVote\")) {\n                    if(edge.getVertex(Direction.IN).equals(user)) voted = true;\n                }\n                if(voted) {\n                    error = \"You have down vote the user already\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"userId\", user.getProperty(\"userId\"));\n                    eventData.put(\"voteUserId\", voteUserId);\n                    eventData.put(\"updateDate\", new java.util.Date());\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.DownUserRule",
      "createDate": "2016-03-31T00:36:30.641"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.641",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:266",
    "@version": 1,
    "@class": "Event",
    "eventId": 10267,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier;\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.config.GetConfigRule;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.*;\n\n/**\n * Created by steve on 13/03/16.\n *\n * AccessLevel A\n */\npublic class GoogleLoginRule extends AbstractUserRule implements Rule {\n    static final String GOOGLE = \"google\";\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String clientId = (String)data.get(\"clientId\");\n        String token = (String)data.get(\"id_token\");\n        String error = null;\n\n        // https://developers.google.com/identity/sign-in/web/backend-auth#using-a-google-api-client-library\n        // first need to verify and get user profile from access token\n        GetConfigRule getConfigRule = new GetConfigRule();\n        String googleClientId = getConfigRule.getConfig(host, GOOGLE, \"$.properties.client_id\");\n\n        // Set up the HTTP transport and JSON factory\n        HttpTransport transport = GoogleNetHttpTransport.newTrustedTransport();\n        JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();\n\n        GoogleIdTokenVerifier verifier = new GoogleIdTokenVerifier.Builder(transport, jsonFactory)\n                .setAudience(Arrays.asList(googleClientId))\n                // If you retrieved the token on Android using the Play Services 8.3 API or newer, set\n                // the issuer to \"https://accounts.google.com\". Otherwise, set the issuer to\n                // \"accounts.google.com\". If you need to verify tokens from multiple sources, build\n                // a GoogleIdTokenVerifier for each issuer and try them both.\n                .setIssuer(\"accounts.google.com\")\n                .build();\n\n        GoogleIdToken idToken = verifier.verify(token);\n        if (idToken != null) {\n            GoogleIdToken.Payload payload = idToken.getPayload();\n\n            // Get profile information from payload\n            String email = payload.getEmail();\n            boolean emailVerified = Boolean.valueOf(payload.getEmailVerified());\n            String name = (String) payload.get(\"name\");\n            String familyName = (String) payload.get(\"family_name\");\n            String givenName = (String) payload.get(\"given_name\");\n\n            // generate networknt access token here.\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                OrientVertex user = null;\n                user = (OrientVertex)getUserByEmail(graph, email);\n                if(user != null) {\n                    // check if the user is locked or not\n                    if (user.getProperty(\"locked\") != null && (boolean)user.getProperty(\"locked\")) {\n                        error = \"Account is locked\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        // for third party login, won't remember it.\n                        String jwt = generateToken(user, clientId, false);\n                        if(jwt != null) {\n                            Map<String, Object> tokens = new HashMap<String, Object>();\n                            tokens.put(\"accessToken\", jwt);\n                            tokens.put(\"rid\", user.getIdentity().toString());\n                            inputMap.put(\"result\", mapper.writeValueAsString(tokens));\n                        }\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                    }\n                } else {\n                    // Generate access token\n                    Map<String, Object> userMap = new HashMap<String, Object>();\n                    userMap.put(\"userId\", name + \"@g\");\n                    userMap.put(\"host\", host);\n                    userMap.put(\"clientId\", clientId);\n                    List roles = new ArrayList();\n                    roles.add(\"user\");\n                    userMap.put(\"roles\", roles);\n                    userMap.put(\"rememberMe\", false);\n\n                    String jwt = generateToken(userMap);\n                    if(jwt != null) {\n                        Map<String, Object> tokens = new HashMap<String, Object>();\n                        tokens.put(\"accessToken\", jwt);\n                        inputMap.put(\"result\", mapper.writeValueAsString(tokens));\n                    }\n                    // save user info into db.\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"clientId\", clientId);\n                    eventData.put(\"host\", host);\n                    eventData.put(\"userId\", name + \"@g\");\n                    eventData.put(\"email\", email);\n                    eventData.put(\"roles\", roles);\n                    eventData.put(\"verified\", emailVerified);\n                    eventData.put(\"firstName\", givenName);\n                    eventData.put(\"lastName\", familyName);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        } else {\n            error = \"Invalid google id_token\";\n            inputMap.put(\"responseCode\", 401);\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.GoogleLoginRule",
      "createDate": "2016-03-31T00:36:30.649"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.649",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:267",
    "@version": 1,
    "@class": "Event",
    "eventId": 10268,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.Map;\n\n/**\n * Created by husteve on 8/29/2014.\n *\n * Logged in user updates its profile\n *\n * AccessLevel R [user]\n *\n */\npublic class UpdProfileRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String userId = (String)user.get(\"userId\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", userId);\n            if(updateUser != null) {\n                Map eventMap = getEventMap(inputMap);\n                Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                inputMap.put(\"eventMap\", eventMap);\n                eventData.putAll(data);\n                eventData.put(\"updateDate\", new java.util.Date());\n            } else {\n                error = \"User with userId \" + userId + \" cannot be found.\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdProfileRule",
      "createDate": "2016-03-31T00:36:30.657"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.657",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:268",
    "@version": 1,
    "@class": "Event",
    "eventId": 10269,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/28/2014.\n */\npublic class SignUpUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addUser(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.SignUpUserEvRule",
      "createDate": "2016-03-31T00:36:30.666"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.666",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:269",
    "@version": 1,
    "@class": "Event",
    "eventId": 10270,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 06/02/16.\n */\npublic class ActivateUserEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        activateUser(data);\n        return true;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.ActivateUserEvRule",
      "createDate": "2016-03-31T00:36:30.682"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.682",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:270",
    "@version": 1,
    "@class": "Event",
    "eventId": 10271,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by husteve on 10/17/2014.\n *\n * Unlock a locked user\n *\n * AccessLevel R [owner, admin, userAdmin]\n *\n */\npublic class UnlockUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String rid = (String) data.get(\"@rid\");\n        String error = null;\n        String host = (String)user.get(\"host\");\n        if(host != null && !host.equals(data.get(\"host\"))) {\n            error = \"User can only unlock user from host: \" + host;\n            inputMap.put(\"responseCode\", 401);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex lockUser = null;\n                if(rid != null) {\n                    lockUser = DbService.getVertexByRid(graph, rid);\n                    if(lockUser != null) {\n                        if(lockUser.getProperty(\"locked\") != null && !(Boolean)lockUser.getProperty(\"locked\")) {\n                            error = \"User with @rid \" + rid + \" is not locked\";\n                            inputMap.put(\"responseCode\", 400);\n                        } else {\n                            Map eventMap = getEventMap(inputMap);\n                            Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                            inputMap.put(\"eventMap\", eventMap);\n                            eventData.put(\"userId\", lockUser.getProperty(\"userId\"));\n                            eventData.put(\"locked\", false);\n                            eventData.put(\"updateDate\", new java.util.Date());\n                            eventData.put(\"updateUserId\", user.get(\"userId\"));\n                        }\n                    } else {\n                        error = \"User with @rid \" + rid + \" cannot be found.\";\n                        inputMap.put(\"responseCode\", 404);\n                    }\n                } else {\n                    error = \"@rid is required\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UnlockUserRule",
      "createDate": "2016-03-31T00:36:30.690"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.690",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:271",
    "@version": 1,
    "@class": "Event",
    "eventId": 10272,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by steve on 19/09/14.\n *\n * get an access token with a refresh token\n *\n * AccessLevel R [user]\n */\npublic class RefreshTokenRule extends AbstractUserRule implements Rule {\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String error = null;\n\n        String refreshToken = (String)data.get(\"refreshToken\");\n        String userId = (String)data.get(\"userId\");\n        String clientId = (String)data.get(\"clientId\");\n        if(refreshToken == null || userId == null || clientId == null) {\n            inputMap.put(\"responseCode\", 401);\n            error = \"Refresh token or userId or clientId is missing\";\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                Vertex user = getUserByUserId(graph, userId);\n                if(user != null) {\n                    Vertex credential = user.getProperty(\"credential\");\n                    if (checkRefreshToken(credential, clientId, refreshToken)) {\n                        // since here is using refresh token, it is always generate short term access token.\n                        String jwt = generateToken(user, clientId, false);\n                        if (jwt != null) {\n                            Map<String, String> tokens = new HashMap<String, String>();\n                            tokens.put(\"accessToken\", jwt);\n                            inputMap.put(\"result\", mapper.writeValueAsString(tokens));\n                        }\n                    } else {\n                        error = \"Invalid refresh token\";\n                        inputMap.put(\"responseCode\", 400);\n                    }\n                } else {\n                    error = \"The userId \" + userId + \" has not been registered\";\n                    inputMap.put(\"responseCode\", 400);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.RefreshTokenRule",
      "createDate": "2016-03-31T00:36:30.698"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.698",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:272",
    "@version": 1,
    "@class": "Event",
    "eventId": 10273,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Created by steve on 26/10/14.\n *\n * Get all users in a list for user admin page. pagination is supported in db level\n *\n * AccessLevel R [owner, admin, userAdmin]\n *\n */\npublic class GetAllUserRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String host = (String)user.get(\"host\");\n        if(host != null) {\n            if(!host.equals(data.get(\"host\"))) {\n                inputMap.put(\"result\", \"You can only get all users from host: \" + host);\n                inputMap.put(\"responseCode\", 403);\n                return false;\n            }\n        } else {\n            // retrieve everything as this is the owner\n            data.remove(\"host\"); // removed the host added by RestHandler.\n        }\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            long total = getTotalNumberUserFromDb(graph, data);\n            if(total > 0) {\n                String json = getUserFromDb(graph, data);\n                List<Map<String, Object>> users\n                        = mapper.readValue(json, new TypeReference<List<HashMap<String, Object>>>() {});\n                Map<String, Object> result = new HashMap<String, Object>();\n                result.put(\"total\", total);\n                result.put(\"users\", users);\n                inputMap.put(\"result\", mapper.writeValueAsString(result));\n                return true;\n            } else {\n                inputMap.put(\"result\", \"No user can be found.\");\n                inputMap.put(\"responseCode\", 404);\n                return false;\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.GetAllUserRule",
      "createDate": "2016-03-31T00:36:30.706"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.706",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:273",
    "@version": 1,
    "@class": "Event",
    "eventId": 10274,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 13/03/16.\n */\npublic class FacebookLoginEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addUser(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.FacebookLoginEvRule",
      "createDate": "2016-03-31T00:36:30.715"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.715",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:274",
    "@version": 1,
    "@class": "Event",
    "eventId": 10275,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.user;\n\nimport com.networknt.light.rule.Rule;\n\nimport java.util.Map;\n\n/**\n * Created by steve on 8/28/2014.\n */\npublic class UpdProfileEvRule extends AbstractUserRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updUser(data);\n        return true;\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.UpdProfileEvRule",
      "createDate": "2016-03-31T00:36:30.725"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.725",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:275",
    "@version": 1,
    "@class": "Event",
    "eventId": 10276,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n */\npublic class UpCatalogEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranchEv(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.UpCatalogEvRule",
      "createDate": "2016-03-31T00:36:30.733"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.733",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:276",
    "@version": 1,
    "@class": "Event",
    "eventId": 10277,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n *\n * AccessLevel A\n */\npublic class GetCatalogProductRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getCategoryEntity(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.GetCatalogProductRule",
      "createDate": "2016-03-31T00:36:30.741"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.741",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:277",
    "@version": 1,
    "@class": "Event",
    "eventId": 10278,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 24/08/15.\n *\n * This is the endpoint for product admin page to list all the products\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class GetProductRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getProduct(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.GetProductRule",
      "createDate": "2016-03-31T00:36:30.749"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.749",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:278",
    "@version": 1,
    "@class": "Event",
    "eventId": 10279,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 10/14/2014.\n *\n * you can only delete a catalog if it has no child and no entity.\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n *\n */\npublic class DelCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.DelCatalogRule",
      "createDate": "2016-03-31T00:36:30.799"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.799",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:279",
    "@version": 1,
    "@class": "Event",
    "eventId": 10280,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 30/03/15.\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class AddProductRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addProduct(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.AddProductRule",
      "createDate": "2016-03-31T00:36:30.805"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.805",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:280",
    "@version": 1,
    "@class": "Event",
    "eventId": 10281,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n */\npublic class UpdProductEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updProductEv(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.UpdProductEvRule",
      "createDate": "2016-03-31T00:36:30.813"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.813",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:281",
    "@version": 1,
    "@class": "Event",
    "eventId": 10282,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 10/14/2014.\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class AddCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.AddCatalogRule",
      "createDate": "2016-03-31T00:36:30.823"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.823",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:282",
    "@version": 1,
    "@class": "Event",
    "eventId": 10283,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n *\n * productAdmin can only delete his or her products. However,\n * owner, admin and catalogAdmin can delete product and all the comments/reivews relate to the\n * product all together. This should not be done often only at extreme situation.\n *\n * Due to the implementation of orientdb delete graph scheduled for 2.2\n * https://github.com/orientechnologies/orientdb/issues/1108\n * We will be asking all the comments be deleted before deleting the product for now.\n *\n * TODO fix it after orientdb 2.2\n *\n * AccessLevel R [owner, admin, catalogAdmin, productAdmin]\n */\npublic class DelProductRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delProduct(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.DelProductRule",
      "createDate": "2016-03-31T00:36:30.830"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.830",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:283",
    "@version": 1,
    "@class": "Event",
    "eventId": 10284,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 30/03/15.\n *\n * AccessLevel A\n */\npublic class GetCatalogTreeRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchTree(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.GetCatalogTreeRule",
      "createDate": "2016-03-31T00:36:30.840"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.840",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:284",
    "@version": 1,
    "@class": "Event",
    "eventId": 10285,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n *\n * AccessLevel R [user]\n */\npublic class UpCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return upBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.UpCatalogRule",
      "createDate": "2016-03-31T00:36:30.850"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.850",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:285",
    "@version": 1,
    "@class": "Event",
    "eventId": 10286,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 30/03/15.\n */\npublic class AddProductEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addProductEv(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.AddProductEvRule",
      "createDate": "2016-03-31T00:36:30.860"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.860",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:286",
    "@version": 1,
    "@class": "Event",
    "eventId": 10287,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n *\n *  AccessLevel R [user]\n */\npublic class DownCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.DownCatalogRule",
      "createDate": "2016-03-31T00:36:30.868"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.868",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:287",
    "@version": 1,
    "@class": "Event",
    "eventId": 10288,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n */\npublic class DelProductEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delProductEv(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.DelProductEvRule",
      "createDate": "2016-03-31T00:36:30.880"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.880",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:288",
    "@version": 1,
    "@class": "Event",
    "eventId": 10289,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 18/01/16.\n *\n * AccessLevel A everyone can access\n *\n * This API get all the product regardless catalog order by the time of creation date.\n */\npublic class GetRecentProductRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getRecentEntity(\"Catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.GetRecentProductRule",
      "createDate": "2016-03-31T00:36:30.887"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.887",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:289",
    "@version": 1,
    "@class": "Event",
    "eventId": 10290,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/14/2014.\n *\n * This is for catalog admin screen.\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class GetCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.GetCatalogRule",
      "createDate": "2016-03-31T00:36:30.898"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.898",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:290",
    "@version": 1,
    "@class": "Event",
    "eventId": 10291,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n *\n * AccessLevel R [owner, admin, catalogAdmin, productAdmin]\n *\n * productAdmin can only update his or her product\n */\npublic class UpdProductRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updProduct(objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.UpdProductRule",
      "createDate": "2016-03-31T00:36:30.920"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.920",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:291",
    "@version": 1,
    "@class": "Event",
    "eventId": 10292,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by husteve on 10/14/2014.\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class UpdCatalogRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranch(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.UpdCatalogRule",
      "createDate": "2016-03-31T00:36:30.931"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.931",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:292",
    "@version": 1,
    "@class": "Event",
    "eventId": 10293,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 10/14/2014.\n *\n */\npublic class UpdCatalogEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return updBranchEv(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.UpdCatalogEvRule",
      "createDate": "2016-03-31T00:36:30.939"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.939",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:293",
    "@version": 1,
    "@class": "Event",
    "eventId": 10294,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n *\n * get drown down list of catalog for catalog admin\n *\n * AccessLevel R [owner, admin, catalogAdmin]\n */\npublic class GetCatalogDropdownRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return getBranchDropdown(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.GetCatalogDropdownRule",
      "createDate": "2016-03-31T00:36:30.950"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.950",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:294",
    "@version": 1,
    "@class": "Event",
    "eventId": 10295,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\nimport com.networknt.light.rule.AbstractBfnRule;\nimport com.networknt.light.rule.BranchRule;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.server.DbService;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\nimport com.orientechnologies.orient.core.index.OCompositeKey;\nimport com.orientechnologies.orient.core.index.OIndex;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.core.serialization.serializer.OJSONWriter;\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\nimport com.tinkerpop.blueprints.Direction;\nimport com.tinkerpop.blueprints.Edge;\nimport com.tinkerpop.blueprints.Vertex;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentMap;\n\n/**\n * Created by steve on 25/04/15.\n */\npublic abstract class AbstractCatalogRule extends AbstractBfnRule implements Rule {\n    static final Logger logger = LoggerFactory.getLogger(AbstractCatalogRule.class);\n    static final String categoryType = \"catalog\";\n\n    public abstract boolean execute (Object ...objects) throws Exception;\n\n    public boolean addProduct(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String host = (String) data.get(\"host\");\n        String parentRid = (String)data.remove(\"parentRid\");\n        List<String> tags = null;\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String userHost = (String)user.get(\"host\");\n        if(userHost != null && !userHost.equals(host)) {\n            error = \"You can only add product from host: \" + host;\n            inputMap.put(\"responseCode\", 403);\n        } else {\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                // make sure parent exists if it is not empty.\n                Vertex parent = DbService.getVertexByRid(graph, parentRid);\n                if(parent == null) {\n                    error = \"Parent with @rid \" + parentRid + \" cannot be found.\";\n                    inputMap.put(\"responseCode\", 404);\n                } else {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.putAll((Map<String, Object>) inputMap.get(\"data\"));\n                    eventData.put(\"parentId\", parent.getProperty(\"categoryId\"));\n                    eventData.put(\"entityId\", HashUtil.generateUUID());\n                    eventData.put(\"createDate\", new Date());\n                    eventData.put(\"createUserId\", user.get(\"userId\"));\n                    // get tags for clearing cache.\n                    tags = (List<String>)inputMap.get(\"tags\");\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            clearListCache(host, categoryType, parentRid);\n            if(tags != null && tags.size() > 0) clearTagCache(host, tags);\n            return true;\n        }\n    }\n\n    public boolean addProductEv (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        addProductDb(data);\n        return true;\n    }\n\n    protected void addProductDb(Map<String, Object> data) throws Exception {\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex createUser = (OrientVertex)graph.getVertexByKey(\"User.userId\", data.remove(\"createUserId\"));\n            String parentId = (String)data.remove(\"parentId\");\n            List<String> tags = (List<String>)data.remove(\"tags\");\n            OrientVertex product = graph.addVertex(\"class:Product\", data);\n            createUser.addEdge(\"Create\", product);\n            // parent\n            OrientVertex parent = getBranchByHostId(graph, categoryType, host, parentId);\n            if(parent != null) {\n                parent.addEdge(\"HasProduct\", product);\n            }\n            // tag\n            if(tags != null && tags.size() > 0) {\n                for(String tagId: tags) {\n                    Vertex tag = null;\n                    // get the tag is it exists\n                    OIndex<?> tagHostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"tagHostIdIdx\");\n                    OCompositeKey tagKey = new OCompositeKey(host, tagId);\n                    OIdentifiable tagOid = (OIdentifiable) tagHostIdIdx.get(tagKey);\n                    if (tagOid != null) {\n                        tag = graph.getVertex(tagOid.getRecord());\n                        product.addEdge(\"HasTag\", tag);\n                    } else {\n                        tag = graph.addVertex(\"class:Tag\", \"host\", host, \"tagId\", tagId, \"createDate\", data.get(\"createDate\"));\n                        createUser.addEdge(\"Create\", tag);\n                        product.addEdge(\"HasTag\", tag);\n                    }\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean delProduct(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String)data.get(\"@rid\");\n        String parentRid = null;\n        List<String> tags = null;\n        String host = (String)data.get(\"host\");\n        String error = null;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OrientVertex product = (OrientVertex) DbService.getVertexByRid(graph, rid);\n            if(product != null) {\n                // check if the product has variant, if yes, you cannot delete it for now\n                // TODO fix it after orientdb 2.2 release.\n                // https://github.com/orientechnologies/orientdb/issues/1108\n                if(product.countEdges(Direction.OUT, \"HasComment\") > 0) {\n                    error = \"Product has comment(s), cannot be deleted\";\n                    inputMap.put(\"responseCode\", 400);\n                } else {\n                    // get the parentRid in order to clear cache\n                    for(Edge e: product.getEdges(Direction.IN, \"HasProduct\")) {\n                        Vertex edgeParent = e.getVertex(Direction.OUT);\n                        parentRid = edgeParent.getId().toString();\n                    }\n                    // get tags in order to clear cache\n                    Iterable iterable = product.getProperty(\"out_HasTag\");\n                    if(iterable != null) {\n                        Iterator iterator = iterable.iterator();\n                        tags = new ArrayList<String>();\n                        while(iterator.hasNext()) {\n                            OrientVertex vertex = (OrientVertex)iterator.next();\n                            tags.add(vertex.getProperty(\"tagId\"));\n                        }\n                    }\n\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"entityId\", product.getProperty(\"entityId\"));\n                }\n            } else {\n                error = \"@rid \" + rid + \" cannot be found\";\n                inputMap.put(\"responseCode\", 404);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            clearListCache(host, categoryType, parentRid);\n            if(tags != null && tags.size() > 0) clearTagCache(host, tags);\n            clearEntityCache(rid);\n            return true;\n        }\n    }\n\n    public boolean delProductEv (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        delProductDb(data);\n        return true;\n    }\n\n    protected void delProductDb(Map<String, Object> data) throws Exception {\n        String className = \"Catalog\";\n        String id = \"categoryId\";\n        String index = className + \".\" + id;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            OrientVertex product = (OrientVertex)graph.getVertexByKey(\"Product.entityId\", data.get(\"entityId\"));\n            if(product != null) {\n                // TODO cascade deleting all comments belong to the product.\n                // Need to come up a query on that to get the entire tree.\n                /*\n                // https://github.com/orientechnologies/orientdb/issues/1108\n                delete graph...\n                */\n                graph.removeVertex(product);\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    public boolean updProduct(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String rid = (String) data.get(\"rid\");\n        String originalParentRid = null;\n        String parentRid = null;\n        Set<String> delTags = null;\n        Set<String> addTags = null;\n\n        String host = (String) data.get(\"host\");\n        String error = null;\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            String userHost = (String)user.get(\"host\");\n            if(userHost != null && !userHost.equals(host)) {\n                inputMap.put(\"result\", \"You can only update \" + categoryType + \" from host: \" + host);\n                inputMap.put(\"responseCode\", 403);\n                return false;\n            } else {\n                // update product itself and we might have a new api to move product from one parent to another.\n                Vertex product = DbService.getVertexByRid(graph, rid);\n                if(product != null) {\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"entityId\", product.getProperty(\"entityId\"));\n                    eventData.put(\"name\", data.get(\"name\"));\n                    eventData.put(\"host\", data.get(\"host\"));\n                    eventData.put(\"description\", data.get(\"description\"));\n                    eventData.put(\"content\", data.get(\"content\"));\n                    eventData.put(\"variants\", data.get(\"variants\"));\n                    eventData.put(\"updateDate\", new Date());\n                    eventData.put(\"updateUserId\", user.get(\"userId\"));\n\n                    // parent\n                    parentRid =  (String)data.get(\"parentRid\");\n                    if(parentRid != null) {\n                        Vertex parent = DbService.getVertexByRid(graph, parentRid);\n                        if(parent != null) {\n                            boolean found = false;\n                            for(Edge e: product.getEdges(Direction.IN, \"HasProduct\")) {\n                                Vertex edgeParent = e.getVertex(Direction.OUT);\n                                if(edgeParent != null) {\n                                    originalParentRid =  edgeParent.getId().toString();\n                                    if(originalParentRid.equals(parentRid)) {\n                                        found = true;\n                                        break;\n                                    }\n                                }\n                            }\n                            if(!found) {\n                                // replace parent here by passing parentId to the event rule.\n                                eventData.put(\"parentId\", parent.getProperty(\"categoryId\"));\n                            }\n                        }\n                    } else {\n                        // get originalParentRid from product for clearing cache.\n                        for(Edge e: product.getEdges(Direction.IN, \"HasProduct\")) {\n                            Vertex edgeParent = e.getVertex(Direction.OUT);\n                            if(edgeParent != null) {\n                                originalParentRid =  edgeParent.getId().toString();\n                            }\n                        }\n                    }\n\n                    // tags\n                    List<String> tags = (List)data.get(\"tags\");\n                    if(tags == null || tags.size() == 0) {\n                        // remove all existing tags\n                        delTags = new HashSet<String>();\n                        for (Vertex vertex : (Iterable<Vertex>) product.getVertices(Direction.OUT, \"HasTag\")) {\n                            delTags.add((String)vertex.getProperty(\"tagId\"));\n                        }\n                        if(delTags.size() > 0) eventData.put(\"delTags\", delTags);\n                    } else {\n                        Set<String> inputTags = new HashSet<String>(tags);\n                        Set<String> storedTags = new HashSet<String>();\n                        for (Vertex vertex : (Iterable<Vertex>) product.getVertices(Direction.OUT, \"HasTag\")) {\n                            storedTags.add((String)vertex.getProperty(\"tagId\"));\n                        }\n\n                        addTags = new HashSet<String>(inputTags);\n                        delTags = new HashSet<String>(storedTags);\n                        addTags.removeAll(storedTags);\n                        delTags.removeAll(inputTags);\n\n                        if(addTags.size() > 0) eventData.put(\"addTags\", addTags);\n                        if(delTags.size() > 0) eventData.put(\"delTags\", delTags);\n                    }\n                } else {\n                    error = \"@rid \" + rid + \" cannot be found\";\n                    inputMap.put(\"responseCode\", 404);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            throw e;\n        } finally {\n            graph.shutdown();\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            clearListCache(host, categoryType, originalParentRid);\n            if(parentRid != null) clearListCache(host, categoryType, parentRid);\n            if(delTags != null && delTags.size() > 0) clearTagCache(host, new ArrayList<String>(delTags));\n            if(addTags != null && addTags.size() > 0) clearTagCache(host, new ArrayList<String>(addTags));\n            clearEntityCache(rid);\n            return true;\n        }\n    }\n\n    public boolean updProductEv (Object ...objects) throws Exception {\n        Map<String, Object> eventMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) eventMap.get(\"data\");\n        updProductDb(data);\n        return true;\n    }\n\n    protected void updProductDb(Map<String, Object> data) throws Exception {\n        String host = (String)data.get(\"host\");\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try{\n            graph.begin();\n            Vertex updateUser = graph.getVertexByKey(\"User.userId\", data.remove(\"updateUserId\"));\n            OrientVertex product = (OrientVertex)graph.getVertexByKey(\"Product.entityId\", data.get(\"entityId\"));\n            if(product != null) {\n                updateUser.addEdge(\"Update\", product);\n                // fields\n                if(data.get(\"name\") != null) {\n                    product.setProperty(\"name\", data.get(\"name\"));\n                } else {\n                    product.removeProperty(\"name\");\n                }\n                if(data.get(\"description\") != null) {\n                    product.setProperty(\"description\", data.get(\"description\"));\n                } else {\n                    product.removeProperty(\"description\");\n                }\n                if(data.get(\"content\") != null) {\n                    product.setProperty(\"content\", data.get(\"content\"));\n                } else {\n                    product.removeProperty(\"content\");\n                }\n                if(data.get(\"variants\") != null) {\n                    product.setProperty(\"variants\", data.get(\"variants\"));\n                } else {\n                    product.removeProperty(\"variants\");\n                }\n                product.setProperty(\"updateDate\", data.get(\"updateDate\"));\n\n                // handle parent update\n                String parentId = (String)data.get(\"parentId\");\n                if(parentId != null) {\n                    OrientVertex parent = getBranchByHostId(graph, categoryType, (String) data.get(\"host\"), (String) data.get(\"parentId\"));\n                    if(parent != null) {\n                        // remove the current edge and add a new one.\n                        for(Edge e : product.getEdges(Direction.IN, \"HasProduct\")) {\n                            e.remove();\n                        }\n                        parent.addEdge(\"HasProduct\", product);\n                    }\n                }\n\n                // handle addTags and delTags\n                OIndex<?> hostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(\"tagHostIdIdx\");\n                Set<String> addTags = (Set)data.get(\"addTags\");\n                if(addTags != null) {\n                    for(String tagId: addTags) {\n                        OCompositeKey key = new OCompositeKey(data.get(\"host\"), tagId);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            OrientVertex tag = graph.getVertex(oid.getRecord());\n                            product.addEdge(\"HasTag\", tag);\n                        } else {\n                            Vertex tag = graph.addVertex(\"class:Tag\", \"host\", data.get(\"host\"), \"tagId\", tagId, \"createDate\", data.get(\"updateDate\"));\n                            updateUser.addEdge(\"Create\", tag);\n                            product.addEdge(\"HasTag\", tag);\n                        }\n                    }\n                }\n                Set<String> delTags = (Set)data.get(\"delTags\");\n                if(delTags != null) {\n                    for(String tagId: delTags) {\n                        /*\n                        OrientVertex branch = null;\n                        OIndex<?> hostIdIdx = graph.getRawGraph().getMetadata().getIndexManager().getIndex(branchType + \"HostIdIdx\");\n                        OCompositeKey key = new OCompositeKey(host, id);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            branch = graph.getVertex(oid.getRecord());\n                        }\n                        return branch;\n                        */\n\n                        OCompositeKey key = new OCompositeKey(data.get(\"host\"), tagId);\n                        OIdentifiable oid = (OIdentifiable) hostIdIdx.get(key);\n                        if (oid != null) {\n                            OrientVertex tag = graph.getVertex(oid.getRecord());\n                            for (Edge edge : (Iterable<Edge>) product.getEdges(Direction.OUT, \"HasTag\")) {\n                                if(edge.getVertex(Direction.IN).equals(tag)) graph.removeEdge(edge);\n                            }\n                        }\n                    }\n                }\n            }\n            graph.commit();\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n            graph.rollback();\n        } finally {\n            graph.shutdown();\n        }\n    }\n\n    @Override\n    protected List<String> getCategoryEntityListDb(String categoryRid, String sortedBy, String sortDir) {\n        List<String> entityList = null;\n        String sql = \"select @rid from (traverse out_Own, out_HasProduct from ?) where @class = 'Product' order by \" + sortedBy + \" \" + sortDir;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> entities = graph.getRawGraph().command(query).execute(categoryRid);\n            if(entities.size() > 0) {\n                entityList = new ArrayList<String>();\n                for(ODocument entity: entities) {\n                    entityList.add(((ODocument)entity.field(\"rid\")).field(\"@rid\").toString());\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return entityList;\n    }\n\n    /*\n    protected List getAncestorDb(String rid) {\n        List<Map<String, Object>> ancestors = null;\n        String sql = \"select @rid, categoryId, description from (traverse in('Own') from ?)\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> docs = graph.getRawGraph().command(query).execute(rid);\n            if(docs.size() > 0) {\n                ancestors = new ArrayList<Map<String, Object>>();\n                for (int i=docs.size()-1; i >= 0; i--) {\n                    Map<String, Object> map = new HashMap<String, Object>();\n                    OrientVertex doc = graph.getVertex(docs.get(i).getRecord());\n                    String id = doc.getProperty(\"rid\").toString();\n                    id = id.substring(id.indexOf('[') + 1, id.indexOf(']'));\n                    map.put(\"rid\", id);\n                    map.put(\"categoryId\", doc.getProperty(\"categoryId\"));\n                    map.put(\"description\", doc.getProperty(\"description\"));\n                    ancestors.add(map);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return ancestors;\n    }\n    */\n\n    /**\n     * This is product admin rule to get a list of product for amdin.\n     *\n     * @param objects\n     * @return\n     * @throws Exception\n     */\n    public boolean getProduct(Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>)inputMap.get(\"data\");\n        String categoryId = (String)data.get(\"categoryId\");\n        String host = (String)data.get(\"host\");\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\n        String json = null;\n        List roles = (List)user.get(\"roles\");\n        if(roles.contains(\"owner\")) {\n            json = getProductDb();\n        } else {\n            if(host.equals(user.get(\"host\"))) {\n                json = getProductDb(host);\n            } else {\n                inputMap.put(\"result\", \"Permission denied\");\n                inputMap.put(\"responseCode\", 401);\n                return false;\n            }\n        }\n        if(json != null) {\n            inputMap.put(\"result\", json);\n            return true;\n        } else {\n            inputMap.put(\"result\", \"Not Found\");\n            inputMap.put(\"responseCode\", 404);\n            return false;\n        }\n    }\n\n    protected String getProductDb(String host) {\n        String json = null;\n        String sql = \"select from product where host = ?\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> products = graph.getRawGraph().command(query).execute(host);\n            if(products.size() > 0) {\n                json = OJSONWriter.listToJSON(products, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    protected String getProductDb() {\n        String json = null;\n        String sql = \"select from product\";\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> products = graph.getRawGraph().command(query).execute();\n            if(products.size() > 0) {\n                json = OJSONWriter.listToJSON(products, null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return json;\n    }\n\n    @Override\n    protected List<String> getRecentEntityListDb(String host, String categoryType, String sortedBy, String sortDir) {\n        List<String> entityList = null;\n        String sql = \"select @rid from Product where host = ? order by \" + sortedBy + \" \" + sortDir;\n        OrientGraph graph = ServiceLocator.getInstance().getGraph();\n        try {\n            OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(sql);\n            List<ODocument> entities = graph.getRawGraph().command(query).execute(host);\n            if(entities.size() > 0) {\n                entityList = new ArrayList<String>();\n                for(ODocument entity: entities) {\n                    entityList.add(((ODocument)entity.field(\"rid\")).field(\"@rid\").toString());\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception:\", e);\n        } finally {\n            graph.shutdown();\n        }\n        return entityList;\n    }\n\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.AbstractCatalogRule",
      "createDate": "2016-03-31T00:36:30.965"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.965",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:295",
    "@version": 1,
    "@class": "Event",
    "eventId": 10296,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 10/14/2014.\n */\npublic class AddCatalogEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return addBranchEv(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.AddCatalogEvRule",
      "createDate": "2016-03-31T00:36:30.973"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.973",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:296",
    "@version": 1,
    "@class": "Event",
    "eventId": 10297,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 25/04/15.\n */\npublic class DownCatalogEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return downBranchEv(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.DownCatalogEvRule",
      "createDate": "2016-03-31T00:36:30.981"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.981",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:297",
    "@version": 1,
    "@class": "Event",
    "eventId": 10298,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "/*\n * Copyright 2015 Network New Technologies Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.networknt.light.rule.catalog;\n\nimport com.networknt.light.rule.Rule;\n\n/**\n * Created by steve on 10/14/2014.\n */\npublic class DelCatalogEvRule extends AbstractCatalogRule implements Rule {\n    public boolean execute (Object ...objects) throws Exception {\n        return delBranchEv(\"catalog\", objects);\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.catalog.DelCatalogEvRule",
      "createDate": "2016-03-31T00:36:30.991"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:30.991",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#18:299",
    "@version": 1,
    "@class": "Event",
    "eventId": 10300,
    "createUserId": "stevehu",
    "data": {
      "sourceCode": "package com.networknt.light.rule.user;\n\nimport com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier;\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.networknt.light.rule.Rule;\nimport com.networknt.light.rule.config.GetConfigRule;\nimport com.networknt.light.util.HashUtil;\nimport com.networknt.light.util.ServiceLocator;\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\nimport com.tinkerpop.blueprints.impls.orient.OrientVertex;\n\nimport java.util.*;\n\n/**\n * Created by steve on 13/03/16.\n *\n * AccessLevel A\n */\npublic class GoogleLoginRule extends AbstractUserRule implements Rule {\n    static final String GOOGLE = \"google\";\n\n    public boolean execute (Object ...objects) throws Exception {\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\n        String host = (String)data.get(\"host\");\n        String clientId = (String)data.get(\"clientId\");\n        String token = (String)data.get(\"id_token\");\n        String error = null;\n\n        // https://developers.google.com/identity/sign-in/web/backend-auth#using-a-google-api-client-library\n        // first need to verify and get user profile from access token\n        GetConfigRule getConfigRule = new GetConfigRule();\n        String googleClientId = getConfigRule.getConfig(host, GOOGLE, \"$.properties.client_id\");\n\n        // Set up the HTTP transport and JSON factory\n        HttpTransport transport = GoogleNetHttpTransport.newTrustedTransport();\n        JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();\n\n        GoogleIdTokenVerifier verifier = new GoogleIdTokenVerifier.Builder(transport, jsonFactory)\n                .setAudience(Arrays.asList(googleClientId))\n                // If you retrieved the token on Android using the Play Services 8.3 API or newer, set\n                // the issuer to \"https://accounts.google.com\". Otherwise, set the issuer to\n                // \"accounts.google.com\". If you need to verify tokens from multiple sources, build\n                // a GoogleIdTokenVerifier for each issuer and try them both.\n                .setIssuer(\"accounts.google.com\")\n                .build();\n\n        GoogleIdToken idToken = verifier.verify(token);\n        if (idToken != null) {\n            GoogleIdToken.Payload payload = idToken.getPayload();\n\n            // Get profile information from payload\n            String email = payload.getEmail();\n            boolean emailVerified = Boolean.valueOf(payload.getEmailVerified());\n            String name = (String) payload.get(\"name\");\n            String familyName = (String) payload.get(\"family_name\");\n            String givenName = (String) payload.get(\"given_name\");\n\n            // generate networknt access token here.\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\n            try {\n                OrientVertex user = null;\n                user = (OrientVertex)getUserByEmail(graph, email);\n                if(user != null) {\n                    // check if the user is locked or not\n                    if (user.getProperty(\"locked\") != null && (boolean)user.getProperty(\"locked\")) {\n                        error = \"Account is locked\";\n                        inputMap.put(\"responseCode\", 400);\n                    } else {\n                        // for third party login, won't remember it.\n                        String jwt = generateToken(user, clientId, false);\n                        if(jwt != null) {\n                            Map<String, Object> tokens = new HashMap<String, Object>();\n                            tokens.put(\"accessToken\", jwt);\n                            tokens.put(\"rid\", user.getIdentity().toString());\n                            inputMap.put(\"result\", mapper.writeValueAsString(tokens));\n                        }\n                        Map eventMap = getEventMap(inputMap);\n                        Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                        inputMap.put(\"eventMap\", eventMap);\n                    }\n                } else {\n                    // Generate access token\n                    Map<String, Object> userMap = new HashMap<String, Object>();\n                    userMap.put(\"userId\", name + \"@g\");\n                    userMap.put(\"host\", host);\n                    userMap.put(\"clientId\", clientId);\n                    List roles = new ArrayList();\n                    roles.add(\"user\");\n                    userMap.put(\"roles\", roles);\n                    userMap.put(\"rememberMe\", false);\n\n                    String jwt = generateToken(userMap);\n                    if(jwt != null) {\n                        Map<String, Object> tokens = new HashMap<String, Object>();\n                        tokens.put(\"accessToken\", jwt);\n                        inputMap.put(\"result\", mapper.writeValueAsString(tokens));\n                    }\n                    // save user info into db.\n                    Map eventMap = getEventMap(inputMap);\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\n                    inputMap.put(\"eventMap\", eventMap);\n                    eventData.put(\"clientId\", clientId);\n                    eventData.put(\"host\", host);\n                    eventData.put(\"userId\", name + \"@g\");\n                    eventData.put(\"email\", email);\n                    eventData.put(\"roles\", roles);\n                    eventData.put(\"verified\", emailVerified);\n                    eventData.put(\"firstName\", givenName);\n                    eventData.put(\"lastName\", familyName);\n                }\n            } catch (Exception e) {\n                logger.error(\"Exception:\", e);\n                throw e;\n            } finally {\n                graph.shutdown();\n            }\n        } else {\n            error = \"Invalid google id_token\";\n            inputMap.put(\"responseCode\", 401);\n        }\n        if(error != null) {\n            inputMap.put(\"result\", error);\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
      "createUserId": "stevehu",
      "ruleClass": "com.networknt.light.rule.user.GoogleLoginRule",
      "createDate": "2016-03-31T00:36:44.068"
    },
    "name": "impRule",
    "category": "rule",
    "createDate": "2016-03-31T00:36:44.068",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  }
]
