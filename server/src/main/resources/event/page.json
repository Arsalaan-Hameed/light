[
  {
    "@type": "d",
    "@rid": "#17:334",
    "@version": 1,
    "@class": "Event",
    "eventId": 10335,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-form-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.FormAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getAllForm = {\n            category : 'form',\n            name : 'getAllForm',\n            readOnly: true\n        };\n        $scope.delForm = {\n            category : 'form',\n            name : 'delForm',\n            readOnly: false\n        };\n        $scope.forms = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Form Id',\n                value: 'formId'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'createDate'\n        };\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(form) {\n            $scope.delForm.data = form;\n            $http.post('api/rs', $scope.delForm)\n                    .success(function (data, status, headers, config) {\n                        $scope.forms.splice($scope.forms.indexOf(form), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n\n        $scope.update = function(form) {\n            modelDataService.setModelData(form);\n            $location.path(\"/page/com-networknt-light-v-form-admin-update\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/page/com-networknt-light-v-form-admin-add\");\n        };\n\n        $scope.import = function() {\n            $location.path(\"/form/com.networknt.light.form.import\");\n        };\n\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify($scope.getAllForm))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.forms = result;\n                        console.log($scope.forms);\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.FormAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"import()\"><i class=\"glyphicon glyphicon-edit\"></i>Import</button>\n            </div>\n            <tabset>\n                <tab heading=\"Forms\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.formId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"form in forms | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(form)\">Delete</a></td>\n                            <td><a href ng-click=\"update(form)\">{{form.formId}}</a></td>\n                            <td>{{form.host}}</td>\n                            <td>{{form.createUserId}}</td>\n                            <td>{{form.createDate}}</td>\n                            <td>{{form.updateUserId}}</td>\n                            <td>{{form.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:06.747"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:06.747",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:335",
    "@version": 1,
    "@class": "Event",
    "eventId": 10336,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "ca-edibleforestgarden-v-about",
      "content": "EdibleForestGarden.ca is dedicated to offering inspiring and practical information\non the vision, ecology, design, and stewardship of perennial polycultures of\nmultipurpose plants in small-scale or large-scale settings. We intend this website\nto grow into an information and networking resource for newcomers, amateurs, students,\nand serious practitioners and researchers alike.\n\nForest gardening is an idea whose time has come. We can consciously apply the principles\nof ecology to the design of gardens that mimic forest ecosystem structure and function,\nbut grow food, fuel, fiber, fodder, fertilizer, medicinals and fun. Indeed, we must\nbegin learning to apply ecological principles to the design of our food production\nsystems now?we have surpassed the peak of planetary oil production, so the world of\nenergy descent lies upon us. This sea change in our culture will require that we learn\nto live within our energetic means and rebuild ecosystems that support human and humane\nlives without diminishing the ability of the ecosystem to support our children and\ngrandchildren.\n\nWhile this global problem is huge, most of the solutions available to us are local,\npersonal, empowering, and potentially enlivening, enlightening, and fun. Edible forest\ngardening is one of these solutions, and we now have the resources at hand to transform\nour own yards and gardens into productive paradises.\n\nWe intend this website to give you the most sophisticated and down-to-earth information\navailable to maximize your success as a forest gardener.\n\nForest gardens have much to offer on a practical level, and they have much to teach us\nabout how to live in community as free and interdependent beings in a functional way.\nWe hope that you will trust your innate ability to learn and contribute to the larger\ncommunity of human beings who care about living sanely and humanely as we journey through\nenergy descent.\n\nWe hope you enjoy what we offer here, and that you will visit often to add your thoughts\nand experiences to the mix.",
      "createDate": "2016-02-14T01:59:06.782"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:06.782",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:336",
    "@version": 1,
    "@class": "Event",
    "eventId": 10337,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-user-logout",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.UserLogoutCtrl', ['$scope', '$http', '$location', 'toaster', 'authService', function ($scope, $http, $location, toaster, authService) {\n        var logOutUser = {\n            category : 'user',\n            name : 'logOutUser',\n            readOnly: false,\n            data: {\n                refreshToken : authService.getRefreshToken()\n            }\n        };\n        console.log(\"logOutUser\", logOutUser);\n        $http.post('api/rs', logOutUser)\n                .success(function (result, status, headers, config) {\n                    // call logOut function\n                    authService.logOut();\n                    // move to main location\n                    $location.path(\"/\");\n                })\n    }]);\n</script>\n<div ng-controller=\"com.networknt.light.UserLogoutCtrl\"></div>",
      "createDate": "2016-02-14T01:59:06.802"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:06.802",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:337",
    "@version": 1,
    "@class": "Event",
    "eventId": 10338,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-forum-post-view_v2",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.ForumPostViewCtrl', ['$scope', '$http', '$location', 'authService', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, authService, $filter, toaster, modelDataService) {\n\n        $scope.postData = modelDataService.getModelData().post;\n        $scope.comments = [];\n\n        $scope.getComments = {\n            category: 'comment',\n            name: 'getComment',\n            readOnly: true,\n            data: {}\n        };\n\n        $scope.addComment = {\n            category: 'comment',\n            name: 'addComment',\n            readOnly: false,\n            data: {}\n        };\n\n        $scope.displayAddCommentRow = false;\n        $scope.displaySubmitCommentButton = false;\n        $scope.addCommentText = 'Reply';\n        $scope.addCommentClass = 'btn btn-info';\n        $scope.addCommentGlyph = 'glyphicon glyphicon-plus';\n\n        $scope.toggleComment = function() {\n            $scope.displayAddCommentRow = !$scope.displayAddCommentRow;\n            if ($scope.addCommentText == 'Reply') {\n                $scope.addCommentText = 'Cancel';\n                $scope.addCommentClass = 'btn btn-danger';\n                $scope.addCommentGlyph = '';\n            } else {\n                $scope.addCommentText = 'Reply';\n                $scope.addCommentClass = 'btn btn-info';\n                $scope.addCommentGlyph = 'glyphicon glyphicon-plus';\n            }\n        };\n\n        $scope.getCurrentUserId = function () {\n            return authService.authentication.currentUser.userId;\n        };\n\n        $scope.fetchComments = function () {\n            $scope.getComments.data[\"host\"] = $scope.postData.host;\n            $scope.getComments.data[\"@rid\"] = $scope.postData[\"@rid\"];\n            $http.post('api/rs', $scope.getComments)\n                .success(function (result, status, headers, config) {\n                    $scope.comments = result.comments;\n                })\n                .error(function (result, status, headers, config) {\n                    // error fetching comments, set comments to empty list.\n                    $scope.comments = [];\n                });\n        };\n\n        $scope.fetchComments();\n\n        $scope.submitComment = function () {\n            var commentContent = document.getElementById(\"newUserComment\").value;\n            console.log(\"adding comment\", commentContent);\n            if (commentContent != null && commentContent.length > 0) {\n                $scope.addComment.data[\"host\"] = $scope.postData.host;\n                $scope.addComment.data[\"@rid\"] = $scope.postData[\"@rid\"];\n                $scope.addComment.data.comment = commentContent;\n                $http.post('api/rs', $scope.addComment)\n                    .success(function (result, status, headers, config) {\n                        $scope.fetchComments();\n                        document.getElementById(\"newUserComment\").value = \"\";\n                        $scope.toggleComment();\n                    })\n                    .error(function (result, status, headers, config) {\n                        // TODO: think of what to do here...\n                        console.log(\"submitComment error, result:\", result);\n                    });\n            }\n        };\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.ForumPostViewCtrl\">\n    <h2>{{postData.title}}</h2>\n    <p>By: {{postData.createUserId}}. Published on: {{postData.createDate}}</p>\n    <pre>{{postData.content}}</pre>\n\n    <br />\n    <label>Replies:</label>\n    <table class=\"table table-striped table-bordered table-hover\">\n        <tbody>\n            <tr ng-repeat=\"comment in comments\" style=\"height:100px;\">\n                <td width=\"1%\">\n                    <label>{{comment.createUserId}}:</label>\n                </td>\n                <td style=\"position:relative;\">\n                    <comment>{{comment.content}}</comment>\n                    <span style=\"position:absolute;right:10px;bottom:10px;\">\n                        <span class=\"glyphicon glyphicon-share-alt\" style=\"color:rgb(91,192,222); float:right; width:20px;\"></span>\n                        <span class=\"glyphicon glyphicon-thumbs-down\" style=\"color:red; float:right; width:20px;\"></span>\n                        <span class=\"glyphicon glyphicon-thumbs-up\" style=\"color:green; float:right; width:20px;\"></span>\n                    </span>\n                </td>\n            </tr>\n            <!--\n            <tr style=\"height:100px;\">\n                <td width=\"1%\" >\n                    <label>Nicholas:</label>\n                </td>\n                <td style=\"position:relative;\">\n                    <comment>Great post.</comment>\n                    <span style=\"position:absolute;right:10px;bottom:10px;\">\n                        <span class=\"glyphicon glyphicon-share-alt\" style=\"color:rgb(91,192,222); float:right; width:20px;\"></span>\n                        <span class=\"glyphicon glyphicon-thumbs-down\" style=\"color:red; float:right; width:20px;\"></span>\n                        <span class=\"glyphicon glyphicon-thumbs-up\" style=\"color:green; float:right; width:20px;\"></span>\n                    </span>\n                </td>\n            </tr>\n            <tr style=\"height:20px\">\n            </tr>\n            <tr style=\"height:100px;\">\n                <td width=\"1%\">\n                    <label>stevehu:</label>\n                </td>\n                <td style=\"position:relative;\">\n                    <comment>Thank you!</comment>\n                    <span style=\"position:absolute;right:10px;bottom:10px;\">\n                        <span class=\"glyphicon glyphicon-share-alt\" style=\"color:rgb(91,192,222); float:right; width:20px;\"></span>\n                        <span class=\"glyphicon glyphicon-thumbs-down\" style=\"color:red; float:right; width:20px;\"></span>\n                        <span class=\"glyphicon glyphicon-thumbs-up\" style=\"color:green; float:right; width:20px;\"></span>\n                    </span>\n                </td>\n            </tr>\n            <tr style=\"height:20px\">\n            </tr>-->\n            <!-- The rest of the current post content... -->\n            <!-- Then at the end -->\n            <tr style=\"height:100px;\" ng-show=\"displayAddCommentRow\">\n                <td width=\"1%\">\n                    <label>{{getCurrentUserId()}}:</label>\n                </td>\n                <td style=\"position:relative;\">\n                    <comment><textarea id=\"newUserComment\" type=\"text\" spellcheck=\"true\" style=\"width:100%;\"/></comment>\n                    <span style=\"position:absolute;right:10px;bottom:10px;\">\n                        <span class=\"glyphicon glyphicon-share-alt\" style=\"color:rgb(91,192,222); float:right; width:20px;\"></span>\n                        <span class=\"glyphicon glyphicon-thumbs-down\" style=\"color:red; float:right; width:20px;\"></span>\n                        <span class=\"glyphicon glyphicon-thumbs-up\" style=\"color:green; float:right; width:20px;\"></span>\n                    </span>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <div class=\"pull-right\">\n        <button ng-class=\"addCommentClass\" ng-click=\"toggleComment()\" style=\"float:right;\">\n            <span ng-class=\"addCommentGlyph\" style=\"padding-right:5px;\"></span>\n            {{addCommentText}}\n        </button>\n        <button class=\"btn btn-success\" ng-click=\"submitComment()\" style=\"float:right;\" ng-show=\"displayAddCommentRow\">\n            Submit\n        </button>\n    </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:06.875"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:06.875",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:338",
    "@version": 1,
    "@class": "Event",
    "eventId": 10339,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-news-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.NewsAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getNews = {\n            category : 'news',\n            name : 'getNews',\n            readOnly: true\n        };\n\n        $scope.delNews = {\n            category : 'news',\n            name : 'delNews',\n            readOnly: false\n        };\n\n        $scope.newsArray = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'News Id',\n                value: 'categoryId'\n            },\n            {\n                title: 'Description',\n                value: 'description'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'updateDate'\n        };\n\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n\n        $scope.delete = function(news) {\n            $scope.delNews.data = news;\n            $http.post('api/rs', $scope.delNews)\n                    .success(function (data, status, headers, config) {\n                        $scope.newsArray.splice($scope.newsArray.indexOf(news), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.news.add\");\n        };\n\n        $scope.update = function(news) {\n            modelDataService.setModelData(news);\n            $location.path(\"/form/com.networknt.light.news.update\");\n        };\n\n        //The function that is responsible of fetching the result from the server\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify($scope.getNews))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.newsArray = result;\n                    })\n        };\n\n        $scope.fetchResult();\n\n    }]);\n</script>\n\n<div class=\"container\" ng-controller=\"com.networknt.light.NewsAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <tabset>\n                <tab heading=\"Recent\">\n                    <h4>News</h4>\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.categoryId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.description\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"news in newsArray | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(news)\">Delete</a></td>\n                            <td>{{news.host}}</td>\n                            <td><a href ng-click=\"update(news)\">{{news.categoryId}}</a></td>\n                            <td>{{news.description}}</td>\n                            <td>{{news.createUserId}}</td>\n                            <td>{{news.createDate}}</td>\n                            <td>{{news.updateUserId}}</td>\n                            <td>{{news.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:06.906"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:06.906",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:339",
    "@version": 1,
    "@class": "Event",
    "eventId": 10340,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-blog-post-view",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.BlogPostViewCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\n        $scope.getComment = {\n            category : 'comment',\n            name: 'getCommentTree',\n            readOnly: true\n        }\n\n        $scope.addComment = {\n            category : 'comment',\n            name: 'addComment',\n            readOnly: false\n        }\n\n        $scope.getComment.data = modelDataService.getModelData();\n        $scope.addComment.data = modelDataService.getModelData();\n\n        $scope.comments = [];\n\n        $scope.fetchResult = function () {\n            $http.post('api/rs', $scope.getComment)\n                    .success(function (result, status, headers, config) {\n                        $scope.comments = result;\n                        console.log($scope.comments);\n                    })\n        };\n        $scope.fetchResult();\n\n        $scope.aceOption = {\n            useWrapMode : true,\n            showGutter: false,\n            theme:'eclipse',\n            mode: 'markdown'\n        };\n\n        $scope.submit = function () {\n            $http.post('api/rs', $scope.addComment)\n                    .success(function (data, status, headers, config) {\n                        toaster.pop('success', status, data);\n                        $scope.fetchResult();\n                    })\n        }\n\n        $scope.toggle = function(scope) {\n            scope.toggle();\n        };\n\n        var getRootNodesScope = function() {\n            return angular.element(document.getElementById(\"tree-root\")).scope();\n        };\n\n        $scope.collapseAll = function() {\n            var scope = getRootNodesScope();\n            scope.collapseAll();\n        };\n\n        $scope.expandAll = function() {\n            var scope = getRootNodesScope();\n            scope.expandAll();\n        };\n\n        $scope.treeFilter = $filter('uiTreeFilter');\n\n        $scope.supportedFields = ['content'];\n\n        $scope.toggledForm = false;\n        $scope.btnText = 'add comment';\n\n        $scope.toggleForm = function() {\n            $scope.toggledForm = !$scope.toggledForm;\n            $scope.btnText = ($scope.toggledForm) ? 'add comment' : 'close';\n        };\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.BlogPostViewCtrl\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12\">\n            <div>\n                <div>{{getComment.data.title}}</div>\n                <div>{{getComment.data.createUserId}} {{getComment.data.createDate}}</div>\n                <div marked=\"getComment.data.content\"></div>\n            </div>\n            <div ui-ace=\"aceOption\" ng-model=\"addComment.data.comment\"></div>\n            <button class=\"pure-button pure-button-small success-bg\" ng-click=\"submit()\">Submit</button>\n\n            <div>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\">Collapse all</a>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"expandAll()\">Expand all</a>\n                <input ng-model=\"pattern\" placeholder=\"Type a part of any comment\"/>\n            </div>\n            <!-- Nested node template -->\n            <script type=\"text/ng-template\" id=\"nodes_renderer.html\">\n                <div ui-tree-handle class=\"tree-node tree-node-content\">\n                    <a class=\"btn btn-success btn-xs\" ng-if=\"node.children && node.children.length > 0\" data-nodrag ng-click=\"toggle(this)\"><span class=\"glyphicon\" ng-class=\"{'glyphicon glyphicon-plus': collapsed, 'glyphicon glyphicon-minus': !collapsed}\"></span></a>\n                    <a href=\"http://www.reddit.com/user/JhnnyTsunami\" class=\"author may-blank id-t2_95r8a\"><span ng-bind-html=\"node.createUserId | highlight:pattern | trust\"></span></a>&#32;<span>{{node.createDate}}</span>\n                    <div ng-bind-html=\"node.content | highlight:pattern | trust\"></div>\n                    <!--\n                    <div class=\"panel-body\">\n                        <form name=\"form\" ng-submit=\"action(node)\" class=\"form-inline\" ng-hide=\"toggledForm\">\n                            <div class=\"form-group\">\n                                <textarea ng-model=\"child.text\" value=\"your comment..\" class=\"form-control\" rows=\"1\" ng-minlength=\"5\" required></textarea>\n                            </div>\n                            <button ng-disabled=\"form.$invalid\" type=\"submit\" class=\"btn btn-primary\">Submit</button>\n                        </form>\n                        <span class=\"label pull-right pointer\" ng-click=\"toggleForm()\"\n                        ng-class=\"{'label-success': toggledForm, 'label-warning': !toggledForm}\">{{ btnText }}</span>\n                    </div>\n                    -->\n                </div>\n                <ol ui-tree-nodes=\"\" ng-model=\"node.children\" ng-class=\"{hidden: collapsed}\">\n                    <li ng-repeat=\"node in node.children\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </script>\n            <div ui-tree id=\"tree-root\">\n                <ol ui-tree-nodes ng-model=\"comments\">\n                    <li ng-repeat=\"node in comments\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </div>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:06.930"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:06.930",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:340",
    "@version": 1,
    "@class": "Event",
    "eventId": 10341,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-test-command-get",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.TestCommandCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\n        var getTest = {\n            category : 'test',\n            name : 'getTest',\n            readOnly: true,\n            data : {\n                pageSize : 10,\n                pageNo : 1,\n                sortDir : 'desc',\n                sortedBy : 'createDate'\n            }\n        };\n\n        $scope.data = '';\n\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify(getTest))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.data = result;\n                        console.log($scope.data);\n                    })\n        };\n        //$scope.fetchResult();\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.TestCommandCtrl\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\n            <button class=\"btn btn-info\" ng-click=\"fetchResult()\"><i class=\"glyphicon glyphicon-edit\"></i>Fetch</button>\n            {{data}}\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:06.968"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:06.968",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:341",
    "@version": 1,
    "@class": "Event",
    "eventId": 10342,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-forum-post-view",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.ForumPostViewCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\n        $scope.getComment = {\n            category: 'comment',\n            name: 'getCommentTree',\n            readOnly: true\n        }\n\n        $scope.addComment = {\n            category: 'comment',\n            name: 'addComment',\n            readOnly: false\n        }\n\n        $scope.getComment.data = modelDataService.getModelData();\n        $scope.addComment.data = modelDataService.getModelData();\n\n        $scope.comments = [];\n\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getComment))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.comments = result;\n                        console.log($scope.comments);\n                    })\n        };\n        $scope.fetchResult();\n\n        $scope.aceOption = {\n            useWrapMode: true,\n            showGutter: false,\n            theme: 'eclipse',\n            mode: 'markdown'\n        };\n\n        $scope.submit = function () {\n            $http.post('api/rs', $scope.addComment)\n                    .success(function (data, status, headers, config) {\n                        toaster.pop('success', status, data);\n                        $scope.fetchResult();\n                    })\n        }\n\n        $scope.toggle = function (scope) {\n            scope.toggle();\n        };\n\n        var getRootNodesScope = function () {\n            return angular.element(document.getElementById(\"tree-root\")).scope();\n        };\n\n        $scope.collapseAll = function () {\n            var scope = getRootNodesScope();\n            scope.collapseAll();\n        };\n\n        $scope.expandAll = function () {\n            var scope = getRootNodesScope();\n            scope.expandAll();\n        };\n\n        $scope.treeFilter = $filter('uiTreeFilter');\n\n        $scope.supportedFields = ['content'];\n\n        $scope.toggledForm = false;\n        $scope.btnText = 'add comment';\n\n        $scope.toggleForm = function () {\n            $scope.toggledForm = !$scope.toggledForm;\n            $scope.btnText = ($scope.toggledForm) ? 'add comment' : 'close';\n        };\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.ForumPostViewCtrl\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12\">\n            <div>\n                <div>{{getComment.data.title}}</div>\n                <div>{{getComment.data.createUserId}} {{getComment.data.createDate}}</div>\n                <div marked=\"getComment.data.content\"></div>\n            </div>\n            <div ui-ace=\"aceOption\" ng-model=\"addComment.data.comment\"></div>\n            <button class=\"pure-button pure-button-small success-bg\" ng-click=\"submit()\">Submit</button>\n\n            <div>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\">Collapse all</a>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"expandAll()\">Expand all</a>\n                <input ng-model=\"pattern\" placeholder=\"Type a part of any comment\"/>\n            </div>\n            <!-- Nested node template -->\n            <script type=\"text/ng-template\" id=\"nodes_renderer.html\">\n                <div ui-tree-handle class=\"tree-node tree-node-content\">\n                    <a class=\"btn btn-success btn-xs\" ng-if=\"node.out_Own && node.out_Own.length > 0\" data-nodrag\n                       ng-click=\"toggle(this)\"><span class=\"glyphicon\"\n                                                     ng-class=\"{'glyphicon glyphicon-plus': collapsed, 'glyphicon glyphicon-minus': !collapsed}\"></span></a>\n                    <a href=\"http://www.reddit.com/user/JhnnyTsunami\" class=\"author may-blank id-t2_95r8a\"><span\n                            ng-bind-html=\"node.createUserId | highlight:pattern | trust\"></span></a>&#32;<span>{{node.createDate}}</span>\n\n                    <div ng-bind-html=\"node.comment | highlight:pattern | trust\"></div>\n                    <!--\n                    <div class=\"panel-body\">\n                        <form name=\"form\" ng-submit=\"action(node)\" class=\"form-inline\" ng-hide=\"toggledForm\">\n                            <div class=\"form-group\">\n                                <textarea ng-model=\"child.text\" value=\"your comment..\" class=\"form-control\" rows=\"1\" ng-minlength=\"5\" required></textarea>\n                            </div>\n                            <button ng-disabled=\"form.$invalid\" type=\"submit\" class=\"btn btn-primary\">Submit</button>\n                        </form>\n                        <span class=\"label pull-right pointer\" ng-click=\"toggleForm()\"\n                        ng-class=\"{'label-success': toggledForm, 'label-warning': !toggledForm}\">{{ btnText }}</span>\n                    </div>\n                    -->\n                </div>\n                <ol ui-tree-nodes=\"\" ng-model=\"node.out_Own\" ng-class=\"{hidden: collapsed}\">\n                    <li ng-repeat=\"node in node.out_Own\" ui-tree-node ng-include=\"'nodes_renderer.html'\"\n                        ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </script>\n            <div ui-tree id=\"tree-root\">\n                <ol ui-tree-nodes ng-model=\"out_Own\">\n                    <li ng-repeat=\"node in out_Own\" ui-tree-node ng-include=\"'nodes_renderer.html'\"\n                        ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </div>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.002"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.002",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:342",
    "@version": 1,
    "@class": "Event",
    "eventId": 10343,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-production-cluster",
      "content": "<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\ncluster environment setup.\n</body>\n</html>",
      "createDate": "2016-02-14T01:59:07.023"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.023",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:343",
    "@version": 1,
    "@class": "Event",
    "eventId": 10344,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-stacks",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Technology Stacks</h1>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-why-angularjs\">Why to choose AngularJS</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-why-bootstrap\">Why to choose Twitter Bootstrap</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-why-undertow\">Why to choose Undertow</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-why-orientdb\">Why to choose OrientDB</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-why-hazelcast\">Why to choose Hazelcast</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-why-light-ruleengine\">Why to choose Light Rule Engine</a></h2>\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.049"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.049",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:344",
    "@version": 1,
    "@class": "Event",
    "eventId": 10345,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-get-started",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Get started</h1>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-dev-linux\">Check out and set up development environment on Linux</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-dev-windows7\">Check out and set up development environment on Windows 7</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-dev-mac\">Check out and set up development environment on MAC OS X</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-first-component\">Create your first component</a></h2>Component is the smallest development and deployment unit in the framework. It can be used to construct view/page which can be part of an application.\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-first-view\">Create your first view</a></h2>View is an smallest downloadable unit from the REST API server and it has dependencies with other views through routing.\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-first-application\">Create your first application</a></h2>Application consists of multiple views and manages routing between views.\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-first-rest-api\">Create your first REST API</a></h2>Front end browser applications and mobile applications need to call REST services to be alive.\n            </p>\n\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.073"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.073",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:345",
    "@version": 1,
    "@class": "Event",
    "eventId": 10346,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-production-single",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Production Environment Setup</h1>\n            <p>\n                I personally use CentOS 6.5 Linux as my production environment and I would recommend it to you; however, other Linux distributions are OK for your production.\n                The following steps are for CentOS 6.5 Linux and the setup is single node that hosts two sites.\n                For cluster and load balance setup, please read <a href=\"/page/com-networknt-light-v-production-cluster\">here</a>\n            </p>\n            <p>\n                On Linux, the production environment is very similar with development environment.\n            </p>\n            <p>\n                1. Create a working user for production other than root: (If you have a user already on the Linux box, please use it) The following assumes that you logged in as root.\n                <pre>\n            #adduser steve\n            #passwd steve\n\n            #visudo\n            This is to edit /etc/sudoers to add steve to the last line so that he can use sudo command\n            Never use vi to edit the above file!\n\n            Add steve right after\n            root ALL=(ALL)   ALL\n            with\n            steve ALL=(ALL)   ALL\n\n            vi /etc/ssh/sshd_config\n\n            change the following line\n            #PermitRootLogin  yes\n            to\n            PermitRootLogin no\n\n            change the following line\n            #UserDNS yes\n            to\n            UserDNS  no\n\n            Log out from root and log in with steve. From this moment on, please use sudo command instead of logging in as root.\n                </pre>\n            </p>\n            <p>\n                2. Install JDK8, maven, node.js and npm with sudo and then using npm to install Grunt, Gulp, Bower and other modules.\n            </p>\n            <p>\n                3. Create dev folder and check out the source code.\n                <pre>\n            log in to the user you just created.\n            $mkdir networknt\n            $cd networknt\n\n            Check out Json Token which is forked from Google and fixed some of the issues.\n            $git clone https://github.com/networknt/jsontoken.git\n            Check out light rule engine which is a Java based rule engine used in the back end\n            $git clone https://github.com/networknt/rule-engine.git\n            Check out the light framework and other projects\n            $git clone https://github.com/networknt/light.git\n\n            $cd jsontoken\n            $mvn clean install\n            $cd ..\n            $cd rule-engine\n            $mvn clean install\n            $cd rule-loader\n            $mvn clean install\n            $cd ~\n            $cd light\n            $mvn clean install -DskipTests\n\n            Now you have all the Java code built already.\n\n                </pre>\n            </p>\n            <p>\n                4. Open the source code with your IDE. I am using JetBrains Idea but other IDE like Eclipse will work. From Idea, you can just select File/Open... and then choose ~/networknt/light folder to open. It will import the pom.xml file under the light folder.\n            </p>\n            <p>\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\n            <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\n            <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a socail commerce site to demo the features of the framework</ul>\n            <ul>example folder is a template site that can be copied to start your own web site.</ul>\n            OK. Let's create three users for each site and if you are building a new site, create one extra user for it.\n\n            </p>\n            <p>\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\n            <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\n            <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a social eCommerce site to demo the features of the framework</ul>\n            <ul>example folder is a template site that can be copied to start your own web site.</ul>\n            Let's create three users for each site and if you are building a new site, create one extra user for it.\n                <pre>\n            sudo adduser networknt\n            sudo adduser edibleforestgarden\n            sudo adduser example\n                </pre>\n            Within each user's home directory, create web subdirectory and grant access to the development user. steve in my case. If you run grunt build from these projects in light folder, you website will be compiled and copied to these web folders and the server will serve the content from these folders for each site. This is like running in production mode.\n            copy server.json and virtualhost.json under networknt/light/server/src/main/resources folder to your home directory and update them accordingly.\n            Add the following line into /etc/hosts in order to test locally using domain names.\n                <pre>\n            127.0.0.1\twww.edibleforestgarden.ca www.networknt.com example\n                </pre>\n            </p>\n\n            <p>\n                If you?re thinking that matching the colors and content across devices is omnichannel, we would encourage you to reconsider. If you are ready to lead in the next phase of social business and get the most out of the promise that our new identity as customers is truly omniscient, then let?s connect. This way of thinking is the future promise on which we started Omnichannel Application Framework.\n            </p>\n            <p>\n                There are a few key features in the framework that allowed this idea to be made reality:\n            <ul>\n                In exploring and discovering products in your brand domain that data should be transferable for me to collect and use universally.\n            </ul>\n            <ul>\n                In exchange for this data, the customer will give you access to other data they have collected that will far outweigh the value of the limited data in your brand universe.\n            </ul>\n            <ul>\n                All experiences offline and online should allow an individual to identify themselves and present a brand with the opportunity to access my preferences.\n            </ul>\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.110"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.110",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:346",
    "@version": 1,
    "@class": "Event",
    "eventId": 10347,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-blog-post",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.BlogPostCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\n        $scope.getBlogPost = {\n            category : 'blog',\n            name: 'getBlogPost',\n            readOnly: true,\n            data: {}\n        }\n\n        $scope.posts = [];\n\n        $scope.fetchResult = function () {\n            $scope.getBlogPost.data.id = modelDataService.getModelData();\n            modelDataService.setModelData(null); // reset the modelDataService variable.\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify($scope.getBlogPost))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.posts = result;\n                        console.log($scope.posts);\n                    })\n        };\n        $scope.fetchResult();\n\n        $scope.post = function() {\n            $location.path(\"/form/com.networknt.light.blog.post.add/\" + $scope.getBlogPost.data.id);\n        };\n\n        $scope.view = function(post) {\n            modelDataService.setModelData(post);\n            $location.path(\"/page/com-networknt-light-v-blog-post-view\");\n        };\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.BlogPostCtrl\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"post()\"><i class=\"glyphicon glyphicon-edit\"></i>Post</button>\n            </div>\n            <tabset>\n                <tab heading=\"Recent\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"view(post)\">{{post.title}}</a></td>\n                        </tr>\n                        <tr>\n                            <td>{{post.createUser}} {{post.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n                <tab heading=\"Bookmark\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\">\n                            <td>\n                                <div><a href ng-click=\"view(post)\">{{post.title}}</a></div>\n                                <div>{{post.createUser}} {{post.createDate}}</div>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.123"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.123",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:347",
    "@version": 1,
    "@class": "Event",
    "eventId": 10348,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-user-signup",
      "content": "Thank you for signing up. You will receive an email shortly with a link to activate your account. Please check your Spam folder if you cannot find it in your primary folder.",
      "createDate": "2016-02-14T01:59:07.142"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.142",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:348",
    "@version": 1,
    "@class": "Event",
    "eventId": 10349,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-form-admin-add",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.FormAdminAddCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.addFormPost = {\n            category : 'form',\n            name : 'addForm',\n            readOnly: false,\n            data: {}\n        };\n\n        $scope.schema = {};\n        $scope.form = [];\n        $scope.action = [];\n        $scope.modelData = {};\n        $scope.schemaJson = JSON.stringify($scope.schema, undefined, 2);\n        $scope.formJson = JSON.stringify($scope.form, undefined, 2);\n        $scope.actionJson = JSON.stringify($scope.action, undefined, 2);\n        $scope.decorator = 'bootstrap-decorator';\n\n        $scope.itParsesSchema = true;\n        $scope.itParsesForm = true;\n        $scope.itParsesAction = true;\n\n        $scope.$watch('schemaJson',function(val,old){\n            if (val && val !== old) {\n                try {\n                    $scope.schema = JSON.parse($scope.schemaJson);\n                    $scope.itParsesSchema = true;\n                } catch (e){\n                    $scope.itParsesSchema = false;\n                }\n            }\n        });\n\n        $scope.$watch('formJson',function(val,old){\n            if (val && val !== old) {\n                try {\n                    $scope.form = JSON.parse($scope.formJson);\n                    $scope.itParsesForm = true;\n                } catch (e){\n                    $scope.itParsesForm = false;\n                }\n            }\n        });\n\n        $scope.$watch('actionJson',function(val,old){\n            if (val && val !== old) {\n                try {\n                    $scope.action = JSON.parse($scope.actionJson);\n                    $scope.itParsesAction = true;\n                } catch (e){\n                    $scope.itParsesAction = false;\n                }\n            }\n        });\n\n        $scope.pretty = function(){\n            return JSON.stringify($scope.modelData,undefined,2,2);\n        };\n\n        $scope.submitForm = function(form, model) {\n            // First we broadcast an event so all fields validate themselves\n            //console.log(model);\n            $scope.$broadcast('schemaFormValidate');\n            // Then we check if the form is valid\n            if (form.$valid) {\n                // TODO submit the form based on the action defined.\n\n\n            }\n        };\n\n        $scope.submitSchema = function() {\n            console.log('submitSchema is called');\n            $scope.addFormPost.data.formId = $scope.formId;\n            $scope.addFormPost.data.schema = $scope.schema;\n            $scope.addFormPost.data.form = $scope.form;\n            $scope.addFormPost.data.action = $scope.action;\n            $http.post('api/rs', $scope.addFormPost)\n                    .success(function(data, status, headers, config) {\n                        toaster.pop('success', status, data, 3000);\n                        $location.path(\"/page/com-networknt-light-v-form-admin-home\");\n                    })\n\n        };\n\n        $scope.saveModel = function() {\n            console.log('saveModel is called');\n            console.log($scope.modelData);\n            $scope.addFormPost.data.modelData = $scope.modelData;\n            $http.post('api/rs', $scope.addFormPost)\n                    .success(function(data, status, headers, config) {\n                        toaster.pop('success', status, data, 3000);\n                        $location.path(\"/page/com-networknt-light-v-form-admin-home\");\n                    })\n        };\n\n    }]);\n</script>\n<style type=\"text/css\">\n\n    body,html {\n        min-height: 1400px;\n    }\n\n    .alert .form-group {\n        margin-bottom: 0px;\n    }\n\n    .red {\n        border: 1px solid red;\n        background: #fee;\n    }\n\n    .ace_editor { font-size: 20px !important;}\n    .form {  height: 400px;  }\n    .action { height: 200px; }\n    .schema {  height: 800px;  }\n</style>\n<div class=\"col-md-12\" ng-app=\"lightApp\" ng-controller=\"com.networknt.light.FormAdminAddCtrl\">\n    <h1>Schema Form Admin</h1>\n    <div class=\"row\">\n        <div class=\"col-sm-4\">\n            <h3>The Generated Form</h3>\n            <form name=\"ngform\" ng-submit=\"submitForm(ngform, modelData)\">\n                <div sf-model=\"modelData\" sf-form=\"form\" sf-schema=\"schema\"></div>\n                <div ng-repeat=\"act in action\">\n                    <input type=\"submit\" ng-click=\"setButtonIndex($index)\" class=\"btn btn-primary pull-right\" value=\"{{act.title}}\">\n                </div>\n            </form>\n\n            <h3>Model</h3>\n            <pre ng-cloak>{{pretty()}}</pre>\n            <div class=\"col-xs-3 col-md-3\"><input type=\"submit\" value=\"Save Model\" ng-click=\"saveModel()\" class=\"btn btn-primary btn-block\"></div>\n        </div>\n        <div class=\"col-sm-8\">\n            <h3>Form Id</h3>\n            <div><input type=\"text\" ng-model=\"formId\"></div>\n            <h3>Form</h3>\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesForm}\" ng-model=\"formJson\" class=\"form-control form\"></div>\n            <h3>Action</h3>\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesAction}\" ng-model=\"actionJson\" class=\"form-control action\"></div>\n            <h3>Schema</h3>\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesSchema}\" ng-model=\"schemaJson\" class=\"form-control schema\"></div>\n            <div class=\"col-xs-2 col-md-2\"><input type=\"submit\" value=\"Save Schema\" ng-click=\"submitSchema()\" class=\"btn btn-primary btn-block\"></div>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.149"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.149",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:349",
    "@version": 1,
    "@class": "Event",
    "eventId": 10350,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-form-admin-update",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.FormAdminUpdateCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.updFormPost = {\n            category : 'form',\n            name : 'updForm',\n            readOnly: false\n        };\n\n        $scope.data = modelDataService.getModelData() || {};\n        modelDataService.setModelData(null); // reset the modelDataService variable.\n        //console.log($scope.data);\n        //console.log($scope.data.id);\n        $scope.updFormPost.data = $scope.data;\n        $scope.schema = $scope.data.schema;\n        //console.log($scope.schema);\n        $scope.form = $scope.data.form;\n        //console.log($scope.form);\n        $scope.action = $scope.data.action;\n        //console.log($scope.action);\n        $scope.schemaJson = JSON.stringify($scope.schema, undefined, 2);\n        $scope.formJson = JSON.stringify($scope.form, undefined, 2);\n        $scope.actionJson = JSON.stringify($scope.action, undefined, 2);\n        $scope.modelData = $scope.data.modelData || {};\n        $scope.decorator = 'bootstrap-decorator';\n\n        $scope.itParsesSchema = true;\n        $scope.itParsesForm = true;\n        $scope.itParsesAction = true;\n\n        $scope.$watch('schemaJson',function(val,old){\n            if (val && val !== old) {\n                try {\n                    $scope.schema = JSON.parse($scope.schemaJson);\n                    $scope.itParsesSchema = true;\n                } catch (e){\n                    $scope.itParsesSchema = false;\n                }\n            }\n        });\n\n        $scope.$watch('formJson',function(val,old){\n            if (val && val !== old) {\n                try {\n                    $scope.form = JSON.parse($scope.formJson);\n                    $scope.itParsesForm = true;\n                } catch (e){\n                    $scope.itParsesForm = false;\n                }\n            }\n        });\n\n        $scope.$watch('actionJson',function(val,old){\n            if (val && val !== old) {\n                try {\n                    $scope.action = JSON.parse($scope.actionJson);\n                    $scope.itParsesAction = true;\n                } catch (e){\n                    $scope.itParsesAction = false;\n                }\n            }\n        });\n\n        $scope.pretty = function(){\n            return JSON.stringify($scope.modelData,undefined,2,2);\n        };\n\n        $scope.submitForm = function(form, model) {\n            // First we broadcast an event so all fields validate themselves\n            //console.log(model);\n            $scope.$broadcast('schemaFormValidate');\n            // Then we check if the form is valid\n            if (form.$valid) {\n                // TODO submit the form based on the action defined.\n\n\n            }\n        };\n\n        $scope.submitSchema = function() {\n            console.log('submitSchema is called');\n            $scope.updFormPost.data.schema = $scope.schema;\n            console.log($scope.schema);\n            $scope.updFormPost.data.form = $scope.form;\n            console.log($scope.form);\n            $scope.updFormPost.data.action = $scope.action;\n            console.log($scope.action);\n            $http.post('api/rs', $scope.updFormPost)\n                    .success(function(data, status, headers, config) {\n                        toaster.pop('success', status, data, 3000);\n                        $location.path(\"/page/com-networknt-light-v-form-admin-home\");\n                    })\n\n        };\n\n        $scope.saveModel = function() {\n            console.log('saveModel is called');\n            console.log($scope.modelData);\n            $scope.updFormPost.data.modelData = $scope.modelData;\n            $http.post('api/rs', $scope.updFormPost)\n                    .success(function(data, status, headers, config) {\n                        toaster.pop('success', status, data, 3000);\n                        $location.path(\"/page/com-networknt-light-v-form-admin-home\");\n                    })\n        };\n\n    }]);\n</script>\n<style type=\"text/css\">\n\n    body,html {\n        min-height: 1400px;\n    }\n\n    .alert .form-group {\n        margin-bottom: 0px;\n    }\n\n    .red {\n        border: 1px solid red;\n        background: #fee;\n    }\n\n    .ace_editor { font-size: 20px !important;}\n    .form {  height: 400px;  }\n    .action { height: 200px; }\n    .schema {  height: 800px;  }\n</style>\n<div class=\"col-md-12\" ng-app=\"lightApp\" ng-controller=\"com.networknt.light.FormAdminUpdateCtrl\">\n    <h1>Schema Form Admin</h1>\n    <div class=\"row\">\n        <div class=\"col-sm-4\">\n            <h3>The Generated Form</h3>\n            <form name=\"ngform\" ng-submit=\"submitForm(ngform, modelData)\">\n                <div sf-model=\"modelData\" sf-form=\"form\" sf-schema=\"schema\"></div>\n                <div ng-repeat=\"act in action\">\n                    <input type=\"submit\" ng-click=\"setButtonIndex($index)\" class=\"btn btn-primary pull-right\" value=\"{{act.title}}\">\n                </div>\n            </form>\n\n            <h3>Model</h3>\n            <pre ng-cloak>{{pretty()}}</pre>\n            <div class=\"col-xs-3 col-md-3\"><input type=\"submit\" value=\"Save Model\" ng-click=\"saveModel()\" class=\"btn btn-primary btn-block\"></div>\n        </div>\n        <div class=\"col-sm-8\">\n            <h3>Selected Form: {{data.formId}}</h3>\n            <h3>Form</h3>\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesForm}\" ng-model=\"formJson\" class=\"form-control form\"></div>\n            <h3>Action</h3>\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesAction}\" ng-model=\"actionJson\" class=\"form-control action\"></div>\n            <h3>Schema</h3>\n            <div ui-ace=\"{ theme: 'eclipse',mode:'json'}\" ng-class=\"{red: !itParsesSchema}\" ng-model=\"schemaJson\" class=\"form-control schema\"></div>\n            <div class=\"col-xs-2 col-md-2\"><input type=\"submit\" value=\"Save Schema\" ng-click=\"submitSchema()\" class=\"btn btn-primary btn-block\"></div>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.159"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.159",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:350",
    "@version": 1,
    "@class": "Event",
    "eventId": 10351,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-first-component",
      "content": "<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n\n</body>\n</html>",
      "createDate": "2016-02-14T01:59:07.179"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.179",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:351",
    "@version": 1,
    "@class": "Event",
    "eventId": 10352,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-rule-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.RuleAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        console.log('local rule admin page is reached');\n        $scope.getRule = {\n            category : 'rule',\n            name : 'getRule',\n            readOnly: true\n        };\n        $scope.delRule = {\n            category : 'rule',\n            name : 'delRule',\n            readOnly: false\n        };\n        $scope.rules = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Rule Class',\n                value: 'ruleClass'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'createDate'\n        };\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(rule) {\n            $scope.delRule.data = rule;\n            $http.post('api/rs', $scope.delRule)\n                    .success(function (data, status, headers, config) {\n                        $scope.rules.splice($scope.rules.indexOf(rule), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n\n        $scope.update = function(rule) {\n            // Stringify schema for schema update form\n            rule.schema = JSON.stringify(rule.schema, undefined, 2);\n            console.log('rule = ', rule);\n            modelDataService.setModelData(rule);\n            //$location.path(\"/form/com.networknt.light.rule.update\");\n            $location.path(\"/page/com-networknt-light-v-rule-home\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.rule.add\");\n        };\n\n        $scope.import = function() {\n            $location.path(\"/form/com.networknt.light.rule.import\");\n        };\n\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getRule))}})\n                    .success(function (data, status, headers, config) {\n                        $scope.rules = data;\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.RuleAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"import()\"><i class=\"glyphicon glyphicon-edit\"></i>Import</button>\n            </div>\n            <tabset>\n                <tab heading=\"Rules\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.ruleClass\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"rule in rules | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(rule)\">Delete</a></td>\n                            <td><a href ng-click=\"update(rule)\">{{rule.ruleClass}}</a></td>\n                            <td>{{rule.host}}</td>\n                            <td>{{rule.createUserId}}</td>\n                            <td>{{rule.createDate}}</td>\n                            <td>{{rule.updateUserId}}</td>\n                            <td>{{rule.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.191"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.191",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:352",
    "@version": 1,
    "@class": "Event",
    "eventId": 10353,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-user-admin-update",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>User Update</h1>\n            <p>\n            <h2><a href=\"/form/com.networknt.light.user.role.update_d\">Update User Role</a></h2>\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.198"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.198",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:353",
    "@version": 1,
    "@class": "Event",
    "eventId": 10354,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-omnichannel",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Omnichannel and Omnichannel Experience</h1>\n            <p>\n                Omnichannel is a still new and the idea is still developing. People talking about it online at different levels but majorities are limited within a single brand. Omnichannel is about true continuity of your experience. But the key is that it extends beyond a single brand?s universe. Being omniscient is perceiving and understanding all things. Not all things at Best Buy. Not all things at Target. Not all things at Citi. Omni is perceiving all things. And the best way for a customer to perceive everything is to allow them to own their data and experience, then give them the ability to use it to guide creation and context of every future experience.\n            </p>\n            <p>\n                Omni comes from the word Omnis which can mean all or universal. This is in comparison to other concepts out there, like ?multichannel?, from the Latin word Multus, meaning multiple or many and from crosschannel, derived from the Latin word Crux, meaning to go across. The way that many are explaining omnichannel today is: ?cross channel being done well?. Examples are often that the mobile app should match the responsive design of the website which should thematically reflect the look and feel inside the store. We?d argue that doing cross channel well with the user in mind, is not worthy (nor useful) enough to deserve a new concept. Instead, we hold the belief that Omnichannel is something new and notable, even revolutionary, not just a marginal evolution of existing thinking.\n            </p>\n            <p>\n                Think about it. Today our life is continuous, but our customer experience is anything but that. We learn and have memory of all the good and bad things in life. We strive to limit or eliminate the negative ones and increase the good. These patterns that we strive to replicate are our preferences. The ability to have a continuous experience across brands, across format and across devices that is completely customized ? that is the promise of a new way of thinking and marketing that has been long unnoticed.\n            </p>\n            <p>\n                I am shopping at Amazon.com, Newegg.com and other online retailers. I like Amazon's catelog to do research and Newegg's checkout process. Would I be a happy customer of both if Amazon can provide me the Newegg checkout experience and Newegg can provide me Amazon catelog experience? I have a checking account at bank A, a saving account at bank B and an investment account at bank C. Can I use Bank A online transfter experience on Bank B and Bank C websites?\n            </p>\n            <p>\n                But wait, are you suggesting that Amazon helps people buy computers from Newegg? That would be counter to everything retailers try to do. When brands think customer experience they need to think omni. Its not about your customers or their customers, its about all customers. The brands who can best interpret omnichannel data and understand all customers are the winners. There will be a new dimension of customer decision. As a final decision is being made to purchase, price, relationship, service and continuity will all be considered.\n            </p>\n            <p>\n                With the rise of NFC and personal device use in store, brands need to awake to the idea that the days of closed data and 75% off for loyalty points from only shopping at their brand are changing quickly. If a brand wants to start thinking omnichannel, then they need to be open and involved in making the customer?s experience continuous and universal. Have doubts? Look at the role of social media and customer relationship. Remember those brands who have refused to evolve and engage and have a dialogue? Many of them aren?t with us today.\n            </p>\n            <p>\n                As much as the social media revolution has meant the two-way exchange in dialogue and interaction, omnichannel is the realization of social business. If the first phase in the evolution of the customer relationship was messaging and media, the future is product research, selection and payment. With personal preference data that can be used universally on devices, brand can either jump at the opportunities made real by omnichannel or wait until their brand is the only one not integrated and playing nicely to allow consumers to be continuous.\n            </p>\n            <p>\n                If you?re thinking that matching the colors and content across devices is omnichannel, we would encourage you to reconsider. If you are ready to lead in the next phase of social business and get the most out of the promise that our new identity as customers is truly omniscient, then let?s connect. This way of thinking is the future promise on which we started Omnichannel Application Framework.\n            </p>\n            <p>\n                There are a few key features in the framework that allowed this idea to be made reality:\n                <ul>\n                    In exploring and discovering products in your brand domain that data should be transferable for me to collect and use universally.\n                </ul>\n                <ul>\n                    In exchange for this data, the customer will give you access to other data they have collected that will far outweigh the value of the limited data in your brand universe.\n                </ul>\n                <ul>\n                    All experiences offline and online should allow an individual to identify themselves and present a brand with the opportunity to access my preferences.\n                </ul>\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.223"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.223",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:354",
    "@version": 1,
    "@class": "Event",
    "eventId": 10355,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-test-hello-world",
      "content": "<!--\n  ~ Copyright 2015 Network New Technologies Inc.\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~     http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.HelloWorldCtrl', ['$scope', '$http', '$location', '$filter', 'modelDataService', function ($scope, $http, $location, $filter, modelDataService) {\n        var getHelloWorld = {\n            host: 'example',\n            app: 'main',\n            category : 'perf',\n            name : 'helloWorld',\n            readOnly: true,\n            data : {\n                pageSize : 10,\n                pageNo : 1,\n                sortDir : 'desc',\n                sortedBy : 'createDate'\n            }\n        };\n\n        $scope.data = '';\n\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify(getHelloWorld))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.data = result;\n                        console.log($scope.data);\n                    })\n        };\n        //$scope.fetchResult();\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.HelloWorldCtrl\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\n            <button class=\"btn btn-info\" ng-click=\"fetchResult()\"><i class=\"glyphicon glyphicon-edit\"></i>Fetch</button>\n            {{data}}\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.241"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.241",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:355",
    "@version": 1,
    "@class": "Event",
    "eventId": 10356,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-first-view",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Develop your first view</h1>\n            <p>\n                Once you have installed development environment following above steps, you should have the following folders in your working directory and java projects in each folder have been built using maven.\n\n            <ul>light</ul>\n            <ul>jsontoken</ul>\n            <ul>rule-engine</ul>\n\n            If you are a full stack developer, you can start the server from your ide in debug mode so that you can monitor the interaction between the browser and the server. Open/import maven project in light folder and start the server in debug mode at server/src/main/java/com/networknt/light/server/LightServer.java\n            <p>\n            If you are just a front end develop, you can go to light/server/target and run\n        <pre>\n            java -jar light-server.jar\n        </pre>\n\n            The server provides the REST API endpoints and of cause supply the static and javascript content; however, in order to speed up the front end development, you can use gulp webserver as a proxy to the Light Server and provide live load on your browser if files are updated.\n            <p>\n            To start the proxy web server, go to view folder under light\n        <pre>\n            cd view\n            npm install\n            bower install\n            gulp webserver\n        </pre>\n            A browser will be started automatically at this point. I am using Google Chrome as my default browser and you can use your preferred browser. Let update a static page for example this tutorial.\n\n            <p>\n            Click the first \"Learn more\" button on the home page and click create your first view link, you will see this page on your browser. Open view/src/com-networknt-light-v-first-view.html in your editor and update something and save, you will see your browser refreshed automatically to reflect your changes.\n            <p>\n            Page/view is a deployment unit in Light Framework and it should be deployed on the server database on official test environment and production. But for development, we want productivity so everything should be working locally with local server support. Here is Angular route for page in app.js under script.\n        <pre>\n      .when('/page/:id', {\n        templateUrl: 'views/page.html',\n        controller: 'pageCtrl'\n      })\n        </pre>\n            As you can see, the url has /page and then a page id which is the filename you are editing on the file system without .html extension. Let's take a look at page.html template in views folder.\n        <pre>\n        &lt;div dynamic='html'&gt;&lt;/div&gt;\n        </pre>\n        It is a dynamic directive to render html and javascript. The following is the controller for the page.\n            <pre>\n'use strict';\n\n/**\n * This is a generic page controller. It handles pages without special handling.\n * Pages are always loaded from file system first from /src folder, if it cannot be found then they are\n * loaded from the database by REST API calls. This is the dev environment and production is always loaded\n * from REST API.\n */\nangular.module('lightApp').controller('pageCtrl', ['$scope', '$routeParams', '$http', 'toaster', 'modelDataService', function($scope, $routeParams, $http, toaster, modelDataService) {\n\n    console.log('id =', $routeParams.id);\n    console.log('file =', '/' + $routeParams.id + '.html');\n\n    var getPage = {\n        category : 'page',\n        name : 'getPage',\n        readOnly: true,\n        data : {\n            id : $routeParams.id\n        }\n    };\n\n\n    $scope.html = '';\n    $http.get('/src/' + $routeParams.id + '.html').success (function(data){\n        $scope.html = data;\n    }).error(function() {\n        console.log(\"Could not load file from src folder, try REST API...\");\n        $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify(getPage))}})\n            .success(function (result, status, headers, config) {\n                $scope.html = result.content;\n            })\n    })\n\n}]);\n            </pre>\n\n            As you can see it look for the id + .html under src folder and it cannot find the file then ask the server REST API to get the page content. And this is the dynamic directive.\n            <pre>\ndirective('dynamic', function ($compile) {\n    return {\n        restrict: 'A',\n        replace: true,\n        link: function (scope, ele, attrs) {\n            scope.$watch(attrs.dynamic, function(html) {\n                ele.html(html);\n                $compile(ele.contents())(scope);\n            });\n        }\n    };\n});\n            </pre>\n\n            At this point you have a page updated and tested locally. Now you can import the page to your local server and capture the event in a file so that it can be deployed on other testing and production environment.\n            <li>\n                1. Go to Admin menu and click Page Admin. (login with stevehu/123456 to see the admin menu by default)\n            </li>\n            <li>\n                2. All pages in database will be listed here and you can update them by click the id link or delete page by click delete link before the Page Id. There are two buttons on the up right corner to import a page or add a new page. Let's use import as it will overwrite the database version from imported version.\n            </li>\n            <li>\n                3. Click Import button and enter id as the filename you edited without the .html and click choose file button to pick the file from src folder.\n            </li>\n            <li>\n                4. Click Import Page button to get page imported into local server database.\n            </li>\n            <li>\n                5. Click Db Admin from Admin menu and click Download Events link.\n            </li>\n            <li>\n                6. Select from date/time and to date/time for the import page event and click Download Events\n            </li>\n            <li>\n                7. An event or a list of events will be shown up in the text area on the page and you can save it into a file locally. If there are multiple events, remove the rest but only leave the last one in the json array.\n            </li>\n            <li>\n                8. Now you have an event file and it can be replayed on other environment. Login to another server with owner userId and password and click Admin/Db Admin and click link Replay Events. Pick up the event file you just saved and click Replay Event button to get the page deployed to another environment.\n            </li>\n\n            Now you know how to update existing page and generate event file and replay it on another environment for deployment. What about brand new page? And how to refer the newly added page from other page or menu?\n\n            Here is the html that has another page as a href link.\n            <pre>\n\n                &lt;a href=\"/page/com-networknt-light-v-first-view\"&gt;Create your first view&lt;/a&gt;\n            </pre>\n\n            To link a page to a menu item, go to Admin/Menu Admin and click Menu Items tab and you can update an existing menu item or create a new one and link it to a parent menu. You need to have a label and path will be the page URL like\n            <pre>\n                /page/com-networknt-light-v-news-admin-home\n            </pre>\n\n            Now you know how to update a static page, create a new static page and link it from another page or menu.How about dynamic Angular page? Can I have controllers, filters and directives in my page? The answer is YES. Let's take a look at one dynamic page.\n\n            <pre>\n&lt;script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.ForumPostCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\n        $scope.getForumPost = {\n            category : 'forum',\n            name: 'getForumPost',\n            readOnly: true,\n            data: {}\n        }\n\n        $scope.posts = [];\n        $scope.forums = [];\n\n        $scope.fetchResult = function () {\n            $scope.getForumPost.data.id = modelDataService.getModelData();\n            modelDataService.setModelData(null); // reset the modelDataService variable.\n            $http.post('api/rs', $scope.getForumPost)\n                    .success(function (result, status, headers, config) {\n                        $scope.posts = result;\n                        console.log($scope.posts);\n                    })\n        };\n        $scope.fetchResult();\n\n        $scope.post = function() {\n            $location.path(\"/form/com.networknt.light.forum.post.add/\" + $scope.getForumPost.data.id);\n        };\n\n        $scope.view = function(post) {\n            modelDataService.setModelData(post);\n            $location.path(\"/page/com-networknt-light-v-forum-post-view\");\n        };\n\n    }]);\n&lt;/script&gt;\n&lt;div class=\"container\" ng-controller=\"com.networknt.light.ForumPostCtrl\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-xs-12 col-sm-12 col-md-12\"&gt;\n            &lt;div class=\"pull-right\"&gt;\n                &lt;button class=\"btn btn-info\" ng-click=\"post()\"&gt;&lt;i class=\"glyphicon glyphicon-edit\"&gt;&lt;/i&gt;Post&lt;/button&gt;\n                &lt;/div&gt;\n            &lt;tabset&gt;\n                &lt;tab heading=\"Recent\"&gt;\n                    &lt;table class=\"table table-striped\"&gt;\n                        &lt;thead&gt;\n                        &lt;tr&gt;\n                        &lt;/tr&gt;\n                        &lt;/thead&gt;\n                        &lt;tbody&gt;\n                        &lt;tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\"&gt;\n                            &lt;td&gt;&lt;a href ng-click=\"view(post)\"&gt;{{post.title}}&lt;/a&gt;&lt;/td&gt;\n                &lt;/tr&gt;\n                        &lt;tr&gt;\n                            &lt;td&gt;{{post.createUser}} {{post.updateDate}}&lt;/td&gt;\n                &lt;/tr&gt;\n                        &lt;/tbody&gt;\n                    &lt;/table&gt;\n                &lt;/tab&gt;\n                &lt;tab heading=\"Bookmark\"&gt;\n                    &lt;table class=\"table table-striped\"&gt;\n                        &lt;thead&gt;\n                        &lt;tr&gt;\n                        &lt;/tr&gt;\n                        &lt;/thead&gt;\n                        &lt;tbody&gt;\n                        &lt;tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\"&gt;\n                            &lt;td&gt;\n                                &lt;div&gt;&lt;a href ng-click=\"view(post)\"&gt;{{post.title}}&lt;/a&gt;&lt;/div&gt;\n        &lt;div&gt;{{post.createUser}} {{post.createDate}}&lt;/div&gt;\n    &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/tbody&gt;\n    &lt;/table&gt;\n    &lt;/tab&gt;\n    &lt;/tabset&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/div&gt; &lt;!-- /container --&gt;\n\n            </pre>\n\n            As you can see there is a controller in the page. Someone who is Angular developer might ask how come you can register your controller when the page is loaded dynamically? Is angular supposed to register all the controller at bootstrap time? Here is the trick to register controller once the page is loaded.\n            I saved the Angular providers in variables and use them to register during runtime dynamically.\n\n            <pre>\nconfig(['$routeProvider', '$locationProvider', '$controllerProvider', '$compileProvider', '$filterProvider', '$provide', function ($routeProvider, $locationProvider, $controllerProvider, $compileProvider, $filterProvider, $provide) {\n\n    // Notice that the registration methods on the\n    // module are now being overridden by their provider equivalents\n    lightApp.controller = $controllerProvider.register;\n    lightApp.directive  = $compileProvider.directive;\n    lightApp.filter     = $filterProvider.register;\n    lightApp.factory    = $provide.factory;\n    lightApp.service    = $provide.service;\n\n            </pre>\n            Now you know how to update, create static and dynamic views or pages in Light Framework and know how to deploy them to another environment. I also record a video to show you the steps described above and you can view it at\n\n            <a href=\"http://youtu.be/fLCjboWLXgY\">http://youtu.be/fLCjboWLXgY</a>\n            <p>\n            Happy designing.\n\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.259"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.259",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:356",
    "@version": 1,
    "@class": "Event",
    "eventId": 10357,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-why-undertow",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Why Undertow</h1>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-java-php\">Why Java could not compete with PHP</a></h2>\n            </p>\n            <p>\n            <h2><a href=\"/page/com-networknt-light-v-undertow-fit\">How Undertow fits in the framework</a></h2>\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.274"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.274",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:357",
    "@version": 1,
    "@class": "Event",
    "eventId": 10358,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-forum-home",
      "content": "<script type='text/javascript'>\n\n    'use strict';\n\n    angular.module('lightApp').controller('com.networknt.light.c.ForumCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\n        $scope.getForum = {\n            category: 'forum',\n            name: 'getForumTree',\n            readOnly: true\n        };\n\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getForum))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.forums = result;\n                        console.log($scope.forums);\n                    })\n        };\n        $scope.fetchResult();\n\n        $scope.toggle = function (scope) {\n            scope.toggle();\n        };\n\n        var getRootNodesScope = function () {\n            return angular.element(document.getElementById(\"tree-root\")).scope();\n        };\n\n        $scope.collapseAll = function () {\n            var scope = getRootNodesScope();\n            scope.collapseAll();\n        };\n\n        $scope.expandAll = function () {\n            var scope = getRootNodesScope();\n            scope.expandAll();\n        };\n\n        $scope.treeFilter = $filter('uiTreeFilter');\n\n        $scope.supportedFields = ['categoryId', 'description'];\n\n        $scope.gotoForum = function (categoryId) {\n            modelDataService.setModelData(categoryId);\n            $location.path(\"/page/com-networknt-light-v-forum-post\");\n        }\n\n    }]);\n</script>\n<div class=\"container\" data-ng-controller=\"com.networknt.light.c.ForumCtrl\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\n            <h4 class=\"page-header\">Forum</h4>\n            <div>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\">Collapse all</a>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"expandAll()\">Expand all</a>\n                <input ng-model=\"pattern\" placeholder=\"Type a part of any forum\"/>\n            </div>\n            <!-- Nested node template -->\n            <script type=\"text/ng-template\" id=\"nodes_renderer.html\">\n                <div ui-tree-handle class=\"tree-node tree-node-content\">\n                    <a class=\"btn btn-success btn-xs\" ng-if=\"node.out_Own && node.out_Own.length > 0\" data-nodrag\n                       ng-click=\"toggle(this)\"><span class=\"glyphicon\"\n                                                     ng-class=\"{'glyphicon glyphicon-plus': collapsed, 'glyphicon glyphicon-minus': !collapsed}\"></span></a>\n                    <!--{{node.id | highlight:pattern | trust}}-->\n                    <a href ng-click=\"gotoForum(node.categoryId)\" ng-bind-html=\"node.categoryId | highlight:pattern | trust\"></a>\n                    <small ng-bind-html=\"node.description | highlight:pattern | trust\"></small>\n                </div>\n                <ol ui-tree-nodes=\"\" ng-model=\"node.out_Own\" ng-class=\"{hidden: collapsed}\">\n                    <li ng-repeat=\"node in node.out_Own\" ui-tree-node ng-include=\"'nodes_renderer.html'\"\n                        ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </script>\n            <div ui-tree data-drag-enabled=false id=\"tree-root\">\n                <ol ui-tree-nodes ng-model=\"forums\">\n                    <li ng-repeat=\"node in forums\" ui-tree-node ng-include=\"'nodes_renderer.html'\"\n                        ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </div>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.288"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.288",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:358",
    "@version": 1,
    "@class": "Event",
    "eventId": 10359,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-catalog-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.CatalogAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getCatalog = {\n            category : 'catalog',\n            name : 'getCatalog',\n            readOnly: true\n        };\n\n        $scope.delCatalog = {\n            category : 'catalog',\n            name : 'delCatalog',\n            readOnly: false\n        };\n\n        $scope.catalogs = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Catalog Id',\n                value: 'categoryId'\n            },\n            {\n                title: 'Description',\n                value: 'description'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'updateDate'\n        };\n\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n\n        $scope.delete = function(catalog) {\n            $scope.delCatalog.data = catalog;\n            $http.post('api/rs', $scope.delCatalog)\n                    .success(function (data, status, headers, config) {\n                        $scope.catalogs.splice($scope.catalogs.indexOf(catalog), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.catalog.add\");\n        };\n\n        $scope.update = function(catalog) {\n            modelDataService.setModelData(catalog);\n            $location.path(\"/form/com.networknt.light.catalog.update\");\n        };\n\n        //The function that is responsible of fetching the result from the server\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify($scope.getCatalog))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.catalogs = result;\n                        //console.log($scope.catalogs);\n                    })\n        };\n\n        $scope.fetchResult();\n\n    }]);\n</script>\n\n<div class=\"container\" ng-controller=\"com.networknt.light.CatalogAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <tabset>\n                <tab heading=\"Recent\">\n                    <h4>Catalog</h4>\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.categoryId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.description\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"catalog in catalogs | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(catalog)\">Delete</a></td>\n                            <td>{{catalog.host}}</td>\n                            <td><a href ng-click=\"update(catalog)\">{{catalog.categoryId}}</a></td>\n                            <td>{{catalog.description}}</td>\n                            <td>{{catalog.createUserId}}</td>\n                            <td>{{catalog.createDate}}</td>\n                            <td>{{catalog.updateUserId}}</td>\n                            <td>{{catalog.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.314"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.314",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:359",
    "@version": 1,
    "@class": "Event",
    "eventId": 10360,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-user-admin-home",
      "content": "<script type='text/javascript'>\n    (function(angular) {\n        'use strict';\n        angular.module('lightApp').controller('com.networknt.light.UserAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n            $scope.getAllUser = {\n                category : 'user',\n                name : 'getAllUser',\n                readOnly: true,\n                data : {\n                    pageSize : 10,\n                    pageNo : 1,\n                    sortDir : 'desc',\n                    sortedBy : 'createDate'\n                }\n            };\n            $scope.delUser = {\n                category : 'user',\n                name : 'delUser',\n                readOnly: false\n            };\n            $scope.lockUser = {\n                category : 'user',\n                name : 'lockUser',\n                readOnly: false\n            };\n            $scope.unlockUser = {\n                category : 'user',\n                name : 'unlockUser',\n                readOnly: false\n            };\n\n            $scope.page = { maxSize: 10, totalItems: 0, numPages: 0 };\n            $scope.users = [];\n            $scope.roles = [];\n            $scope.hosts = [];\n\n            $scope.headers = [\n                {\n                    title: 'Delete',\n                    value: 'delete'\n                },\n                {\n                    title: 'Locked',\n                    value: 'locked'\n                },\n                {\n                    title: 'User Id',\n                    value: 'userId'\n                },\n                {\n                    title: 'Host',\n                    value: 'host'\n                },\n                {\n                    title: 'Roles',\n                    value: 'roles'\n                },\n                {\n                    title: 'Email',\n                    value: 'email'\n                },\n                {\n                    title: 'First Name',\n                    value: 'firstName'\n                },\n                {\n                    title: 'Last Name',\n                    value: 'lastName'\n                },\n                {\n                    title: 'Up Users',\n                    value: 'upUsers'\n                },\n                {\n                    title: 'Down Users',\n                    value: 'downUsers'\n                },\n                {\n                    title: 'Karma',\n                    value: 'karma'\n                },\n                {\n                    title: 'Create Date',\n                    value: 'createDate'\n                },\n                {\n                    title: 'Update Date',\n                    value: 'updateDate'\n                },\n                {\n                    title: 'Log in Date',\n                    value: 'logInDate'\n                },\n                {\n                    title: 'Log out Date',\n                    value: 'logOutDate'\n                }\n            ];\n\n            $scope.fetchResult = function () {\n                $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getAllUser))}})\n                        .success(function (result, status, headers, config) {\n                            $scope.users = result.users;\n                            $scope.roles = result.roles;\n                            $scope.hosts = result.hosts;\n                            $scope.page.totalItems = result.total;\n                            //console.log($scope.users);\n                            console.log($scope.roles);\n                            console.log($scope.hosts);\n                            //console.log($scope.page.totalItems);\n                            $scope.page.numPages = Math.ceil($scope.page.totalItems / $scope.getAllUser.data.pageSize);\n                            //console.log($scope.page.numPages);\n                        })\n            };\n\n            $scope.onUserSort = function (sortedBy, sortDir) {\n                $scope.getAllUser.data.sortDir = sortDir;\n                $scope.getAllUser.data.sortedBy = sortedBy;\n                $scope.getAllUser.data.pageNo = 1;\n                $scope.fetchResult();\n            };\n\n            //Will be called when filtering the grid, will reset the page number to one\n            $scope.filterResult = function () {\n                $scope.getAllUser.data.pageNo = 1;\n                $scope.fetchResult();\n            };\n\n            $scope.pageChanged = function() {\n                $scope.fetchResult();\n            };\n\n            $scope.lock = function(user) {\n                $scope.lockUser.data = user;\n                $http.post('api/rs', $scope.lockUser)\n                        .success(function (data, status, headers, config) {\n                            user.locked = true;\n                            toaster.pop('success', status, data, 3000);\n                        })\n            };\n\n            $scope.unlock = function(user) {\n                $scope.unlockUser.data = user;\n                $http.post('api/rs', $scope.unlockUser)\n                        .success(function (data, status, headers, config) {\n                            user.locked = false;\n                            toaster.pop('success', status, data, 3000);\n                        })\n            };\n\n            $scope.delete = function(user) {\n                $scope.delUser.data = user;\n                $http.post('api/rs', $scope.delUser)\n                        .success(function (data, status, headers, config) {\n                            $scope.users.splice($scope.users.indexOf(user), 1);\n                            toaster.pop('success', status, data, 3000);\n                        })\n            };\n\n            $scope.update = function(user) {\n                modelDataService.setModelData(user);\n                $location.path(\"/page/com-networknt-light-v-user-admin-update\");\n            };\n\n            $scope.pageChanged();\n        }]);\n    })(window.angular);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.UserAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <tabset>\n                <tab heading=\"Users\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onUserSort\" sortdir=\"getAllUser.data.sortDir\" sortedby=\"getAllUser.data.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.locked\" type=\"checkbox\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.userId\" type=\"text\" /></td>\n                            <td>\n                                <select ng-change=\"filterResult()\" ng-model=\"getAllUser.data.host\" ng-options=\"host for host in hosts\" >\n                                    <option value=\"\"></option>\n                                </select>\n                            </td>\n                            <td>\n                                <select ng-change=\"filterResult()\" ng-model=\"getAllUser.data.roles\" ng-options=\"role for role in roles\" >\n                                    <option value=\"\"></option>\n                                </select>\n                            </td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.email\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.firstName\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.lastName\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.upUsers\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.downUsers\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.karma\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.createDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.updateDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.logInDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"getAllUser.data.logOutDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"user in users\">\n                            <td><a href ng-click=\"delete(user)\">Delete</a></td>\n                            <td><a href ng-click=\"lock(user)\">{{user.locked}}</a></td>\n                            <td><a href ng-click=\"update(user)\">{{user.userId}}</a></td>\n                            <td>{{user.host}}</td>\n                            <td>{{user.roles}}</td>\n                            <td>{{user.email}}</td>\n                            <td>{{user.firstName}}</td>\n                            <td>{{user.lastName}}</td>\n                            <td>{{user.upUsers}}</td>\n                            <td>{{user.downUsers}}</td>\n                            <td>{{user.karma}}</td>\n                            <td>{{user.createDate}}</td>\n                            <td>{{user.updateDate}}</td>\n                            <td>{{user.logInDate}}</td>\n                            <td>{{page.logOutDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                    <pagination total-items=\"page.totalItems\" items-per-page=\"getAllUser.data.pageSize\" ng-model=\"getAllUser.data.pageNo\" max-size=\"page.maxSize\" class=\"pagination-sm\" boundary-links=\"true\" rotate=\"false\" num-pages=\"page.numPages\" ng-change=\"pageChanged()\"></pagination>\n                    <table>\n                        <tr>\n                            <td>Page: {{getAllUser.data.pageNo}} / {{page.numPages}}</td>\n                            <td>&nbsp;</td>\n                            <td>Page Size:</td>\n                            <td><input type=\"number\" min=\"1\" max=\"200\" ng-change=\"filterResult()\" ng-model=\"getAllUser.data.pageSize\"></td>\n                        </tr>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.327"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.327",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:360",
    "@version": 1,
    "@class": "Event",
    "eventId": 10361,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-forum-post_v2",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.ForumPostCtrl', ['$scope', '$http', '$location', 'authService', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, authService, $filter, toaster, modelDataService) {\n        $scope.getForumPost = {\n            category : 'forum',\n            name: 'getForumPost',\n            readOnly: true,\n            data: {}\n        };\n\n        $scope.delPost = {\n            category: 'post',\n            name: 'delPost',\n            readOnly: false,\n            data: {}\n        };\n\n        $scope.posts = [];\n        $scope.forums = [];\n        $scope.fetchForumsDisplayClass = \"info\";\n        $scope.fetchForumsStateText = \"Getting forums...\";\n\n        $scope.fetchResult = function () {\n            var modelData = modelDataService.getModelData();\n            // Check if the id is null before setting it.\n            // Otherwise it will be overwritten with null.\n            console.log('modelData', modelDataService.getModelData());\n            if ($scope.getForumPost.data.id == null) {\n                if (modelData != null && modelData.categoryId == null) {\n                    $scope.getForumPost.data.id = modelData;\n                } else {\n                    $scope.getForumPost.data.id = modelDataService.getModelData().categoryId;\n                }\n            }\n            console.log('posting with:', $scope.getForumPost);\n            $http.post('api/rs', $scope.getForumPost)\n                .success(function (result, status, headers, config) {\n                    console.log(\"received success\", result);\n                    $scope.posts = result;\n                })\n                .error(function (result, status, headers, config) {\n                    console.log(\"received error\", result);\n                    $scope.posts = [];\n                    if (status == 404) {\n                        $scope.fetchForumsStateText = \"No posts can be found in this forum... Be the first!\";\n                        $scope.fetchForumsDisplayClass = \"success\";\n                    } else {\n                        $scope.fetchForumsStateText = \"There was an error retrieving forum posts, please contact a moderator\";\n                        $scope.fetchForumsDisplayClass = \"danger\";\n                    }\n\n                });\n        };\n        $scope.fetchResult();\n\n        $scope.post = function() {\n            var modelData = modelDataService.getModelData();\n            modelDataService.setModelData(null); // reset the modelDataService variable.\n            $location.path(\"/form/com.networknt.light.forum.post.add/\" + $scope.getForumPost.data.id);\n        };\n\n        $scope.view = function(post) {\n            modelDataService.setModelData({\n                categoryId: $scope.getForumPost.data.id,\n                post: post\n            });\n            $location.path(\"/page/com-networknt-light-v-forum-post-view\");\n        };\n\n        $scope.edit = function (post) {\n            console.log(\"editing following post\");\n            console.log(post);\n        };\n\n        $scope.del = function (post) {\n            $scope.delPost.data = post;\n            $http.post('api/rs', $scope.delPost)\n                .success(function (result, status, headers, config) {\n                    $scope.fetchResult();\n                });\n        };\n\n        $scope.quickView = function (post) {\n            console.log(\"Quickview the following post\", post);\n        };\n\n        $scope.canCurrentUserEdit = function (post) {\n            var currentUser = authService.authentication.currentUser;\n            var currentUserRoles = currentUser.roles;\n\n            for (var i = 0; i < currentUserRoles.length; i++) {\n                if (currentUserRoles == \"owner\"\n                    || currentUserRoles == \"forumAdmin\"\n                    || currentUser.userId == post.createUserId) {\n                    return true;\n                }\n            }\n            return false;\n        };\n\n        $scope.canCurrentUserDelete = function (post) {\n            var currentUser = authService.authentication.currentUser;\n            var currentUserRoles = currentUser.roles;\n\n            for (var i = 0; i < currentUserRoles.length; i++) {\n                if (currentUserRoles[i] == \"owner\"\n                    || currentUserRoles[i] == \"forumAdmin\"\n                    || currentUser.userId == post.createUserId) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.ForumPostCtrl\">\n    <div class=\"jumbotron\" ng-if=\"getForumPost.data.id != null\">\n        <h2>{{getForumPost.data.id}}</h2>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"post()\"><span class=\"glyphicon glyphicon-plus\" style=\"padding-right:5px\"></span>Post</button>\n            </div>\n            <tabset>\n                <tab heading=\"Posts\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                            <tr><th>Post</th><th>By</th><th>On</th><th>Actions</th></tr>\n                        </thead>\n                        <tbody id=\"postsBody\">\n                        <tr ng-if=\"posts.length == 0\">\n                            <td colspan=\"4\" ng-class=\"fetchForumsDisplayClass\"><span class=\"glyphicon glyphicon-warning-sign\" style=\"padding-right:5px;\"></span>{{fetchForumsStateText}}</td>\n                        </tr>\n                        <tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"view(post)\">{{post.title}}</a></td>\n                            <td>{{post.createUserId}}</td>\n                            <td>{{post.createDate}}</td>\n                            <td>\n                                <a href ng-click=\"quickView(post)\" style=\"padding-right:5px; padding-left:5px;\"><span class=\"glyphicon glyphicon-eye-open\"></span></a>\n                                <a href ng-show=\"canCurrentUserEdit(post)\" ng-click=\"edit(post)\" style=\"padding-right:5px; padding-left:5px;\"><span class=\"glyphicon glyphicon-pencil\"></span></a>\n                                <a href ng-show=\"canCurrentUserDelete(post)\" ng-click=\"del(post)\" style=\"padding-right:5px; padding-left:5px;\"><span class=\"glyphicon glyphicon-remove\"></span></a>\n                            </td>\n                            <td ng-show=\"\">\n                                {{post.content}}\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.337"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.337",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:361",
    "@version": 1,
    "@class": "Event",
    "eventId": 10362,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-blog-home",
      "content": "<script type='text/javascript'>\n    'use strict';\n    angular.module('lightApp').controller('com.networknt.light.BlogHomeCtrl', ['$scope', '$http', '$location', '$filter', 'authService', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, authService, toaster, modelDataService) {\n\n\t$scope.blogs = [];\n\n        var getBlogTree = {\n            category : 'blog',\n            name : 'getBlogTree',\n            readOnly: true\n        };\n\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify(getBlogTree))}})\n                .success(function (result, status, headers, config) {\n                    $scope.blogs = result;\n                })\n        };\n\n        $scope.fetchResult();\n\n        $scope.gotoBlog = function(blog) {\n            modelDataService.setModelData({blog: blog});\n            $location.path(\"/page/com-networknt-light-v-blog-view\");\n        }\n    }]);\n</script>\n<div class=\"container\" data-ng-controller=\"BlogCtrl\">\n    <div class=\"row clearfix\">\n        <div class=\"col-md-12 column\">\n            <div class=\"jumbotron\">\n                <h1>\n                    Network NT Official Blogs\n                </h1>\n                <p>\n                    Learn more about the Light Framework.\n                </p>\n            </div>\n        </div>\n    </div>\n    <div class=\"row clearfix\">\n        <div class=\"col-xs-6 col-sm-6 col-md-6 column text-left\">\n            <ol class=\"breadcrumb\" style=\"background-color:white; padding-left:0px;\">\n                <li class=\"active\">Blogs</li>\n            </ol>\n        </div>\n        <div class=\"col-xs-6 col-sm-6 col-md-6 column text-right\">\n            <input ng-model=\"pattern\" placeholder=\" &#xE003; Search Blogs\" style=\"font-family: Helvetica, Glyphicons Halflings;\"/>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-md-12 column\">\n            <div class=\"ui three cards\">\n                <a class=\"green card\" ng-repeat=\"blog in pagedBlogs | limitTo:itemsPerPage | filter:pattern\" ng-click=\"goToBlog({{blog}})\" style=\"text-decoration:none;\">\n                    <div class=\"content\">\n                        <div class=\"header text-center\">\n                            {{blog.categoryId}}\n                        </div>\n                        <div class=\"description text-center\" style=\"word-wrap: break-word;\">\n                            {{blog.description}}\n                        </div>\n\n                    </div>\n                    <div class=\"extra content\">\n                        {{blog.out_HasPost.length || 0}} Posts\n                    </div>\n                    <div class=\"ui bottom attached button\">\n                        <button type=\"button\" class=\"btn btn-default\" style=\"width:100%; text-align:center;\" ng-click=\"goToBlog({{blog}})\">Read More</button>\n                    </div>\n                </a>\n            </div>\n            <hr />\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <center>\n                <pagination ng-model=\"currentPage\" total-items=\"(blogs | filter:pattern).length\" items-per-page=\"itemsPerPage\" ng-change=\"pageChanged()\"></pagination>\n            </center>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.344"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.344",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:362",
    "@version": 1,
    "@class": "Event",
    "eventId": 10363,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "ca-edibleforestgarden-v-example",
      "content": "This is just a test.\n```\ncode is here.\n```",
      "createDate": "2016-02-14T01:59:07.369"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.369",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:363",
    "@version": 1,
    "@class": "Event",
    "eventId": 10364,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-production_cluster",
      "content": "<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n\n</body>\n</html>",
      "createDate": "2016-02-14T01:59:07.401"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.401",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:364",
    "@version": 1,
    "@class": "Event",
    "eventId": 10365,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-production_single",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Production Environment Setup</h1>\n            <p>\n                I personally use CentOS 6.5 32bit Linux as my production environment and I would recommend it to you; however, other Linux distributions, Mac and Windows are perfectly OK.\n                The following steps are for CentOS 6.5 32bit Linux and the setup is single node that hosts three sites. For cluster and load balance setup, please read <a href=\"/page/production_cluster\">here</a>\n            </p>\n            <p>\n                On Linux, the production environment is very similar with development environment.\n            </p>\n            <p>\n                1. Create a working user for production other than root: (If you have a user already on the Linux box, please use it) The following assumes that you logged in as root.\n                <pre>\n            #adduser steve\n            #passwd steve\n\n            #visudo\n            This is to edit /etc/sudoers to add steve to the last line so that he can use sudo command\n            Never use vi to edit the above file!\n\n            Add steve right after\n            root ALL=(ALL)   ALL\n            with\n            steve ALL=(ALL)   ALL\n\n            vi /etc/ssh/sshd_config\n\n            change the following line\n            #PermitRootLogin  yes\n            to\n            PermitRootLogin no\n\n            change the following line\n            #UserDNS yes\n            to\n            UserDNS  no\n\n            Log out from root and log in with steve. From this moment on, please use sudo command instead of logging in as root.\n                </pre>\n            </p>\n            <p>\n                2. Install JDK8, maven, node.js and npm with sudo and then using npm to install Grunt, Gulp, Bower and other modules.\n            </p>\n            <p>\n                3. Create dev folder and check out the source code.\n                <pre>\n            log in to the user you just created.\n            $mkdir networknt\n            $cd networknt\n\n            Check out Json Token which is forked from Google and fixed some of the issues.\n            $git clone https://github.com/networknt/jsontoken.git\n            Check out light rule engine which is a Java based rule engine used in the back end\n            $git clone https://github.com/networknt/rule-engine.git\n            Check out the light framework and other projects\n            $git clone https://github.com/networknt/light.git\n\n            $cd jsontoken\n            $mvn clean install\n            $cd ..\n            $cd rule-engine\n            $mvn clean install\n            $cd rule-loader\n            $mvn clean install\n            $cd ~\n            $cd light\n            $mvn clean install -DskipTests\n\n            Now you have all the Java code built already.\n\n                </pre>\n            </p>\n            <p>\n                4. Open the source code with your IDE. I am using JetBrains Idea but other IDE like Eclipse will work. From Idea, you can just select File/Open... and then choose ~/networknt/light folder to open. It will import the pom.xml file under the light folder.\n            </p>\n            <p>\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\n            <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\n            <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a socail commerce site to demo the features of the framework</ul>\n            <ul>example folder is a template site that can be copied to start your own web site.</ul>\n            OK. Let's create three users for each site and if you are building a new site, create one extra user for it.\n\n            </p>\n            <p>\n                If you?re thinking that matching the colors and content across devices is omnichannel, we would encourage you to reconsider. If you are ready to lead in the next phase of social business and get the most out of the promise that our new identity as customers is truly omniscient, then let?s connect. This way of thinking is the future promise on which we started Omnichannel Application Framework.\n            </p>\n            <p>\n                There are a few key features in the framework that allowed this idea to be made reality:\n            <ul>\n                In exploring and discovering products in your brand domain that data should be transferable for me to collect and use universally.\n            </ul>\n            <ul>\n                In exchange for this data, the customer will give you access to other data they have collected that will far outweigh the value of the limited data in your brand universe.\n            </ul>\n            <ul>\n                All experiences offline and online should allow an individual to identify themselves and present a brand with the opportunity to access my preferences.\n            </ul>\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.418"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.418",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:365",
    "@version": 1,
    "@class": "Event",
    "eventId": 10366,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-proxy-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.ProxyAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n\n        $scope.getProxy = {\n            category : 'proxy',\n            name : 'getAllProxy',\n            readOnly: true\n        };\n\n        $scope.delProxy = {\n            category : 'proxy',\n            name : 'delProxy',\n            readOnly: false\n        };\n\n        $scope.proxies = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Rule Class',\n                value: 'ruleClass'\n            },\n            {\n                title: 'Hosts',\n                value: 'hosts'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'createDate'\n        };\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(proxy) {\n            $scope.delProxy.data = proxy;\n            $http.post('api/rs', $scope.delProxy)\n                    .success(function (data, status, headers, config) {\n                        $scope.proxies.splice($scope.proxies.indexOf(proxy), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n\n        $scope.update = function(proxy) {\n            modelDataService.setModelData(proxy);\n            $location.path(\"/form/com.networknt.light.proxy.upd_d\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.proxy.add_d\");\n        };\n\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getProxy))}})\n                    .success(function (data, status, headers, config) {\n                        $scope.proxies = data;\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.ProxyAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <tabset>\n                <tab heading=\"Proxy\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.ruleClass\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.hosts\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"proxy in proxies | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(proxy)\">Delete</a></td>\n                            <td><a href ng-click=\"update(proxy)\">{{proxy.ruleClass}}</a></td>\n                            <td>{{proxy.hosts}}</td>\n                            <td>{{proxy.createUserId}}</td>\n                            <td>{{proxy.createDate}}</td>\n                            <td>{{proxy.updateUserId}}</td>\n                            <td>{{proxy.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.444"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.444",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:366",
    "@version": 1,
    "@class": "Event",
    "eventId": 10367,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-menu-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.MenuAdminHomeCtrl', ['$scope', '$http', '$location', 'modelDataService', 'toaster', function ($scope, $http, $location, modelDataService, toaster) {\n        $scope.getAllMenu = {\n            category : 'menu',\n            name : 'getAllMenu',\n            readOnly: true\n        };\n\n        $scope.delMenu = {\n            category : 'menu',\n            name : 'delMenu',\n            readOnly: false\n        };\n\n        $scope.delMenuItem = {\n            category : 'menu',\n            name : 'delMenuItem',\n            readOnly: false\n        };\n\n        $scope.menus = [];\n        $scope.menuItems = [];\n\n        $scope.menuHeaders = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.menuItemHeaders = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'MenuItem Id',\n                value: 'menuItemId'\n            },\n            {\n                title: 'Label',\n                value: 'label'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Path',\n                value: 'path'\n            },\n            {\n                title: 'Click',\n                value: 'click'\n            },\n            {\n                title: 'Template',\n                value: 'tpl'\n            },\n            {\n                title: 'Controller',\n                value: 'ctrl'\n            },\n            {\n                title: 'Position Left',\n                value: 'left'\n            },\n            {\n                title: 'Roles',\n                value: 'roles'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'updateDate'\n        };\n        $scope.menuFilter = {};\n        $scope.menuItemFilter = {};\n\n        //call back function that we passed to our custom directive sortBy, will be called when clicking on any field to sort\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.addMenu = function () {\n            $location.path(\"/form/com.networknt.light.menu.addMenu\");\n        }\n\n        $scope.addMenuItem = function () {\n            $location.path(\"/form/com.networknt.light.menu.addMenuItem\");\n        }\n\n        $scope.deleteMenu = function(menu) {\n            $scope.delMenu.data = menu;\n            $http.post('api/rs', $scope.delMenu)\n                    .success(function (data, status, headers, config) {\n                        $scope.menus.splice($scope.menus.indexOf(menu), 1);\n                        $scope.fetchResult(); // when delete a host, all the menuItems belong to the host will be deleted.\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n        $scope.deleteMenuItem = function(menuItem) {\n            $scope.delMenuItem.data = menuItem;\n            $http.post('api/rs', $scope.delMenuItem)\n                    .success(function (data, status, headers, config) {\n                        $scope.menuItems.splice($scope.menuItems.indexOf(menuItem), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n        $scope.updateMenu = function(menu) {\n            console.log(\"menu to be passed\", menu);\n            modelDataService.setModelData(menu);\n            $location.path(\"/form/com.networknt.light.menu.updateMenu\");\n        };\n\n        $scope.updateMenuItem = function(menuItem) {\n            modelDataService.setModelData(menuItem);\n            $location.path(\"/form/com.networknt.light.menu.updateMenuItem\");\n        };\n\n        //The function that is responsible of fetching the result from the server and setting the grid to the new result\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getAllMenu))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.menus = result.menus;\n                        $scope.menuItems = result.menuItems;\n                        //console.log('menus', $scope.menus);\n                        //console.log('menuItems', $scope.menuItems);\n                    })\n        };\n        $scope.fetchResult();\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.MenuAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"addMenu()\"><i class=\"glyphicon glyphicon-edit\"></i>Add Menu</button>\n            </div>\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"addMenuItem()\"><i class=\"glyphicon glyphicon-edit\"></i>Add Menu Item</button>\n            </div>\n            <tabset>\n                <tab heading=\"Host Menu\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in menuHeaders\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuFilter.host\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuFilter.createUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuFilter.createDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuFilter.updateUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuFilter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"menu in menus | filter: menuFilter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"deleteMenu(menu)\">Delete</a></td>\n                            <td><a href ng-click=\"updateMenu(menu)\">{{menu.host}}</a></td>\n                            <td>{{menu.createUserId}}</td>\n                            <td>{{menu.createDate}}</td>\n                            <td>{{menu.updateUserId}}</td>\n                            <td>{{menu.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n                <tab heading=\"Menu Items\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in menuItemHeaders\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.menuItemId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.label\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.host\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.path\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.click\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.tpl\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.ctrl\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.left\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.roles\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.createUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.createDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.updateUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"menuItemFilter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"menuItem in menuItems | filter: menuItemFilter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"deleteMenuItem(menuItem)\">Delete</a></td>\n                            <td><a href ng-click=\"updateMenuItem(menuItem)\">{{menuItem.menuItemId}}</a></td>\n                            <td>{{menuItem.label}}</td>\n                            <td>{{menuItem.host}}</td>\n                            <td>{{menuItem.path}}</td>\n                            <td>{{menuItem.click}}</td>\n                            <td>{{menuItem.tpl}}</td>\n                            <td>{{menuItem.ctrl}}</td>\n                            <td>{{menuItem.left}}</td>\n                            <td>{{menuItem.roles}}</td>\n                            <td>{{menuItem.createUserId}}</td>\n                            <td>{{menuItem.createDate}}</td>\n                            <td>{{menuItem.updateUserId}}</td>\n                            <td>{{menuItem.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.467"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.467",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:367",
    "@version": 1,
    "@class": "Event",
    "eventId": 10368,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-blog-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.BlogAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getBlog = {\n            category : 'blog',\n            name : 'getBlog',\n            readOnly: true\n        };\n\n        $scope.delBlog = {\n            category : 'blog',\n            name : 'delBlog',\n            readOnly: false\n        };\n\n        $scope.blogs = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Blog Id',\n                value: 'categoryId'\n            },\n            {\n                title: 'Description',\n                value: 'description'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'updateDate'\n        };\n\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n\n        $scope.delete = function(blog) {\n            $scope.delBlog.data = blog;\n            $http.post('api/rs', $scope.delBlog)\n                    .success(function (data, status, headers, config) {\n                        $scope.blogs.splice($scope.blogs.indexOf(blog), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.blog.add\");\n        };\n\n        $scope.update = function(blog) {\n            modelDataService.setModelData(blog);\n            $location.path(\"/form/com.networknt.light.blog.update\");\n        };\n\n        //The function that is responsible of fetching the result from the server\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify($scope.getBlog))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.blogs = result;\n                        //console.log($scope.blogs);\n                    })\n        };\n\n        $scope.fetchResult();\n\n    }]);\n</script>\n\n<div class=\"container\" ng-controller=\"com.networknt.light.BlogAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <tabset>\n                <tab heading=\"Recent\">\n                    <h4>Blog</h4>\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.categoryId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.description\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"blog in blogs | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(blog)\">Delete</a></td>\n                            <td>{{blog.host}}</td>\n                            <td><a href ng-click=\"update(blog)\">{{blog.categoryId}}</a></td>\n                            <td>{{blog.description}}</td>\n                            <td>{{blog.createUserId}}</td>\n                            <td>{{blog.createDate}}</td>\n                            <td>{{blog.updateUserId}}</td>\n                            <td>{{blog.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.474"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.474",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:368",
    "@version": 1,
    "@class": "Event",
    "eventId": 10369,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-host-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.HostAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getAllHost = {\n            category : 'host',\n            name : 'getAllHost',\n            readOnly: true\n        };\n        $scope.delHost = {\n            category : 'host',\n            name : 'delHost',\n            readOnly: false\n        };\n        $scope.hosts = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Id',\n                value: 'id'\n            },\n            {\n                title: 'Base',\n                value: 'base'\n            },\n            {\n                title: 'TransferMinSize',\n                value: 'transferMinSize'\n            },\n            {\n                title: 'Create UserId',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update UserId',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            },\n        ];\n\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'createDate'\n        };\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(host) {\n            $scope.delHost.data = host;\n            $http.post('api/rs', $scope.delHost)\n                    .success(function (data, status, headers, config) {\n                        $scope.hosts.splice($scope.hosts.indexOf(host), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n\n        $scope.update = function(host) {\n            modelDataService.setModelData(host);\n            $location.path(\"/form/com.networknt.light.host.update\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.host.add\");\n        };\n\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getAllHost))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.hosts = result;\n                        console.log($scope.hosts);\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.HostAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <tabset>\n                <tab heading=\"Hosts\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.id\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.base\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.transferMinSize\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"host in hosts | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(host)\">Delete</a></td>\n                            <td><a href ng-click=\"update(host)\">{{host.id}}</a></td>\n                            <td>{{host.base}}</td>\n                            <td>{{host.transferMinSize}}</td>\n                            <td>{{host.createUserId}}</td>\n                            <td>{{host.createDate}}</td>\n                            <td>{{host.updateUserId}}</td>\n                            <td>{{host.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.499"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.499",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:369",
    "@version": 1,
    "@class": "Event",
    "eventId": 10370,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-challenges",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Web application development challenges</h1>\n            <p>\n            Today?s software engineering approach has some challenges and OCA Framework is designed to address these.\n\n            <h2>Productivity</h2>\n            <p>\n            Light Framework supports and encourages Agile Development. Agile software development is a software development methods in which requirements and solutions evolve through collaboration between self-organizing, cross-functional teams. It promotes adaptive planning, evolutionary development, early delivery, continuous improvement and encourages rapid and flexible response to change. A group of people take responsibility for the entire life cycle of the software development and work with other teams for integration. This makes each team more productive as decisions happen locally without management overhead. Teams have their own mission ? to produce reusable web component, view or application. Component team needs to be aligned with view team and view team needs to be aligned with application team. In this sense they are loosely coupled but tightly aligned to the same mission.\n            <p>\n            The framework itself provides so many reusable common components, views and applications that are ready to be used or customized. So most of the applications can be assembled from existing pieces from OCA store and only certain customizations are needed. Of cause, you may need to build your domain specific modules but the existing ones can give you examples to follow. The framework also encourages brands and developer to publish their modules. The more brands using your brand?s experience, the more brand value you have. The more developers are using your modules the more support and customization revenue you will have as developers.\n            <p>\n            By using the framework, large projects can be break down to more manageable pieces and integration happens continuously to allow components, views and applications grow gradually. This makes the development teams scalable and reduces the risks for large projects.\n\n            <h2>Quality Assurance</h2>\n            <p>\n            Different teams manage components, views and applications independently and reusability is the main goal in design. All pieces have unit tests and end-to-end tests in order to promote and give confidence for the end users. Also, each team have a sample application so end users can play with the module.\n            <p>\n            Front end AngularJS is known as testable Javascript framework and backend does not have any container so rules can be tested as POJO. You don?t need to start a server to test your backend code.\n            <p>\n            Agile encourages QA and DEV teams are working together in one team. The developers are writing the unit test cases and the testers are writing e2e test cases.\n            <p>\n            If your organization won?t allow it, then a DIT exist report will be produced by the development team to assist QA team for testing.\n            <p>\n            The report contains some information generated by the tools and some information written by the developers.\n            <p>\n            <ul>Version number</ul>\n            <ul>Scope of the change</ul>\n            <ul>Unit test cases (generated)</ul>\n            <ul>e2e test cases (generated)</ul>\n            <ul>Complexity and coverage (generated)</ul>\n            <ul>What need to be tested as it cannot be tested in dev environment</ul>\n            <ul>Dependencies( related to the scope of testing) what modules are depending on the changed module that need to be regression tested</ul>\n            <p>\n\n            <h2>Release Management</h2>\n            <p>\n            The OCA framework is based on event sourcing and deployment just means to generate events file from development environment and replay the events on DIT, SIT, UAT, PAT and PROD.\n            <p>\n\n            Traditionally, release a new version of product is very costly and risky so some organizations might limit the number of releases to 3 or 4 times per year. Each release will involve so many teams and last so long for testing and many changes will be packed into the same batch. An army consists of DBAs, System Administrators and Deployment Engineers will be work together during deployment time and they follow the document step by step to get the job done. This impacts the productivity and makes fixing defects, adding new features so slow and could not meet business need in this dynamically changing world.\n            <p>\n\n            In OCA framework, we want the benefits of agile development and continuous integration all the way to production. We encourage more deployments with high velocity and short cycles that lead to financial success. This conflicts with the traditional approach - fewer deployments with big thoroughly test batch deployment that lead to financial success.\n            <p>\n\n            Above two approaches have the same goal but it seems conflicting each other. How come they can lead to the same goal for financial success? To understand that, we need to understand how risk is calculated.\n            <p>\n\n            ALE (Annual Loss Expectancy) = Single Loss Expectancy * Exposure Rate * Annualized Frequency\n            <p>\n\n            In our software release world, we can understand it as\n            <p>\n\n            Loss = Single lost of error * Percentage of deployment error * Number of deployments\n            <p>\n\n            For example, if one error occurs in 100 deployments, each error will cost $5000 and there are 4 deployments per year, then the ALE would be 0.0150004 = 200\n            <p>\n\n            The traditional approach is to reduce the number of deployments to reduce the lost.\n            <p>\n\n            And our approach is to increase the number of deployments and reduce the single lost of error and percentage of deployment error. If this can be done, we can avoid financial losses due to downtime, bugs, noncompliance and loss of reputation.\n            <p>\n\n            Let?s look at the source of errors and try to lower the percentage of occurrence\n            <p>\n            <h3>Defects in code</h3>\n            This can be addressed by unit test cases and e2e test cases. If we have enough coverage, then we can change the code with confidence.\n            <p>\n\n            <h3>Errors in assembly or packaging</h3>\n            Fast tests in continuous integration and delivery Fail slow tests and violation of architecture and coding standards. Clean build everything from Git repository Deploy the same way everywhere using events Manage dependencies and versions with graph database Manage Git branch and trunk through database to map to different release and environment. Basically, make everything automatic.\n            <p>\n\n            <h3>Errors executing changes</h3>\n            Make deployment the same process everywhere by just replay serial events which include database updates, business rules updates, rule data updates, template updates, apps and experience updates etc. Basically, we don?t need a army for deployment, it is one click at the right time and place.\n\n            <p>\n            Now, let?s look at the cost of error and see if we can reduce it.\n            <p>\n\n            Zero down time deployment. Database migrations and schema-less (database change won?t break previous version of code) Versioned identifiers for assets Protocol versioning Endpoint versioning Decoupled architecture Separate data and logic and they can be deployed independently. Configurable default version for every component Let end-user to choose if they want to use the updated version Employees try out the new version before making it default version User can downgrade version if they don?t like the new one. Basically user owns experience.\n            <p>\n\n            In order to archive the above, we have the make our deployment unit the smallest possible. Within the framework, we have component, view and app and each of them can be versioned and deployed independently. Further, they can be break up to even smaller piece to be deployed independently.\n            <p>\n\n            For example: a component can have the following part that can be deployed independently and versioned independently.\n            <p>\n\n            AngularJS code (front end)\n            <p>\n            Template (front end)\n            <p>\n            Rules (back end)\n            <p>\n            Rules Data (back end)\n            <p>\n            Reference and configuration (back end)\n            <p>\n\n            For example, only template get a new version 1.0.2 deployed on the server and other pieces are still in version 1.0.1 and we have an component version 1.0.2. One site can user version 1.0.1 and another site can user 1.0.2 and this allows site to customize the template for their channel as well.\n            <p>\n\n            <p>\n            Even further, we can set the template 1.0.1 as default so all the customer will have the default template but we ask our employee to try 1.0.2 version for a while before make it as default.\n            <p>\n\n            <p>\n            Although each piece can be deployed independently, they are loaded dynamically at the view level as part of angular routing. When Angular bootstraps, providers will be saved and they will be used to lazy load and register controllers, directives, filters, services, factories and providers etc. When angular requires a page, an page id and page version will be passed to the server. (no version means default version will be used) The server will check the dependencies of the page and assembly all piece together (java script code and templates) and send to the angular as response. This is for the first time, the next time the same version is required, it just response back the page cached. The cached will only be updated once any piece of the page is changed through event.\n            <p>\n\n            During the assembly phase, the configuration data and be combined with logic and the final page is pre-processed. For example, the dynamic dropdown list will be generated at this phase for a form component.\n            <p>\n\n            Breaking up the component to this level is no mandatory and it makes sense to have simple component packaged together and give it only one version. You only need to break it up if you component is so complicated and have too many moving part that is configurable and customizable.\n            <p>\n\n            <h2>Production Configuration</h2>\n            <p>\n\n            To make the application configurable on production, we need to separate the logic and data. The framework has three levels of configurations that can be performed on production and they have different level of risk associated with them.\n            <p>\n\n            The first level is reference data configuration. Most applications have reference data like dropdowns, translations etc. These will be saved into a set of schemas or tables and can be changed through table maintenance app. The reference data is cached but will be refreshed after midnight. This is the lowest risk change on production as it will only impact the UI look and feel most of the time and can be rolled back if negative impact occurred. Of cause, certain level of validation has to be done and approve process must be in place.\n            <p>\n\n            The second level is rules data configuration\n            <p>\n\n            All requests are handled by Light Rule Engine rules and rules are designed to be two part, Data and logic. This level is address the rule data change and it is at low risk as it won?t impact rule logic and the rule logic can be written to validate the data for the rules. For example, the system admin has the right to give promotion to discount one product for 10 percent off. The 10 percent is the data. And the rule might have validation between 1 to 99 or 1 to 55. This piece of data is more important then reference data as it is impact application logic but it is isolated from the rules. It can be changed easily without breaking the application.\n            <p>\n\n            The third level is rule logic configuration\n            <p>\n\n            The rules are just POJOs and can be updated and deployed though application interface. This change is bigger and risk is still manageable as you only need to regression to all the component/view/app that depends on the rule. Rules are working independently and it fails it only impact one area of the app and it can be easily rolled back.\n            <p>\n\n            <h2>Security</h2>\n            <p>\n\n            Api security or resource security is done by JWT token. When user is trying to access to protected resources, it will check if the access token is in the http request header. If it don?t exist, it will redirect the user to login page. The access token will be short lived up to 30 minutes and a 401 response along with token_expired will be sent back to client for refresh token if the user checked remember me when logging in or login page will be shown up.\n            <p>\n\n            Access token contains roles and userId so that the resource serve can grant access based on role-based authorization or based on user-based authorization.\n            <p>\n\n            Visibility control will be put into place based on the role of the users. For example, certain menu won?t be shown up unless you login as an admin role or certain web component shows only partial of data the user role is just anonymous.\n            <p>\n\n            OCA framework server provides another layer of security for the back-end legacy system for Angular application is not talking to back-end API directly. Also, this layer will do the validation before calling to back-end API so that a lot of invalid requests will be filtered out.\n            <p>\n\n            <h2>Performance</h2>\n\n            <h2>Monitoring</h2>\n            <p>\n\n            Traceability is more important with Angular application as it is running on the end users? browser. The server doesn?t have the state of the user session and only angular application knows. In this case, event sourcing is utilized to log all the events happening on the browser side. Every user action will generate an event and it is sent to the server along with JWT token that is identifier for the user. The server is logging events into event store.\n            <p>\n\n            Un-caught runtime exception in Angular will logged as an event and it will be easily reproduced given a serial events leading to it for the same user in event store.\n            <p>\n\n            Server error response will be logged on server side as it is known who sent the request. For example, 404 error response is sent to the client and support team need to reproduce it.\n            <p>\n\n            Server side exception is logged with stack trace and it can be reproduced along with events leading to it.\n            <p>\n\n            Security violation will be logged when system identify that the request is not sent from our AngularJS app but some raw request with missing data or wrong parameters.\n            <p>\n\n            System statistic can be viewed from admin page with information like how many users are online, how many requests are served within a period of time etc.\n            <p>\n\n            Health check is an application that will check certain area of the application based on the configuration data in order to make sure the over all system is healthy. For example, it will check the connectivity with legacy system etc. It is normally called once new release is deployed and when system is behaved strangely.\n            <p>\n\n            User behaviour analysis is an app that analyzes user online behaviour and it can be very valuable to drive sales. If customer goes to a bank branch to save a check and the sale person knows the customer was browsing life insurance product yesterday with his mobile phone.\n            <p>\n\n            Module update notification will monitor if there are any security updates from the framework and notify system admin to take action.\n            <p>\n\n            <h2>Legacy Coexistence</h2>\n            <p>\n\n            The framework can work with legacy web application together and this might be the requirement for some organization that invested big effort on a large system and they cannot convert everything into OCA framework in one step. They can switch part of the site to OCA and leave the rest still running on the legacy server. When user logs in, one request will be sent to the legacy server to create the session and another request will be sent to the framework Authentication/Authorization server to get access token. OCA modules will use the JWT access token to take to OCA server and the existing pages will still talk to legacy server using session.\n            <p>\n\n            Above assumes that OCA application and legacy application have only routing relationship. If OCA component will be embedded into legacy page, then thinks will be more complicated. We need to manage the communication with the legacy components, manage css conflicts etc. It is doable but not encouraged as there might be more work then just convert apps page by page.\n            <p>\n\n            <h2>OCA Server</h2>\n            <p>\n\n            The most important role of the OCA sever is to add another layer of security before our legacy system API. Otherwise, our legacy systems will be exposed to outside world and subject to attacks. The OCA Server will validate all the requests from browser and make sure only valid request goes to resource server and it is designed to identify attacks or misuse.\n            <p>\n\n            The OCA server supports integration with legacy system. Instead changing the legacy systems to provide REST API, we leave legacy system along and our OCA server will be acted as a proxy to the existing legacy API. There are two benefits:\n            <ul>Avoid updating legacy system that is costly or adding another layer just for REST API purpose. Our OCA server will call the existing API directly regardless the service types, Remote Session Bean, EMB, Web Services, .Net etc.</ul>\n            <ul>When OCA apps and experiences communicate with their own API, the interface will be relatively stable and any legacy API change will be done on the rules running on the server.</ul>\n            <p>\n            The OCA server provides references, configurations for our OCA apps and experiences. This allows us to develop data driven components with customization in mind. For example, we can have a form component that renders different forms given different form schemas and form configurations. Another example would be account summary, number of columns and column headers can all be customized.\n            <p>\n            The OCA server also serves as a distributed cache layer for legacy system and data is cached in the final consumption json format. It is Domain Driven Design with command/event sourcing along with CQRS and can be clustered with Distributed cache like coherence or Hazelcast. Possible to have all the cached data in memory to serve query part of the app and support decision making for UI commands depending on the nature of the application and infrastructure.\n            <p>\n            The server is responsible for logging, monitoring, auditing and user behaviour analysis. As apps and experiences are running on browser, you don?t know if end users get exceptions or not. Given we are using event sourcing, all the user actions on the browser will be in our event store. Uncaught Exceptions on UI will be logged as an event, Error response on the server will be logged as an event, service side exception will be logged as an event and all the events are associated with the user as JWT token is passing alone. From the event store, it is very easy to reproduce front end exception and back end exception as all the sequence and data are available and simply replay will reproduce. Monitoring meaning we will have a filter rule for events so that certain events will trigger notifications to administrators such as UI exception and server exception. For enterprise system, auditing is very important so that all the updates to the system are traceable. Our event store will serve the audit well and beyond. The information in event store are valuable for understanding customer behaviours, detect attacks etc.\n            <p>\n            The OCA server stack would be Undertow, OrientDB, Hazelcast and Light Rule Engine.\n\n            <h2>Future proof</h2>\n            <p>\n\n            AngularJS 1.X vs AngularJS 2.X and ES5 vs ES6 The change between AngularJS 2.x and 1.x are huge and there is no clear path for migration at the moment. In order to protect our investment, we should write our code in 2.x style if possible so the migration won?t be so painful. Also, Javascript language is in a transition between ES5 and ES6 and today we can leverage some of the ES6 features and using transpiler like Traceur and 6to5. Both of them have grunt and gulp tasks ready to be used.\n            <p>\n\n            Background and Attribution Some of the challenges faced by the OMNI-Channel Architecture group are not unique to us. Other organizations have used a similar software\n            engineering approach as OCA to deal with these issues. Recently, Spotify consultant Henrik Kniberg assembled two videos (here and here) describing the music site's\n            engineering culture which is uncannily similar to that of our own. Michael T. Nygard's video presentation \"Dispand the Deployment Army\" and lecture deck make a\n            quantifiable call-to-arms to simplify and cut the costs of software deployments. A few years back, Google employee Steve Yegge wrote a scathing missive within Google\n            that leaked out, lambasting his employer for not embracing the company-as-a-platform model so well monetized by his former employer Amazon. It gives a cursory overview\n            of Amazon's foret into that market and references others entrenched in being platform-first companies. What follows is a breakdown and explanation of the OMNI-Channel\n            Architecture influenced by the tone and principles defined in Kniberg's videos, Nygard's presentation and Yegge's rant.\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.510"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.510",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:370",
    "@version": 1,
    "@class": "Event",
    "eventId": 10371,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-user-public-profile",
      "content": "<div>This is public user profile that you can see the general user info and up vote and down vote user if you like</div>",
      "createDate": "2016-02-14T01:59:07.522"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.522",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:371",
    "@version": 1,
    "@class": "Event",
    "eventId": 10372,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-rule-home",
      "content": "<!--\n  ~ Copyright 2015 Network New Technologies Inc.\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~     http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <tabset>\n                <tab heading=\"Rule Admin\">\n                    <p>\n                        <a href=\"/form/com.networknt.light.rule.update\">Rule Source Code Update</a>\n                    </p>\n                    <p>\n                        <a href=\"/page/com-networknt-light-v-rule-transform-request\">Transform Request Rules</a>\n                    </p>\n                    <p>\n                        <a href=\"/page/com-networknt-light-v-rule-transform-response\">Transform Response Rules</a>\n                    </p>\n                    <p>\n                        <a href=\"/form/com.networknt.light.rule.publisher.update\">Update Rule Publisher</a>\n                    </p>\n                    <p>\n                        <a href=\"/form/com.networknt.light.rule.subscriber.update\">Update Rule Subscriber</a>\n                    </p>\n                    <p>\n                        <a href=\"/form/com.networknt.light.rule.cors.update\">Update CORS Flag</a>\n                    </p>\n                    <p>\n                        <a href=\"/form/com.networknt.light.rule.etag.update\">Update Deep ETag Flag</a>\n                    </p>\n                    <p>\n                        <a href=\"/form/com.networknt.light.rule.schema.update\">Update Validation Schema</a>\n                    </p>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.537"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.537",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:372",
    "@version": 1,
    "@class": "Event",
    "eventId": 10373,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-first-rest-api",
      "content": "<!DOCTYPE html>\n<!--\n  ~ Copyright 2015 Network New Technologies Inc.\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~     http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n\n</body>\n</html>",
      "createDate": "2016-02-14T01:59:07.564"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.564",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:373",
    "@version": 1,
    "@class": "Event",
    "eventId": 10374,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-role-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.RoleAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getRole = {\n            category : 'role',\n            name : 'getRole',\n            readOnly: true\n        };\n        $scope.delRole = {\n            category : 'role',\n            name : 'delRole',\n            readOnly: false\n        };\n        $scope.roles = [];\n        $scope.hosts = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'RoleId',\n                value: 'roleId'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: \"Description\",\n                value: \"description\"\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'createDate'\n        };\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(role) {\n            $scope.delRole.data = role;\n            $http.post('api/rs', $scope.delRole)\n                    .success(function (data, status, headers, config) {\n                        $scope.roles.splice($scope.roles.indexOf(role), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n\n        $scope.update = function(role) {\n            modelDataService.setModelData(role);\n            $location.path(\"/form/com.networknt.light.role.update\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.role.add\");\n        };\n\n        $scope.fetchResult = function () {\n            $http.post('api/rs', $scope.getRole)\n                    .success(function (result, status, headers, config) {\n                        $scope.roles = result.roles;\n                        $scope.hosts = result.hosts;\n                        //console.log($scope.roles);\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.RoleAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <tabset>\n                <tab heading=\"Roles\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.roleId\" type=\"text\" /></td>\n                            <td>\n                                <select ng-model=\"filter.host\" ng-options=\"host for host in hosts\" >\n                                    <option value=\"\"> </option>\n                                </select>\n                            </td>\n                            <td><input ng-model=\"filter.description\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"role in roles | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(role)\">Delete</a></td>\n                            <td><a href ng-click=\"update(role)\">{{role.roleId}}</a></td>\n                            <td>{{role.host}}</td>\n                            <td>{{role.description}}</td>\n                            <td>{{role.createUserId}}</td>\n                            <td>{{role.createDate}}</td>\n                            <td>{{role.updateUserId}}</td>\n                            <td>{{role.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.579"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.579",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:374",
    "@version": 1,
    "@class": "Event",
    "eventId": 10375,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-forum-post",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.ForumPostCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\n        $scope.getForumPost = {\n            category: 'forum',\n            name: 'getForumPost',\n            readOnly: true,\n            data: {}\n        }\n\n        $scope.posts = [];\n        $scope.forums = [];\n\n        $scope.fetchResult = function () {\n            $scope.getForumPost.data.categoryId = modelDataService.getModelData();\n            modelDataService.setModelData(null); // reset the modelDataService variable.\n            $http.post('api/rs', $scope.getForumPost)\n                    .success(function (result, status, headers, config) {\n                        $scope.posts = result;\n                        console.log($scope.posts);\n                    })\n        };\n        $scope.fetchResult();\n\n        $scope.post = function () {\n            $location.path(\"/form/com.networknt.light.forum.post.add/\" + $scope.getForumPost.data.categoryId);\n        };\n\n        $scope.view = function (post) {\n            modelDataService.setModelData(post);\n            $location.path(\"/page/com-networknt-light-v-forum-post-view\");\n        };\n\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.ForumPostCtrl\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"post()\"><i class=\"glyphicon glyphicon-edit\"></i>Post</button>\n            </div>\n            <tabset>\n                <tab heading=\"Recent\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"view(post)\">{{post.title}}</a></td>\n                        </tr>\n                        <tr>\n                            <td>{{post.createUser}} {{post.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n                <tab heading=\"Bookmark\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr ng-repeat=\"post in posts | filter: filter | orderBy: sort.sortedBy\">\n                            <td>\n                                <div><a href ng-click=\"view(post)\">{{post.title}}</a></div>\n                                <div>{{post.createUser}} {{post.createDate}}</div>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.598"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.598",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:375",
    "@version": 1,
    "@class": "Event",
    "eventId": 10376,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-page-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.PageAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getAllPage = {\n            category : 'page',\n            name : 'getAllPage',\n            readOnly: true\n        };\n        $scope.delPage = {\n            category : 'page',\n            name : 'delPage',\n            readOnly: false,\n            data: {}\n        };\n        $scope.pages = [];\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Page Id',\n                value: 'pageId'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'updateDate'\n        };\n        $scope.filter = {};\n\n        //call back function that we passed to our custom directive sortBy, will be called when clicking on any field to sort\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(page) {\n            $scope.delPage.data = page;\n            $http.post('api/rs', $scope.delPage)\n                    .success(function (data, status, headers, config) {\n                        $scope.pages.splice($scope.pages.indexOf(page), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n\n        $scope.update = function(page) {\n            modelDataService.setModelData(page);\n            $location.path(\"/form/com.networknt.light.page.update\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.page.add\");\n        };\n\n        $scope.import = function() {\n            $location.path(\"/form/com.networknt.light.page.import\");\n        };\n\n        //The function that is responsible of fetching the result from the server and setting the grid to the new result\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getAllPage))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.pages = result;\n                        //console.log($scope.pages);\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.PageAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"import()\"><i class=\"glyphicon glyphicon-edit\"></i>Import</button>\n            </div>\n            <tabset>\n                <tab heading=\"Recent\">\n                    <h1>Pages</h1>\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.pageId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"page in pages | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(page)\">Delete</a></td>\n                            <td><a href ng-click=\"update(page)\">{{page.pageId}}</a></td>\n                            <td>{{page.host}}</td>\n                            <td>{{page.createUserId}}</td>\n                            <td>{{page.createDate}}</td>\n                            <td>{{page.updateUserId}}</td>\n                            <td>{{page.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n                <tab heading=\"Updated\">\n                    <div>This is tab updated</div>\n                </tab>\n                <tab heading=\"MyPage\" ng-if=\"global.isLogin\">\n                    <div>This is tab MyPage</div>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.607"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.607",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:376",
    "@version": 1,
    "@class": "Event",
    "eventId": 10377,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-first-application",
      "content": "<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n\n</body>\n</html>",
      "createDate": "2016-02-14T01:59:07.630"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.630",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:377",
    "@version": 1,
    "@class": "Event",
    "eventId": 10378,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-dev-mac",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Development Environment Mac OS X</h1>\n            <p>\n                I have set up my development environment on a Mac Book Pro and here is the steps. I am using Google Chrome as my default browser for testing and debugging.\n            </p>\n            <p>\n                The set up is very similar with Linux and Windows 7\n            </p>\n            <p>\n                1. Create a user for development: (If you have a user already please use it. this user needs to have sudo access though. )\n            </p>\n            <p>\n                2. Install JDK8, maven, node.js and npm with sudo and then using npm to install Grunt, Gulp, Bower and other modules.\n            </p>\n            <p>\n                3. Create dev folder and check out the source code.\n                <pre>\n            log in to the user you just created. Open a terminal and you should be in your home directory c:\\Users\\steve\n            $mkdir networknt\n            $cd networknt\n\n            Check out Json Token which is forked from Google and fixed some of the issues.\n            $git clone https://github.com/networknt/jsontoken.git\n            Check out light rule engine which is a Java based rule engine used in the back end\n            $git clone https://github.com/networknt/rule-engine.git\n            Check out the light framework and other projects\n            $git clone https://github.com/networknt/light.git\n\n            $cd jsontoken\n            $mvn clean install\n            $cd ..\n            $cd rule-engine\n            $mvn clean install\n            $cd rule-loader\n            $mvn clean install\n            $cd ~\n            $cd light\n            $mvn clean install -DskipTests\n\n            Now you have all the Java code built already.\n\n                </pre>\n            </p>\n            <p>\n                4. Open the source code with your IDE. I am using JetBrains Idea but other IDE like Eclipse will work. From Idea, you can just select File/Open... and then choose ~/networknt/light folder to open. It will import the pom.xml file under the light folder. You might need to select JDK for java projects if Idea couldn't find the JDK.\n            </p>\n            <p>\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\n            <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\n            <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a socail commerce site to demo the features of the framework</ul>\n            <ul>example folder is a template site that can be copied to start your own web site.</ul>\n            Let's create three users for each site and if you are building a new site, create one extra user for it.\n                <pre>\n            create user networknt and home directory c:\\Users\\networknt\n            create user edibleforestgarden and home directory c:\\Users\\edibleforestgarden\n            create user example and home directory c:\\Users\\example\n                </pre>\n            Within each user's home directory, create web subdirectory and grant access to the development user. steve in my case. If you run grunt build from these projects in light folder, you website will be compiled and copied to these web folders and the server will serve the content from these folders for each site. This is like running in production mode.\n            Copy server.json and virtualhost.json under server resource folder to user home directory and update them accordingly.\n            Add the following line into /etc/hosts in order to test locally using domain names.\n                <pre>\n            127.0.0.1\twww.edibleforestgarden.ca www.networknt.com example\n                </pre>\n            </p>\n\n            <p>\n                6. Start server from IDE in debug mode. From your IDE, right click server/src/main/java/com/networknt/light/server/LightServer and select Debug. The first time the server is started it will create the database and replay the event in resources/initdb.json. It will take several minutes until the debug info is stopped. At this time, you can start Grunt webserver to monitor all your changes in the local directory.\n                <pre>\n        cd ~/networknt/light/networknt\n        npm install\n        bower install\n        grunt serve\n                </pre>\n            assuming that Chrome is your default browser, it will be started now and point to localhost:9000 with www.networknt.com site content. You can login with stevehu/123456 to check the admin features. I am in a process to move everything from Grunt to Gulp but it is not been done yet.\n\n            </p>\n            <p>\n                For individual component/view/application development, you can go the the folder and run the following commands to start another webserver using gulp\n        <pre>\n        cd ~/networknt/light/view/com-networknt-light-v-example\n        npm install\n        bower install\n        gulp webserver\n        </pre>\n            Now another server is up listening localhost:8001 using gulp webserver. You can switch to other folders to do the same.\n\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.646"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.646",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:378",
    "@version": 1,
    "@class": "Event",
    "eventId": 10379,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-access-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.AccessAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n\n        $scope.getAccess = {\n            category : 'access',\n            name : 'getAllAccess',\n            readOnly: true\n        };\n\n        $scope.delAccess = {\n            category : 'access',\n            name : 'delAccess',\n            readOnly: false\n        };\n\n        $scope.accesses = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Rule Class',\n                value: 'ruleClass'\n            },\n            {\n                title: 'Access Level',\n                value: 'accessLevel'\n            },\n            {\n                title: 'Clients',\n                value: 'clients'\n            },\n            {\n                title: 'Roles',\n                value: 'roles'\n            },\n            {\n                title: 'Users',\n                value: 'users'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'createDate'\n        };\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(access) {\n            $scope.delAccess.data = access;\n            $http.post('api/rs', $scope.delAccess)\n                    .success(function (data, status, headers, config) {\n                        $scope.accesses.splice($scope.accesses.indexOf(access), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n\n        $scope.update = function(access) {\n            modelDataService.setModelData(access);\n            $location.path(\"/form/com.networknt.light.access.upd_d\");\n        };\n\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify($scope.getAccess))}})\n                    .success(function (data, status, headers, config) {\n                        $scope.accesses = data;\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.AccessAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <tabset>\n                <tab heading=\"Access\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.ruleClass\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.accessLevel\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.clients\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.roles\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.users\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"access in accesses | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(access)\">Delete</a></td>\n                            <td><a href ng-click=\"update(access)\">{{access.ruleClass}}</a></td>\n                            <td>{{access.accessLevel}}</td>\n                            <td>{{access.clients}}</td>\n                            <td>{{access.roles}}</td>\n                            <td>{{access.users}}</td>\n                            <td>{{access.createUserId}}</td>\n                            <td>{{access.createDate}}</td>\n                            <td>{{access.updateUserId}}</td>\n                            <td>{{access.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.655"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.655",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:379",
    "@version": 1,
    "@class": "Event",
    "eventId": 10380,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-dev-linux",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Development Environment Linux</h1>\n            <p>\n                I personally use Linux as my dev environment and I would recommend you to do so; however, Mac and Windows are perfectly OK.\n                The following steps are for Ubuntu Linux and some of the commands might be different on other Linux distributions, Mac and Windows.\n                My production is CentOS 6.5 and the installation guide for single node is <a href=\"/page/com-networknt-light-v-production-single\">here</a>.\n                For cluster with load balancer, the installation guide is <a href=\"/page/com-networknt-light-v-production-cluster\">here</a>.\n\n                I also recommend Google Chrome as your browser for Front End AngularJS testing and debugging.\n            </p>\n            <p>\n                On Linux, the dev environment will mimic production environment so it is easier to deploy your site to Linux based production. Also, you can learn a lot about security once your site is public.\n            </p>\n            <p>\n                1. Create a user for development: (If you have a user already on the Linux box other than root, please use it) The following assumes that you logged in as root.\n                <pre>\n            #adduser steve\n\n            #visudo\n            This is to edit /etc/sudoers to add steve to the last line so that he can use sudo command\n            Never use vi to edit the above file!\n\n            Add steve right after\n            root ALL=(ALL)   ALL\n            with\n            steve ALL=(ALL)   ALL\n\n            vi /etc/ssh/sshd_config\n\n            change the following line\n            #PermitRootLogin  yes\n            to\n            PermitRootLogin no\n\n            change the following line\n            #UserDNS yes\n            to\n            UserDNS  no\n\n            Log out from root and log in with steve. From this moment on, please use sudo command instead of logging in as root.\n                </pre>\n            </p>\n            <p>\n                2. Install JDK8, maven, node.js and npm with sudo and then using npm to install Grunt, Gulp, Bower and other modules.\n\n            </p>\n            <p>\n                3. Create dev folder and check out the source code.\n                <pre>\n            log in to the user you just created and you should be in the home directory.\n            $mkdir networknt\n            $cd networknt\n\n            Check out Json Token which is forked from Google and fixed some of the issues.\n            $git clone https://github.com/networknt/jsontoken.git\n\n            Check out maven-plugin that contains rule loader to load API rules through REST API to dev server.\n            $git clone https://github.com/networknt/maven-plugin.git\n\n            Check out the light framework and other projects\n            $git clone https://github.com/networknt/light.git\n\n            $cd jsontoken\n            $mvn clean install\n            $cd ..\n            $cd maven-plugin\n            $mvn clean install\n            $cd ..\n            $cd light\n            $mvn clean install -DskipTests\n\n            Now you have all the Java code built already.\n\n                </pre>\n            </p>\n            <p>\n                4. Open the source code with your IDE. I am using JetBrains Idea but other IDE like Eclipse will work.\n                From Idea, you can just select File/Open... and then choose ~/networknt/light folder to open. It will import the pom.xml file under the light folder.\n                You might need to select JDK for java projects if Idea couldn't find the JDK.\n            </p>\n            <p>\n                5. Start server from IDE in debug mode. From your IDE, right click server/src/main/java/com/networknt/light/server/LightServer and select Debug.\n                The first time the server is started it will create the database and replay the event in resources/initdb.json.\n                It will take 10 seconds to several minutes until the debug info is stopped. At this time, you can start your angular applications/sites with grunt serve or gulp webserver and to monitor all your changes in the local directory.\n            </p>\n            <p>\n                6. Start www.networknt.com site locally in liveload mode.\n                <pre>\n        cd ~/networknt/light/networknt\n        npm install\n        bower install\n        grunt serve\n                </pre>\n\n            assuming that Chrome is your default browser, it will be started now and point to localhost:9000 with www.networknt.com site content. I am in a process to move build process from Grunt to Gulp but it is not been done yet.\n            Now you can play with the site and observe the interaction between angular application and API server. In grunt script, static content will be served by grunt and all REST API calls will be routed to\n            the server started from your IDE. If you update static content within ~/networknt/light/networknt folder, you update will be automatically reloaded on the browser.\n            </p>\n            <p>\n                7. To checkout www.edibleforestgarden.ca site, run the following commands. Make sure you have stopped networknt site as it is listening to the same port 9001.\n                You will notice that the same API server provides the services to this site as well.\n                <pre>\n        cd ~/networknt/light/edibleforestgarden\n        npm install\n        bower install\n        grunt serve\n\n                </pre>\n            </p>\n            <p>\n                8. To start example site, run the following commands. We are using gulp to build this site which is a starting point for your front end angular application.\n                To build a new site, you can just create another folder and copy the content from example and customize it.\n                <pre>\n        cd ~/networknt/light/example\n        npm install\n        bower install\n        gulp webserver\n\n                </pre>\n            </p>\n            <p>\n                9. To create a page or a view for a site, go to view folder under light. And start an angular application to create views with live load support.\n                To start the angular app, follow the commands below.\n        <pre>\n        cd ~/networknt/light/view\n        npm install\n        bower install\n        gulp webserver\n        </pre>\n               Now another server is up listening localhost:8001 using gulp webserver. You can update existing pages or create new pages and import them one by one to the server.\n               You don't need to import you page to the server under this folder as angular will load the page from local file and go to the REST API to load page if it doesn't exist.\n            </p>\n            <p>\n                10. To create a web component with angular directive, go to component folder. We have several components in this folder and you can learn from them.\n                To start component com-networknt-light-c-example, follow the commands below.\n        <pre>\n        cd ~/networknt/light/component/com-networknt-light-c-example\n        npm install\n        bower install\n        gulp webserver\n\n        </pre>\n            </p>\n            <p>\n                11. To create your first REST API\n\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.670"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.670",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:380",
    "@version": 1,
    "@class": "Event",
    "eventId": 10381,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-rule-transform-response",
      "content": "<!--\n  ~ Copyright 2015 Network New Technologies Inc.\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~     http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.TransformResponseAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getTransformResponse = {\n            category : 'transform',\n            name : 'getTransformResponse',\n            readOnly: true,\n            data: {}\n        };\n\n        $scope.delTransformResponse = {\n            category : 'transform',\n            name : 'delTransformResponse',\n            readOnly: false\n        };\n\n        $scope.transforms = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: \"Sequence\",\n                value: \"sequence\"\n            },\n            {\n                title: \"Transform Rule\",\n                value: \"transformRule\"\n            },\n            {\n                title: \"Transform Data\",\n                value: \"transformData\"\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'createDate'\n        };\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(transform) {\n            $scope.delTransformResponse.data = transform;\n            $http.post('api/rs', $scope.delTransformResponse)\n                    .success(function (data, status, headers, config) {\n                        $scope.transforms.splice($scope.transforms.indexOf(transform), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n\n        $scope.update = function(transform) {\n            transform.ruleClass = $scope.getTransformResponse.data.ruleClass;\n            // convert transformData from map to string in order to display in the text area.\n            transform.transformData = JSON.stringify(transform.transformData, undefined, 2);\n            modelDataService.setModelData(transform);\n            $location.path(\"/form/com.networknt.light.transform.response.update_d\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.transform.response.add_d\");\n        };\n\n        $scope.fetchResult = function () {\n            $scope.getTransformResponse.data.ruleClass = modelDataService.getModelData().ruleClass;\n            console.log(\"ruleClass\", $scope.getTransformResponse.data.ruleClass);\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getTransformResponse))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.transforms = result;\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.TransformResponseAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <tabset>\n                <tab heading={{getTransformResponse.data.ruleClass}}>\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.sequence\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.transformRule\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.transformData\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"transform in transforms | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(transform)\">Delete</a></td>\n                            <td><a href ng-click=\"update(transform)\">{{transform.sequence}}</a></td>\n                            <td>{{transform.transformRule}}</td>\n                            <td>{{transform.transformData}}</td>\n                            <td>{{transform.createUserId}}</td>\n                            <td>{{transform.createDate}}</td>\n                            <td>{{transform.updateUserId}}</td>\n                            <td>{{transform.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.686"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.686",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:381",
    "@version": 1,
    "@class": "Event",
    "eventId": 10382,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-product-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.ProductAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        console.log('productAdminHome is called in the beginning.')\n        $scope.getProduct = {\n            category : 'catalog',\n            name : 'getProduct',\n            readOnly: true\n        };\n\n        $scope.delProduct = {\n            category : 'catalog',\n            name : 'delProduct',\n            readOnly: false\n        };\n\n        $scope.products = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Product Id',\n                value: 'entityId'\n            },\n            {\n                title: 'Description',\n                value: 'description'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'updateDate'\n        };\n\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n\n        $scope.delete = function(product) {\n            $scope.delProduct.data = product;\n            $http.post('api/rs', $scope.delProduct)\n                    .success(function (data, status, headers, config) {\n                        $scope.products.splice($scope.products.indexOf(product), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.product.add\");\n        };\n\n        $scope.update = function(product) {\n            console.log('product-admin-home update product =', product);\n            modelDataService.setModelData(product);\n            $location.path(\"/form/com.networknt.light.product.update\");\n        };\n\n        //The function that is responsible of fetching the result from the server\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify($scope.getProduct))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.products = result;\n                        console.log($scope.products);\n                    })\n        };\n\n        $scope.fetchResult();\n\n    }]);\n</script>\n\n<div class=\"container\" ng-controller=\"com.networknt.light.ProductAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <tabset>\n                <tab heading=\"Recent\">\n                    <h4>Product</h4>\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.entityId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.description\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"product in products | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(product)\">Delete</a></td>\n                            <td>{{product.host}}</td>\n                            <td><a href ng-click=\"update(product)\">{{product.entityId}}</a></td>\n                            <td>{{product.description}}</td>\n                            <td>{{product.createUserId}}</td>\n                            <td>{{product.createDate}}</td>\n                            <td>{{product.updateUserId}}</td>\n                            <td>{{product.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.706"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.706",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:382",
    "@version": 1,
    "@class": "Event",
    "eventId": 10383,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-forum-admin-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.ForumAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getForum = {\n            category : 'forum',\n            name : 'getForum',\n            readOnly: true\n        };\n        $scope.delForum = {\n            category : 'forum',\n            name : 'delForum',\n            readOnly: false\n        };\n\n        $scope.forums = [];\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Forum Id',\n                value: 'categoryId'\n            },\n            {\n                title: 'Description',\n                value: 'description'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'updateDate'\n        };\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(forum) {\n            $scope.delForum.data = forum;\n            $http.post('api/rs', $scope.delForum)\n                    .success(function (data, status, headers, config) {\n                        $scope.forums.splice($scope.forums.indexOf(forum), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n        $scope.update = function(forum) {\n            modelDataService.setModelData(forum);\n            $location.path(\"/form/com.networknt.light.forum.update\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.forum.add\");\n        };\n\n        $scope.fetchResult = function () {\n            $http.get('api/rs', {params: { cmd: encodeURIComponent(JSON.stringify($scope.getForum))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.forums = result;\n                        console.log($scope.forums);\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.ForumAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <tabset>\n                <tab heading=\"Recent\">\n                    <h4>Forums</h4>\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.categoryId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.description\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"forum in forums | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(forum)\">Delete</a></td>\n                            <td>{{forum.host}}</td>\n                            <td><a href ng-click=\"update(forum)\">{{forum.categoryId}}</a></td>\n                            <td>{{forum.description}}</td>\n                            <td>{{forum.createUserId}}</td>\n                            <td>{{forum.createDate}}</td>\n                            <td>{{forum.updateUserId}}</td>\n                            <td>{{forum.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                    <pagination total-items=\"page.totalItems\" items-per-page=\"getForum.data.pageSize\" ng-model=\"getForum.data.pageNo\" max-size=\"page.maxSize\" class=\"pagination-sm\" boundary-links=\"true\" rotate=\"false\" num-pages=\"page.numPages\" ng-change=\"pageChanged()\"></pagination>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.724"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.724",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:383",
    "@version": 1,
    "@class": "Event",
    "eventId": 10384,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-news-home",
      "content": "<script type='text/javascript'>\n    (function(angular) {\n        'use strict';\n        angular.module('lightApp').controller('com.networknt.light.NewsHomeCtrl', ['$scope', '$http', '$location', '$filter', 'authService', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, authService, toaster, modelDataService) {\n\n            $scope.getNews = {\n                category : 'news',\n                name : 'getNewsTree',\n                readOnly: true\n            };\n\n            //The function that is responsible of fetching the result from the server\n            $scope.fetchResult = function () {\n                $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getNews))}})\n                        .success(function (result, status, headers, config) {\n                            $scope.news = result;\n                        })\n            };\n\n            $scope.fetchResult();\n\n            $scope.toggle = function(scope) {\n                scope.toggle();\n            };\n\n            var getRootNodesScope = function() {\n                return angular.element(document.getElementById(\"tree-root\")).scope();\n            };\n\n            $scope.collapseAll = function() {\n                var scope = getRootNodesScope();\n                scope.collapseAll();\n            };\n\n            $scope.expandAll = function() {\n                var scope = getRootNodesScope();\n                scope.expandAll();\n            };\n\n            $scope.treeFilter = $filter('uiTreeFilter');\n\n            $scope.supportedFields = ['id', 'desc'];\n\n            $scope.gotoNews = function(id) {\n                modelDataService.setModelData(id);\n                $location.path(\"/page/com-networknt-light-v-news-post\");\n            }\n        }]);\n    })(window.angular);\n</script>\n<div class=\"container\" data-ng-controller=\"com.networknt.light.NewsHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-8 col-md-6 col-sm-offset-2 col-md-offset-3\">\n            <h4 class=\"page-header\">News</h4>\n            <div>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\">Collapse all</a>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"expandAll()\">Expand all</a>\n                <input ng-model=\"pattern\" placeholder=\"Type a part of any news\"/>\n            </div>\n            <!-- Nested node template -->\n            <script type=\"text/ng-template\" id=\"nodes_renderer.html\">\n                <div ui-tree-handle class=\"tree-node tree-node-content\">\n                    <a class=\"btn btn-success btn-xs\" ng-if=\"node.children && node.children.length > 0\" data-nodrag ng-click=\"toggle(this)\"><span class=\"glyphicon\" ng-class=\"{'glyphicon glyphicon-plus': collapsed, 'glyphicon glyphicon-minus': !collapsed}\"></span></a>\n                    <!--{{node.id | highlight:pattern | trust}}-->\n                    <a href ng-click=\"gotoNews(node.id)\" ng-bind-html=\"node.id | highlight:pattern | trust\"></a>\n                    <small ng-bind-html=\"node.desc | highlight:pattern | trust\"></small>\n                </div>\n                <ol ui-tree-nodes=\"\" ng-model=\"node.children\" ng-class=\"{hidden: collapsed}\">\n                    <li ng-repeat=\"node in node.children\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </script>\n            <div ui-tree data-drag-enabled=false id=\"tree-root\">\n                <ol ui-tree-nodes ng-model=\"news\">\n                    <li ng-repeat=\"node in news\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </div>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.736"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.736",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:384",
    "@version": 1,
    "@class": "Event",
    "eventId": 10385,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-news-post",
      "content": "<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n\n</body>\n</html>",
      "createDate": "2016-02-14T01:59:07.748"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.748",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:385",
    "@version": 1,
    "@class": "Event",
    "eventId": 10386,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-dev-windows7",
      "content": "<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n            <h1>Development Environment Windows 7</h1>\r\n            <p>\r\n                I have set up my development environment on a Windows 7 desktop and here is the steps. I am using Google Chrome as my default browser for testing and debugging.\r\n            </p>\r\n            <p>\r\n                The set up is very similar with Linux and Mac\r\n            </p>\r\n            <p>\r\n                1. Create a user for development: (If you have a user already please use it. this user needs to have admin access though. )\r\n            </p>\r\n            <p>\r\n                2. Install JDK8, maven, node.js and npm with sudo and then using npm to install Grunt, Gulp, Bower and other modules.\r\n            </p>\r\n            <p>\r\n                3. Create dev folder and check out the source code.\r\n                <pre>\r\n            log in to the user you just created. Open a terminal window Command Prompt and you should be in your home directory c:\\Users\\steve\r\n            $mkdir networknt\r\n            $cd networknt\r\n\r\n            Check out Json Token which is forked from Google and fixed some of the issues.\r\n            $git clone https://github.com/networknt/jsontoken.git\r\n            Check out light rule engine which is a Java based rule engine used in the back end\r\n            $git clone https://github.com/networknt/rule-engine.git\r\n            Check out the light framework and other projects\r\n            $git clone https://github.com/networknt/light.git\r\n\r\n            $cd jsontoken\r\n            $mvn clean install\r\n            $cd ..\r\n            $cd rule-engine\r\n            $mvn clean install\r\n            $cd rule-loader\r\n            $mvn clean install\r\n            $cd ~\r\n            $cd light\r\n            $mvn clean install -DskipTests\r\n\r\n            Now you have all the Java code built already.\r\n\r\n                </pre>\r\n            </p>\r\n            <p>\r\n                4. Open the source code with your IDE. I am using JetBrains Idea but other IDE like Eclipse will work. From Idea, you can just select File/Open... and then choose ~/networknt/light folder to open. It will import the pom.xml file under the light folder. You might need to select JDK for java projects if Idea couldn't find the JDK.\r\n            </p>\r\n            <p>\r\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\r\n            <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\r\n            <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a socail commerce site to demo the features of the framework</ul>\r\n            <ul>example folder is a template site that can be copied to start your own web site.</ul>\r\n            Let's create three users for each site and if you are building a new site, create one extra user for it.\r\n                <pre>\r\n            create user networknt and home directory c:\\Users\\networknt\r\n            create user edibleforestgarden and home directory c:\\Users\\edibleforestgarden\r\n            create user example and home directory c:\\Users\\example\r\n                </pre>\r\n            Within each user's home directory, create web subdirectory and grant access to the development user. steve in my case. If you run grunt build from these projects in light folder, you website will be compiled and copied to these web folders and the server will serve the content from these folders for each site. This is like running in production mode.\r\n            Copy server.json and virtualhost.json under server resource folder to user home directory and update them accordingly.\r\n            Add the following line into Windows/System32/drivers/etc/hosts in order to test locally using domain names.\r\n                <pre>\r\n            127.0.0.1\twww.edibleforestgarden.ca www.networknt.com example\r\n                </pre>\r\n            </p>\r\n\r\n            <p>\r\n                6. Start server from IDE in debug mode. From your IDE, right click server/src/main/java/com/networknt/light/server/LightServer and select Debug. The first time the server is started it will create the database and replay the event in resources/initdb.json. It will take several minutes until the debug info is stopped. At this time, you can start Grunt webserver to monitor all your changes in the local directory.\r\n                <pre>\r\n        cd ~/networknt/light/networknt\r\n        npm install\r\n        bower install\r\n        grunt serve\r\n                </pre>\r\n            assuming that Chrome is your default browser, it will be started now and point to localhost:9000 with www.networknt.com site content. You can login with stevehu/123456 to check the admin features. I am in a process to move everything from Grunt to Gulp but it is not been done yet.\r\n\r\n            </p>\r\n            <p>\r\n                For individual component/view/application development, you can go the the folder and run the following commands to start another webserver using gulp\r\n        <pre>\r\n        cd ~/networknt/light/view/com-networknt-light-v-example\r\n        npm install\r\n        bower install\r\n        gulp webserver\r\n        </pre>\r\n            Now another server is up listening localhost:8001 using gulp webserver. You can switch to other folders to do the same.\r\n\r\n            </p>\r\n        </div>\r\n    </div>\r\n</div>",
      "createDate": "2016-02-14T01:59:07.756"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.756",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:386",
    "@version": 1,
    "@class": "Event",
    "eventId": 10387,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-forum-home_v2",
      "content": "<script type='text/javascript'>\n    'use strict';\n\n    angular.module('lightApp').controller('com.networknt.light.c.ForumCtrl', ['$scope', '$http', '$location', '$filter', 'toaster', 'modelDataService', function ($scope, $http, $location, $filter, toaster, modelDataService) {\n    $scope.getForum = {\n        category : 'forum',\n        name : 'getForumTree',\n        readOnly: true\n    };\n\n    $scope.fetchResult = function () {\n        $http.post('api/rs', $scope.getForum)\n            .success(function (result, status, headers, config) {\n                $scope.forums = result;\n                console.log($scope.forums);\n            })\n    };\n    $scope.fetchResult();\n\n    $scope.toggle = function(scope) {\n        scope.toggle();\n    };\n\n    var getRootNodesScope = function() {\n        return angular.element(document.getElementById(\"tree-root\")).scope();\n    };\n\n    $scope.collapseAll = function() {\n        var scope = getRootNodesScope();\n        scope.collapseAll();\n    };\n\n    $scope.expandAll = function() {\n        var scope = getRootNodesScope();\n        scope.expandAll();\n    };\n\n    $scope.treeFilter = $filter('uiTreeFilter');\n\n    $scope.supportedFields = ['id', 'desc'];\n\n    $scope.goToForum = function(id) {\n        modelDataService.setModelData({\n            categoryId: id\n            });\n        $location.path(\"/page/com-networknt-light-v-forum-post\");\n    };\n\n    }]);\n</script>\n<div class=\"container\" data-ng-controller=\"com.networknt.light.c.ForumCtrl\">\n    <div class=\"jumbotron\">\n        <h2>Forums</h2>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-sm-12 col-md-12\">\n            <div style=\"padding:15px\">\n                <span class=\"glyphicon glyphicon-search\" style=\"padding-right:10px\"></span><input ng-model=\"pattern\" placeholder=\"Search\"/>\n                <!--<a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\">Collapse all</a>-->\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"collapseAll()\"><span class=\"glyphicon glyphicon-resize-small\"></span></a>\n                <a href=\"\" class=\"btn btn-default pull-right\" ng-click=\"expandAll()\"><span class=\"glyphicon glyphicon-resize-full\"></span></a>\n            </div>\n            <!-- Nested node template -->\n            <script type=\"text/ng-template\" id=\"nodes_renderer.html\">\n                <div ui-tree-handle class=\"tree-node tree-node-content\">\n                    <a class=\"btn btn-xs\" ng-if=\"node.children && node.children.length > 0\" data-nodrag ng-click=\"toggle(this)\"><span class=\"glyphicon\" ng-class=\"{'glyphicon glyphicon-plus': collapsed, 'glyphicon glyphicon-minus': !collapsed}\"></span></a>\n                    <!--{{node.id | highlight:pattern | trust}}-->\n                    <a href ng-click=\"goToForum(node.id)\" ng-bind-html=\"node.id | highlight:pattern | trust\"></a>\n                    <small ng-bind-html=\"node.desc | highlight:pattern | trust\"></small>\n                </div>\n                <ol ui-tree-nodes=\"\" ng-model=\"node.children\" ng-class=\"{hidden: collapsed}\">\n                    <li ng-repeat=\"node in node.children\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </script>\n            <div ui-tree data-drag-enabled=\"false\" id=\"tree-root\">\n                <ol ui-tree-nodes ng-model=\"forums\">\n                    <li ng-repeat=\"node in forums\" ui-tree-node ng-include=\"'nodes_renderer.html'\" ng-hide=\"!treeFilter(node, pattern, supportedFields)\"></li>\n                </ol>\n            </div>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.776"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.776",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:387",
    "@version": 1,
    "@class": "Event",
    "eventId": 10388,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-user-home",
      "content": "<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.UserHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getAllPage = {\n            category : 'page',\n            name : 'getAllPage',\n            readOnly: true\n        };\n        $scope.delPage = {\n            category : 'page',\n            name : 'delPage',\n            readOnly: false,\n            data: {}\n        };\n        $scope.pages = [];\n        $scope.headers = [\n            {\n                title: 'Check All',\n                value: 'checkAll'\n            },\n            {\n                title: 'Id',\n                value: 'id'\n            },\n            {\n                title: 'Host',\n                value: 'host'\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'updateDate'\n        };\n        $scope.filter = {};\n        $scope.selectedAll = false;\n\n        $scope.checkAll = function () {\n            $scope.selectedAll = !$scope.selectedAll;\n            angular.forEach($scope.pages, function(page) {\n                page.selected = $scope.selectedAll;\n            })\n        };\n\n        $scope.delete = function() {\n            var ids = '';\n            var selected = false;\n            angular.forEach($scope.pages, function(page) {\n                if(page.selected) {\n                    selected = true;\n                    $scope.delPage.data = page;\n                    $http.post('api/rs', $scope.delPage)\n                            .success(function (result, status, headers, config) {\n                                ids = ids + page.id + ' ';\n\n                            }).error(function (data, status, headers, config) {\n                                toaster.pop('error', 'data', data, 3000);\n                            }\n                    );\n                }\n            });\n            if(selected) {\n                $scope.fetchResult();\n                toaster.pop('success', 'data', ids, 3000);\n            } else {\n                toaster.pop('error', 'data', \"Nothing is selected to delete!\", 3000);\n            }\n        };\n\n        //call back function that we passed to our custom directive sortBy, will be called when clicking on any field to sort\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.update = function(index) {\n            console.log(index);\n            if(angular.isDefined(index)) {\n                var page = $scope.pages[index];\n                modelDataService.setModelData(page);\n                $location.path(\"/form/com.networknt.light.page.update\");\n            }\n        };\n\n        $scope.updateProfile = function() {\n            $location.path(\"/form/com.networknt.light.user.update.profile\");\n        };\n\n        $scope.changePassword = function() {\n            $location.path(\"/form/com.networknt.light.user.change.password\");\n        };\n\n        //The function that is responsible of fetching the result from the server and setting the grid to the new result\n        $scope.fetchResult = function () {\n            $http.post('api/rs', $scope.getAllPage)\n                    .success(function (result, status, headers, config) {\n                        $scope.pages = result;\n                        console.log($scope.pages);\n                    }).error(function (data, status, headers, config) {\n                        toaster.pop('error', status, data, 5000);\n                    }\n            );\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.UserHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <tabset>\n                <tab heading=\"Profile\">\n                    <h1>Profile</h1>\n                    <a ng-click=\"updateProfile()\" href=\"#\">Update Profile</a>\n                    <a ng-click=\"changePassword()\" href=\"#\">Change Password</a>\n                </tab>\n                <tab heading=\"Event History\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td><input ng-model=\"selectedAll\" ng-click=\"checkAll()\" type=\"checkbox\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.id\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"page in pages | filter: filter | orderBy: sort.sortedBy\">\n                            <td><input type=\"checkbox\" ng-model=\"page.selected\" /></td>\n                            <td><a href ng-click=\"update($index)\">{{page.id}}</a></td>\n                            <td>{{page.host}}</td>\n                            <td>{{page.createUserId}}</td>\n                            <td>{{page.createDate}}</td>\n                            <td>{{page.updateUserId}}</td>\n                            <td>{{page.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n                <tab heading=\"Bookmark\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td><input ng-model=\"selectedAll\" ng-click=\"checkAll()\" type=\"checkbox\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.id\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.host\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input on-enter-blur on-blur-change=\"filterResult()\" ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"page in pages | filter: filter | orderBy: sort.sortedBy\">\n                            <td><input type=\"checkbox\" ng-model=\"page.selected\" /></td>\n                            <td><a href ng-click=\"update($index)\">{{page.id}}</a></td>\n                            <td>{{page.host}}</td>\n                            <td>{{page.createUserId}}</td>\n                            <td>{{page.createDate}}</td>\n                            <td>{{page.updateUserId}}</td>\n                            <td>{{page.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.784"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.784",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:388",
    "@version": 1,
    "@class": "Event",
    "eventId": 10389,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-rule-transform-request",
      "content": "<!--\n  ~ Copyright 2015 Network New Technologies Inc.\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~     http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n<script type='text/javascript'>\n    angular.module('lightApp').controller('com.networknt.light.TransformRequestAdminHomeCtrl', ['$scope', '$http', '$location', 'toaster', 'modelDataService', function ($scope, $http, $location, toaster, modelDataService) {\n        $scope.getTransformRequest = {\n            category : 'transform',\n            name : 'getTransformRequest',\n            readOnly: true,\n            data: {}\n        };\n\n        $scope.delTransformRequest = {\n            category : 'transform',\n            name : 'delTransformRequest',\n            readOnly: false\n        };\n\n        $scope.transforms = [];\n\n        $scope.headers = [\n            {\n                title: 'Delete',\n                value: 'delete'\n            },\n            {\n                title: \"Sequence\",\n                value: \"sequence\"\n            },\n            {\n                title: \"Transform Rule\",\n                value: \"transformRule\"\n            },\n            {\n                title: \"Transform Data\",\n                value: \"transformData\"\n            },\n            {\n                title: 'Create User Id',\n                value: 'createUserId'\n            },\n            {\n                title: 'Create Date',\n                value: 'createDate'\n            },\n            {\n                title: 'Update User Id',\n                value: 'updateUserId'\n            },\n            {\n                title: 'Update Date',\n                value: 'updateDate'\n            }\n        ];\n        $scope.sort = {\n            sortDir : 'desc',\n            sortedBy : 'createDate'\n        };\n        $scope.filter = {};\n\n        $scope.onSort = function (sortedBy, sortDir) {\n            $scope.sort.sortDir = sortDir;\n            $scope.sort.sortedBy = sortedBy;\n        };\n\n        $scope.delete = function(transform) {\n            $scope.delTransformRequest.data = transform;\n            $http.post('api/rs', $scope.delTransformRequest)\n                    .success(function (data, status, headers, config) {\n                        $scope.transforms.splice($scope.transforms.indexOf(transform), 1);\n                        toaster.pop('success', status, data, 3000);\n                    })\n        };\n\n\n        $scope.update = function(transform) {\n            transform.ruleClass = $scope.getTransformRequest.data.ruleClass;\n            // convert transformData from map to string in order to display in the text area.\n            transform.transformData = JSON.stringify(transform.transformData, undefined, 2);\n            modelDataService.setModelData(transform);\n            $location.path(\"/form/com.networknt.light.transform.request.update_d\");\n        };\n\n        $scope.add = function() {\n            $location.path(\"/form/com.networknt.light.transform.request.add_d\");\n        };\n\n        $scope.fetchResult = function () {\n            $scope.getTransformRequest.data.ruleClass = modelDataService.getModelData().ruleClass;\n            console.log(\"ruleClass\", $scope.getTransformRequest.data.ruleClass);\n            $http.get('api/rs', {params: {cmd: encodeURIComponent(JSON.stringify($scope.getTransformRequest))}})\n                    .success(function (result, status, headers, config) {\n                        $scope.transforms = result;\n                    })\n        };\n        $scope.fetchResult();\n    }]);\n</script>\n<div class=\"container\" ng-controller=\"com.networknt.light.TransformRequestAdminHomeCtrl\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"pull-right\">\n                <button class=\"btn btn-info\" ng-click=\"add()\"><i class=\"glyphicon glyphicon-edit\"></i>Add</button>\n            </div>\n            <tabset>\n                <tab heading={{getTransformRequest.data.ruleClass}}>\n                    <table class=\"table table-striped\">\n                        <thead>\n                        <tr>\n                            <th ng-repeat=\"header in headers\">\n                                <sort-by onsort=\"onSort\" sortdir=\"sort.sortDir\" sortedby=\"sort.sortedBy\" sortvalue=\"{{ header.value }}\">{{ header.title }}</sort-by>\n                            </th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr>\n                            <td></td>\n                            <td><input ng-model=\"filter.sequence\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.transformRule\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.transformData\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.createDate\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateUserId\" type=\"text\" /></td>\n                            <td><input ng-model=\"filter.updateDate\" type=\"text\" /></td>\n                        </tr>\n                        <tr ng-repeat=\"transform in transforms | filter: filter | orderBy: sort.sortedBy\">\n                            <td><a href ng-click=\"delete(transform)\">Delete</a></td>\n                            <td><a href ng-click=\"update(transform)\">{{transform.sequence}}</a></td>\n                            <td>{{transform.transformRule}}</td>\n                            <td>{{transform.transformData}}</td>\n                            <td>{{transform.createUserId}}</td>\n                            <td>{{transform.createDate}}</td>\n                            <td>{{transform.updateUserId}}</td>\n                            <td>{{transform.updateDate}}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </tab>\n            </tabset>\n        </div>\n    </div>\n</div> <!-- /container -->",
      "createDate": "2016-02-14T01:59:07.792"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.792",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:389",
    "@version": 1,
    "@class": "Event",
    "eventId": 10390,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-java-php",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Why Java could not compete with PHP</h1>\n            <p>\n            Java is a superior language to build websites but according to w3ctechs.com PHP is used by 82% of all the websites for server-side programming language and Java is used by less than 4% of the websites.\n            <p>\n            What?s wrong with Java?\n            <p>\n            When Java was out, big players like IBM, BEA Oracle etc. saw a great opportunity to make money as it is a great language for web programming.  But how can you make big money around a programming language? The answer is to build servers on top of it and make it complicated so big corporations will pay big bucks for it. That is why we have JEE specs, JSRs, Weblogic, Websphere and other servers.\n            <p>\n            Large packages are deployed on these servers that are run so slow and used too much memory. Development and Debugging within a container was a nightmare for developers and they usually paid well to compensating the pain.\n            <p>\n            Because of resource usage is too high, you could not find public hosting company to support Java with a reasonable price tag. You want to build a website in Java, you have to pay big bucks for hosting even you might just use a Servlet container.\n            <p>\n            For a long time, Java was used within enterprises and big corporations as only they can afford million-dollar application servers and well paid enterprise level developers. I myself have been riding the train since beginning as a JEE consultant?\n            <p>\n            In 2003, Rod Johnson released Spring Framework and it allows IoC and POJO for development without EJBs. The productivity increment is huge and a lot of developers jumped onto it and thrown J2EE EJBs out of windows. The application venders saw this and in JEE5, they provide some features to make developer more productive and less painful. Unfortunately, today?s Spring Framework is so bloated like JEE containers.\n            <p>\n            During this period of time, PHP was flying. It use less memory and resource and was well supported by hosting companies. Some CMS platform built on PHP like WordPress, Drupal etc. drove a lot of open source developers into PHP. Although PHP is the most popular language these days, it has its shortcomings. It is slow and hard to make it scalable.\n            <p>\n            In 2009, Ryan Dahl introduced Node.js that supports asynchronous, non-blocking and event-driven I/O.  This increase the response rate dramatically as the server threads are well utilized and the throughput of a single server can be comparable to a cluster of servers. Node.js is a very good design but it has its limitations. Based on my limited knowledge, it is hard to scale and hard to integrate with existing legacy systems.\n            <p>\n            In 2014, a new player Undertow came in town and it is Java based non-blocking web server.  From techempower.com test, it serves over 1 million requests per second on a single $8000 dell server using the same test case Google claimed to serve 1 million requests with a cluster. It is lightweight with the core coming under 1Mb and a simple embedded server uses less than 4Mb of heap space. With todays single page application build on Javascript frameworks like AngularJS, you only need HTTP and optional Web Socket for your server to serve resources. And this sever can be an embedded Undertow with less than 100 lines of code.\n            <p>\n            The Undertow opens the door for Java developer?s productivity and cheap web hosting for Java. Given above reasons, I have built a platform called Light Framework that utilizes AngularJS, Undertow, OrientDB, Hazelcast and Light Rule Engine.\n            <p>\n            It is domain driven design with command/event sourcing and CQRS. When Angularjs app talks to resource server, it always send a command with either GET or POST and the server will translate it into an event to saved into event store for tracing, logging, auditing and user behaviour analysis. From the command, the REST handler of Undertow will translate it into a package and Java class just by concatenation of the common fields in the command json object. Then the Light Rule Engine looks up the rule class instance in a hash map to handle the command. All rules are POJO and implement a common interface. They can be unit tested and hot deployed to production server on a class basis.\n            <p>\n            For more detail, take a look at\n            <a href=\"http://www.github.com/networknt\" target=\"_blank\">www.github.com/networknt</a>  or <a href=\"http://www.networknt.com\" target=\"_blank\">www.networknt.com</a>\n            <p>\n\n            References:\n            <p>\n            <a href=\"http://blog.websitesframeworks.com/2013/03/programming-language-statistics-in-server-side-161/\" target=\"_blank\">Server-side programming language statistics</a>\n            <p>\n            <a href=\"http://w3techs.com/technologies/details/pl-php/all/all\" target=\"_blank\">Usage statistics and market share of PHP for websites</a>\n            <p>\n            <a href=\"https://www.techempower.com/blog/2014/03/04/one-million-http-rps-without-load-balancing-is-easy/\" target=\"_blank\">One million HTTP RPS without load balancing is easy</a>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:07.805"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:07.805",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:391",
    "@version": 1,
    "@class": "Event",
    "eventId": 10392,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "ca-edibleforestgarden-v-about",
      "content": "EdibleForestGarden.ca is dedicated to offering inspiring and practical information\non the vision, ecology, design, and stewardship of perennial polycultures of\nmultipurpose plants in small-scale or large-scale settings. We intend this website\nto grow into an information and networking resource for newcomers, amateurs, students,\nand serious practitioners and researchers alike.\n\nForest gardening is an idea whose time has come. We can consciously apply the principles\nof ecology to the design of gardens that mimic forest ecosystem structure and function,\nbut grow food, fuel, fiber, fodder, fertilizer, medicinals and fun. Indeed, we must\nbegin learning to apply ecological principles to the design of our food production\nsystems now?we have surpassed the peak of planetary oil production, so the world of\nenergy descent lies upon us. This sea change in our culture will require that we learn\nto live within our energetic means and rebuild ecosystems that support human and humane\nlives without diminishing the ability of the ecosystem to support our children and\ngrandchildren.\n\nWhile this global problem is huge, most of the solutions available to us are local,\npersonal, empowering, and potentially enlivening, enlightening, and fun. Edible forest\ngardening is one of these solutions, and we now have the resources at hand to transform\nour own yards and gardens into productive paradises.\n\nWe intend this website to give you the most sophisticated and down-to-earth information\navailable to maximize your success as a forest gardener.\n\nForest gardens have much to offer on a practical level, and they have much to teach us\nabout how to live in community as free and interdependent beings in a functional way.\nWe hope that you will trust your innate ability to learn and contribute to the larger\ncommunity of human beings who care about living sanely and humanely as we journey through\nenergy descent.\n\nWe hope you enjoy what we offer here, and that you will visit often to add your thoughts\nand experiences to the mix.",
      "createDate": "2016-02-14T01:59:13.246"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:13.246",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:392",
    "@version": 1,
    "@class": "Event",
    "eventId": 10393,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-production-single",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Production Environment Setup</h1>\n            <p>\n                I personally use CentOS 6.5 Linux as my production environment and I would recommend it to you; however, other Linux distributions are OK for your production.\n                The following steps are for CentOS 6.5 Linux and the setup is single node that hosts two sites.\n                For cluster and load balance setup, please read <a href=\"/page/com-networknt-light-v-production-cluster\">here</a>\n            </p>\n            <p>\n                On Linux, the production environment is very similar with development environment.\n            </p>\n            <p>\n                1. Create a working user for production other than root: (If you have a user already on the Linux box, please use it) The following assumes that you logged in as root.\n                <pre>\n            #adduser steve\n            #passwd steve\n\n            #visudo\n            This is to edit /etc/sudoers to add steve to the last line so that he can use sudo command\n            Never use vi to edit the above file!\n\n            Add steve right after\n            root ALL=(ALL)   ALL\n            with\n            steve ALL=(ALL)   ALL\n\n            vi /etc/ssh/sshd_config\n\n            change the following line\n            #PermitRootLogin  yes\n            to\n            PermitRootLogin no\n\n            change the following line\n            #UserDNS yes\n            to\n            UserDNS  no\n\n            Log out from root and log in with steve. From this moment on, please use sudo command instead of logging in as root.\n                </pre>\n            </p>\n            <p>\n                2. Install JDK8, maven, node.js and npm with sudo and then using npm to install Grunt, Gulp, Bower and other modules.\n            </p>\n            <p>\n                3. Create dev folder and check out the source code.\n                <pre>\n            log in to the user you just created.\n            $mkdir networknt\n            $cd networknt\n\n            Check out Json Token which is forked from Google and fixed some of the issues.\n            $git clone https://github.com/networknt/jsontoken.git\n            Check out light rule engine which is a Java based rule engine used in the back end\n            $git clone https://github.com/networknt/rule-engine.git\n            Check out the light framework and other projects\n            $git clone https://github.com/networknt/light.git\n\n            $cd jsontoken\n            $mvn clean install\n            $cd ..\n            $cd rule-engine\n            $mvn clean install\n            $cd rule-loader\n            $mvn clean install\n            $cd ~\n            $cd light\n            $mvn clean install -DskipTests\n\n            Now you have all the Java code built already.\n\n                </pre>\n            </p>\n            <p>\n                4. Open the source code with your IDE. I am using JetBrains Idea but other IDE like Eclipse will work. From Idea, you can just select File/Open... and then choose ~/networknt/light folder to open. It will import the pom.xml file under the light folder.\n            </p>\n            <p>\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\n            <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\n            <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a socail commerce site to demo the features of the framework</ul>\n            <ul>example folder is a template site that can be copied to start your own web site.</ul>\n            OK. Let's create three users for each site and if you are building a new site, create one extra user for it.\n\n            </p>\n            <p>\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\n            <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\n            <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a social eCommerce site to demo the features of the framework</ul>\n            <ul>example folder is a template site that can be copied to start your own web site.</ul>\n            Let's create three users for each site and if you are building a new site, create one extra user for it.\n                <pre>\n            sudo adduser networknt\n            sudo adduser edibleforestgarden\n            sudo adduser example\n                </pre>\n            Within each user's home directory, create web subdirectory and grant access to the development user. steve in my case. If you run grunt build from these projects in light folder, you website will be compiled and copied to these web folders and the server will serve the content from these folders for each site. This is like running in production mode.\n            copy server.json and virtualhost.json under networknt/light/server/src/main/resources folder to your home directory and update them accordingly.\n            Add the following line into /etc/hosts in order to test locally using domain names.\n                <pre>\n            127.0.0.1\twww.edibleforestgarden.ca www.networknt.com example\n                </pre>\n            </p>\n\n            <p>\n                If you?re thinking that matching the colors and content across devices is omnichannel, we would encourage you to reconsider. If you are ready to lead in the next phase of social business and get the most out of the promise that our new identity as customers is truly omniscient, then let?s connect. This way of thinking is the future promise on which we started Omnichannel Application Framework.\n            </p>\n            <p>\n                There are a few key features in the framework that allowed this idea to be made reality:\n            <ul>\n                In exploring and discovering products in your brand domain that data should be transferable for me to collect and use universally.\n            </ul>\n            <ul>\n                In exchange for this data, the customer will give you access to other data they have collected that will far outweigh the value of the limited data in your brand universe.\n            </ul>\n            <ul>\n                All experiences offline and online should allow an individual to identify themselves and present a brand with the opportunity to access my preferences.\n            </ul>\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:13.290"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:13.290",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:393",
    "@version": 1,
    "@class": "Event",
    "eventId": 10394,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-omnichannel",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Omnichannel and Omnichannel Experience</h1>\n            <p>\n                Omnichannel is a still new and the idea is still developing. People talking about it online at different levels but majorities are limited within a single brand. Omnichannel is about true continuity of your experience. But the key is that it extends beyond a single brand?s universe. Being omniscient is perceiving and understanding all things. Not all things at Best Buy. Not all things at Target. Not all things at Citi. Omni is perceiving all things. And the best way for a customer to perceive everything is to allow them to own their data and experience, then give them the ability to use it to guide creation and context of every future experience.\n            </p>\n            <p>\n                Omni comes from the word Omnis which can mean all or universal. This is in comparison to other concepts out there, like ?multichannel?, from the Latin word Multus, meaning multiple or many and from crosschannel, derived from the Latin word Crux, meaning to go across. The way that many are explaining omnichannel today is: ?cross channel being done well?. Examples are often that the mobile app should match the responsive design of the website which should thematically reflect the look and feel inside the store. We?d argue that doing cross channel well with the user in mind, is not worthy (nor useful) enough to deserve a new concept. Instead, we hold the belief that Omnichannel is something new and notable, even revolutionary, not just a marginal evolution of existing thinking.\n            </p>\n            <p>\n                Think about it. Today our life is continuous, but our customer experience is anything but that. We learn and have memory of all the good and bad things in life. We strive to limit or eliminate the negative ones and increase the good. These patterns that we strive to replicate are our preferences. The ability to have a continuous experience across brands, across format and across devices that is completely customized ? that is the promise of a new way of thinking and marketing that has been long unnoticed.\n            </p>\n            <p>\n                I am shopping at Amazon.com, Newegg.com and other online retailers. I like Amazon's catelog to do research and Newegg's checkout process. Would I be a happy customer of both if Amazon can provide me the Newegg checkout experience and Newegg can provide me Amazon catelog experience? I have a checking account at bank A, a saving account at bank B and an investment account at bank C. Can I use Bank A online transfter experience on Bank B and Bank C websites?\n            </p>\n            <p>\n                But wait, are you suggesting that Amazon helps people buy computers from Newegg? That would be counter to everything retailers try to do. When brands think customer experience they need to think omni. Its not about your customers or their customers, its about all customers. The brands who can best interpret omnichannel data and understand all customers are the winners. There will be a new dimension of customer decision. As a final decision is being made to purchase, price, relationship, service and continuity will all be considered.\n            </p>\n            <p>\n                With the rise of NFC and personal device use in store, brands need to awake to the idea that the days of closed data and 75% off for loyalty points from only shopping at their brand are changing quickly. If a brand wants to start thinking omnichannel, then they need to be open and involved in making the customer?s experience continuous and universal. Have doubts? Look at the role of social media and customer relationship. Remember those brands who have refused to evolve and engage and have a dialogue? Many of them aren?t with us today.\n            </p>\n            <p>\n                As much as the social media revolution has meant the two-way exchange in dialogue and interaction, omnichannel is the realization of social business. If the first phase in the evolution of the customer relationship was messaging and media, the future is product research, selection and payment. With personal preference data that can be used universally on devices, brand can either jump at the opportunities made real by omnichannel or wait until their brand is the only one not integrated and playing nicely to allow consumers to be continuous.\n            </p>\n            <p>\n                If you?re thinking that matching the colors and content across devices is omnichannel, we would encourage you to reconsider. If you are ready to lead in the next phase of social business and get the most out of the promise that our new identity as customers is truly omniscient, then let?s connect. This way of thinking is the future promise on which we started Omnichannel Application Framework.\n            </p>\n            <p>\n                There are a few key features in the framework that allowed this idea to be made reality:\n                <ul>\n                    In exploring and discovering products in your brand domain that data should be transferable for me to collect and use universally.\n                </ul>\n                <ul>\n                    In exchange for this data, the customer will give you access to other data they have collected that will far outweigh the value of the limited data in your brand universe.\n                </ul>\n                <ul>\n                    All experiences offline and online should allow an individual to identify themselves and present a brand with the opportunity to access my preferences.\n                </ul>\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:13.391"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:13.391",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:394",
    "@version": 1,
    "@class": "Event",
    "eventId": 10395,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-production_single",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Production Environment Setup</h1>\n            <p>\n                I personally use CentOS 6.5 32bit Linux as my production environment and I would recommend it to you; however, other Linux distributions, Mac and Windows are perfectly OK.\n                The following steps are for CentOS 6.5 32bit Linux and the setup is single node that hosts three sites. For cluster and load balance setup, please read <a href=\"/page/production_cluster\">here</a>\n            </p>\n            <p>\n                On Linux, the production environment is very similar with development environment.\n            </p>\n            <p>\n                1. Create a working user for production other than root: (If you have a user already on the Linux box, please use it) The following assumes that you logged in as root.\n                <pre>\n            #adduser steve\n            #passwd steve\n\n            #visudo\n            This is to edit /etc/sudoers to add steve to the last line so that he can use sudo command\n            Never use vi to edit the above file!\n\n            Add steve right after\n            root ALL=(ALL)   ALL\n            with\n            steve ALL=(ALL)   ALL\n\n            vi /etc/ssh/sshd_config\n\n            change the following line\n            #PermitRootLogin  yes\n            to\n            PermitRootLogin no\n\n            change the following line\n            #UserDNS yes\n            to\n            UserDNS  no\n\n            Log out from root and log in with steve. From this moment on, please use sudo command instead of logging in as root.\n                </pre>\n            </p>\n            <p>\n                2. Install JDK8, maven, node.js and npm with sudo and then using npm to install Grunt, Gulp, Bower and other modules.\n            </p>\n            <p>\n                3. Create dev folder and check out the source code.\n                <pre>\n            log in to the user you just created.\n            $mkdir networknt\n            $cd networknt\n\n            Check out Json Token which is forked from Google and fixed some of the issues.\n            $git clone https://github.com/networknt/jsontoken.git\n            Check out light rule engine which is a Java based rule engine used in the back end\n            $git clone https://github.com/networknt/rule-engine.git\n            Check out the light framework and other projects\n            $git clone https://github.com/networknt/light.git\n\n            $cd jsontoken\n            $mvn clean install\n            $cd ..\n            $cd rule-engine\n            $mvn clean install\n            $cd rule-loader\n            $mvn clean install\n            $cd ~\n            $cd light\n            $mvn clean install -DskipTests\n\n            Now you have all the Java code built already.\n\n                </pre>\n            </p>\n            <p>\n                4. Open the source code with your IDE. I am using JetBrains Idea but other IDE like Eclipse will work. From Idea, you can just select File/Open... and then choose ~/networknt/light folder to open. It will import the pom.xml file under the light folder.\n            </p>\n            <p>\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\n            <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\n            <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a socail commerce site to demo the features of the framework</ul>\n            <ul>example folder is a template site that can be copied to start your own web site.</ul>\n            OK. Let's create three users for each site and if you are building a new site, create one extra user for it.\n\n            </p>\n            <p>\n                If you?re thinking that matching the colors and content across devices is omnichannel, we would encourage you to reconsider. If you are ready to lead in the next phase of social business and get the most out of the promise that our new identity as customers is truly omniscient, then let?s connect. This way of thinking is the future promise on which we started Omnichannel Application Framework.\n            </p>\n            <p>\n                There are a few key features in the framework that allowed this idea to be made reality:\n            <ul>\n                In exploring and discovering products in your brand domain that data should be transferable for me to collect and use universally.\n            </ul>\n            <ul>\n                In exchange for this data, the customer will give you access to other data they have collected that will far outweigh the value of the limited data in your brand universe.\n            </ul>\n            <ul>\n                All experiences offline and online should allow an individual to identify themselves and present a brand with the opportunity to access my preferences.\n            </ul>\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:13.412"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:13.412",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:395",
    "@version": 1,
    "@class": "Event",
    "eventId": 10396,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-challenges",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Web application development challenges</h1>\n            <p>\n            Today?s software engineering approach has some challenges and OCA Framework is designed to address these.\n\n            <h2>Productivity</h2>\n            <p>\n            Light Framework supports and encourages Agile Development. Agile software development is a software development methods in which requirements and solutions evolve through collaboration between self-organizing, cross-functional teams. It promotes adaptive planning, evolutionary development, early delivery, continuous improvement and encourages rapid and flexible response to change. A group of people take responsibility for the entire life cycle of the software development and work with other teams for integration. This makes each team more productive as decisions happen locally without management overhead. Teams have their own mission ? to produce reusable web component, view or application. Component team needs to be aligned with view team and view team needs to be aligned with application team. In this sense they are loosely coupled but tightly aligned to the same mission.\n            <p>\n            The framework itself provides so many reusable common components, views and applications that are ready to be used or customized. So most of the applications can be assembled from existing pieces from OCA store and only certain customizations are needed. Of cause, you may need to build your domain specific modules but the existing ones can give you examples to follow. The framework also encourages brands and developer to publish their modules. The more brands using your brand?s experience, the more brand value you have. The more developers are using your modules the more support and customization revenue you will have as developers.\n            <p>\n            By using the framework, large projects can be break down to more manageable pieces and integration happens continuously to allow components, views and applications grow gradually. This makes the development teams scalable and reduces the risks for large projects.\n\n            <h2>Quality Assurance</h2>\n            <p>\n            Different teams manage components, views and applications independently and reusability is the main goal in design. All pieces have unit tests and end-to-end tests in order to promote and give confidence for the end users. Also, each team have a sample application so end users can play with the module.\n            <p>\n            Front end AngularJS is known as testable Javascript framework and backend does not have any container so rules can be tested as POJO. You don?t need to start a server to test your backend code.\n            <p>\n            Agile encourages QA and DEV teams are working together in one team. The developers are writing the unit test cases and the testers are writing e2e test cases.\n            <p>\n            If your organization won?t allow it, then a DIT exist report will be produced by the development team to assist QA team for testing.\n            <p>\n            The report contains some information generated by the tools and some information written by the developers.\n            <p>\n            <ul>Version number</ul>\n            <ul>Scope of the change</ul>\n            <ul>Unit test cases (generated)</ul>\n            <ul>e2e test cases (generated)</ul>\n            <ul>Complexity and coverage (generated)</ul>\n            <ul>What need to be tested as it cannot be tested in dev environment</ul>\n            <ul>Dependencies( related to the scope of testing) what modules are depending on the changed module that need to be regression tested</ul>\n            <p>\n\n            <h2>Release Management</h2>\n            <p>\n            The OCA framework is based on event sourcing and deployment just means to generate events file from development environment and replay the events on DIT, SIT, UAT, PAT and PROD.\n            <p>\n\n            Traditionally, release a new version of product is very costly and risky so some organizations might limit the number of releases to 3 or 4 times per year. Each release will involve so many teams and last so long for testing and many changes will be packed into the same batch. An army consists of DBAs, System Administrators and Deployment Engineers will be work together during deployment time and they follow the document step by step to get the job done. This impacts the productivity and makes fixing defects, adding new features so slow and could not meet business need in this dynamically changing world.\n            <p>\n\n            In OCA framework, we want the benefits of agile development and continuous integration all the way to production. We encourage more deployments with high velocity and short cycles that lead to financial success. This conflicts with the traditional approach - fewer deployments with big thoroughly test batch deployment that lead to financial success.\n            <p>\n\n            Above two approaches have the same goal but it seems conflicting each other. How come they can lead to the same goal for financial success? To understand that, we need to understand how risk is calculated.\n            <p>\n\n            ALE (Annual Loss Expectancy) = Single Loss Expectancy * Exposure Rate * Annualized Frequency\n            <p>\n\n            In our software release world, we can understand it as\n            <p>\n\n            Loss = Single lost of error * Percentage of deployment error * Number of deployments\n            <p>\n\n            For example, if one error occurs in 100 deployments, each error will cost $5000 and there are 4 deployments per year, then the ALE would be 0.0150004 = 200\n            <p>\n\n            The traditional approach is to reduce the number of deployments to reduce the lost.\n            <p>\n\n            And our approach is to increase the number of deployments and reduce the single lost of error and percentage of deployment error. If this can be done, we can avoid financial losses due to downtime, bugs, noncompliance and loss of reputation.\n            <p>\n\n            Let?s look at the source of errors and try to lower the percentage of occurrence\n            <p>\n            <h3>Defects in code</h3>\n            This can be addressed by unit test cases and e2e test cases. If we have enough coverage, then we can change the code with confidence.\n            <p>\n\n            <h3>Errors in assembly or packaging</h3>\n            Fast tests in continuous integration and delivery Fail slow tests and violation of architecture and coding standards. Clean build everything from Git repository Deploy the same way everywhere using events Manage dependencies and versions with graph database Manage Git branch and trunk through database to map to different release and environment. Basically, make everything automatic.\n            <p>\n\n            <h3>Errors executing changes</h3>\n            Make deployment the same process everywhere by just replay serial events which include database updates, business rules updates, rule data updates, template updates, apps and experience updates etc. Basically, we don?t need a army for deployment, it is one click at the right time and place.\n\n            <p>\n            Now, let?s look at the cost of error and see if we can reduce it.\n            <p>\n\n            Zero down time deployment. Database migrations and schema-less (database change won?t break previous version of code) Versioned identifiers for assets Protocol versioning Endpoint versioning Decoupled architecture Separate data and logic and they can be deployed independently. Configurable default version for every component Let end-user to choose if they want to use the updated version Employees try out the new version before making it default version User can downgrade version if they don?t like the new one. Basically user owns experience.\n            <p>\n\n            In order to archive the above, we have the make our deployment unit the smallest possible. Within the framework, we have component, view and app and each of them can be versioned and deployed independently. Further, they can be break up to even smaller piece to be deployed independently.\n            <p>\n\n            For example: a component can have the following part that can be deployed independently and versioned independently.\n            <p>\n\n            AngularJS code (front end)\n            <p>\n            Template (front end)\n            <p>\n            Rules (back end)\n            <p>\n            Rules Data (back end)\n            <p>\n            Reference and configuration (back end)\n            <p>\n\n            For example, only template get a new version 1.0.2 deployed on the server and other pieces are still in version 1.0.1 and we have an component version 1.0.2. One site can user version 1.0.1 and another site can user 1.0.2 and this allows site to customize the template for their channel as well.\n            <p>\n\n            <p>\n            Even further, we can set the template 1.0.1 as default so all the customer will have the default template but we ask our employee to try 1.0.2 version for a while before make it as default.\n            <p>\n\n            <p>\n            Although each piece can be deployed independently, they are loaded dynamically at the view level as part of angular routing. When Angular bootstraps, providers will be saved and they will be used to lazy load and register controllers, directives, filters, services, factories and providers etc. When angular requires a page, an page id and page version will be passed to the server. (no version means default version will be used) The server will check the dependencies of the page and assembly all piece together (java script code and templates) and send to the angular as response. This is for the first time, the next time the same version is required, it just response back the page cached. The cached will only be updated once any piece of the page is changed through event.\n            <p>\n\n            During the assembly phase, the configuration data and be combined with logic and the final page is pre-processed. For example, the dynamic dropdown list will be generated at this phase for a form component.\n            <p>\n\n            Breaking up the component to this level is no mandatory and it makes sense to have simple component packaged together and give it only one version. You only need to break it up if you component is so complicated and have too many moving part that is configurable and customizable.\n            <p>\n\n            <h2>Production Configuration</h2>\n            <p>\n\n            To make the application configurable on production, we need to separate the logic and data. The framework has three levels of configurations that can be performed on production and they have different level of risk associated with them.\n            <p>\n\n            The first level is reference data configuration. Most applications have reference data like dropdowns, translations etc. These will be saved into a set of schemas or tables and can be changed through table maintenance app. The reference data is cached but will be refreshed after midnight. This is the lowest risk change on production as it will only impact the UI look and feel most of the time and can be rolled back if negative impact occurred. Of cause, certain level of validation has to be done and approve process must be in place.\n            <p>\n\n            The second level is rules data configuration\n            <p>\n\n            All requests are handled by Light Rule Engine rules and rules are designed to be two part, Data and logic. This level is address the rule data change and it is at low risk as it won?t impact rule logic and the rule logic can be written to validate the data for the rules. For example, the system admin has the right to give promotion to discount one product for 10 percent off. The 10 percent is the data. And the rule might have validation between 1 to 99 or 1 to 55. This piece of data is more important then reference data as it is impact application logic but it is isolated from the rules. It can be changed easily without breaking the application.\n            <p>\n\n            The third level is rule logic configuration\n            <p>\n\n            The rules are just POJOs and can be updated and deployed though application interface. This change is bigger and risk is still manageable as you only need to regression to all the component/view/app that depends on the rule. Rules are working independently and it fails it only impact one area of the app and it can be easily rolled back.\n            <p>\n\n            <h2>Security</h2>\n            <p>\n\n            Api security or resource security is done by JWT token. When user is trying to access to protected resources, it will check if the access token is in the http request header. If it don?t exist, it will redirect the user to login page. The access token will be short lived up to 30 minutes and a 401 response along with token_expired will be sent back to client for refresh token if the user checked remember me when logging in or login page will be shown up.\n            <p>\n\n            Access token contains roles and userId so that the resource serve can grant access based on role-based authorization or based on user-based authorization.\n            <p>\n\n            Visibility control will be put into place based on the role of the users. For example, certain menu won?t be shown up unless you login as an admin role or certain web component shows only partial of data the user role is just anonymous.\n            <p>\n\n            OCA framework server provides another layer of security for the back-end legacy system for Angular application is not talking to back-end API directly. Also, this layer will do the validation before calling to back-end API so that a lot of invalid requests will be filtered out.\n            <p>\n\n            <h2>Performance</h2>\n\n            <h2>Monitoring</h2>\n            <p>\n\n            Traceability is more important with Angular application as it is running on the end users? browser. The server doesn?t have the state of the user session and only angular application knows. In this case, event sourcing is utilized to log all the events happening on the browser side. Every user action will generate an event and it is sent to the server along with JWT token that is identifier for the user. The server is logging events into event store.\n            <p>\n\n            Un-caught runtime exception in Angular will logged as an event and it will be easily reproduced given a serial events leading to it for the same user in event store.\n            <p>\n\n            Server error response will be logged on server side as it is known who sent the request. For example, 404 error response is sent to the client and support team need to reproduce it.\n            <p>\n\n            Server side exception is logged with stack trace and it can be reproduced along with events leading to it.\n            <p>\n\n            Security violation will be logged when system identify that the request is not sent from our AngularJS app but some raw request with missing data or wrong parameters.\n            <p>\n\n            System statistic can be viewed from admin page with information like how many users are online, how many requests are served within a period of time etc.\n            <p>\n\n            Health check is an application that will check certain area of the application based on the configuration data in order to make sure the over all system is healthy. For example, it will check the connectivity with legacy system etc. It is normally called once new release is deployed and when system is behaved strangely.\n            <p>\n\n            User behaviour analysis is an app that analyzes user online behaviour and it can be very valuable to drive sales. If customer goes to a bank branch to save a check and the sale person knows the customer was browsing life insurance product yesterday with his mobile phone.\n            <p>\n\n            Module update notification will monitor if there are any security updates from the framework and notify system admin to take action.\n            <p>\n\n            <h2>Legacy Coexistence</h2>\n            <p>\n\n            The framework can work with legacy web application together and this might be the requirement for some organization that invested big effort on a large system and they cannot convert everything into OCA framework in one step. They can switch part of the site to OCA and leave the rest still running on the legacy server. When user logs in, one request will be sent to the legacy server to create the session and another request will be sent to the framework Authentication/Authorization server to get access token. OCA modules will use the JWT access token to take to OCA server and the existing pages will still talk to legacy server using session.\n            <p>\n\n            Above assumes that OCA application and legacy application have only routing relationship. If OCA component will be embedded into legacy page, then thinks will be more complicated. We need to manage the communication with the legacy components, manage css conflicts etc. It is doable but not encouraged as there might be more work then just convert apps page by page.\n            <p>\n\n            <h2>OCA Server</h2>\n            <p>\n\n            The most important role of the OCA sever is to add another layer of security before our legacy system API. Otherwise, our legacy systems will be exposed to outside world and subject to attacks. The OCA Server will validate all the requests from browser and make sure only valid request goes to resource server and it is designed to identify attacks or misuse.\n            <p>\n\n            The OCA server supports integration with legacy system. Instead changing the legacy systems to provide REST API, we leave legacy system along and our OCA server will be acted as a proxy to the existing legacy API. There are two benefits:\n            <ul>Avoid updating legacy system that is costly or adding another layer just for REST API purpose. Our OCA server will call the existing API directly regardless the service types, Remote Session Bean, EMB, Web Services, .Net etc.</ul>\n            <ul>When OCA apps and experiences communicate with their own API, the interface will be relatively stable and any legacy API change will be done on the rules running on the server.</ul>\n            <p>\n            The OCA server provides references, configurations for our OCA apps and experiences. This allows us to develop data driven components with customization in mind. For example, we can have a form component that renders different forms given different form schemas and form configurations. Another example would be account summary, number of columns and column headers can all be customized.\n            <p>\n            The OCA server also serves as a distributed cache layer for legacy system and data is cached in the final consumption json format. It is Domain Driven Design with command/event sourcing along with CQRS and can be clustered with Distributed cache like coherence or Hazelcast. Possible to have all the cached data in memory to serve query part of the app and support decision making for UI commands depending on the nature of the application and infrastructure.\n            <p>\n            The server is responsible for logging, monitoring, auditing and user behaviour analysis. As apps and experiences are running on browser, you don?t know if end users get exceptions or not. Given we are using event sourcing, all the user actions on the browser will be in our event store. Uncaught Exceptions on UI will be logged as an event, Error response on the server will be logged as an event, service side exception will be logged as an event and all the events are associated with the user as JWT token is passing alone. From the event store, it is very easy to reproduce front end exception and back end exception as all the sequence and data are available and simply replay will reproduce. Monitoring meaning we will have a filter rule for events so that certain events will trigger notifications to administrators such as UI exception and server exception. For enterprise system, auditing is very important so that all the updates to the system are traceable. Our event store will serve the audit well and beyond. The information in event store are valuable for understanding customer behaviours, detect attacks etc.\n            <p>\n            The OCA server stack would be Undertow, OrientDB, Hazelcast and Light Rule Engine.\n\n            <h2>Future proof</h2>\n            <p>\n\n            AngularJS 1.X vs AngularJS 2.X and ES5 vs ES6 The change between AngularJS 2.x and 1.x are huge and there is no clear path for migration at the moment. In order to protect our investment, we should write our code in 2.x style if possible so the migration won?t be so painful. Also, Javascript language is in a transition between ES5 and ES6 and today we can leverage some of the ES6 features and using transpiler like Traceur and 6to5. Both of them have grunt and gulp tasks ready to be used.\n            <p>\n\n            Background and Attribution Some of the challenges faced by the OMNI-Channel Architecture group are not unique to us. Other organizations have used a similar software\n            engineering approach as OCA to deal with these issues. Recently, Spotify consultant Henrik Kniberg assembled two videos (here and here) describing the music site's\n            engineering culture which is uncannily similar to that of our own. Michael T. Nygard's video presentation \"Dispand the Deployment Army\" and lecture deck make a\n            quantifiable call-to-arms to simplify and cut the costs of software deployments. A few years back, Google employee Steve Yegge wrote a scathing missive within Google\n            that leaked out, lambasting his employer for not embracing the company-as-a-platform model so well monetized by his former employer Amazon. It gives a cursory overview\n            of Amazon's foret into that market and references others entrenched in being platform-first companies. What follows is a breakdown and explanation of the OMNI-Channel\n            Architecture influenced by the tone and principles defined in Kniberg's videos, Nygard's presentation and Yegge's rant.\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:13.456"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:13.456",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:396",
    "@version": 1,
    "@class": "Event",
    "eventId": 10397,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-java-php",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Why Java could not compete with PHP</h1>\n            <p>\n            Java is a superior language to build websites but according to w3ctechs.com PHP is used by 82% of all the websites for server-side programming language and Java is used by less than 4% of the websites.\n            <p>\n            What?s wrong with Java?\n            <p>\n            When Java was out, big players like IBM, BEA Oracle etc. saw a great opportunity to make money as it is a great language for web programming.  But how can you make big money around a programming language? The answer is to build servers on top of it and make it complicated so big corporations will pay big bucks for it. That is why we have JEE specs, JSRs, Weblogic, Websphere and other servers.\n            <p>\n            Large packages are deployed on these servers that are run so slow and used too much memory. Development and Debugging within a container was a nightmare for developers and they usually paid well to compensating the pain.\n            <p>\n            Because of resource usage is too high, you could not find public hosting company to support Java with a reasonable price tag. You want to build a website in Java, you have to pay big bucks for hosting even you might just use a Servlet container.\n            <p>\n            For a long time, Java was used within enterprises and big corporations as only they can afford million-dollar application servers and well paid enterprise level developers. I myself have been riding the train since beginning as a JEE consultant?\n            <p>\n            In 2003, Rod Johnson released Spring Framework and it allows IoC and POJO for development without EJBs. The productivity increment is huge and a lot of developers jumped onto it and thrown J2EE EJBs out of windows. The application venders saw this and in JEE5, they provide some features to make developer more productive and less painful. Unfortunately, today?s Spring Framework is so bloated like JEE containers.\n            <p>\n            During this period of time, PHP was flying. It use less memory and resource and was well supported by hosting companies. Some CMS platform built on PHP like WordPress, Drupal etc. drove a lot of open source developers into PHP. Although PHP is the most popular language these days, it has its shortcomings. It is slow and hard to make it scalable.\n            <p>\n            In 2009, Ryan Dahl introduced Node.js that supports asynchronous, non-blocking and event-driven I/O.  This increase the response rate dramatically as the server threads are well utilized and the throughput of a single server can be comparable to a cluster of servers. Node.js is a very good design but it has its limitations. Based on my limited knowledge, it is hard to scale and hard to integrate with existing legacy systems.\n            <p>\n            In 2014, a new player Undertow came in town and it is Java based non-blocking web server.  From techempower.com test, it serves over 1 million requests per second on a single $8000 dell server using the same test case Google claimed to serve 1 million requests with a cluster. It is lightweight with the core coming under 1Mb and a simple embedded server uses less than 4Mb of heap space. With todays single page application build on Javascript frameworks like AngularJS, you only need HTTP and optional Web Socket for your server to serve resources. And this sever can be an embedded Undertow with less than 100 lines of code.\n            <p>\n            The Undertow opens the door for Java developer?s productivity and cheap web hosting for Java. Given above reasons, I have built a platform called Light Framework that utilizes AngularJS, Undertow, OrientDB, Hazelcast and Light Rule Engine.\n            <p>\n            It is domain driven design with command/event sourcing and CQRS. When Angularjs app talks to resource server, it always send a command with either GET or POST and the server will translate it into an event to saved into event store for tracing, logging, auditing and user behaviour analysis. From the command, the REST handler of Undertow will translate it into a package and Java class just by concatenation of the common fields in the command json object. Then the Light Rule Engine looks up the rule class instance in a hash map to handle the command. All rules are POJO and implement a common interface. They can be unit tested and hot deployed to production server on a class basis.\n            <p>\n            For more detail, take a look at\n            <a href=\"http://www.github.com/networknt\" target=\"_blank\">www.github.com/networknt</a>  or <a href=\"http://www.networknt.com\" target=\"_blank\">www.networknt.com</a>\n            <p>\n\n            References:\n            <p>\n            <a href=\"http://blog.websitesframeworks.com/2013/03/programming-language-statistics-in-server-side-161/\" target=\"_blank\">Server-side programming language statistics</a>\n            <p>\n            <a href=\"http://w3techs.com/technologies/details/pl-php/all/all\" target=\"_blank\">Usage statistics and market share of PHP for websites</a>\n            <p>\n            <a href=\"https://www.techempower.com/blog/2014/03/04/one-million-http-rps-without-load-balancing-is-easy/\" target=\"_blank\">One million HTTP RPS without load balancing is easy</a>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:13.495"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:13.495",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:398",
    "@version": 1,
    "@class": "Event",
    "eventId": 10399,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "ca-edibleforestgarden-v-about",
      "content": "EdibleForestGarden.ca is dedicated to offering inspiring and practical information\non the vision, ecology, design, and stewardship of perennial polycultures of\nmultipurpose plants in small-scale or large-scale settings. We intend this website\nto grow into an information and networking resource for newcomers, amateurs, students,\nand serious practitioners and researchers alike.\n\nForest gardening is an idea whose time has come. We can consciously apply the principles\nof ecology to the design of gardens that mimic forest ecosystem structure and function,\nbut grow food, fuel, fiber, fodder, fertilizer, medicinals and fun. Indeed, we must\nbegin learning to apply ecological principles to the design of our food production\nsystems now?we have surpassed the peak of planetary oil production, so the world of\nenergy descent lies upon us. This sea change in our culture will require that we learn\nto live within our energetic means and rebuild ecosystems that support human and humane\nlives without diminishing the ability of the ecosystem to support our children and\ngrandchildren.\n\nWhile this global problem is huge, most of the solutions available to us are local,\npersonal, empowering, and potentially enlivening, enlightening, and fun. Edible forest\ngardening is one of these solutions, and we now have the resources at hand to transform\nour own yards and gardens into productive paradises.\n\nWe intend this website to give you the most sophisticated and down-to-earth information\navailable to maximize your success as a forest gardener.\n\nForest gardens have much to offer on a practical level, and they have much to teach us\nabout how to live in community as free and interdependent beings in a functional way.\nWe hope that you will trust your innate ability to learn and contribute to the larger\ncommunity of human beings who care about living sanely and humanely as we journey through\nenergy descent.\n\nWe hope you enjoy what we offer here, and that you will visit often to add your thoughts\nand experiences to the mix.",
      "createDate": "2016-02-14T01:59:22.352"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:22.352",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:399",
    "@version": 1,
    "@class": "Event",
    "eventId": 10400,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-production-single",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Production Environment Setup</h1>\n            <p>\n                I personally use CentOS 6.5 Linux as my production environment and I would recommend it to you; however, other Linux distributions are OK for your production.\n                The following steps are for CentOS 6.5 Linux and the setup is single node that hosts two sites.\n                For cluster and load balance setup, please read <a href=\"/page/com-networknt-light-v-production-cluster\">here</a>\n            </p>\n            <p>\n                On Linux, the production environment is very similar with development environment.\n            </p>\n            <p>\n                1. Create a working user for production other than root: (If you have a user already on the Linux box, please use it) The following assumes that you logged in as root.\n                <pre>\n            #adduser steve\n            #passwd steve\n\n            #visudo\n            This is to edit /etc/sudoers to add steve to the last line so that he can use sudo command\n            Never use vi to edit the above file!\n\n            Add steve right after\n            root ALL=(ALL)   ALL\n            with\n            steve ALL=(ALL)   ALL\n\n            vi /etc/ssh/sshd_config\n\n            change the following line\n            #PermitRootLogin  yes\n            to\n            PermitRootLogin no\n\n            change the following line\n            #UserDNS yes\n            to\n            UserDNS  no\n\n            Log out from root and log in with steve. From this moment on, please use sudo command instead of logging in as root.\n                </pre>\n            </p>\n            <p>\n                2. Install JDK8, maven, node.js and npm with sudo and then using npm to install Grunt, Gulp, Bower and other modules.\n            </p>\n            <p>\n                3. Create dev folder and check out the source code.\n                <pre>\n            log in to the user you just created.\n            $mkdir networknt\n            $cd networknt\n\n            Check out Json Token which is forked from Google and fixed some of the issues.\n            $git clone https://github.com/networknt/jsontoken.git\n            Check out light rule engine which is a Java based rule engine used in the back end\n            $git clone https://github.com/networknt/rule-engine.git\n            Check out the light framework and other projects\n            $git clone https://github.com/networknt/light.git\n\n            $cd jsontoken\n            $mvn clean install\n            $cd ..\n            $cd rule-engine\n            $mvn clean install\n            $cd rule-loader\n            $mvn clean install\n            $cd ~\n            $cd light\n            $mvn clean install -DskipTests\n\n            Now you have all the Java code built already.\n\n                </pre>\n            </p>\n            <p>\n                4. Open the source code with your IDE. I am using JetBrains Idea but other IDE like Eclipse will work. From Idea, you can just select File/Open... and then choose ~/networknt/light folder to open. It will import the pom.xml file under the light folder.\n            </p>\n            <p>\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\n            <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\n            <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a socail commerce site to demo the features of the framework</ul>\n            <ul>example folder is a template site that can be copied to start your own web site.</ul>\n            OK. Let's create three users for each site and if you are building a new site, create one extra user for it.\n\n            </p>\n            <p>\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\n            <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\n            <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a social eCommerce site to demo the features of the framework</ul>\n            <ul>example folder is a template site that can be copied to start your own web site.</ul>\n            Let's create three users for each site and if you are building a new site, create one extra user for it.\n                <pre>\n            sudo adduser networknt\n            sudo adduser edibleforestgarden\n            sudo adduser example\n                </pre>\n            Within each user's home directory, create web subdirectory and grant access to the development user. steve in my case. If you run grunt build from these projects in light folder, you website will be compiled and copied to these web folders and the server will serve the content from these folders for each site. This is like running in production mode.\n            copy server.json and virtualhost.json under networknt/light/server/src/main/resources folder to your home directory and update them accordingly.\n            Add the following line into /etc/hosts in order to test locally using domain names.\n                <pre>\n            127.0.0.1\twww.edibleforestgarden.ca www.networknt.com example\n                </pre>\n            </p>\n\n            <p>\n                If you?re thinking that matching the colors and content across devices is omnichannel, we would encourage you to reconsider. If you are ready to lead in the next phase of social business and get the most out of the promise that our new identity as customers is truly omniscient, then let?s connect. This way of thinking is the future promise on which we started Omnichannel Application Framework.\n            </p>\n            <p>\n                There are a few key features in the framework that allowed this idea to be made reality:\n            <ul>\n                In exploring and discovering products in your brand domain that data should be transferable for me to collect and use universally.\n            </ul>\n            <ul>\n                In exchange for this data, the customer will give you access to other data they have collected that will far outweigh the value of the limited data in your brand universe.\n            </ul>\n            <ul>\n                All experiences offline and online should allow an individual to identify themselves and present a brand with the opportunity to access my preferences.\n            </ul>\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:22.411"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:22.411",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:400",
    "@version": 1,
    "@class": "Event",
    "eventId": 10401,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-omnichannel",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Omnichannel and Omnichannel Experience</h1>\n            <p>\n                Omnichannel is a still new and the idea is still developing. People talking about it online at different levels but majorities are limited within a single brand. Omnichannel is about true continuity of your experience. But the key is that it extends beyond a single brand?s universe. Being omniscient is perceiving and understanding all things. Not all things at Best Buy. Not all things at Target. Not all things at Citi. Omni is perceiving all things. And the best way for a customer to perceive everything is to allow them to own their data and experience, then give them the ability to use it to guide creation and context of every future experience.\n            </p>\n            <p>\n                Omni comes from the word Omnis which can mean all or universal. This is in comparison to other concepts out there, like ?multichannel?, from the Latin word Multus, meaning multiple or many and from crosschannel, derived from the Latin word Crux, meaning to go across. The way that many are explaining omnichannel today is: ?cross channel being done well?. Examples are often that the mobile app should match the responsive design of the website which should thematically reflect the look and feel inside the store. We?d argue that doing cross channel well with the user in mind, is not worthy (nor useful) enough to deserve a new concept. Instead, we hold the belief that Omnichannel is something new and notable, even revolutionary, not just a marginal evolution of existing thinking.\n            </p>\n            <p>\n                Think about it. Today our life is continuous, but our customer experience is anything but that. We learn and have memory of all the good and bad things in life. We strive to limit or eliminate the negative ones and increase the good. These patterns that we strive to replicate are our preferences. The ability to have a continuous experience across brands, across format and across devices that is completely customized ? that is the promise of a new way of thinking and marketing that has been long unnoticed.\n            </p>\n            <p>\n                I am shopping at Amazon.com, Newegg.com and other online retailers. I like Amazon's catelog to do research and Newegg's checkout process. Would I be a happy customer of both if Amazon can provide me the Newegg checkout experience and Newegg can provide me Amazon catelog experience? I have a checking account at bank A, a saving account at bank B and an investment account at bank C. Can I use Bank A online transfter experience on Bank B and Bank C websites?\n            </p>\n            <p>\n                But wait, are you suggesting that Amazon helps people buy computers from Newegg? That would be counter to everything retailers try to do. When brands think customer experience they need to think omni. Its not about your customers or their customers, its about all customers. The brands who can best interpret omnichannel data and understand all customers are the winners. There will be a new dimension of customer decision. As a final decision is being made to purchase, price, relationship, service and continuity will all be considered.\n            </p>\n            <p>\n                With the rise of NFC and personal device use in store, brands need to awake to the idea that the days of closed data and 75% off for loyalty points from only shopping at their brand are changing quickly. If a brand wants to start thinking omnichannel, then they need to be open and involved in making the customer?s experience continuous and universal. Have doubts? Look at the role of social media and customer relationship. Remember those brands who have refused to evolve and engage and have a dialogue? Many of them aren?t with us today.\n            </p>\n            <p>\n                As much as the social media revolution has meant the two-way exchange in dialogue and interaction, omnichannel is the realization of social business. If the first phase in the evolution of the customer relationship was messaging and media, the future is product research, selection and payment. With personal preference data that can be used universally on devices, brand can either jump at the opportunities made real by omnichannel or wait until their brand is the only one not integrated and playing nicely to allow consumers to be continuous.\n            </p>\n            <p>\n                If you?re thinking that matching the colors and content across devices is omnichannel, we would encourage you to reconsider. If you are ready to lead in the next phase of social business and get the most out of the promise that our new identity as customers is truly omniscient, then let?s connect. This way of thinking is the future promise on which we started Omnichannel Application Framework.\n            </p>\n            <p>\n                There are a few key features in the framework that allowed this idea to be made reality:\n                <ul>\n                    In exploring and discovering products in your brand domain that data should be transferable for me to collect and use universally.\n                </ul>\n                <ul>\n                    In exchange for this data, the customer will give you access to other data they have collected that will far outweigh the value of the limited data in your brand universe.\n                </ul>\n                <ul>\n                    All experiences offline and online should allow an individual to identify themselves and present a brand with the opportunity to access my preferences.\n                </ul>\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:22.442"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:22.442",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:401",
    "@version": 1,
    "@class": "Event",
    "eventId": 10402,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-production_single",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Production Environment Setup</h1>\n            <p>\n                I personally use CentOS 6.5 32bit Linux as my production environment and I would recommend it to you; however, other Linux distributions, Mac and Windows are perfectly OK.\n                The following steps are for CentOS 6.5 32bit Linux and the setup is single node that hosts three sites. For cluster and load balance setup, please read <a href=\"/page/production_cluster\">here</a>\n            </p>\n            <p>\n                On Linux, the production environment is very similar with development environment.\n            </p>\n            <p>\n                1. Create a working user for production other than root: (If you have a user already on the Linux box, please use it) The following assumes that you logged in as root.\n                <pre>\n            #adduser steve\n            #passwd steve\n\n            #visudo\n            This is to edit /etc/sudoers to add steve to the last line so that he can use sudo command\n            Never use vi to edit the above file!\n\n            Add steve right after\n            root ALL=(ALL)   ALL\n            with\n            steve ALL=(ALL)   ALL\n\n            vi /etc/ssh/sshd_config\n\n            change the following line\n            #PermitRootLogin  yes\n            to\n            PermitRootLogin no\n\n            change the following line\n            #UserDNS yes\n            to\n            UserDNS  no\n\n            Log out from root and log in with steve. From this moment on, please use sudo command instead of logging in as root.\n                </pre>\n            </p>\n            <p>\n                2. Install JDK8, maven, node.js and npm with sudo and then using npm to install Grunt, Gulp, Bower and other modules.\n            </p>\n            <p>\n                3. Create dev folder and check out the source code.\n                <pre>\n            log in to the user you just created.\n            $mkdir networknt\n            $cd networknt\n\n            Check out Json Token which is forked from Google and fixed some of the issues.\n            $git clone https://github.com/networknt/jsontoken.git\n            Check out light rule engine which is a Java based rule engine used in the back end\n            $git clone https://github.com/networknt/rule-engine.git\n            Check out the light framework and other projects\n            $git clone https://github.com/networknt/light.git\n\n            $cd jsontoken\n            $mvn clean install\n            $cd ..\n            $cd rule-engine\n            $mvn clean install\n            $cd rule-loader\n            $mvn clean install\n            $cd ~\n            $cd light\n            $mvn clean install -DskipTests\n\n            Now you have all the Java code built already.\n\n                </pre>\n            </p>\n            <p>\n                4. Open the source code with your IDE. I am using JetBrains Idea but other IDE like Eclipse will work. From Idea, you can just select File/Open... and then choose ~/networknt/light folder to open. It will import the pom.xml file under the light folder.\n            </p>\n            <p>\n                5. Set up other users and virtual host. Light Framework supports multiple web sites hosted on the same IP address. In the ~/networknt/light folder there are three sites included.\n            <ul>networknt folder contains source code for www.networknt.com which is the main site for Light Framework</ul>\n            <ul>edibleforestgarden folder contains source code for www.edibleforestgarden.ca which is a socail commerce site to demo the features of the framework</ul>\n            <ul>example folder is a template site that can be copied to start your own web site.</ul>\n            OK. Let's create three users for each site and if you are building a new site, create one extra user for it.\n\n            </p>\n            <p>\n                If you?re thinking that matching the colors and content across devices is omnichannel, we would encourage you to reconsider. If you are ready to lead in the next phase of social business and get the most out of the promise that our new identity as customers is truly omniscient, then let?s connect. This way of thinking is the future promise on which we started Omnichannel Application Framework.\n            </p>\n            <p>\n                There are a few key features in the framework that allowed this idea to be made reality:\n            <ul>\n                In exploring and discovering products in your brand domain that data should be transferable for me to collect and use universally.\n            </ul>\n            <ul>\n                In exchange for this data, the customer will give you access to other data they have collected that will far outweigh the value of the limited data in your brand universe.\n            </ul>\n            <ul>\n                All experiences offline and online should allow an individual to identify themselves and present a brand with the opportunity to access my preferences.\n            </ul>\n            </p>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:22.479"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:22.479",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:402",
    "@version": 1,
    "@class": "Event",
    "eventId": 10403,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-challenges",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Web application development challenges</h1>\n            <p>\n            Today?s software engineering approach has some challenges and OCA Framework is designed to address these.\n\n            <h2>Productivity</h2>\n            <p>\n            Light Framework supports and encourages Agile Development. Agile software development is a software development methods in which requirements and solutions evolve through collaboration between self-organizing, cross-functional teams. It promotes adaptive planning, evolutionary development, early delivery, continuous improvement and encourages rapid and flexible response to change. A group of people take responsibility for the entire life cycle of the software development and work with other teams for integration. This makes each team more productive as decisions happen locally without management overhead. Teams have their own mission ? to produce reusable web component, view or application. Component team needs to be aligned with view team and view team needs to be aligned with application team. In this sense they are loosely coupled but tightly aligned to the same mission.\n            <p>\n            The framework itself provides so many reusable common components, views and applications that are ready to be used or customized. So most of the applications can be assembled from existing pieces from OCA store and only certain customizations are needed. Of cause, you may need to build your domain specific modules but the existing ones can give you examples to follow. The framework also encourages brands and developer to publish their modules. The more brands using your brand?s experience, the more brand value you have. The more developers are using your modules the more support and customization revenue you will have as developers.\n            <p>\n            By using the framework, large projects can be break down to more manageable pieces and integration happens continuously to allow components, views and applications grow gradually. This makes the development teams scalable and reduces the risks for large projects.\n\n            <h2>Quality Assurance</h2>\n            <p>\n            Different teams manage components, views and applications independently and reusability is the main goal in design. All pieces have unit tests and end-to-end tests in order to promote and give confidence for the end users. Also, each team have a sample application so end users can play with the module.\n            <p>\n            Front end AngularJS is known as testable Javascript framework and backend does not have any container so rules can be tested as POJO. You don?t need to start a server to test your backend code.\n            <p>\n            Agile encourages QA and DEV teams are working together in one team. The developers are writing the unit test cases and the testers are writing e2e test cases.\n            <p>\n            If your organization won?t allow it, then a DIT exist report will be produced by the development team to assist QA team for testing.\n            <p>\n            The report contains some information generated by the tools and some information written by the developers.\n            <p>\n            <ul>Version number</ul>\n            <ul>Scope of the change</ul>\n            <ul>Unit test cases (generated)</ul>\n            <ul>e2e test cases (generated)</ul>\n            <ul>Complexity and coverage (generated)</ul>\n            <ul>What need to be tested as it cannot be tested in dev environment</ul>\n            <ul>Dependencies( related to the scope of testing) what modules are depending on the changed module that need to be regression tested</ul>\n            <p>\n\n            <h2>Release Management</h2>\n            <p>\n            The OCA framework is based on event sourcing and deployment just means to generate events file from development environment and replay the events on DIT, SIT, UAT, PAT and PROD.\n            <p>\n\n            Traditionally, release a new version of product is very costly and risky so some organizations might limit the number of releases to 3 or 4 times per year. Each release will involve so many teams and last so long for testing and many changes will be packed into the same batch. An army consists of DBAs, System Administrators and Deployment Engineers will be work together during deployment time and they follow the document step by step to get the job done. This impacts the productivity and makes fixing defects, adding new features so slow and could not meet business need in this dynamically changing world.\n            <p>\n\n            In OCA framework, we want the benefits of agile development and continuous integration all the way to production. We encourage more deployments with high velocity and short cycles that lead to financial success. This conflicts with the traditional approach - fewer deployments with big thoroughly test batch deployment that lead to financial success.\n            <p>\n\n            Above two approaches have the same goal but it seems conflicting each other. How come they can lead to the same goal for financial success? To understand that, we need to understand how risk is calculated.\n            <p>\n\n            ALE (Annual Loss Expectancy) = Single Loss Expectancy * Exposure Rate * Annualized Frequency\n            <p>\n\n            In our software release world, we can understand it as\n            <p>\n\n            Loss = Single lost of error * Percentage of deployment error * Number of deployments\n            <p>\n\n            For example, if one error occurs in 100 deployments, each error will cost $5000 and there are 4 deployments per year, then the ALE would be 0.0150004 = 200\n            <p>\n\n            The traditional approach is to reduce the number of deployments to reduce the lost.\n            <p>\n\n            And our approach is to increase the number of deployments and reduce the single lost of error and percentage of deployment error. If this can be done, we can avoid financial losses due to downtime, bugs, noncompliance and loss of reputation.\n            <p>\n\n            Let?s look at the source of errors and try to lower the percentage of occurrence\n            <p>\n            <h3>Defects in code</h3>\n            This can be addressed by unit test cases and e2e test cases. If we have enough coverage, then we can change the code with confidence.\n            <p>\n\n            <h3>Errors in assembly or packaging</h3>\n            Fast tests in continuous integration and delivery Fail slow tests and violation of architecture and coding standards. Clean build everything from Git repository Deploy the same way everywhere using events Manage dependencies and versions with graph database Manage Git branch and trunk through database to map to different release and environment. Basically, make everything automatic.\n            <p>\n\n            <h3>Errors executing changes</h3>\n            Make deployment the same process everywhere by just replay serial events which include database updates, business rules updates, rule data updates, template updates, apps and experience updates etc. Basically, we don?t need a army for deployment, it is one click at the right time and place.\n\n            <p>\n            Now, let?s look at the cost of error and see if we can reduce it.\n            <p>\n\n            Zero down time deployment. Database migrations and schema-less (database change won?t break previous version of code) Versioned identifiers for assets Protocol versioning Endpoint versioning Decoupled architecture Separate data and logic and they can be deployed independently. Configurable default version for every component Let end-user to choose if they want to use the updated version Employees try out the new version before making it default version User can downgrade version if they don?t like the new one. Basically user owns experience.\n            <p>\n\n            In order to archive the above, we have the make our deployment unit the smallest possible. Within the framework, we have component, view and app and each of them can be versioned and deployed independently. Further, they can be break up to even smaller piece to be deployed independently.\n            <p>\n\n            For example: a component can have the following part that can be deployed independently and versioned independently.\n            <p>\n\n            AngularJS code (front end)\n            <p>\n            Template (front end)\n            <p>\n            Rules (back end)\n            <p>\n            Rules Data (back end)\n            <p>\n            Reference and configuration (back end)\n            <p>\n\n            For example, only template get a new version 1.0.2 deployed on the server and other pieces are still in version 1.0.1 and we have an component version 1.0.2. One site can user version 1.0.1 and another site can user 1.0.2 and this allows site to customize the template for their channel as well.\n            <p>\n\n            <p>\n            Even further, we can set the template 1.0.1 as default so all the customer will have the default template but we ask our employee to try 1.0.2 version for a while before make it as default.\n            <p>\n\n            <p>\n            Although each piece can be deployed independently, they are loaded dynamically at the view level as part of angular routing. When Angular bootstraps, providers will be saved and they will be used to lazy load and register controllers, directives, filters, services, factories and providers etc. When angular requires a page, an page id and page version will be passed to the server. (no version means default version will be used) The server will check the dependencies of the page and assembly all piece together (java script code and templates) and send to the angular as response. This is for the first time, the next time the same version is required, it just response back the page cached. The cached will only be updated once any piece of the page is changed through event.\n            <p>\n\n            During the assembly phase, the configuration data and be combined with logic and the final page is pre-processed. For example, the dynamic dropdown list will be generated at this phase for a form component.\n            <p>\n\n            Breaking up the component to this level is no mandatory and it makes sense to have simple component packaged together and give it only one version. You only need to break it up if you component is so complicated and have too many moving part that is configurable and customizable.\n            <p>\n\n            <h2>Production Configuration</h2>\n            <p>\n\n            To make the application configurable on production, we need to separate the logic and data. The framework has three levels of configurations that can be performed on production and they have different level of risk associated with them.\n            <p>\n\n            The first level is reference data configuration. Most applications have reference data like dropdowns, translations etc. These will be saved into a set of schemas or tables and can be changed through table maintenance app. The reference data is cached but will be refreshed after midnight. This is the lowest risk change on production as it will only impact the UI look and feel most of the time and can be rolled back if negative impact occurred. Of cause, certain level of validation has to be done and approve process must be in place.\n            <p>\n\n            The second level is rules data configuration\n            <p>\n\n            All requests are handled by Light Rule Engine rules and rules are designed to be two part, Data and logic. This level is address the rule data change and it is at low risk as it won?t impact rule logic and the rule logic can be written to validate the data for the rules. For example, the system admin has the right to give promotion to discount one product for 10 percent off. The 10 percent is the data. And the rule might have validation between 1 to 99 or 1 to 55. This piece of data is more important then reference data as it is impact application logic but it is isolated from the rules. It can be changed easily without breaking the application.\n            <p>\n\n            The third level is rule logic configuration\n            <p>\n\n            The rules are just POJOs and can be updated and deployed though application interface. This change is bigger and risk is still manageable as you only need to regression to all the component/view/app that depends on the rule. Rules are working independently and it fails it only impact one area of the app and it can be easily rolled back.\n            <p>\n\n            <h2>Security</h2>\n            <p>\n\n            Api security or resource security is done by JWT token. When user is trying to access to protected resources, it will check if the access token is in the http request header. If it don?t exist, it will redirect the user to login page. The access token will be short lived up to 30 minutes and a 401 response along with token_expired will be sent back to client for refresh token if the user checked remember me when logging in or login page will be shown up.\n            <p>\n\n            Access token contains roles and userId so that the resource serve can grant access based on role-based authorization or based on user-based authorization.\n            <p>\n\n            Visibility control will be put into place based on the role of the users. For example, certain menu won?t be shown up unless you login as an admin role or certain web component shows only partial of data the user role is just anonymous.\n            <p>\n\n            OCA framework server provides another layer of security for the back-end legacy system for Angular application is not talking to back-end API directly. Also, this layer will do the validation before calling to back-end API so that a lot of invalid requests will be filtered out.\n            <p>\n\n            <h2>Performance</h2>\n\n            <h2>Monitoring</h2>\n            <p>\n\n            Traceability is more important with Angular application as it is running on the end users? browser. The server doesn?t have the state of the user session and only angular application knows. In this case, event sourcing is utilized to log all the events happening on the browser side. Every user action will generate an event and it is sent to the server along with JWT token that is identifier for the user. The server is logging events into event store.\n            <p>\n\n            Un-caught runtime exception in Angular will logged as an event and it will be easily reproduced given a serial events leading to it for the same user in event store.\n            <p>\n\n            Server error response will be logged on server side as it is known who sent the request. For example, 404 error response is sent to the client and support team need to reproduce it.\n            <p>\n\n            Server side exception is logged with stack trace and it can be reproduced along with events leading to it.\n            <p>\n\n            Security violation will be logged when system identify that the request is not sent from our AngularJS app but some raw request with missing data or wrong parameters.\n            <p>\n\n            System statistic can be viewed from admin page with information like how many users are online, how many requests are served within a period of time etc.\n            <p>\n\n            Health check is an application that will check certain area of the application based on the configuration data in order to make sure the over all system is healthy. For example, it will check the connectivity with legacy system etc. It is normally called once new release is deployed and when system is behaved strangely.\n            <p>\n\n            User behaviour analysis is an app that analyzes user online behaviour and it can be very valuable to drive sales. If customer goes to a bank branch to save a check and the sale person knows the customer was browsing life insurance product yesterday with his mobile phone.\n            <p>\n\n            Module update notification will monitor if there are any security updates from the framework and notify system admin to take action.\n            <p>\n\n            <h2>Legacy Coexistence</h2>\n            <p>\n\n            The framework can work with legacy web application together and this might be the requirement for some organization that invested big effort on a large system and they cannot convert everything into OCA framework in one step. They can switch part of the site to OCA and leave the rest still running on the legacy server. When user logs in, one request will be sent to the legacy server to create the session and another request will be sent to the framework Authentication/Authorization server to get access token. OCA modules will use the JWT access token to take to OCA server and the existing pages will still talk to legacy server using session.\n            <p>\n\n            Above assumes that OCA application and legacy application have only routing relationship. If OCA component will be embedded into legacy page, then thinks will be more complicated. We need to manage the communication with the legacy components, manage css conflicts etc. It is doable but not encouraged as there might be more work then just convert apps page by page.\n            <p>\n\n            <h2>OCA Server</h2>\n            <p>\n\n            The most important role of the OCA sever is to add another layer of security before our legacy system API. Otherwise, our legacy systems will be exposed to outside world and subject to attacks. The OCA Server will validate all the requests from browser and make sure only valid request goes to resource server and it is designed to identify attacks or misuse.\n            <p>\n\n            The OCA server supports integration with legacy system. Instead changing the legacy systems to provide REST API, we leave legacy system along and our OCA server will be acted as a proxy to the existing legacy API. There are two benefits:\n            <ul>Avoid updating legacy system that is costly or adding another layer just for REST API purpose. Our OCA server will call the existing API directly regardless the service types, Remote Session Bean, EMB, Web Services, .Net etc.</ul>\n            <ul>When OCA apps and experiences communicate with their own API, the interface will be relatively stable and any legacy API change will be done on the rules running on the server.</ul>\n            <p>\n            The OCA server provides references, configurations for our OCA apps and experiences. This allows us to develop data driven components with customization in mind. For example, we can have a form component that renders different forms given different form schemas and form configurations. Another example would be account summary, number of columns and column headers can all be customized.\n            <p>\n            The OCA server also serves as a distributed cache layer for legacy system and data is cached in the final consumption json format. It is Domain Driven Design with command/event sourcing along with CQRS and can be clustered with Distributed cache like coherence or Hazelcast. Possible to have all the cached data in memory to serve query part of the app and support decision making for UI commands depending on the nature of the application and infrastructure.\n            <p>\n            The server is responsible for logging, monitoring, auditing and user behaviour analysis. As apps and experiences are running on browser, you don?t know if end users get exceptions or not. Given we are using event sourcing, all the user actions on the browser will be in our event store. Uncaught Exceptions on UI will be logged as an event, Error response on the server will be logged as an event, service side exception will be logged as an event and all the events are associated with the user as JWT token is passing alone. From the event store, it is very easy to reproduce front end exception and back end exception as all the sequence and data are available and simply replay will reproduce. Monitoring meaning we will have a filter rule for events so that certain events will trigger notifications to administrators such as UI exception and server exception. For enterprise system, auditing is very important so that all the updates to the system are traceable. Our event store will serve the audit well and beyond. The information in event store are valuable for understanding customer behaviours, detect attacks etc.\n            <p>\n            The OCA server stack would be Undertow, OrientDB, Hazelcast and Light Rule Engine.\n\n            <h2>Future proof</h2>\n            <p>\n\n            AngularJS 1.X vs AngularJS 2.X and ES5 vs ES6 The change between AngularJS 2.x and 1.x are huge and there is no clear path for migration at the moment. In order to protect our investment, we should write our code in 2.x style if possible so the migration won?t be so painful. Also, Javascript language is in a transition between ES5 and ES6 and today we can leverage some of the ES6 features and using transpiler like Traceur and 6to5. Both of them have grunt and gulp tasks ready to be used.\n            <p>\n\n            Background and Attribution Some of the challenges faced by the OMNI-Channel Architecture group are not unique to us. Other organizations have used a similar software\n            engineering approach as OCA to deal with these issues. Recently, Spotify consultant Henrik Kniberg assembled two videos (here and here) describing the music site's\n            engineering culture which is uncannily similar to that of our own. Michael T. Nygard's video presentation \"Dispand the Deployment Army\" and lecture deck make a\n            quantifiable call-to-arms to simplify and cut the costs of software deployments. A few years back, Google employee Steve Yegge wrote a scathing missive within Google\n            that leaked out, lambasting his employer for not embracing the company-as-a-platform model so well monetized by his former employer Amazon. It gives a cursory overview\n            of Amazon's foret into that market and references others entrenched in being platform-first companies. What follows is a breakdown and explanation of the OMNI-Channel\n            Architecture influenced by the tone and principles defined in Kniberg's videos, Nygard's presentation and Yegge's rant.\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:22.519"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:22.519",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  },
  {
    "@type": "d",
    "@rid": "#17:403",
    "@version": 1,
    "@class": "Event",
    "eventId": 10404,
    "createUserId": "stevehu",
    "data": {
      "createUserId": "stevehu",
      "pageId": "com-networknt-light-v-java-php",
      "content": "<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Why Java could not compete with PHP</h1>\n            <p>\n            Java is a superior language to build websites but according to w3ctechs.com PHP is used by 82% of all the websites for server-side programming language and Java is used by less than 4% of the websites.\n            <p>\n            What?s wrong with Java?\n            <p>\n            When Java was out, big players like IBM, BEA Oracle etc. saw a great opportunity to make money as it is a great language for web programming.  But how can you make big money around a programming language? The answer is to build servers on top of it and make it complicated so big corporations will pay big bucks for it. That is why we have JEE specs, JSRs, Weblogic, Websphere and other servers.\n            <p>\n            Large packages are deployed on these servers that are run so slow and used too much memory. Development and Debugging within a container was a nightmare for developers and they usually paid well to compensating the pain.\n            <p>\n            Because of resource usage is too high, you could not find public hosting company to support Java with a reasonable price tag. You want to build a website in Java, you have to pay big bucks for hosting even you might just use a Servlet container.\n            <p>\n            For a long time, Java was used within enterprises and big corporations as only they can afford million-dollar application servers and well paid enterprise level developers. I myself have been riding the train since beginning as a JEE consultant?\n            <p>\n            In 2003, Rod Johnson released Spring Framework and it allows IoC and POJO for development without EJBs. The productivity increment is huge and a lot of developers jumped onto it and thrown J2EE EJBs out of windows. The application venders saw this and in JEE5, they provide some features to make developer more productive and less painful. Unfortunately, today?s Spring Framework is so bloated like JEE containers.\n            <p>\n            During this period of time, PHP was flying. It use less memory and resource and was well supported by hosting companies. Some CMS platform built on PHP like WordPress, Drupal etc. drove a lot of open source developers into PHP. Although PHP is the most popular language these days, it has its shortcomings. It is slow and hard to make it scalable.\n            <p>\n            In 2009, Ryan Dahl introduced Node.js that supports asynchronous, non-blocking and event-driven I/O.  This increase the response rate dramatically as the server threads are well utilized and the throughput of a single server can be comparable to a cluster of servers. Node.js is a very good design but it has its limitations. Based on my limited knowledge, it is hard to scale and hard to integrate with existing legacy systems.\n            <p>\n            In 2014, a new player Undertow came in town and it is Java based non-blocking web server.  From techempower.com test, it serves over 1 million requests per second on a single $8000 dell server using the same test case Google claimed to serve 1 million requests with a cluster. It is lightweight with the core coming under 1Mb and a simple embedded server uses less than 4Mb of heap space. With todays single page application build on Javascript frameworks like AngularJS, you only need HTTP and optional Web Socket for your server to serve resources. And this sever can be an embedded Undertow with less than 100 lines of code.\n            <p>\n            The Undertow opens the door for Java developer?s productivity and cheap web hosting for Java. Given above reasons, I have built a platform called Light Framework that utilizes AngularJS, Undertow, OrientDB, Hazelcast and Light Rule Engine.\n            <p>\n            It is domain driven design with command/event sourcing and CQRS. When Angularjs app talks to resource server, it always send a command with either GET or POST and the server will translate it into an event to saved into event store for tracing, logging, auditing and user behaviour analysis. From the command, the REST handler of Undertow will translate it into a package and Java class just by concatenation of the common fields in the command json object. Then the Light Rule Engine looks up the rule class instance in a hash map to handle the command. All rules are POJO and implement a common interface. They can be unit tested and hot deployed to production server on a class basis.\n            <p>\n            For more detail, take a look at\n            <a href=\"http://www.github.com/networknt\" target=\"_blank\">www.github.com/networknt</a>  or <a href=\"http://www.networknt.com\" target=\"_blank\">www.networknt.com</a>\n            <p>\n\n            References:\n            <p>\n            <a href=\"http://blog.websitesframeworks.com/2013/03/programming-language-statistics-in-server-side-161/\" target=\"_blank\">Server-side programming language statistics</a>\n            <p>\n            <a href=\"http://w3techs.com/technologies/details/pl-php/all/all\" target=\"_blank\">Usage statistics and market share of PHP for websites</a>\n            <p>\n            <a href=\"https://www.techempower.com/blog/2014/03/04/one-million-http-rps-without-load-balancing-is-easy/\" target=\"_blank\">One million HTTP RPS without load balancing is easy</a>\n        </div>\n    </div>\n</div>",
      "createDate": "2016-02-14T01:59:22.574"
    },
    "name": "impPage",
    "category": "page",
    "createDate": "2016-02-14T01:59:22.574",
    "ipAddress": "127.0.0.1",
    "@fieldTypes": "eventId=l,createDate=t"
  }
]
